
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e0  080064e0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080064e0  080064e0  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e8  080064e8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080064f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000088  08006578  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08006578  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017810  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033c5  00000000  00000000  000378c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  0003ac90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  0003bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028c2e  00000000  00000000  0003d178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012375  00000000  00000000  00065da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fb8bc  00000000  00000000  0007811b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001739d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052cc  00000000  00000000  00173a54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006458 	.word	0x08006458

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08006458 	.word	0x08006458

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC1_Init+0x98>)
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <MX_ADC1_Init+0x9c>)
 80005d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_ADC1_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ADC1_Init+0x98>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_ADC1_Init+0x98>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_ADC1_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_ADC1_Init+0x98>)
 8000600:	4a17      	ldr	r2, [pc, #92]	; (8000660 <MX_ADC1_Init+0xa0>)
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_ADC1_Init+0x98>)
 800060c:	2201      	movs	r2, #1
 800060e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_ADC1_Init+0x98>)
 8000612:	2201      	movs	r2, #1
 8000614:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_ADC1_Init+0x98>)
 800061a:	2201      	movs	r2, #1
 800061c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <MX_ADC1_Init+0x98>)
 8000620:	f000 ffb6 	bl	8001590 <HAL_ADC_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 fcc9 	bl	8000fc0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800062e:	2303      	movs	r3, #3
 8000630:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000632:	2301      	movs	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000636:	2307      	movs	r3, #7
 8000638:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_ADC1_Init+0x98>)
 8000640:	f001 f8f6 	bl	8001830 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800064a:	f000 fcb9 	bl	8000fc0 <Error_Handler>
  }

}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200000b8 	.word	0x200000b8
 800065c:	40012000 	.word	0x40012000
 8000660:	0f000001 	.word	0x0f000001

08000664 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a2d      	ldr	r2, [pc, #180]	; (8000738 <HAL_ADC_MspInit+0xd4>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d153      	bne.n	800072e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000686:	4b2d      	ldr	r3, [pc, #180]	; (800073c <HAL_ADC_MspInit+0xd8>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	4a2c      	ldr	r2, [pc, #176]	; (800073c <HAL_ADC_MspInit+0xd8>)
 800068c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000690:	6453      	str	r3, [r2, #68]	; 0x44
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <HAL_ADC_MspInit+0xd8>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <HAL_ADC_MspInit+0xd8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a26      	ldr	r2, [pc, #152]	; (800073c <HAL_ADC_MspInit+0xd8>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <HAL_ADC_MspInit+0xd8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006b6:	2308      	movs	r3, #8
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ba:	2303      	movs	r3, #3
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	481d      	ldr	r0, [pc, #116]	; (8000740 <HAL_ADC_MspInit+0xdc>)
 80006ca:	f002 fc55 	bl	8002f78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 80006d0:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <HAL_ADC_MspInit+0xe4>)
 80006d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 80006e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 80006f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 80006f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 8000700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000704:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000712:	480c      	ldr	r0, [pc, #48]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 8000714:	f001 fc4e 	bl	8001fb4 <HAL_DMA_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800071e:	f000 fc4f 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 8000726:	639a      	str	r2, [r3, #56]	; 0x38
 8000728:	4a06      	ldr	r2, [pc, #24]	; (8000744 <HAL_ADC_MspInit+0xe0>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800072e:	bf00      	nop
 8000730:	3728      	adds	r7, #40	; 0x28
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40012000 	.word	0x40012000
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000
 8000744:	20000100 	.word	0x20000100
 8000748:	40026410 	.word	0x40026410

0800074c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_DMA_Init+0x38>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <MX_DMA_Init+0x38>)
 8000758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_DMA_Init+0x38>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2038      	movs	r0, #56	; 0x38
 8000770:	f001 fbe9 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000774:	2038      	movs	r0, #56	; 0x38
 8000776:	f001 fc02 	bl	8001f7e <HAL_NVIC_EnableIRQ>

}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_ETH_Init+0x78>)
 800078e:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <MX_ETH_Init+0x7c>)
 8000790:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_ETH_Init+0x78>)
 8000794:	2201      	movs	r2, #1
 8000796:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_ETH_Init+0x78>)
 800079a:	2200      	movs	r2, #0
 800079c:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_ETH_Init+0x78>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_ETH_Init+0x78>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	3301      	adds	r3, #1
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_ETH_Init+0x78>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	3302      	adds	r3, #2
 80007b6:	22e1      	movs	r2, #225	; 0xe1
 80007b8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_ETH_Init+0x78>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	3303      	adds	r3, #3
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_ETH_Init+0x78>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_ETH_Init+0x78>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	3305      	adds	r3, #5
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_ETH_Init+0x78>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_ETH_Init+0x78>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_ETH_Init+0x78>)
 80007e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ea:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_ETH_Init+0x78>)
 80007ee:	f001 ff57 	bl	80026a0 <HAL_ETH_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80007f8:	f000 fbe2 	bl	8000fc0 <Error_Handler>
  }

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000160 	.word	0x20000160
 8000804:	40028000 	.word	0x40028000

08000808 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08e      	sub	sp, #56	; 0x38
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a4e      	ldr	r2, [pc, #312]	; (8000960 <HAL_ETH_MspInit+0x158>)
 8000826:	4293      	cmp	r3, r2
 8000828:	f040 8096 	bne.w	8000958 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800082c:	4b4d      	ldr	r3, [pc, #308]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	4a4c      	ldr	r2, [pc, #304]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 8000832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000836:	6313      	str	r3, [r2, #48]	; 0x30
 8000838:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000840:	623b      	str	r3, [r7, #32]
 8000842:	6a3b      	ldr	r3, [r7, #32]
 8000844:	4b47      	ldr	r3, [pc, #284]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 8000846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000848:	4a46      	ldr	r2, [pc, #280]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 800084a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800084e:	6313      	str	r3, [r2, #48]	; 0x30
 8000850:	4b44      	ldr	r3, [pc, #272]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000858:	61fb      	str	r3, [r7, #28]
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	4b41      	ldr	r3, [pc, #260]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a40      	ldr	r2, [pc, #256]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 8000862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
 8000868:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000874:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	4a3a      	ldr	r2, [pc, #232]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6313      	str	r3, [r2, #48]	; 0x30
 8000880:	4b38      	ldr	r3, [pc, #224]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b35      	ldr	r3, [pc, #212]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4a34      	ldr	r2, [pc, #208]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	6313      	str	r3, [r2, #48]	; 0x30
 8000898:	4b32      	ldr	r3, [pc, #200]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a2e      	ldr	r2, [pc, #184]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 80008aa:	f043 0302 	orr.w	r3, r3, #2
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4a28      	ldr	r2, [pc, #160]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 80008c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <HAL_ETH_MspInit+0x15c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008d4:	2332      	movs	r3, #50	; 0x32
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e4:	230b      	movs	r3, #11
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	4619      	mov	r1, r3
 80008ee:	481e      	ldr	r0, [pc, #120]	; (8000968 <HAL_ETH_MspInit+0x160>)
 80008f0:	f002 fb42 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008f4:	2386      	movs	r3, #134	; 0x86
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000904:	230b      	movs	r3, #11
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	4817      	ldr	r0, [pc, #92]	; (800096c <HAL_ETH_MspInit+0x164>)
 8000910:	f002 fb32 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000926:	230b      	movs	r3, #11
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	480f      	ldr	r0, [pc, #60]	; (8000970 <HAL_ETH_MspInit+0x168>)
 8000932:	f002 fb21 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000936:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000948:	230b      	movs	r3, #11
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <HAL_ETH_MspInit+0x16c>)
 8000954:	f002 fb10 	bl	8002f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000958:	bf00      	nop
 800095a:	3738      	adds	r7, #56	; 0x38
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40028000 	.word	0x40028000
 8000964:	40023800 	.word	0x40023800
 8000968:	40020800 	.word	0x40020800
 800096c:	40020000 	.word	0x40020000
 8000970:	40020400 	.word	0x40020400
 8000974:	40021800 	.word	0x40021800

08000978 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098e:	4b5f      	ldr	r3, [pc, #380]	; (8000b0c <MX_GPIO_Init+0x194>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a5e      	ldr	r2, [pc, #376]	; (8000b0c <MX_GPIO_Init+0x194>)
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b5c      	ldr	r3, [pc, #368]	; (8000b0c <MX_GPIO_Init+0x194>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b59      	ldr	r3, [pc, #356]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a58      	ldr	r2, [pc, #352]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	4b53      	ldr	r3, [pc, #332]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a52      	ldr	r2, [pc, #328]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b50      	ldr	r3, [pc, #320]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b4d      	ldr	r3, [pc, #308]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a4c      	ldr	r2, [pc, #304]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b47      	ldr	r3, [pc, #284]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b44      	ldr	r3, [pc, #272]	; (8000b0c <MX_GPIO_Init+0x194>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <MX_GPIO_Init+0x194>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <MX_GPIO_Init+0x194>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <MX_GPIO_Init+0x194>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1e:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <MX_GPIO_Init+0x194>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <MX_GPIO_Init+0x194>)
 8000a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <MX_GPIO_Init+0x194>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|Enable_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2114      	movs	r1, #20
 8000a3a:	4835      	ldr	r0, [pc, #212]	; (8000b10 <MX_GPIO_Init+0x198>)
 8000a3c:	f002 fc46 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a46:	4833      	ldr	r0, [pc, #204]	; (8000b14 <MX_GPIO_Init+0x19c>)
 8000a48:	f002 fc40 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	4831      	ldr	r0, [pc, #196]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000a52:	f002 fc3b 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	21f0      	movs	r1, #240	; 0xf0
 8000a5a:	4830      	ldr	r0, [pc, #192]	; (8000b1c <MX_GPIO_Init+0x1a4>)
 8000a5c:	f002 fc36 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = RS_Pin|Enable_Pin;
 8000a60:	2314      	movs	r3, #20
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4826      	ldr	r0, [pc, #152]	; (8000b10 <MX_GPIO_Init+0x198>)
 8000a78:	f002 fa7e 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_GPIO_Init+0x1a8>)
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4824      	ldr	r0, [pc, #144]	; (8000b24 <MX_GPIO_Init+0x1ac>)
 8000a92:	f002 fa71 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a96:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	4819      	ldr	r0, [pc, #100]	; (8000b14 <MX_GPIO_Init+0x19c>)
 8000ab0:	f002 fa62 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ab4:	2340      	movs	r3, #64	; 0x40
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4813      	ldr	r0, [pc, #76]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000acc:	f002 fa54 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_GPIO_Init+0x1a0>)
 8000ae4:	f002 fa48 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 8000ae8:	23f0      	movs	r3, #240	; 0xf0
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <MX_GPIO_Init+0x1a4>)
 8000b00:	f002 fa3a 	bl	8002f78 <HAL_GPIO_Init>

}
 8000b04:	bf00      	nop
 8000b06:	3730      	adds	r7, #48	; 0x30
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40021800 	.word	0x40021800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	10110000 	.word	0x10110000
 8000b24:	40020800 	.word	0x40020800

08000b28 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000b36:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000b3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000b3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b42:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b46:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000b48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b4a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f80e 	bl	8000b7e <Lcd_init>

	return lcd;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	461d      	mov	r5, r3
 8000b66:	f107 0410 	add.w	r4, r7, #16
 8000b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b72:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bdb0      	pop	{r4, r5, r7, pc}

08000b7e <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	7d9b      	ldrb	r3, [r3, #22]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10c      	bne.n	8000ba8 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000b8e:	2133      	movs	r1, #51	; 0x33
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f86d 	bl	8000c70 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000b96:	2132      	movs	r1, #50	; 0x32
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f000 f869 	bl	8000c70 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000b9e:	2128      	movs	r1, #40	; 0x28
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 f865 	bl	8000c70 <lcd_write_command>
 8000ba6:	e003      	b.n	8000bb0 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000ba8:	2138      	movs	r1, #56	; 0x38
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 f860 	bl	8000c70 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f85c 	bl	8000c70 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000bb8:	210c      	movs	r1, #12
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 f858 	bl	8000c70 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000bc0:	2106      	movs	r1, #6
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f000 f854 	bl	8000c70 <lcd_write_command>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	4906      	ldr	r1, [pc, #24]	; (8000bfc <Lcd_int+0x2c>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f005 f832 	bl	8005c4c <siprintf>

	Lcd_string(lcd, buffer);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f806 	bl	8000c00 <Lcd_string>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	08006470 	.word	0x08006470

08000c00 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e00a      	b.n	8000c26 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	4413      	add	r3, r2
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f856 	bl	8000ccc <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	3301      	adds	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	7bfc      	ldrb	r4, [r7, #15]
 8000c28:	6838      	ldr	r0, [r7, #0]
 8000c2a:	f7ff faf1 	bl	8000210 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	429c      	cmp	r4, r3
 8000c32:	d3ed      	bcc.n	8000c10 <Lcd_string+0x10>
	}
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd90      	pop	{r4, r7, pc}

08000c3c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <Lcd_cursor+0x30>)
 8000c50:	5cd2      	ldrb	r2, [r2, r3]
 8000c52:	78bb      	ldrb	r3, [r7, #2]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	3b80      	subs	r3, #128	; 0x80
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f000 f806 	bl	8000c70 <lcd_write_command>
	#endif
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	08006488 	.word	0x08006488

08000c70 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6898      	ldr	r0, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	899b      	ldrh	r3, [r3, #12]
 8000c84:	2200      	movs	r2, #0
 8000c86:	4619      	mov	r1, r3
 8000c88:	f002 fb20 	bl	80032cc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7d9b      	ldrb	r3, [r3, #22]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d111      	bne.n	8000cb8 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	091b      	lsrs	r3, r3, #4
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 f842 	bl	8000d28 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2204      	movs	r2, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 f839 	bl	8000d28 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000cb6:	e005      	b.n	8000cc4 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	2208      	movs	r2, #8
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f832 	bl	8000d28 <lcd_write>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6898      	ldr	r0, [r3, #8]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	899b      	ldrh	r3, [r3, #12]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f002 faf2 	bl	80032cc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7d9b      	ldrb	r3, [r3, #22]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d111      	bne.n	8000d14 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 f814 	bl	8000d28 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2204      	movs	r2, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 f80b 	bl	8000d28 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000d12:	e005      	b.n	8000d20 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	2208      	movs	r2, #8
 8000d18:	4619      	mov	r1, r3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 f804 	bl	8000d28 <lcd_write>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
 8000d34:	4613      	mov	r3, r2
 8000d36:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	e019      	b.n	8000d72 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	6818      	ldr	r0, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	8819      	ldrh	r1, [r3, #0]
 8000d56:	78fa      	ldrb	r2, [r7, #3]
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	fa42 f303 	asr.w	r3, r2, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	f002 fab0 	bl	80032cc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	78bb      	ldrb	r3, [r7, #2]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d3e1      	bcc.n	8000d3e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6918      	ldr	r0, [r3, #16]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	8a9b      	ldrh	r3, [r3, #20]
 8000d82:	2201      	movs	r2, #1
 8000d84:	4619      	mov	r1, r3
 8000d86:	f002 faa1 	bl	80032cc <HAL_GPIO_WritePin>
	DELAY(1);
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f000 fbde 	bl	800154c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6918      	ldr	r0, [r3, #16]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	8a9b      	ldrh	r3, [r3, #20]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f002 fa96 	bl	80032cc <HAL_GPIO_WritePin>
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_TIM_PeriodElapsedCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) { // Jeżeli przerwanie pochodzi od timera 2
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db8:	d102      	bne.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x18>
		ifDisplay = 1;
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	200000a4 	.word	0x200000a4

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd6:	f000 fb5c 	bl	8001492 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dda:	f000 f861 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dde:	f7ff fdcb 	bl	8000978 <MX_GPIO_Init>
  MX_ETH_Init();
 8000de2:	f7ff fcd1 	bl	8000788 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000de6:	f000 fa2d 	bl	8001244 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dea:	f000 fa9f 	bl	800132c <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8000dee:	f7ff fcad 	bl	800074c <MX_DMA_Init>
  MX_ADC1_Init();
 8000df2:	f7ff fbe5 	bl	80005c0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000df6:	f000 f9b3 	bl	8001160 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Start ADC conversion from the joystick
  HAL_ADC_Start_DMA(&hadc1, &potentiometer, 1);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	491e      	ldr	r1, [pc, #120]	; (8000e78 <main+0xa8>)
 8000dfe:	481f      	ldr	r0, [pc, #124]	; (8000e7c <main+0xac>)
 8000e00:	f000 fc0a 	bl	8001618 <HAL_ADC_Start_DMA>

  //Start tim2 to write data from joystick to the lcd display
  HAL_TIM_Base_Start_IT(&htim2);
 8000e04:	481e      	ldr	r0, [pc, #120]	; (8000e80 <main+0xb0>)
 8000e06:	f003 fc45 	bl	8004694 <HAL_TIM_Base_Start_IT>

  my_lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, Enable_GPIO_Port, Enable_Pin, LCD_4_BIT_MODE);
 8000e0a:	4c1e      	ldr	r4, [pc, #120]	; (8000e84 <main+0xb4>)
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9303      	str	r3, [sp, #12]
 8000e12:	2310      	movs	r3, #16
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <main+0xb8>)
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <main+0xb8>)
 8000e20:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <main+0xbc>)
 8000e22:	491b      	ldr	r1, [pc, #108]	; (8000e90 <main+0xc0>)
 8000e24:	f7ff fe80 	bl	8000b28 <Lcd_create>
 8000e28:	4625      	mov	r5, r4
 8000e2a:	463c      	mov	r4, r7
 8000e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e34:	e885 0003 	stmia.w	r5, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ifDisplay == 1) {
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <main+0xc4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d1fb      	bne.n	8000e38 <main+0x68>
		  Lcd_cursor(&my_lcd, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	480f      	ldr	r0, [pc, #60]	; (8000e84 <main+0xb4>)
 8000e46:	f7ff fef9 	bl	8000c3c <Lcd_cursor>
		  Lcd_string(&my_lcd, "           ");
 8000e4a:	4913      	ldr	r1, [pc, #76]	; (8000e98 <main+0xc8>)
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <main+0xb4>)
 8000e4e:	f7ff fed7 	bl	8000c00 <Lcd_string>
		  Lcd_cursor(&my_lcd, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	480b      	ldr	r0, [pc, #44]	; (8000e84 <main+0xb4>)
 8000e58:	f7ff fef0 	bl	8000c3c <Lcd_cursor>
		  Lcd_string(&my_lcd, "Value: ");
 8000e5c:	490f      	ldr	r1, [pc, #60]	; (8000e9c <main+0xcc>)
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <main+0xb4>)
 8000e60:	f7ff fece 	bl	8000c00 <Lcd_string>
		  Lcd_int(&my_lcd, potentiometer);
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <main+0xa8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <main+0xb4>)
 8000e6c:	f7ff feb0 	bl	8000bd0 <Lcd_int>
		  ifDisplay = 0;
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <main+0xc4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
	  if(ifDisplay == 1) {
 8000e76:	e7df      	b.n	8000e38 <main+0x68>
 8000e78:	200000a8 	.word	0x200000a8
 8000e7c:	200000b8 	.word	0x200000b8
 8000e80:	200001c0 	.word	0x200001c0
 8000e84:	200001a8 	.word	0x200001a8
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	20000010 	.word	0x20000010
 8000e90:	20000000 	.word	0x20000000
 8000e94:	200000a4 	.word	0x200000a4
 8000e98:	08006474 	.word	0x08006474
 8000e9c:	08006480 	.word	0x08006480

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0b4      	sub	sp, #208	; 0xd0
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000eaa:	2230      	movs	r2, #48	; 0x30
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 fec4 	bl	8005c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	2284      	movs	r2, #132	; 0x84
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 feb5 	bl	8005c3c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000ed2:	f002 fb51 	bl	8003578 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <SystemClock_Config+0x114>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a36      	ldr	r2, [pc, #216]	; (8000fb4 <SystemClock_Config+0x114>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b34      	ldr	r3, [pc, #208]	; (8000fb4 <SystemClock_Config+0x114>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <SystemClock_Config+0x118>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ef6:	4a30      	ldr	r2, [pc, #192]	; (8000fb8 <SystemClock_Config+0x118>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <SystemClock_Config+0x118>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f26:	2304      	movs	r3, #4
 8000f28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f2c:	2348      	movs	r3, #72	; 0x48
 8000f2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 fb28 	bl	8003598 <HAL_RCC_OscConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f4e:	f000 f837 	bl	8000fc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f52:	230f      	movs	r3, #15
 8000f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f76:	2102      	movs	r1, #2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 fd7d 	bl	8003a78 <HAL_RCC_ClockConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000f84:	f000 f81c 	bl	8000fc0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <SystemClock_Config+0x11c>)
 8000f8a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 ff60 	bl	8003e60 <HAL_RCCEx_PeriphCLKConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000fa6:	f000 f80b 	bl	8000fc0 <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	37d0      	adds	r7, #208	; 0xd0
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40007000 	.word	0x40007000
 8000fbc:	00200100 	.word	0x00200100

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_MspInit+0x44>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <HAL_MspInit+0x44>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_MspInit+0x44>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_MspInit+0x44>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_MspInit+0x44>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_MspInit+0x44>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 fa4e 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <TIM2_IRQHandler+0x10>)
 800107a:	f003 fb35 	bl	80046e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200001c0 	.word	0x200001c0

08001088 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <DMA2_Stream0_IRQHandler+0x10>)
 800108e:	f001 f89f 	bl	80021d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000100 	.word	0x20000100

0800109c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_sbrk+0x50>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x16>
		heap_end = &end;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <_sbrk+0x50>)
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <_sbrk+0x54>)
 80010b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <_sbrk+0x50>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <_sbrk+0x50>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	466a      	mov	r2, sp
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d907      	bls.n	80010d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010c6:	f004 fd8f 	bl	8005be8 <__errno>
 80010ca:	4602      	mov	r2, r0
 80010cc:	230c      	movs	r3, #12
 80010ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	e006      	b.n	80010e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <_sbrk+0x50>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a03      	ldr	r2, [pc, #12]	; (80010ec <_sbrk+0x50>)
 80010e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200000ac 	.word	0x200000ac
 80010f0:	20000690 	.word	0x20000690

080010f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <SystemInit+0x5c>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <SystemInit+0x5c>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <SystemInit+0x60>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <SystemInit+0x60>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <SystemInit+0x60>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <SystemInit+0x60>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	490d      	ldr	r1, [pc, #52]	; (8001154 <SystemInit+0x60>)
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <SystemInit+0x64>)
 8001122:	4013      	ands	r3, r2
 8001124:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <SystemInit+0x60>)
 8001128:	4a0c      	ldr	r2, [pc, #48]	; (800115c <SystemInit+0x68>)
 800112a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <SystemInit+0x60>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <SystemInit+0x60>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <SystemInit+0x60>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SystemInit+0x5c>)
 8001140:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001144:	609a      	str	r2, [r3, #8]
#endif
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00
 8001154:	40023800 	.word	0x40023800
 8001158:	fef6ffff 	.word	0xfef6ffff
 800115c:	24003010 	.word	0x24003010

08001160 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_TIM2_Init+0x98>)
 8001180:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001184:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_TIM2_Init+0x98>)
 8001188:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800118c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_TIM2_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_TIM2_Init+0x98>)
 8001196:	f241 3287 	movw	r2, #4999	; 0x1387
 800119a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_TIM2_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_TIM2_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a8:	4813      	ldr	r0, [pc, #76]	; (80011f8 <MX_TIM2_Init+0x98>)
 80011aa:	f003 fa47 	bl	800463c <HAL_TIM_Base_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80011b4:	f7ff ff04 	bl	8000fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_TIM2_Init+0x98>)
 80011c6:	f003 fbaf 	bl	8004928 <HAL_TIM_ConfigClockSource>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80011d0:	f7ff fef6 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_TIM2_Init+0x98>)
 80011e2:	f003 fdbd 	bl	8004d60 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80011ec:	f7ff fee8 	bl	8000fc0 <Error_Handler>
  }

}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200001c0 	.word	0x200001c0

080011fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120c:	d113      	bne.n	8001236 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_TIM_Base_MspInit+0x44>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <HAL_TIM_Base_MspInit+0x44>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_TIM_Base_MspInit+0x44>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	201c      	movs	r0, #28
 800122c:	f000 fe8b 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001230:	201c      	movs	r0, #28
 8001232:	f000 fea4 	bl	8001f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USART3_UART_Init+0x58>)
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <MX_USART3_UART_Init+0x5c>)
 800124c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_USART3_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART3_UART_Init+0x58>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART3_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART3_UART_Init+0x58>)
 8001288:	f003 fde4 	bl	8004e54 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001292:	f7ff fe95 	bl	8000fc0 <Error_Handler>
  }

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000200 	.word	0x20000200
 80012a0:	40004800 	.word	0x40004800

080012a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_UART_MspInit+0x7c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d128      	bne.n	8001318 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_UART_MspInit+0x80>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	4a16      	ldr	r2, [pc, #88]	; (8001324 <HAL_UART_MspInit+0x80>)
 80012cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d0:	6413      	str	r3, [r2, #64]	; 0x40
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_UART_MspInit+0x80>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_UART_MspInit+0x80>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_UART_MspInit+0x80>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_UART_MspInit+0x80>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001308:	2307      	movs	r3, #7
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <HAL_UART_MspInit+0x84>)
 8001314:	f001 fe30 	bl	8002f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40004800 	.word	0x40004800
 8001324:	40023800 	.word	0x40023800
 8001328:	40020c00 	.word	0x40020c00

0800132c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001332:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001336:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133a:	2206      	movs	r2, #6
 800133c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001340:	2202      	movs	r2, #2
 8001342:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134c:	2202      	movs	r2, #2
 800134e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001352:	2201      	movs	r2, #1
 8001354:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001364:	2201      	movs	r2, #1
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001370:	f001 ffc5 	bl	80032fe <HAL_PCD_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800137a:	f7ff fe21 	bl	8000fc0 <Error_Handler>
  }

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000280 	.word	0x20000280

08001388 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a8:	d141      	bne.n	800142e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <HAL_PCD_MspInit+0xb0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a22      	ldr	r2, [pc, #136]	; (8001438 <HAL_PCD_MspInit+0xb0>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <HAL_PCD_MspInit+0xb0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013c2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013d4:	230a      	movs	r3, #10
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4817      	ldr	r0, [pc, #92]	; (800143c <HAL_PCD_MspInit+0xb4>)
 80013e0:	f001 fdca 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4810      	ldr	r0, [pc, #64]	; (800143c <HAL_PCD_MspInit+0xb4>)
 80013fa:	f001 fdbd 	bl	8002f78 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_PCD_MspInit+0xb0>)
 8001400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001402:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_PCD_MspInit+0xb0>)
 8001404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001408:	6353      	str	r3, [r2, #52]	; 0x34
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_PCD_MspInit+0xb0>)
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_PCD_MspInit+0xb0>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_PCD_MspInit+0xb0>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_PCD_MspInit+0xb0>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001478 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001444:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001446:	e003      	b.n	8001450 <LoopCopyDataInit>

08001448 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800144a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800144c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800144e:	3104      	adds	r1, #4

08001450 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001454:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001456:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001458:	d3f6      	bcc.n	8001448 <CopyDataInit>
  ldr  r2, =_sbss
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800145c:	e002      	b.n	8001464 <LoopFillZerobss>

0800145e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800145e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001460:	f842 3b04 	str.w	r3, [r2], #4

08001464 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001466:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001468:	d3f9      	bcc.n	800145e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800146a:	f7ff fe43 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146e:	f004 fbc1 	bl	8005bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff fcad 	bl	8000dd0 <main>
  bx  lr    
 8001476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800147c:	080064f0 	.word	0x080064f0
  ldr  r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001484:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001488:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 800148c:	2000068c 	.word	0x2000068c

08001490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC_IRQHandler>

08001492 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001496:	2003      	movs	r0, #3
 8001498:	f000 fd4a 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149c:	2000      	movs	r0, #0
 800149e:	f000 f805 	bl	80014ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014a2:	f7ff fd95 	bl	8000fd0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x54>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_InitTick+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fd65 	bl	8001f9a <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00e      	b.n	80014f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d80a      	bhi.n	80014f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f000 fd2d 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <HAL_InitTick+0x5c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000018 	.word	0x20000018
 8001504:	20000020 	.word	0x20000020
 8001508:	2000001c 	.word	0x2000001c

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000020 	.word	0x20000020
 8001530:	20000684 	.word	0x20000684

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000684 	.word	0x20000684

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff ffee 	bl	8001534 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_Delay+0x40>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffde 	bl	8001534 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000020 	.word	0x20000020

08001590 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e031      	b.n	800160a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff f858 	bl	8000664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d116      	bne.n	80015fc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_ADC_Init+0x84>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	f043 0202 	orr.w	r2, r3, #2
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 fa5a 	bl	8001a98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f023 0303 	bic.w	r3, r3, #3
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
 80015fa:	e001      	b.n	8001600 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	ffffeefd 	.word	0xffffeefd

08001618 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_ADC_Start_DMA+0x1e>
 8001632:	2302      	movs	r3, #2
 8001634:	e0c7      	b.n	80017c6 <HAL_ADC_Start_DMA+0x1ae>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d018      	beq.n	800167e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800165c:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <HAL_ADC_Start_DMA+0x1b8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a5c      	ldr	r2, [pc, #368]	; (80017d4 <HAL_ADC_Start_DMA+0x1bc>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9a      	lsrs	r2, r3, #18
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001670:	e002      	b.n	8001678 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3b01      	subs	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	f040 809b 	bne.w	80017c4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001692:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <HAL_ADC_Start_DMA+0x1c0>)
 8001694:	4013      	ands	r3, r2
 8001696:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c8:	d106      	bne.n	80016d8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f023 0206 	bic.w	r2, r3, #6
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44
 80016d6:	e002      	b.n	80016de <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	4a3c      	ldr	r2, [pc, #240]	; (80017dc <HAL_ADC_Start_DMA+0x1c4>)
 80016ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f2:	4a3b      	ldr	r2, [pc, #236]	; (80017e0 <HAL_ADC_Start_DMA+0x1c8>)
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fa:	4a3a      	ldr	r2, [pc, #232]	; (80017e4 <HAL_ADC_Start_DMA+0x1cc>)
 80016fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001706:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001726:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	334c      	adds	r3, #76	; 0x4c
 8001732:	4619      	mov	r1, r3
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f000 fcea 	bl	8002110 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_ADC_Start_DMA+0x1d0>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10f      	bne.n	8001768 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d136      	bne.n	80017c4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	e02d      	b.n	80017c4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <HAL_ADC_Start_DMA+0x1d4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10e      	bne.n	8001790 <HAL_ADC_Start_DMA+0x178>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800178e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_ADC_Start_DMA+0x1d0>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	d113      	bne.n	80017c4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <HAL_ADC_Start_DMA+0x1d8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d10e      	bne.n	80017c4 <HAL_ADC_Start_DMA+0x1ac>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017c2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000018 	.word	0x20000018
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	fffff8fe 	.word	0xfffff8fe
 80017dc:	08001c8d 	.word	0x08001c8d
 80017e0:	08001d47 	.word	0x08001d47
 80017e4:	08001d63 	.word	0x08001d63
 80017e8:	40012300 	.word	0x40012300
 80017ec:	40012000 	.word	0x40012000
 80017f0:	40012200 	.word	0x40012200

080017f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_ADC_ConfigChannel+0x1c>
 8001848:	2302      	movs	r3, #2
 800184a:	e115      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x248>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b09      	cmp	r3, #9
 800185a:	d935      	bls.n	80018c8 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68d9      	ldr	r1, [r3, #12]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b29b      	uxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	3b1e      	subs	r3, #30
 8001872:	2207      	movs	r2, #7
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43da      	mvns	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	400a      	ands	r2, r1
 8001880:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7f      	ldr	r2, [pc, #508]	; (8001a84 <HAL_ADC_ConfigChannel+0x254>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d10a      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68d9      	ldr	r1, [r3, #12]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	061a      	lsls	r2, r3, #24
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	e035      	b.n	800190e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68d9      	ldr	r1, [r3, #12]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4403      	add	r3, r0
 80018ba:	3b1e      	subs	r3, #30
 80018bc:	409a      	lsls	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	e022      	b.n	800190e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6919      	ldr	r1, [r3, #16]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	2207      	movs	r2, #7
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	400a      	ands	r2, r1
 80018ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6919      	ldr	r1, [r3, #16]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4403      	add	r3, r0
 8001904:	409a      	lsls	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b06      	cmp	r3, #6
 8001914:	d824      	bhi.n	8001960 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	3b05      	subs	r3, #5
 8001928:	221f      	movs	r2, #31
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	400a      	ands	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b05      	subs	r3, #5
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	635a      	str	r2, [r3, #52]	; 0x34
 800195e:	e04c      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b0c      	cmp	r3, #12
 8001966:	d824      	bhi.n	80019b2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	3b23      	subs	r3, #35	; 0x23
 800197a:	221f      	movs	r2, #31
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43da      	mvns	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	400a      	ands	r2, r1
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b23      	subs	r3, #35	; 0x23
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
 80019b0:	e023      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	3b41      	subs	r3, #65	; 0x41
 80019c4:	221f      	movs	r2, #31
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	400a      	ands	r2, r1
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b41      	subs	r3, #65	; 0x41
 80019ee:	fa00 f203 	lsl.w	r2, r0, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <HAL_ADC_ConfigChannel+0x258>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d109      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1e8>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b12      	cmp	r3, #18
 8001a0a:	d105      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <HAL_ADC_ConfigChannel+0x25c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_ADC_ConfigChannel+0x25c>)
 8001a12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a16:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_ADC_ConfigChannel+0x258>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d125      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x23e>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <HAL_ADC_ConfigChannel+0x254>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d003      	beq.n	8001a34 <HAL_ADC_ConfigChannel+0x204>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b11      	cmp	r3, #17
 8001a32:	d11c      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_ADC_ConfigChannel+0x25c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <HAL_ADC_ConfigChannel+0x25c>)
 8001a3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a3e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_ADC_ConfigChannel+0x254>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d111      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_ADC_ConfigChannel+0x260>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <HAL_ADC_ConfigChannel+0x264>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	0c9a      	lsrs	r2, r3, #18
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a60:	e002      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f9      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	10000012 	.word	0x10000012
 8001a88:	40012000 	.word	0x40012000
 8001a8c:	40012300 	.word	0x40012300
 8001a90:	20000018 	.word	0x20000018
 8001a94:	431bde83 	.word	0x431bde83

08001a98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001aa0:	4b78      	ldr	r3, [pc, #480]	; (8001c84 <ADC_Init+0x1ec>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a77      	ldr	r2, [pc, #476]	; (8001c84 <ADC_Init+0x1ec>)
 8001aa6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001aaa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001aac:	4b75      	ldr	r3, [pc, #468]	; (8001c84 <ADC_Init+0x1ec>)
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4973      	ldr	r1, [pc, #460]	; (8001c84 <ADC_Init+0x1ec>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ac8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	021a      	lsls	r2, r3, #8
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001aec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6899      	ldr	r1, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <ADC_Init+0x1f0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d022      	beq.n	8001b72 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6899      	ldr	r1, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6899      	ldr	r1, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	e00f      	b.n	8001b92 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0202 	bic.w	r2, r2, #2
 8001ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6899      	ldr	r1, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	005a      	lsls	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01b      	beq.n	8001bf8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6859      	ldr	r1, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	3b01      	subs	r3, #1
 8001bec:	035a      	lsls	r2, r3, #13
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	e007      	b.n	8001c08 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	051a      	lsls	r2, r3, #20
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6899      	ldr	r1, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c4a:	025a      	lsls	r2, r3, #9
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6899      	ldr	r1, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	029a      	lsls	r2, r3, #10
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	609a      	str	r2, [r3, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	40012300 	.word	0x40012300
 8001c88:	0f000001 	.word	0x0f000001

08001c8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d13c      	bne.n	8001d20 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d12b      	bne.n	8001d18 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d127      	bne.n	8001d18 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d119      	bne.n	8001d18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0220 	bic.w	r2, r2, #32
 8001cf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7ff fd6b 	bl	80017f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d1e:	e00e      	b.n	8001d3e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7ff fd75 	bl	800181c <HAL_ADC_ErrorCallback>
}
 8001d32:	e004      	b.n	8001d3e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	4798      	blx	r3
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d52:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff fd57 	bl	8001808 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2240      	movs	r2, #64	; 0x40
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f043 0204 	orr.w	r2, r3, #4
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff fd4a 	bl	800181c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00
 8001dd4:	05fa0000 	.word	0x05fa0000

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4907      	ldr	r1, [pc, #28]	; (8001e2c <__NVIC_EnableIRQ+0x38>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff29 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff3e 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff31 	bl	8001df4 <__NVIC_EnableIRQ>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffa2 	bl	8001eec <SysTick_Config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff fab8 	bl	8001534 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e099      	b.n	8002104 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0201 	bic.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff0:	e00f      	b.n	8002012 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ff2:	f7ff fa9f 	bl	8001534 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d908      	bls.n	8002012 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2203      	movs	r2, #3
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e078      	b.n	8002104 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e8      	bne.n	8001ff2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <HAL_DMA_Init+0x158>)
 800202c:	4013      	ands	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800203e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	2b04      	cmp	r3, #4
 800206a:	d107      	bne.n	800207c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	4313      	orrs	r3, r2
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f023 0307 	bic.w	r3, r3, #7
 8002092:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d117      	bne.n	80020d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00e      	beq.n	80020d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fa77 	bl	80025ac <DMA_CheckFifoParam>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2240      	movs	r2, #64	; 0x40
 80020c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020d2:	2301      	movs	r3, #1
 80020d4:	e016      	b.n	8002104 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fa2e 	bl	8002540 <DMA_CalcBaseAndBitshift>
 80020e4:	4603      	mov	r3, r0
 80020e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	223f      	movs	r2, #63	; 0x3f
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	f010803f 	.word	0xf010803f

08002110 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_DMA_Start_IT+0x26>
 8002132:	2302      	movs	r3, #2
 8002134:	e048      	b.n	80021c8 <HAL_DMA_Start_IT+0xb8>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d137      	bne.n	80021ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2202      	movs	r2, #2
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f9c0 	bl	80024e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	223f      	movs	r2, #63	; 0x3f
 800216a:	409a      	lsls	r2, r3
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0216 	orr.w	r2, r2, #22
 800217e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800218e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0208 	orr.w	r2, r2, #8
 80021a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e005      	b.n	80021c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_DMA_IRQHandler+0x258>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a92      	ldr	r2, [pc, #584]	; (800242c <HAL_DMA_IRQHandler+0x25c>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0a9b      	lsrs	r3, r3, #10
 80021e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	2208      	movs	r2, #8
 80021fc:	409a      	lsls	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01a      	beq.n	800223c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0204 	bic.w	r2, r2, #4
 8002222:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2208      	movs	r2, #8
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	2201      	movs	r2, #1
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d012      	beq.n	8002272 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00b      	beq.n	8002272 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2201      	movs	r2, #1
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f043 0202 	orr.w	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	2204      	movs	r2, #4
 8002278:	409a      	lsls	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d012      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00b      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002294:	2204      	movs	r2, #4
 8002296:	409a      	lsls	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	f043 0204 	orr.w	r2, r3, #4
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	2210      	movs	r2, #16
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d043      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d03c      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	2210      	movs	r2, #16
 80022cc:	409a      	lsls	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d018      	beq.n	8002312 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d024      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
 80022fe:	e01f      	b.n	8002340 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01b      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
 8002310:	e016      	b.n	8002340 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0208 	bic.w	r2, r2, #8
 800232e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	2220      	movs	r2, #32
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 808e 	beq.w	800246e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8086 	beq.w	800246e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	2220      	movs	r2, #32
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b05      	cmp	r3, #5
 8002378:	d136      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0216 	bic.w	r2, r2, #22
 8002388:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002398:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d103      	bne.n	80023aa <HAL_DMA_IRQHandler+0x1da>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0208 	bic.w	r2, r2, #8
 80023b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	223f      	movs	r2, #63	; 0x3f
 80023c0:	409a      	lsls	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d07d      	beq.n	80024da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
        }
        return;
 80023e6:	e078      	b.n	80024da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01c      	beq.n	8002430 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d108      	bne.n	8002416 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	2b00      	cmp	r3, #0
 800240a:	d030      	beq.n	800246e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
 8002414:	e02b      	b.n	800246e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d027      	beq.n	800246e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
 8002426:	e022      	b.n	800246e <HAL_DMA_IRQHandler+0x29e>
 8002428:	20000018 	.word	0x20000018
 800242c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10f      	bne.n	800245e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0210 	bic.w	r2, r2, #16
 800244c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	2b00      	cmp	r3, #0
 8002474:	d032      	beq.n	80024dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d022      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2205      	movs	r2, #5
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3301      	adds	r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d307      	bcc.n	80024b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f2      	bne.n	800249a <HAL_DMA_IRQHandler+0x2ca>
 80024b4:	e000      	b.n	80024b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80024b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
 80024d8:	e000      	b.n	80024dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80024da:	bf00      	nop
    }
  }
}
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop

080024e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002500:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b40      	cmp	r3, #64	; 0x40
 8002510:	d108      	bne.n	8002524 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002522:	e007      	b.n	8002534 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	60da      	str	r2, [r3, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	3b10      	subs	r3, #16
 8002550:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <DMA_CalcBaseAndBitshift+0x60>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <DMA_CalcBaseAndBitshift+0x64>)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d908      	bls.n	8002580 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <DMA_CalcBaseAndBitshift+0x68>)
 8002576:	4013      	ands	r3, r2
 8002578:	1d1a      	adds	r2, r3, #4
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	659a      	str	r2, [r3, #88]	; 0x58
 800257e:	e006      	b.n	800258e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <DMA_CalcBaseAndBitshift+0x68>)
 8002588:	4013      	ands	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	aaaaaaab 	.word	0xaaaaaaab
 80025a4:	080064a4 	.word	0x080064a4
 80025a8:	fffffc00 	.word	0xfffffc00

080025ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11f      	bne.n	8002606 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d855      	bhi.n	8002678 <DMA_CheckFifoParam+0xcc>
 80025cc:	a201      	add	r2, pc, #4	; (adr r2, 80025d4 <DMA_CheckFifoParam+0x28>)
 80025ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d2:	bf00      	nop
 80025d4:	080025e5 	.word	0x080025e5
 80025d8:	080025f7 	.word	0x080025f7
 80025dc:	080025e5 	.word	0x080025e5
 80025e0:	08002679 	.word	0x08002679
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d045      	beq.n	800267c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f4:	e042      	b.n	800267c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025fe:	d13f      	bne.n	8002680 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002604:	e03c      	b.n	8002680 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800260e:	d121      	bne.n	8002654 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b03      	cmp	r3, #3
 8002614:	d836      	bhi.n	8002684 <DMA_CheckFifoParam+0xd8>
 8002616:	a201      	add	r2, pc, #4	; (adr r2, 800261c <DMA_CheckFifoParam+0x70>)
 8002618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261c:	0800262d 	.word	0x0800262d
 8002620:	08002633 	.word	0x08002633
 8002624:	0800262d 	.word	0x0800262d
 8002628:	08002645 	.word	0x08002645
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      break;
 8002630:	e02f      	b.n	8002692 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d024      	beq.n	8002688 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002642:	e021      	b.n	8002688 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800264c:	d11e      	bne.n	800268c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002652:	e01b      	b.n	800268c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <DMA_CheckFifoParam+0xb4>
 800265a:	2b03      	cmp	r3, #3
 800265c:	d003      	beq.n	8002666 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800265e:	e018      	b.n	8002692 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      break;
 8002664:	e015      	b.n	8002692 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00e      	beq.n	8002690 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
      break;
 8002676:	e00b      	b.n	8002690 <DMA_CheckFifoParam+0xe4>
      break;
 8002678:	bf00      	nop
 800267a:	e00a      	b.n	8002692 <DMA_CheckFifoParam+0xe6>
      break;
 800267c:	bf00      	nop
 800267e:	e008      	b.n	8002692 <DMA_CheckFifoParam+0xe6>
      break;
 8002680:	bf00      	nop
 8002682:	e006      	b.n	8002692 <DMA_CheckFifoParam+0xe6>
      break;
 8002684:	bf00      	nop
 8002686:	e004      	b.n	8002692 <DMA_CheckFifoParam+0xe6>
      break;
 8002688:	bf00      	nop
 800268a:	e002      	b.n	8002692 <DMA_CheckFifoParam+0xe6>
      break;   
 800268c:	bf00      	nop
 800268e:	e000      	b.n	8002692 <DMA_CheckFifoParam+0xe6>
      break;
 8002690:	bf00      	nop
    }
  } 
  
  return status; 
 8002692:	7bfb      	ldrb	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80026b0:	4ba9      	ldr	r3, [pc, #676]	; (8002958 <HAL_ETH_Init+0x2b8>)
 80026b2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e183      	b.n	80029ce <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe f894 	bl	8000808 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e0:	4b9e      	ldr	r3, [pc, #632]	; (800295c <HAL_ETH_Init+0x2bc>)
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	4a9d      	ldr	r2, [pc, #628]	; (800295c <HAL_ETH_Init+0x2bc>)
 80026e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ea:	6453      	str	r3, [r2, #68]	; 0x44
 80026ec:	4b9b      	ldr	r3, [pc, #620]	; (800295c <HAL_ETH_Init+0x2bc>)
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026f8:	4b99      	ldr	r3, [pc, #612]	; (8002960 <HAL_ETH_Init+0x2c0>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a98      	ldr	r2, [pc, #608]	; (8002960 <HAL_ETH_Init+0x2c0>)
 80026fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002702:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002704:	4b96      	ldr	r3, [pc, #600]	; (8002960 <HAL_ETH_Init+0x2c0>)
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4994      	ldr	r1, [pc, #592]	; (8002960 <HAL_ETH_Init+0x2c0>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0201 	orr.w	r2, r2, #1
 8002724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002728:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800272a:	f7fe ff03 	bl	8001534 <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002730:	e011      	b.n	8002756 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002732:	f7fe feff 	bl	8001534 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002740:	d909      	bls.n	8002756 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2203      	movs	r2, #3
 8002746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e13b      	b.n	80029ce <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e4      	bne.n	8002732 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f023 031c 	bic.w	r3, r3, #28
 8002776:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002778:	f001 fb3e 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 800277c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4a78      	ldr	r2, [pc, #480]	; (8002964 <HAL_ETH_Init+0x2c4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d908      	bls.n	8002798 <HAL_ETH_Init+0xf8>
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4a77      	ldr	r2, [pc, #476]	; (8002968 <HAL_ETH_Init+0x2c8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d804      	bhi.n	8002798 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e027      	b.n	80027e8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	4a73      	ldr	r2, [pc, #460]	; (8002968 <HAL_ETH_Init+0x2c8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d908      	bls.n	80027b2 <HAL_ETH_Init+0x112>
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4a72      	ldr	r2, [pc, #456]	; (800296c <HAL_ETH_Init+0x2cc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d804      	bhi.n	80027b2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f043 030c 	orr.w	r3, r3, #12
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	e01a      	b.n	80027e8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	4a6d      	ldr	r2, [pc, #436]	; (800296c <HAL_ETH_Init+0x2cc>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d903      	bls.n	80027c2 <HAL_ETH_Init+0x122>
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	4a6c      	ldr	r2, [pc, #432]	; (8002970 <HAL_ETH_Init+0x2d0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d911      	bls.n	80027e6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4a6a      	ldr	r2, [pc, #424]	; (8002970 <HAL_ETH_Init+0x2d0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d908      	bls.n	80027dc <HAL_ETH_Init+0x13c>
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4a69      	ldr	r2, [pc, #420]	; (8002974 <HAL_ETH_Init+0x2d4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d804      	bhi.n	80027dc <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e005      	b.n	80027e8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f043 0310 	orr.w	r3, r3, #16
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	e000      	b.n	80027e8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80027e6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80027f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027f4:	2100      	movs	r1, #0
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f956 	bl	8002aa8 <HAL_ETH_WritePHYRegister>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002806:	6939      	ldr	r1, [r7, #16]
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f9b3 	bl	8002b74 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e0d9      	b.n	80029ce <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800281a:	20ff      	movs	r0, #255	; 0xff
 800281c:	f7fe fe96 	bl	800154c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80a7 	beq.w	8002978 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800282a:	f7fe fe83 	bl	8001534 <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	461a      	mov	r2, r3
 8002836:	2101      	movs	r1, #1
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f8cd 	bl	80029d8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800283e:	f7fe fe79 	bl	8001534 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	; 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d90f      	bls.n	8002870 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002854:	6939      	ldr	r1, [r7, #16]
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f98c 	bl	8002b74 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0ae      	b.n	80029ce <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0da      	beq.n	8002830 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800287a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800287e:	2100      	movs	r1, #0
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f911 	bl	8002aa8 <HAL_ETH_WritePHYRegister>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002890:	6939      	ldr	r1, [r7, #16]
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f96e 	bl	8002b74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80028a0:	2301      	movs	r3, #1
 80028a2:	e094      	b.n	80029ce <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fe46 	bl	8001534 <HAL_GetTick>
 80028a8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	461a      	mov	r2, r3
 80028b0:	2101      	movs	r1, #1
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f890 	bl	80029d8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80028b8:	f7fe fe3c 	bl	8001534 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d90f      	bls.n	80028ea <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80028ce:	6939      	ldr	r1, [r7, #16]
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f94f 	bl	8002b74 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e071      	b.n	80029ce <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0da      	beq.n	80028aa <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80028f4:	f107 030c 	add.w	r3, r7, #12
 80028f8:	461a      	mov	r2, r3
 80028fa:	211f      	movs	r1, #31
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f86b 	bl	80029d8 <HAL_ETH_ReadPHYRegister>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800290c:	6939      	ldr	r1, [r7, #16]
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f930 	bl	8002b74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800291c:	2301      	movs	r3, #1
 800291e:	e056      	b.n	80029ce <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	e002      	b.n	800293a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	e037      	b.n	80029bc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	e032      	b.n	80029bc <HAL_ETH_Init+0x31c>
 8002956:	bf00      	nop
 8002958:	03938700 	.word	0x03938700
 800295c:	40023800 	.word	0x40023800
 8002960:	40013800 	.word	0x40013800
 8002964:	01312cff 	.word	0x01312cff
 8002968:	02160ebf 	.word	0x02160ebf
 800296c:	039386ff 	.word	0x039386ff
 8002970:	05f5e0ff 	.word	0x05f5e0ff
 8002974:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	08db      	lsrs	r3, r3, #3
 800297e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002988:	4313      	orrs	r3, r2
 800298a:	b29b      	uxth	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	2100      	movs	r1, #0
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f889 	bl	8002aa8 <HAL_ETH_WritePHYRegister>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80029a0:	6939      	ldr	r1, [r7, #16]
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8e6 	bl	8002b74 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e00c      	b.n	80029ce <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80029b4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80029b8:	f7fe fdc8 	bl	800154c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80029bc:	6939      	ldr	r1, [r7, #16]
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8d8 	bl	8002b74 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop

080029d8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	460b      	mov	r3, r1
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b82      	cmp	r3, #130	; 0x82
 80029f8:	d101      	bne.n	80029fe <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80029fa:	2302      	movs	r3, #2
 80029fc:	e050      	b.n	8002aa0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2282      	movs	r2, #130	; 0x82
 8002a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 031c 	and.w	r3, r3, #28
 8002a14:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8a1b      	ldrh	r3, [r3, #16]
 8002a1a:	02db      	lsls	r3, r3, #11
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002a24:	897b      	ldrh	r3, [r7, #10]
 8002a26:	019b      	lsls	r3, r3, #6
 8002a28:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 0302 	bic.w	r3, r3, #2
 8002a38:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a4a:	f7fe fd73 	bl	8001534 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a50:	e015      	b.n	8002a7e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002a52:	f7fe fd6f 	bl	8001534 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a60:	d309      	bcc.n	8002a76 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e014      	b.n	8002aa0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e4      	bne.n	8002a52 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b42      	cmp	r3, #66	; 0x42
 8002ac8:	d101      	bne.n	8002ace <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
 8002acc:	e04e      	b.n	8002b6c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2242      	movs	r2, #66	; 0x42
 8002ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 031c 	and.w	r3, r3, #28
 8002ae4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8a1b      	ldrh	r3, [r3, #16]
 8002aea:	02db      	lsls	r3, r3, #11
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002af4:	897b      	ldrh	r3, [r7, #10]
 8002af6:	019b      	lsls	r3, r3, #6
 8002af8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b24:	f7fe fd06 	bl	8001534 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b2a:	e015      	b.n	8002b58 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002b2c:	f7fe fd02 	bl	8001534 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3a:	d309      	bcc.n	8002b50 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e00d      	b.n	8002b6c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e4      	bne.n	8002b2c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b0b0      	sub	sp, #192	; 0xc0
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b90:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b98:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bbe:	663b      	str	r3, [r7, #96]	; 0x60
 8002bc0:	e001      	b.n	8002bc6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bca:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002be0:	2340      	movs	r3, #64	; 0x40
 8002be2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002c48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c4c:	4bab      	ldr	r3, [pc, #684]	; (8002efc <ETH_MACDMAConfig+0x388>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002c58:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002c5c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002c60:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002c66:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002c6a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002c6e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002c74:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002c78:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002c7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002c7c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002c80:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002c84:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002c88:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c9c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f7fe fc4f 	bl	800154c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cb6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002cb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002cbc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002cbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002cc0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002cc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002cc6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002ccc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002cd2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002cd8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002cdc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002ce4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ce6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f7fe fc2a 	bl	800154c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d00:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d0a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002d14:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002d20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d24:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002d28:	4013      	ands	r3, r2
 8002d2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002d2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d32:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002d34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002d38:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002d3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002d3e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002d40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002d44:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002d4a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002d4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002d50:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002d52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d64:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d70:	2001      	movs	r0, #1
 8002d72:	f7fe fbeb 	bl	800154c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d7e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002d80:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002d84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f7fe fbd6 	bl	800154c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002da8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002db8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dbc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002dce:	2304      	movs	r3, #4
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002dde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002df2:	2300      	movs	r3, #0
 8002df4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	f241 0318 	movw	r3, #4120	; 0x1018
 8002dfe:	4413      	add	r3, r2
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002e06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <ETH_MACDMAConfig+0x38c>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e12:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002e14:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e16:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002e18:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002e1a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002e1c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002e1e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002e20:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002e22:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002e24:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002e26:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002e28:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002e2a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002e2e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002e32:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e46:	4413      	add	r3, r2
 8002e48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e4c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e56:	4413      	add	r3, r2
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f7fe fb74 	bl	800154c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e72:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e78:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002e7c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002e80:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002e84:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e88:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002e8a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002e8e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e9c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eac:	2001      	movs	r0, #1
 8002eae:	f7fe fb4d 	bl	800154c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ebe:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d10d      	bne.n	8002ee4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	f241 031c 	movw	r3, #4124	; 0x101c
 8002ed0:	4413      	add	r3, r2
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6811      	ldr	r1, [r2, #0]
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <ETH_MACDMAConfig+0x390>)
 8002eda:	431a      	orrs	r2, r3
 8002edc:	f241 031c 	movw	r3, #4124	; 0x101c
 8002ee0:	440b      	add	r3, r1
 8002ee2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2100      	movs	r1, #0
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f80b 	bl	8002f08 <ETH_MACAddressConfig>
}
 8002ef2:	bf00      	nop
 8002ef4:	37c0      	adds	r7, #192	; 0xc0
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	ff20810f 	.word	0xff20810f
 8002f00:	f8de3f23 	.word	0xf8de3f23
 8002f04:	00010040 	.word	0x00010040

08002f08 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3305      	adds	r3, #5
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	3204      	adds	r2, #4
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <ETH_MACAddressConfig+0x68>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3303      	adds	r3, #3
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	061a      	lsls	r2, r3, #24
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3301      	adds	r3, #1
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	7812      	ldrb	r2, [r2, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <ETH_MACAddressConfig+0x6c>)
 8002f5a:	4413      	add	r3, r2
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	6013      	str	r3, [r2, #0]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40028040 	.word	0x40028040
 8002f74:	40028044 	.word	0x40028044

08002f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e175      	b.n	8003284 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f040 8164 	bne.w	800327e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x4e>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b12      	cmp	r3, #18
 8002fc4:	d123      	bne.n	800300e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	08da      	lsrs	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3208      	adds	r2, #8
 8002fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	08da      	lsrs	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3208      	adds	r2, #8
 8003008:	69b9      	ldr	r1, [r7, #24]
 800300a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	2203      	movs	r2, #3
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0203 	and.w	r2, r3, #3
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d00b      	beq.n	8003062 <HAL_GPIO_Init+0xea>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d007      	beq.n	8003062 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003056:	2b11      	cmp	r3, #17
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b12      	cmp	r3, #18
 8003060:	d130      	bne.n	80030c4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	2203      	movs	r2, #3
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003098:	2201      	movs	r2, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 0201 	and.w	r2, r3, #1
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	2203      	movs	r2, #3
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80be 	beq.w	800327e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	4b65      	ldr	r3, [pc, #404]	; (8003298 <HAL_GPIO_Init+0x320>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	4a64      	ldr	r2, [pc, #400]	; (8003298 <HAL_GPIO_Init+0x320>)
 8003108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800310c:	6453      	str	r3, [r2, #68]	; 0x44
 800310e:	4b62      	ldr	r3, [pc, #392]	; (8003298 <HAL_GPIO_Init+0x320>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800311a:	4a60      	ldr	r2, [pc, #384]	; (800329c <HAL_GPIO_Init+0x324>)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	220f      	movs	r2, #15
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a57      	ldr	r2, [pc, #348]	; (80032a0 <HAL_GPIO_Init+0x328>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d037      	beq.n	80031b6 <HAL_GPIO_Init+0x23e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a56      	ldr	r2, [pc, #344]	; (80032a4 <HAL_GPIO_Init+0x32c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d031      	beq.n	80031b2 <HAL_GPIO_Init+0x23a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a55      	ldr	r2, [pc, #340]	; (80032a8 <HAL_GPIO_Init+0x330>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d02b      	beq.n	80031ae <HAL_GPIO_Init+0x236>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a54      	ldr	r2, [pc, #336]	; (80032ac <HAL_GPIO_Init+0x334>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d025      	beq.n	80031aa <HAL_GPIO_Init+0x232>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a53      	ldr	r2, [pc, #332]	; (80032b0 <HAL_GPIO_Init+0x338>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01f      	beq.n	80031a6 <HAL_GPIO_Init+0x22e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_GPIO_Init+0x33c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d019      	beq.n	80031a2 <HAL_GPIO_Init+0x22a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a51      	ldr	r2, [pc, #324]	; (80032b8 <HAL_GPIO_Init+0x340>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_GPIO_Init+0x226>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a50      	ldr	r2, [pc, #320]	; (80032bc <HAL_GPIO_Init+0x344>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00d      	beq.n	800319a <HAL_GPIO_Init+0x222>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4f      	ldr	r2, [pc, #316]	; (80032c0 <HAL_GPIO_Init+0x348>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d007      	beq.n	8003196 <HAL_GPIO_Init+0x21e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4e      	ldr	r2, [pc, #312]	; (80032c4 <HAL_GPIO_Init+0x34c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d101      	bne.n	8003192 <HAL_GPIO_Init+0x21a>
 800318e:	2309      	movs	r3, #9
 8003190:	e012      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 8003192:	230a      	movs	r3, #10
 8003194:	e010      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 8003196:	2308      	movs	r3, #8
 8003198:	e00e      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 800319a:	2307      	movs	r3, #7
 800319c:	e00c      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 800319e:	2306      	movs	r3, #6
 80031a0:	e00a      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031a2:	2305      	movs	r3, #5
 80031a4:	e008      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031a6:	2304      	movs	r3, #4
 80031a8:	e006      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031aa:	2303      	movs	r3, #3
 80031ac:	e004      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e002      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_GPIO_Init+0x240>
 80031b6:	2300      	movs	r3, #0
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	f002 0203 	and.w	r2, r2, #3
 80031be:	0092      	lsls	r2, r2, #2
 80031c0:	4093      	lsls	r3, r2
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031c8:	4934      	ldr	r1, [pc, #208]	; (800329c <HAL_GPIO_Init+0x324>)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	3302      	adds	r3, #2
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d6:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <HAL_GPIO_Init+0x350>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031fa:	4a33      	ldr	r2, [pc, #204]	; (80032c8 <HAL_GPIO_Init+0x350>)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003200:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <HAL_GPIO_Init+0x350>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003224:	4a28      	ldr	r2, [pc, #160]	; (80032c8 <HAL_GPIO_Init+0x350>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322a:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <HAL_GPIO_Init+0x350>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324e:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <HAL_GPIO_Init+0x350>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003254:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <HAL_GPIO_Init+0x350>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003278:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <HAL_GPIO_Init+0x350>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3301      	adds	r3, #1
 8003282:	61fb      	str	r3, [r7, #28]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b0f      	cmp	r3, #15
 8003288:	f67f ae86 	bls.w	8002f98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800328c:	bf00      	nop
 800328e:	3724      	adds	r7, #36	; 0x24
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	40023800 	.word	0x40023800
 800329c:	40013800 	.word	0x40013800
 80032a0:	40020000 	.word	0x40020000
 80032a4:	40020400 	.word	0x40020400
 80032a8:	40020800 	.word	0x40020800
 80032ac:	40020c00 	.word	0x40020c00
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40021400 	.word	0x40021400
 80032b8:	40021800 	.word	0x40021800
 80032bc:	40021c00 	.word	0x40021c00
 80032c0:	40022000 	.word	0x40022000
 80032c4:	40022400 	.word	0x40022400
 80032c8:	40013c00 	.word	0x40013c00

080032cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
 80032d8:	4613      	mov	r3, r2
 80032da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032dc:	787b      	ldrb	r3, [r7, #1]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032e8:	e003      	b.n	80032f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032ea:	887b      	ldrh	r3, [r7, #2]
 80032ec:	041a      	lsls	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	619a      	str	r2, [r3, #24]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003300:	b08f      	sub	sp, #60	; 0x3c
 8003302:	af0a      	add	r7, sp, #40	; 0x28
 8003304:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e10a      	b.n	8003526 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7fe f82f 	bl	8001388 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2203      	movs	r2, #3
 800332e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f002 f9f0 	bl	800571c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	687e      	ldr	r6, [r7, #4]
 8003344:	466d      	mov	r5, sp
 8003346:	f106 0410 	add.w	r4, r6, #16
 800334a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800334c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800334e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003352:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003356:	e885 0003 	stmia.w	r5, {r0, r1}
 800335a:	1d33      	adds	r3, r6, #4
 800335c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800335e:	6838      	ldr	r0, [r7, #0]
 8003360:	f002 f984 	bl	800566c <USB_CoreInit>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e0d7      	b.n	8003526 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f002 f9de 	bl	800573e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003382:	2300      	movs	r3, #0
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	e04a      	b.n	800341e <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	333d      	adds	r3, #61	; 0x3d
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	333c      	adds	r3, #60	; 0x3c
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033b0:	7bfa      	ldrb	r2, [r7, #15]
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	b298      	uxth	r0, r3
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	3342      	adds	r3, #66	; 0x42
 80033c4:	4602      	mov	r2, r0
 80033c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	333f      	adds	r3, #63	; 0x3f
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3344      	adds	r3, #68	; 0x44
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	3348      	adds	r3, #72	; 0x48
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	3350      	adds	r3, #80	; 0x50
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	3301      	adds	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d3af      	bcc.n	8003388 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]
 800342c:	e044      	b.n	80034b8 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	3301      	adds	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	7bfa      	ldrb	r2, [r7, #15]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d3b5      	bcc.n	800342e <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	687e      	ldr	r6, [r7, #4]
 80034ca:	466d      	mov	r5, sp
 80034cc:	f106 0410 	add.w	r4, r6, #16
 80034d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80034e0:	1d33      	adds	r3, r6, #4
 80034e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034e4:	6838      	ldr	r0, [r7, #0]
 80034e6:	f002 f955 	bl	8005794 <USB_DevInit>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e014      	b.n	8003526 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	2b01      	cmp	r3, #1
 8003512:	d102      	bne.n	800351a <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f80b 	bl	8003530 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f002 fb15 	bl	8005b4e <USB_DevDisconnect>

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003530 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800355e:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_PCDEx_ActivateLPM+0x44>)
 8003560:	4313      	orrs	r3, r2
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	10000003 	.word	0x10000003

08003578 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a04      	ldr	r2, [pc, #16]	; (8003594 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003586:	6013      	str	r3, [r2, #0]
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40007000 	.word	0x40007000

08003598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80035a0:	2300      	movs	r3, #0
 80035a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e25c      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8087 	beq.w	80036ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035bc:	4b96      	ldr	r3, [pc, #600]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d00c      	beq.n	80035e2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c8:	4b93      	ldr	r3, [pc, #588]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d112      	bne.n	80035fa <HAL_RCC_OscConfig+0x62>
 80035d4:	4b90      	ldr	r3, [pc, #576]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e0:	d10b      	bne.n	80035fa <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e2:	4b8d      	ldr	r3, [pc, #564]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d06c      	beq.n	80036c8 <HAL_RCC_OscConfig+0x130>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d168      	bne.n	80036c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e236      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003602:	d106      	bne.n	8003612 <HAL_RCC_OscConfig+0x7a>
 8003604:	4b84      	ldr	r3, [pc, #528]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a83      	ldr	r2, [pc, #524]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 800360a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	e02e      	b.n	8003670 <HAL_RCC_OscConfig+0xd8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0x9c>
 800361a:	4b7f      	ldr	r3, [pc, #508]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a7e      	ldr	r2, [pc, #504]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b7c      	ldr	r3, [pc, #496]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7b      	ldr	r2, [pc, #492]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 800362c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e01d      	b.n	8003670 <HAL_RCC_OscConfig+0xd8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800363c:	d10c      	bne.n	8003658 <HAL_RCC_OscConfig+0xc0>
 800363e:	4b76      	ldr	r3, [pc, #472]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a75      	ldr	r2, [pc, #468]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b73      	ldr	r3, [pc, #460]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a72      	ldr	r2, [pc, #456]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e00b      	b.n	8003670 <HAL_RCC_OscConfig+0xd8>
 8003658:	4b6f      	ldr	r3, [pc, #444]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a6e      	ldr	r2, [pc, #440]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 800365e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4b6c      	ldr	r3, [pc, #432]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6b      	ldr	r2, [pc, #428]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 800366a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800366e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d013      	beq.n	80036a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fd ff5c 	bl	8001534 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003680:	f7fd ff58 	bl	8001534 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	; 0x64
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e1ea      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	4b61      	ldr	r3, [pc, #388]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0xe8>
 800369e:	e014      	b.n	80036ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fd ff48 	bl	8001534 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fd ff44 	bl	8001534 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e1d6      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ba:	4b57      	ldr	r3, [pc, #348]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x110>
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d069      	beq.n	80037aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036d6:	4b50      	ldr	r3, [pc, #320]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e2:	4b4d      	ldr	r3, [pc, #308]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d11c      	bne.n	8003728 <HAL_RCC_OscConfig+0x190>
 80036ee:	4b4a      	ldr	r3, [pc, #296]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d116      	bne.n	8003728 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fa:	4b47      	ldr	r3, [pc, #284]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_RCC_OscConfig+0x17a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e1aa      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003712:	4b41      	ldr	r3, [pc, #260]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	493d      	ldr	r1, [pc, #244]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003726:	e040      	b.n	80037aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d023      	beq.n	8003778 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003730:	4b39      	ldr	r3, [pc, #228]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a38      	ldr	r2, [pc, #224]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fd fefa 	bl	8001534 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003744:	f7fd fef6 	bl	8001534 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e188      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003756:	4b30      	ldr	r3, [pc, #192]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003762:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4929      	ldr	r1, [pc, #164]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]
 8003776:	e018      	b.n	80037aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003778:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a26      	ldr	r2, [pc, #152]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fd fed6 	bl	8001534 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800378c:	f7fd fed2 	bl	8001534 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e164      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d038      	beq.n	8003828 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d019      	beq.n	80037f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80037c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c2:	4a15      	ldr	r2, [pc, #84]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fd feb3 	bl	8001534 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d2:	f7fd feaf 	bl	8001534 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e141      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80037e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x23a>
 80037f0:	e01a      	b.n	8003828 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	4a08      	ldr	r2, [pc, #32]	; (8003818 <HAL_RCC_OscConfig+0x280>)
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fd fe99 	bl	8001534 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003806:	f7fd fe95 	bl	8001534 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d903      	bls.n	800381c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e127      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
 8003818:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381c:	4b94      	ldr	r3, [pc, #592]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 800381e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ee      	bne.n	8003806 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80a4 	beq.w	800397e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003836:	4b8e      	ldr	r3, [pc, #568]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10d      	bne.n	800385e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	4b8b      	ldr	r3, [pc, #556]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	4a8a      	ldr	r2, [pc, #552]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
 800384e:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800385a:	2301      	movs	r3, #1
 800385c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800385e:	4b85      	ldr	r3, [pc, #532]	; (8003a74 <HAL_RCC_OscConfig+0x4dc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d118      	bne.n	800389c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800386a:	4b82      	ldr	r3, [pc, #520]	; (8003a74 <HAL_RCC_OscConfig+0x4dc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a81      	ldr	r2, [pc, #516]	; (8003a74 <HAL_RCC_OscConfig+0x4dc>)
 8003870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003876:	f7fd fe5d 	bl	8001534 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800387e:	f7fd fe59 	bl	8001534 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b64      	cmp	r3, #100	; 0x64
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e0eb      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003890:	4b78      	ldr	r3, [pc, #480]	; (8003a74 <HAL_RCC_OscConfig+0x4dc>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d106      	bne.n	80038b2 <HAL_RCC_OscConfig+0x31a>
 80038a4:	4b72      	ldr	r3, [pc, #456]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	4a71      	ldr	r2, [pc, #452]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6713      	str	r3, [r2, #112]	; 0x70
 80038b0:	e02d      	b.n	800390e <HAL_RCC_OscConfig+0x376>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x33c>
 80038ba:	4b6d      	ldr	r3, [pc, #436]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	4a6c      	ldr	r2, [pc, #432]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	6713      	str	r3, [r2, #112]	; 0x70
 80038c6:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	4a69      	ldr	r2, [pc, #420]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038cc:	f023 0304 	bic.w	r3, r3, #4
 80038d0:	6713      	str	r3, [r2, #112]	; 0x70
 80038d2:	e01c      	b.n	800390e <HAL_RCC_OscConfig+0x376>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d10c      	bne.n	80038f6 <HAL_RCC_OscConfig+0x35e>
 80038dc:	4b64      	ldr	r3, [pc, #400]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a63      	ldr	r2, [pc, #396]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038e2:	f043 0304 	orr.w	r3, r3, #4
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
 80038e8:	4b61      	ldr	r3, [pc, #388]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	4a60      	ldr	r2, [pc, #384]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6713      	str	r3, [r2, #112]	; 0x70
 80038f4:	e00b      	b.n	800390e <HAL_RCC_OscConfig+0x376>
 80038f6:	4b5e      	ldr	r3, [pc, #376]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a5d      	ldr	r2, [pc, #372]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	4b5b      	ldr	r3, [pc, #364]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a5a      	ldr	r2, [pc, #360]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003908:	f023 0304 	bic.w	r3, r3, #4
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d015      	beq.n	8003942 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003916:	f7fd fe0d 	bl	8001534 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391c:	e00a      	b.n	8003934 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391e:	f7fd fe09 	bl	8001534 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f241 3288 	movw	r2, #5000	; 0x1388
 800392c:	4293      	cmp	r3, r2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e099      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003934:	4b4e      	ldr	r3, [pc, #312]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ee      	beq.n	800391e <HAL_RCC_OscConfig+0x386>
 8003940:	e014      	b.n	800396c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003942:	f7fd fdf7 	bl	8001534 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fd fdf3 	bl	8001534 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e083      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003960:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ee      	bne.n	800394a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003972:	4b3f      	ldr	r3, [pc, #252]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a3e      	ldr	r2, [pc, #248]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d06f      	beq.n	8003a66 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003986:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b08      	cmp	r3, #8
 8003990:	d067      	beq.n	8003a62 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d149      	bne.n	8003a2e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399a:	4b35      	ldr	r3, [pc, #212]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a34      	ldr	r2, [pc, #208]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80039a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7fd fdc5 	bl	8001534 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ae:	f7fd fdc1 	bl	8001534 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e053      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f0      	bne.n	80039ae <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	019b      	lsls	r3, r3, #6
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	3b01      	subs	r3, #1
 80039e6:	041b      	lsls	r3, r3, #16
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	061b      	lsls	r3, r3, #24
 80039f0:	4313      	orrs	r3, r2
 80039f2:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80039f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039f8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039fa:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fd fd95 	bl	8001534 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fd fd91 	bl	8001534 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e023      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x476>
 8003a2c:	e01b      	b.n	8003a66 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a0f      	ldr	r2, [pc, #60]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7fd fd7b 	bl	8001534 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a42:	f7fd fd77 	bl	8001534 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e009      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_OscConfig+0x4d8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0x4aa>
 8003a60:	e001      	b.n	8003a66 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40007000 	.word	0x40007000

08003a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0ce      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b69      	ldr	r3, [pc, #420]	; (8003c38 <HAL_RCC_ClockConfig+0x1c0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d910      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b66      	ldr	r3, [pc, #408]	; (8003c38 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 020f 	bic.w	r2, r3, #15
 8003aa6:	4964      	ldr	r1, [pc, #400]	; (8003c38 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b62      	ldr	r3, [pc, #392]	; (8003c38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0b6      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d020      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad8:	4b58      	ldr	r3, [pc, #352]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a57      	ldr	r2, [pc, #348]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af0:	4b52      	ldr	r3, [pc, #328]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4a51      	ldr	r2, [pc, #324]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003afa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003afc:	4b4f      	ldr	r3, [pc, #316]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	494c      	ldr	r1, [pc, #304]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d040      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	4b46      	ldr	r3, [pc, #280]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d115      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e07d      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	4b40      	ldr	r3, [pc, #256]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e071      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4a:	4b3c      	ldr	r3, [pc, #240]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e069      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4935      	ldr	r1, [pc, #212]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6c:	f7fd fce2 	bl	8001534 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fd fcde 	bl	8001534 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e051      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b26      	ldr	r3, [pc, #152]	; (8003c38 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d210      	bcs.n	8003bcc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 020f 	bic.w	r2, r3, #15
 8003bb2:	4921      	ldr	r1, [pc, #132]	; (8003c38 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e030      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd8:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4915      	ldr	r1, [pc, #84]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	490d      	ldr	r1, [pc, #52]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c0a:	f000 f81d 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003c0e:	4601      	mov	r1, r0
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	5cd3      	ldrb	r3, [r2, r3]
 8003c1e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c22:	4a08      	ldr	r2, [pc, #32]	; (8003c44 <HAL_RCC_ClockConfig+0x1cc>)
 8003c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7fd fc40 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023c00 	.word	0x40023c00
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	0800648c 	.word	0x0800648c
 8003c44:	20000018 	.word	0x20000018

08003c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	2300      	movs	r3, #0
 8003c58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c5e:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d007      	beq.n	8003c7a <HAL_RCC_GetSysClockFreq+0x32>
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d008      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x38>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 80b4 	bne.w	8003ddc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c74:	4b5e      	ldr	r3, [pc, #376]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c76:	60bb      	str	r3, [r7, #8]
       break;
 8003c78:	e0b3      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c7a:	4b5e      	ldr	r3, [pc, #376]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c7c:	60bb      	str	r3, [r7, #8]
      break;
 8003c7e:	e0b0      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c80:	4b5a      	ldr	r3, [pc, #360]	; (8003dec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c88:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c8a:	4b58      	ldr	r3, [pc, #352]	; (8003dec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d04a      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c96:	4b55      	ldr	r3, [pc, #340]	; (8003dec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	099b      	lsrs	r3, r3, #6
 8003c9c:	f04f 0400 	mov.w	r4, #0
 8003ca0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	ea03 0501 	and.w	r5, r3, r1
 8003cac:	ea04 0602 	and.w	r6, r4, r2
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4632      	mov	r2, r6
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	f04f 0400 	mov.w	r4, #0
 8003cbc:	0154      	lsls	r4, r2, #5
 8003cbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cc2:	014b      	lsls	r3, r1, #5
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	1b49      	subs	r1, r1, r5
 8003cca:	eb62 0206 	sbc.w	r2, r2, r6
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	f04f 0400 	mov.w	r4, #0
 8003cd6:	0194      	lsls	r4, r2, #6
 8003cd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cdc:	018b      	lsls	r3, r1, #6
 8003cde:	1a5b      	subs	r3, r3, r1
 8003ce0:	eb64 0402 	sbc.w	r4, r4, r2
 8003ce4:	f04f 0100 	mov.w	r1, #0
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	00e2      	lsls	r2, r4, #3
 8003cee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cf2:	00d9      	lsls	r1, r3, #3
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4614      	mov	r4, r2
 8003cf8:	195b      	adds	r3, r3, r5
 8003cfa:	eb44 0406 	adc.w	r4, r4, r6
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	0262      	lsls	r2, r4, #9
 8003d08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d0c:	0259      	lsls	r1, r3, #9
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4614      	mov	r4, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	4621      	mov	r1, r4
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f04f 0400 	mov.w	r4, #0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4623      	mov	r3, r4
 8003d20:	f7fc face 	bl	80002c0 <__aeabi_uldivmod>
 8003d24:	4603      	mov	r3, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	e049      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2c:	4b2f      	ldr	r3, [pc, #188]	; (8003dec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	099b      	lsrs	r3, r3, #6
 8003d32:	f04f 0400 	mov.w	r4, #0
 8003d36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	ea03 0501 	and.w	r5, r3, r1
 8003d42:	ea04 0602 	and.w	r6, r4, r2
 8003d46:	4629      	mov	r1, r5
 8003d48:	4632      	mov	r2, r6
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	f04f 0400 	mov.w	r4, #0
 8003d52:	0154      	lsls	r4, r2, #5
 8003d54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d58:	014b      	lsls	r3, r1, #5
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	1b49      	subs	r1, r1, r5
 8003d60:	eb62 0206 	sbc.w	r2, r2, r6
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	f04f 0400 	mov.w	r4, #0
 8003d6c:	0194      	lsls	r4, r2, #6
 8003d6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d72:	018b      	lsls	r3, r1, #6
 8003d74:	1a5b      	subs	r3, r3, r1
 8003d76:	eb64 0402 	sbc.w	r4, r4, r2
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	00e2      	lsls	r2, r4, #3
 8003d84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d88:	00d9      	lsls	r1, r3, #3
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	195b      	adds	r3, r3, r5
 8003d90:	eb44 0406 	adc.w	r4, r4, r6
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	02a2      	lsls	r2, r4, #10
 8003d9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003da2:	0299      	lsls	r1, r3, #10
 8003da4:	460b      	mov	r3, r1
 8003da6:	4614      	mov	r4, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	4621      	mov	r1, r4
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f04f 0400 	mov.w	r4, #0
 8003db2:	461a      	mov	r2, r3
 8003db4:	4623      	mov	r3, r4
 8003db6:	f7fc fa83 	bl	80002c0 <__aeabi_uldivmod>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	3301      	adds	r3, #1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	60bb      	str	r3, [r7, #8]
      break;
 8003dda:	e002      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003dde:	60bb      	str	r3, [r7, #8]
      break;
 8003de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003de2:	68bb      	ldr	r3, [r7, #8]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	00f42400 	.word	0x00f42400
 8003df4:	007a1200 	.word	0x007a1200

08003df8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000018 	.word	0x20000018

08003e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e14:	f7ff fff0 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e18:	4601      	mov	r1, r0
 8003e1a:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	0a9b      	lsrs	r3, r3, #10
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4a03      	ldr	r2, [pc, #12]	; (8003e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e26:	5cd3      	ldrb	r3, [r2, r3]
 8003e28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40023800 	.word	0x40023800
 8003e34:	0800649c 	.word	0x0800649c

08003e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e3c:	f7ff ffdc 	bl	8003df8 <HAL_RCC_GetHCLKFreq>
 8003e40:	4601      	mov	r1, r0
 8003e42:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	0b5b      	lsrs	r3, r3, #13
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	4a03      	ldr	r2, [pc, #12]	; (8003e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	0800649c 	.word	0x0800649c

08003e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d012      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e88:	4b69      	ldr	r3, [pc, #420]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a68      	ldr	r2, [pc, #416]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e92:	6093      	str	r3, [r2, #8]
 8003e94:	4b66      	ldr	r3, [pc, #408]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9c:	4964      	ldr	r1, [pc, #400]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d017      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eba:	4b5d      	ldr	r3, [pc, #372]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	4959      	ldr	r1, [pc, #356]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed8:	d101      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003eda:	2301      	movs	r3, #1
 8003edc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d017      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ef6:	4b4e      	ldr	r3, [pc, #312]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003efc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	494a      	ldr	r1, [pc, #296]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f14:	d101      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f22:	2301      	movs	r3, #1
 8003f24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f32:	2301      	movs	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 808b 	beq.w	800405a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f44:	4b3a      	ldr	r3, [pc, #232]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	4a39      	ldr	r2, [pc, #228]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f50:	4b37      	ldr	r3, [pc, #220]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f5c:	4b35      	ldr	r3, [pc, #212]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a34      	ldr	r2, [pc, #208]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f68:	f7fd fae4 	bl	8001534 <HAL_GetTick>
 8003f6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f70:	f7fd fae0 	bl	8001534 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e355      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f82:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f8e:	4b28      	ldr	r3, [pc, #160]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d035      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d02e      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fb6:	4b1e      	ldr	r3, [pc, #120]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	4a1d      	ldr	r2, [pc, #116]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fc2:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	4a1a      	ldr	r2, [pc, #104]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fce:	4a18      	ldr	r2, [pc, #96]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fd4:	4b16      	ldr	r3, [pc, #88]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d114      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd faa8 	bl	8001534 <HAL_GetTick>
 8003fe4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fd faa4 	bl	8001534 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e317      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0ee      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004016:	d111      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004024:	4b04      	ldr	r3, [pc, #16]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004026:	400b      	ands	r3, r1
 8004028:	4901      	ldr	r1, [pc, #4]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
 800402e:	e00b      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004030:	40023800 	.word	0x40023800
 8004034:	40007000 	.word	0x40007000
 8004038:	0ffffcff 	.word	0x0ffffcff
 800403c:	4bb0      	ldr	r3, [pc, #704]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4aaf      	ldr	r2, [pc, #700]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004042:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004046:	6093      	str	r3, [r2, #8]
 8004048:	4bad      	ldr	r3, [pc, #692]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800404a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004054:	49aa      	ldr	r1, [pc, #680]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004056:	4313      	orrs	r3, r2
 8004058:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b00      	cmp	r3, #0
 8004064:	d010      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004066:	4ba6      	ldr	r3, [pc, #664]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800406c:	4aa4      	ldr	r2, [pc, #656]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800406e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004072:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004076:	4ba2      	ldr	r3, [pc, #648]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004078:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	499f      	ldr	r1, [pc, #636]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004094:	4b9a      	ldr	r3, [pc, #616]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a2:	4997      	ldr	r1, [pc, #604]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040b6:	4b92      	ldr	r3, [pc, #584]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c4:	498e      	ldr	r1, [pc, #568]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040d8:	4b89      	ldr	r3, [pc, #548]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e6:	4986      	ldr	r1, [pc, #536]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040fa:	4b81      	ldr	r3, [pc, #516]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	497d      	ldr	r1, [pc, #500]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411c:	4b78      	ldr	r3, [pc, #480]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f023 0203 	bic.w	r2, r3, #3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	4975      	ldr	r1, [pc, #468]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800413e:	4b70      	ldr	r3, [pc, #448]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f023 020c 	bic.w	r2, r3, #12
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414c:	496c      	ldr	r1, [pc, #432]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004160:	4b67      	ldr	r3, [pc, #412]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416e:	4964      	ldr	r1, [pc, #400]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004182:	4b5f      	ldr	r3, [pc, #380]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004190:	495b      	ldr	r1, [pc, #364]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041a4:	4b56      	ldr	r3, [pc, #344]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	4953      	ldr	r1, [pc, #332]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041c6:	4b4e      	ldr	r3, [pc, #312]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	494a      	ldr	r1, [pc, #296]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041e8:	4b45      	ldr	r3, [pc, #276]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	4942      	ldr	r1, [pc, #264]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800420a:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004218:	4939      	ldr	r1, [pc, #228]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800422c:	4b34      	ldr	r3, [pc, #208]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800423a:	4931      	ldr	r1, [pc, #196]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d011      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800424e:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800425c:	4928      	ldr	r1, [pc, #160]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800426c:	d101      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800426e:	2301      	movs	r3, #1
 8004270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800427e:	2301      	movs	r3, #1
 8004280:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800428e:	4b1c      	ldr	r3, [pc, #112]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429c:	4918      	ldr	r1, [pc, #96]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042b0:	4b13      	ldr	r3, [pc, #76]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c0:	490f      	ldr	r1, [pc, #60]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d005      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042d6:	f040 80d8 	bne.w	800448a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a08      	ldr	r2, [pc, #32]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e6:	f7fd f925 	bl	8001534 <HAL_GetTick>
 80042ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042ec:	e00a      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042ee:	f7fd f921 	bl	8001534 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b64      	cmp	r3, #100	; 0x64
 80042fa:	d903      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e196      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004300:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004304:	4b6c      	ldr	r3, [pc, #432]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1ee      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d021      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	2b00      	cmp	r3, #0
 8004322:	d11d      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004324:	4b64      	ldr	r3, [pc, #400]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004332:	4b61      	ldr	r3, [pc, #388]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004338:	0e1b      	lsrs	r3, r3, #24
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	019a      	lsls	r2, r3, #6
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	431a      	orrs	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	061b      	lsls	r3, r3, #24
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	071b      	lsls	r3, r3, #28
 8004358:	4957      	ldr	r1, [pc, #348]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d004      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800437e:	2b00      	cmp	r3, #0
 8004380:	d02e      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438a:	d129      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800438c:	4b4a      	ldr	r3, [pc, #296]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800438e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004392:	0c1b      	lsrs	r3, r3, #16
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a0:	0f1b      	lsrs	r3, r3, #28
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	019a      	lsls	r2, r3, #6
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	061b      	lsls	r3, r3, #24
 80043ba:	431a      	orrs	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	071b      	lsls	r3, r3, #28
 80043c0:	493d      	ldr	r1, [pc, #244]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043c8:	4b3b      	ldr	r3, [pc, #236]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ce:	f023 021f 	bic.w	r2, r3, #31
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	3b01      	subs	r3, #1
 80043d8:	4937      	ldr	r1, [pc, #220]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01d      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043ec:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f2:	0e1b      	lsrs	r3, r3, #24
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043fa:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004400:	0f1b      	lsrs	r3, r3, #28
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	019a      	lsls	r2, r3, #6
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	041b      	lsls	r3, r3, #16
 8004414:	431a      	orrs	r2, r3
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	061b      	lsls	r3, r3, #24
 800441a:	431a      	orrs	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	071b      	lsls	r3, r3, #28
 8004420:	4925      	ldr	r1, [pc, #148]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d011      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	019a      	lsls	r2, r3, #6
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	061b      	lsls	r3, r3, #24
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	071b      	lsls	r3, r3, #28
 8004450:	4919      	ldr	r1, [pc, #100]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004458:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800445e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004464:	f7fd f866 	bl	8001534 <HAL_GetTick>
 8004468:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800446a:	e008      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800446c:	f7fd f862 	bl	8001534 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0d7      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800447e:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b01      	cmp	r3, #1
 800448e:	f040 80cd 	bne.w	800462c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800449e:	f7fd f849 	bl	8001534 <HAL_GetTick>
 80044a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044a4:	e00a      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044a6:	f7fd f845 	bl	8001534 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b64      	cmp	r3, #100	; 0x64
 80044b2:	d903      	bls.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e0ba      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80044b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044bc:	4b5e      	ldr	r3, [pc, #376]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044c8:	d0ed      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d02e      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d12a      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044f2:	4b51      	ldr	r3, [pc, #324]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004500:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	0f1b      	lsrs	r3, r3, #28
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	019a      	lsls	r2, r3, #6
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	041b      	lsls	r3, r3, #16
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	061b      	lsls	r3, r3, #24
 8004520:	431a      	orrs	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	4944      	ldr	r1, [pc, #272]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800452e:	4b42      	ldr	r3, [pc, #264]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004534:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	3b01      	subs	r3, #1
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	493d      	ldr	r1, [pc, #244]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d022      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800455c:	d11d      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800455e:	4b36      	ldr	r3, [pc, #216]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	0e1b      	lsrs	r3, r3, #24
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800456c:	4b32      	ldr	r3, [pc, #200]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	0f1b      	lsrs	r3, r3, #28
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	019a      	lsls	r2, r3, #6
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	431a      	orrs	r2, r3
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	061b      	lsls	r3, r3, #24
 800458c:	431a      	orrs	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	071b      	lsls	r3, r3, #28
 8004592:	4929      	ldr	r1, [pc, #164]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d028      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	0e1b      	lsrs	r3, r3, #24
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045b4:	4b20      	ldr	r3, [pc, #128]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	0c1b      	lsrs	r3, r3, #16
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	019a      	lsls	r2, r3, #6
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	431a      	orrs	r2, r3
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	061b      	lsls	r3, r3, #24
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	071b      	lsls	r3, r3, #28
 80045da:	4917      	ldr	r1, [pc, #92]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045e2:	4b15      	ldr	r3, [pc, #84]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	4911      	ldr	r1, [pc, #68]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045f8:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0e      	ldr	r2, [pc, #56]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004604:	f7fc ff96 	bl	8001534 <HAL_GetTick>
 8004608:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800460c:	f7fc ff92 	bl	8001534 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d901      	bls.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e007      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800462a:	d1ef      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800

0800463c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e01d      	b.n	800468a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fc fdca 	bl	80011fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f000 fa36 	bl	8004aec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <HAL_TIM_Base_Start_IT+0x50>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b06      	cmp	r3, #6
 80046bc:	d00b      	beq.n	80046d6 <HAL_TIM_Base_Start_IT+0x42>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d007      	beq.n	80046d6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	00010007 	.word	0x00010007

080046e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d122      	bne.n	8004744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b02      	cmp	r3, #2
 800470a:	d11b      	bne.n	8004744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0202 	mvn.w	r2, #2
 8004714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9c0 	bl	8004ab0 <HAL_TIM_IC_CaptureCallback>
 8004730:	e005      	b.n	800473e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9b2 	bl	8004a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f9c3 	bl	8004ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b04      	cmp	r3, #4
 8004750:	d122      	bne.n	8004798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d11b      	bne.n	8004798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0204 	mvn.w	r2, #4
 8004768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f996 	bl	8004ab0 <HAL_TIM_IC_CaptureCallback>
 8004784:	e005      	b.n	8004792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f988 	bl	8004a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f999 	bl	8004ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d122      	bne.n	80047ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d11b      	bne.n	80047ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0208 	mvn.w	r2, #8
 80047bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2204      	movs	r2, #4
 80047c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f96c 	bl	8004ab0 <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f95e 	bl	8004a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f96f 	bl	8004ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d122      	bne.n	8004840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b10      	cmp	r3, #16
 8004806:	d11b      	bne.n	8004840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0210 	mvn.w	r2, #16
 8004810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2208      	movs	r2, #8
 8004816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f942 	bl	8004ab0 <HAL_TIM_IC_CaptureCallback>
 800482c:	e005      	b.n	800483a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f934 	bl	8004a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f945 	bl	8004ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10e      	bne.n	800486c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	d107      	bne.n	800486c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0201 	mvn.w	r2, #1
 8004864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc fa9e 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b80      	cmp	r3, #128	; 0x80
 8004878:	d10e      	bne.n	8004898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d107      	bne.n	8004898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 faca 	bl	8004e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a6:	d10e      	bne.n	80048c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b80      	cmp	r3, #128	; 0x80
 80048b4:	d107      	bne.n	80048c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fabd 	bl	8004e40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d10e      	bne.n	80048f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b40      	cmp	r3, #64	; 0x40
 80048e0:	d107      	bne.n	80048f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f8f3 	bl	8004ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d10e      	bne.n	800491e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b20      	cmp	r3, #32
 800490c:	d107      	bne.n	800491e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f06f 0220 	mvn.w	r2, #32
 8004916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa7d 	bl	8004e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_TIM_ConfigClockSource+0x18>
 800493c:	2302      	movs	r3, #2
 800493e:	e0a6      	b.n	8004a8e <HAL_TIM_ConfigClockSource+0x166>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4b4f      	ldr	r3, [pc, #316]	; (8004a98 <HAL_TIM_ConfigClockSource+0x170>)
 800495c:	4013      	ands	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004966:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d067      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0x120>
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d80b      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x6c>
 800497c:	2b10      	cmp	r3, #16
 800497e:	d073      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0x140>
 8004980:	2b10      	cmp	r3, #16
 8004982:	d802      	bhi.n	800498a <HAL_TIM_ConfigClockSource+0x62>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d06f      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004988:	e078      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800498a:	2b20      	cmp	r3, #32
 800498c:	d06c      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0x140>
 800498e:	2b30      	cmp	r3, #48	; 0x30
 8004990:	d06a      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004992:	e073      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004994:	2b70      	cmp	r3, #112	; 0x70
 8004996:	d00d      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0x8c>
 8004998:	2b70      	cmp	r3, #112	; 0x70
 800499a:	d804      	bhi.n	80049a6 <HAL_TIM_ConfigClockSource+0x7e>
 800499c:	2b50      	cmp	r3, #80	; 0x50
 800499e:	d033      	beq.n	8004a08 <HAL_TIM_ConfigClockSource+0xe0>
 80049a0:	2b60      	cmp	r3, #96	; 0x60
 80049a2:	d041      	beq.n	8004a28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80049a4:	e06a      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049aa:	d066      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x152>
 80049ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b0:	d017      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80049b2:	e063      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6899      	ldr	r1, [r3, #8]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f000 f9ac 	bl	8004d20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	609a      	str	r2, [r3, #8]
      break;
 80049e0:	e04c      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6899      	ldr	r1, [r3, #8]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f000 f995 	bl	8004d20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a04:	609a      	str	r2, [r3, #8]
      break;
 8004a06:	e039      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	6859      	ldr	r1, [r3, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	461a      	mov	r2, r3
 8004a16:	f000 f909 	bl	8004c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2150      	movs	r1, #80	; 0x50
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 f962 	bl	8004cea <TIM_ITRx_SetConfig>
      break;
 8004a26:	e029      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	461a      	mov	r2, r3
 8004a36:	f000 f928 	bl	8004c8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2160      	movs	r1, #96	; 0x60
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 f952 	bl	8004cea <TIM_ITRx_SetConfig>
      break;
 8004a46:	e019      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6859      	ldr	r1, [r3, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	461a      	mov	r2, r3
 8004a56:	f000 f8e9 	bl	8004c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2140      	movs	r1, #64	; 0x40
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f942 	bl	8004cea <TIM_ITRx_SetConfig>
      break;
 8004a66:	e009      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f000 f939 	bl	8004cea <TIM_ITRx_SetConfig>
      break;
 8004a78:	e000      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	fffeff88 	.word	0xfffeff88

08004a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a40      	ldr	r2, [pc, #256]	; (8004c00 <TIM_Base_SetConfig+0x114>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d013      	beq.n	8004b2c <TIM_Base_SetConfig+0x40>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0a:	d00f      	beq.n	8004b2c <TIM_Base_SetConfig+0x40>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a3d      	ldr	r2, [pc, #244]	; (8004c04 <TIM_Base_SetConfig+0x118>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <TIM_Base_SetConfig+0x40>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a3c      	ldr	r2, [pc, #240]	; (8004c08 <TIM_Base_SetConfig+0x11c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <TIM_Base_SetConfig+0x40>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a3b      	ldr	r2, [pc, #236]	; (8004c0c <TIM_Base_SetConfig+0x120>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_Base_SetConfig+0x40>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a3a      	ldr	r2, [pc, #232]	; (8004c10 <TIM_Base_SetConfig+0x124>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d108      	bne.n	8004b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <TIM_Base_SetConfig+0x114>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d02b      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4c:	d027      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a2c      	ldr	r2, [pc, #176]	; (8004c04 <TIM_Base_SetConfig+0x118>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d023      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a2b      	ldr	r2, [pc, #172]	; (8004c08 <TIM_Base_SetConfig+0x11c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01f      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a2a      	ldr	r2, [pc, #168]	; (8004c0c <TIM_Base_SetConfig+0x120>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01b      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a29      	ldr	r2, [pc, #164]	; (8004c10 <TIM_Base_SetConfig+0x124>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d017      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a28      	ldr	r2, [pc, #160]	; (8004c14 <TIM_Base_SetConfig+0x128>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a27      	ldr	r2, [pc, #156]	; (8004c18 <TIM_Base_SetConfig+0x12c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00f      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a26      	ldr	r2, [pc, #152]	; (8004c1c <TIM_Base_SetConfig+0x130>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00b      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a25      	ldr	r2, [pc, #148]	; (8004c20 <TIM_Base_SetConfig+0x134>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d007      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a24      	ldr	r2, [pc, #144]	; (8004c24 <TIM_Base_SetConfig+0x138>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d003      	beq.n	8004b9e <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a23      	ldr	r2, [pc, #140]	; (8004c28 <TIM_Base_SetConfig+0x13c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d108      	bne.n	8004bb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a0a      	ldr	r2, [pc, #40]	; (8004c00 <TIM_Base_SetConfig+0x114>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_Base_SetConfig+0xf8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a0c      	ldr	r2, [pc, #48]	; (8004c10 <TIM_Base_SetConfig+0x124>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d103      	bne.n	8004bec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	615a      	str	r2, [r3, #20]
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800
 8004c0c:	40000c00 	.word	0x40000c00
 8004c10:	40010400 	.word	0x40010400
 8004c14:	40014000 	.word	0x40014000
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800
 8004c20:	40001800 	.word	0x40001800
 8004c24:	40001c00 	.word	0x40001c00
 8004c28:	40002000 	.word	0x40002000

08004c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0201 	bic.w	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f023 030a 	bic.w	r3, r3, #10
 8004c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b087      	sub	sp, #28
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f023 0210 	bic.w	r2, r3, #16
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	031b      	lsls	r3, r3, #12
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b085      	sub	sp, #20
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f043 0307 	orr.w	r3, r3, #7
 8004d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e045      	b.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1b      	ldr	r2, [pc, #108]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d108      	bne.n	8004dbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004db2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40010400 	.word	0x40010400

08004e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e040      	b.n	8004ee8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fc fa14 	bl	80012a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2224      	movs	r2, #36	; 0x24
 8004e80:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f82c 	bl	8004ef0 <UART_SetConfig>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e022      	b.n	8004ee8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fac4 	bl	8005438 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ece:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fb4b 	bl	800557c <UART_CheckIdleState>
 8004ee6:	4603      	mov	r3, r0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	4bb1      	ldr	r3, [pc, #708]	; (80051e4 <UART_SetConfig+0x2f4>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	6939      	ldr	r1, [r7, #16]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a9f      	ldr	r2, [pc, #636]	; (80051e8 <UART_SetConfig+0x2f8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d121      	bne.n	8004fb4 <UART_SetConfig+0xc4>
 8004f70:	4b9e      	ldr	r3, [pc, #632]	; (80051ec <UART_SetConfig+0x2fc>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d816      	bhi.n	8004fac <UART_SetConfig+0xbc>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <UART_SetConfig+0x94>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004fa1 	.word	0x08004fa1
 8004f8c:	08004f9b 	.word	0x08004f9b
 8004f90:	08004fa7 	.word	0x08004fa7
 8004f94:	2301      	movs	r3, #1
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e151      	b.n	800523e <UART_SetConfig+0x34e>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e14e      	b.n	800523e <UART_SetConfig+0x34e>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e14b      	b.n	800523e <UART_SetConfig+0x34e>
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e148      	b.n	800523e <UART_SetConfig+0x34e>
 8004fac:	2310      	movs	r3, #16
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	bf00      	nop
 8004fb2:	e144      	b.n	800523e <UART_SetConfig+0x34e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a8d      	ldr	r2, [pc, #564]	; (80051f0 <UART_SetConfig+0x300>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d134      	bne.n	8005028 <UART_SetConfig+0x138>
 8004fbe:	4b8b      	ldr	r3, [pc, #556]	; (80051ec <UART_SetConfig+0x2fc>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	f003 030c 	and.w	r3, r3, #12
 8004fc8:	2b0c      	cmp	r3, #12
 8004fca:	d829      	bhi.n	8005020 <UART_SetConfig+0x130>
 8004fcc:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <UART_SetConfig+0xe4>)
 8004fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd2:	bf00      	nop
 8004fd4:	08005009 	.word	0x08005009
 8004fd8:	08005021 	.word	0x08005021
 8004fdc:	08005021 	.word	0x08005021
 8004fe0:	08005021 	.word	0x08005021
 8004fe4:	08005015 	.word	0x08005015
 8004fe8:	08005021 	.word	0x08005021
 8004fec:	08005021 	.word	0x08005021
 8004ff0:	08005021 	.word	0x08005021
 8004ff4:	0800500f 	.word	0x0800500f
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005021 	.word	0x08005021
 8005000:	08005021 	.word	0x08005021
 8005004:	0800501b 	.word	0x0800501b
 8005008:	2300      	movs	r3, #0
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e117      	b.n	800523e <UART_SetConfig+0x34e>
 800500e:	2302      	movs	r3, #2
 8005010:	77fb      	strb	r3, [r7, #31]
 8005012:	e114      	b.n	800523e <UART_SetConfig+0x34e>
 8005014:	2304      	movs	r3, #4
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e111      	b.n	800523e <UART_SetConfig+0x34e>
 800501a:	2308      	movs	r3, #8
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e10e      	b.n	800523e <UART_SetConfig+0x34e>
 8005020:	2310      	movs	r3, #16
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	bf00      	nop
 8005026:	e10a      	b.n	800523e <UART_SetConfig+0x34e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a71      	ldr	r2, [pc, #452]	; (80051f4 <UART_SetConfig+0x304>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d120      	bne.n	8005074 <UART_SetConfig+0x184>
 8005032:	4b6e      	ldr	r3, [pc, #440]	; (80051ec <UART_SetConfig+0x2fc>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005038:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800503c:	2b10      	cmp	r3, #16
 800503e:	d00f      	beq.n	8005060 <UART_SetConfig+0x170>
 8005040:	2b10      	cmp	r3, #16
 8005042:	d802      	bhi.n	800504a <UART_SetConfig+0x15a>
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <UART_SetConfig+0x164>
 8005048:	e010      	b.n	800506c <UART_SetConfig+0x17c>
 800504a:	2b20      	cmp	r3, #32
 800504c:	d005      	beq.n	800505a <UART_SetConfig+0x16a>
 800504e:	2b30      	cmp	r3, #48	; 0x30
 8005050:	d009      	beq.n	8005066 <UART_SetConfig+0x176>
 8005052:	e00b      	b.n	800506c <UART_SetConfig+0x17c>
 8005054:	2300      	movs	r3, #0
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	e0f1      	b.n	800523e <UART_SetConfig+0x34e>
 800505a:	2302      	movs	r3, #2
 800505c:	77fb      	strb	r3, [r7, #31]
 800505e:	e0ee      	b.n	800523e <UART_SetConfig+0x34e>
 8005060:	2304      	movs	r3, #4
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e0eb      	b.n	800523e <UART_SetConfig+0x34e>
 8005066:	2308      	movs	r3, #8
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e0e8      	b.n	800523e <UART_SetConfig+0x34e>
 800506c:	2310      	movs	r3, #16
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	bf00      	nop
 8005072:	e0e4      	b.n	800523e <UART_SetConfig+0x34e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a5f      	ldr	r2, [pc, #380]	; (80051f8 <UART_SetConfig+0x308>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d120      	bne.n	80050c0 <UART_SetConfig+0x1d0>
 800507e:	4b5b      	ldr	r3, [pc, #364]	; (80051ec <UART_SetConfig+0x2fc>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d00f      	beq.n	80050ac <UART_SetConfig+0x1bc>
 800508c:	2b40      	cmp	r3, #64	; 0x40
 800508e:	d802      	bhi.n	8005096 <UART_SetConfig+0x1a6>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <UART_SetConfig+0x1b0>
 8005094:	e010      	b.n	80050b8 <UART_SetConfig+0x1c8>
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d005      	beq.n	80050a6 <UART_SetConfig+0x1b6>
 800509a:	2bc0      	cmp	r3, #192	; 0xc0
 800509c:	d009      	beq.n	80050b2 <UART_SetConfig+0x1c2>
 800509e:	e00b      	b.n	80050b8 <UART_SetConfig+0x1c8>
 80050a0:	2300      	movs	r3, #0
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e0cb      	b.n	800523e <UART_SetConfig+0x34e>
 80050a6:	2302      	movs	r3, #2
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e0c8      	b.n	800523e <UART_SetConfig+0x34e>
 80050ac:	2304      	movs	r3, #4
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e0c5      	b.n	800523e <UART_SetConfig+0x34e>
 80050b2:	2308      	movs	r3, #8
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e0c2      	b.n	800523e <UART_SetConfig+0x34e>
 80050b8:	2310      	movs	r3, #16
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	bf00      	nop
 80050be:	e0be      	b.n	800523e <UART_SetConfig+0x34e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a4d      	ldr	r2, [pc, #308]	; (80051fc <UART_SetConfig+0x30c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d124      	bne.n	8005114 <UART_SetConfig+0x224>
 80050ca:	4b48      	ldr	r3, [pc, #288]	; (80051ec <UART_SetConfig+0x2fc>)
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d8:	d012      	beq.n	8005100 <UART_SetConfig+0x210>
 80050da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050de:	d802      	bhi.n	80050e6 <UART_SetConfig+0x1f6>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <UART_SetConfig+0x204>
 80050e4:	e012      	b.n	800510c <UART_SetConfig+0x21c>
 80050e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ea:	d006      	beq.n	80050fa <UART_SetConfig+0x20a>
 80050ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f0:	d009      	beq.n	8005106 <UART_SetConfig+0x216>
 80050f2:	e00b      	b.n	800510c <UART_SetConfig+0x21c>
 80050f4:	2300      	movs	r3, #0
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e0a1      	b.n	800523e <UART_SetConfig+0x34e>
 80050fa:	2302      	movs	r3, #2
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e09e      	b.n	800523e <UART_SetConfig+0x34e>
 8005100:	2304      	movs	r3, #4
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e09b      	b.n	800523e <UART_SetConfig+0x34e>
 8005106:	2308      	movs	r3, #8
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e098      	b.n	800523e <UART_SetConfig+0x34e>
 800510c:	2310      	movs	r3, #16
 800510e:	77fb      	strb	r3, [r7, #31]
 8005110:	bf00      	nop
 8005112:	e094      	b.n	800523e <UART_SetConfig+0x34e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a39      	ldr	r2, [pc, #228]	; (8005200 <UART_SetConfig+0x310>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d124      	bne.n	8005168 <UART_SetConfig+0x278>
 800511e:	4b33      	ldr	r3, [pc, #204]	; (80051ec <UART_SetConfig+0x2fc>)
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005124:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800512c:	d012      	beq.n	8005154 <UART_SetConfig+0x264>
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005132:	d802      	bhi.n	800513a <UART_SetConfig+0x24a>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <UART_SetConfig+0x258>
 8005138:	e012      	b.n	8005160 <UART_SetConfig+0x270>
 800513a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513e:	d006      	beq.n	800514e <UART_SetConfig+0x25e>
 8005140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005144:	d009      	beq.n	800515a <UART_SetConfig+0x26a>
 8005146:	e00b      	b.n	8005160 <UART_SetConfig+0x270>
 8005148:	2301      	movs	r3, #1
 800514a:	77fb      	strb	r3, [r7, #31]
 800514c:	e077      	b.n	800523e <UART_SetConfig+0x34e>
 800514e:	2302      	movs	r3, #2
 8005150:	77fb      	strb	r3, [r7, #31]
 8005152:	e074      	b.n	800523e <UART_SetConfig+0x34e>
 8005154:	2304      	movs	r3, #4
 8005156:	77fb      	strb	r3, [r7, #31]
 8005158:	e071      	b.n	800523e <UART_SetConfig+0x34e>
 800515a:	2308      	movs	r3, #8
 800515c:	77fb      	strb	r3, [r7, #31]
 800515e:	e06e      	b.n	800523e <UART_SetConfig+0x34e>
 8005160:	2310      	movs	r3, #16
 8005162:	77fb      	strb	r3, [r7, #31]
 8005164:	bf00      	nop
 8005166:	e06a      	b.n	800523e <UART_SetConfig+0x34e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a25      	ldr	r2, [pc, #148]	; (8005204 <UART_SetConfig+0x314>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d124      	bne.n	80051bc <UART_SetConfig+0x2cc>
 8005172:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <UART_SetConfig+0x2fc>)
 8005174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005178:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005180:	d012      	beq.n	80051a8 <UART_SetConfig+0x2b8>
 8005182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005186:	d802      	bhi.n	800518e <UART_SetConfig+0x29e>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <UART_SetConfig+0x2ac>
 800518c:	e012      	b.n	80051b4 <UART_SetConfig+0x2c4>
 800518e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005192:	d006      	beq.n	80051a2 <UART_SetConfig+0x2b2>
 8005194:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005198:	d009      	beq.n	80051ae <UART_SetConfig+0x2be>
 800519a:	e00b      	b.n	80051b4 <UART_SetConfig+0x2c4>
 800519c:	2300      	movs	r3, #0
 800519e:	77fb      	strb	r3, [r7, #31]
 80051a0:	e04d      	b.n	800523e <UART_SetConfig+0x34e>
 80051a2:	2302      	movs	r3, #2
 80051a4:	77fb      	strb	r3, [r7, #31]
 80051a6:	e04a      	b.n	800523e <UART_SetConfig+0x34e>
 80051a8:	2304      	movs	r3, #4
 80051aa:	77fb      	strb	r3, [r7, #31]
 80051ac:	e047      	b.n	800523e <UART_SetConfig+0x34e>
 80051ae:	2308      	movs	r3, #8
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	e044      	b.n	800523e <UART_SetConfig+0x34e>
 80051b4:	2310      	movs	r3, #16
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	bf00      	nop
 80051ba:	e040      	b.n	800523e <UART_SetConfig+0x34e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a11      	ldr	r2, [pc, #68]	; (8005208 <UART_SetConfig+0x318>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d139      	bne.n	800523a <UART_SetConfig+0x34a>
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <UART_SetConfig+0x2fc>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051d4:	d027      	beq.n	8005226 <UART_SetConfig+0x336>
 80051d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051da:	d817      	bhi.n	800520c <UART_SetConfig+0x31c>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01c      	beq.n	800521a <UART_SetConfig+0x32a>
 80051e0:	e027      	b.n	8005232 <UART_SetConfig+0x342>
 80051e2:	bf00      	nop
 80051e4:	efff69f3 	.word	0xefff69f3
 80051e8:	40011000 	.word	0x40011000
 80051ec:	40023800 	.word	0x40023800
 80051f0:	40004400 	.word	0x40004400
 80051f4:	40004800 	.word	0x40004800
 80051f8:	40004c00 	.word	0x40004c00
 80051fc:	40005000 	.word	0x40005000
 8005200:	40011400 	.word	0x40011400
 8005204:	40007800 	.word	0x40007800
 8005208:	40007c00 	.word	0x40007c00
 800520c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005210:	d006      	beq.n	8005220 <UART_SetConfig+0x330>
 8005212:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005216:	d009      	beq.n	800522c <UART_SetConfig+0x33c>
 8005218:	e00b      	b.n	8005232 <UART_SetConfig+0x342>
 800521a:	2300      	movs	r3, #0
 800521c:	77fb      	strb	r3, [r7, #31]
 800521e:	e00e      	b.n	800523e <UART_SetConfig+0x34e>
 8005220:	2302      	movs	r3, #2
 8005222:	77fb      	strb	r3, [r7, #31]
 8005224:	e00b      	b.n	800523e <UART_SetConfig+0x34e>
 8005226:	2304      	movs	r3, #4
 8005228:	77fb      	strb	r3, [r7, #31]
 800522a:	e008      	b.n	800523e <UART_SetConfig+0x34e>
 800522c:	2308      	movs	r3, #8
 800522e:	77fb      	strb	r3, [r7, #31]
 8005230:	e005      	b.n	800523e <UART_SetConfig+0x34e>
 8005232:	2310      	movs	r3, #16
 8005234:	77fb      	strb	r3, [r7, #31]
 8005236:	bf00      	nop
 8005238:	e001      	b.n	800523e <UART_SetConfig+0x34e>
 800523a:	2310      	movs	r3, #16
 800523c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005246:	d17c      	bne.n	8005342 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8005248:	7ffb      	ldrb	r3, [r7, #31]
 800524a:	2b08      	cmp	r3, #8
 800524c:	d859      	bhi.n	8005302 <UART_SetConfig+0x412>
 800524e:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <UART_SetConfig+0x364>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	08005279 	.word	0x08005279
 8005258:	08005297 	.word	0x08005297
 800525c:	080052b5 	.word	0x080052b5
 8005260:	08005303 	.word	0x08005303
 8005264:	080052cd 	.word	0x080052cd
 8005268:	08005303 	.word	0x08005303
 800526c:	08005303 	.word	0x08005303
 8005270:	08005303 	.word	0x08005303
 8005274:	080052eb 	.word	0x080052eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005278:	f7fe fdca 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 800527c:	4603      	mov	r3, r0
 800527e:	005a      	lsls	r2, r3, #1
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	441a      	add	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	b29b      	uxth	r3, r3
 8005292:	61bb      	str	r3, [r7, #24]
        break;
 8005294:	e038      	b.n	8005308 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005296:	f7fe fdcf 	bl	8003e38 <HAL_RCC_GetPCLK2Freq>
 800529a:	4603      	mov	r3, r0
 800529c:	005a      	lsls	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	441a      	add	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	61bb      	str	r3, [r7, #24]
        break;
 80052b2:	e029      	b.n	8005308 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	085a      	lsrs	r2, r3, #1
 80052ba:	4b5d      	ldr	r3, [pc, #372]	; (8005430 <UART_SetConfig+0x540>)
 80052bc:	4413      	add	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6852      	ldr	r2, [r2, #4]
 80052c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	61bb      	str	r3, [r7, #24]
        break;
 80052ca:	e01d      	b.n	8005308 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80052cc:	f7fe fcbc 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 80052d0:	4603      	mov	r3, r0
 80052d2:	005a      	lsls	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	085b      	lsrs	r3, r3, #1
 80052da:	441a      	add	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	61bb      	str	r3, [r7, #24]
        break;
 80052e8:	e00e      	b.n	8005308 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	61bb      	str	r3, [r7, #24]
        break;
 8005300:	e002      	b.n	8005308 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	75fb      	strb	r3, [r7, #23]
        break;
 8005306:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b0f      	cmp	r3, #15
 800530c:	d916      	bls.n	800533c <UART_SetConfig+0x44c>
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005314:	d212      	bcs.n	800533c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f023 030f 	bic.w	r3, r3, #15
 800531e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	b29b      	uxth	r3, r3
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	b29a      	uxth	r2, r3
 800532c:	89fb      	ldrh	r3, [r7, #14]
 800532e:	4313      	orrs	r3, r2
 8005330:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	89fa      	ldrh	r2, [r7, #14]
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	e06e      	b.n	800541a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	75fb      	strb	r3, [r7, #23]
 8005340:	e06b      	b.n	800541a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8005342:	7ffb      	ldrb	r3, [r7, #31]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d857      	bhi.n	80053f8 <UART_SetConfig+0x508>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0x460>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005375 	.word	0x08005375
 8005354:	08005391 	.word	0x08005391
 8005358:	080053ad 	.word	0x080053ad
 800535c:	080053f9 	.word	0x080053f9
 8005360:	080053c5 	.word	0x080053c5
 8005364:	080053f9 	.word	0x080053f9
 8005368:	080053f9 	.word	0x080053f9
 800536c:	080053f9 	.word	0x080053f9
 8005370:	080053e1 	.word	0x080053e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005374:	f7fe fd4c 	bl	8003e10 <HAL_RCC_GetPCLK1Freq>
 8005378:	4602      	mov	r2, r0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	441a      	add	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	fbb2 f3f3 	udiv	r3, r2, r3
 800538a:	b29b      	uxth	r3, r3
 800538c:	61bb      	str	r3, [r7, #24]
        break;
 800538e:	e036      	b.n	80053fe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005390:	f7fe fd52 	bl	8003e38 <HAL_RCC_GetPCLK2Freq>
 8005394:	4602      	mov	r2, r0
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	441a      	add	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	61bb      	str	r3, [r7, #24]
        break;
 80053aa:	e028      	b.n	80053fe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	085a      	lsrs	r2, r3, #1
 80053b2:	4b20      	ldr	r3, [pc, #128]	; (8005434 <UART_SetConfig+0x544>)
 80053b4:	4413      	add	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6852      	ldr	r2, [r2, #4]
 80053ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80053be:	b29b      	uxth	r3, r3
 80053c0:	61bb      	str	r3, [r7, #24]
        break;
 80053c2:	e01c      	b.n	80053fe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80053c4:	f7fe fc40 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	085b      	lsrs	r3, r3, #1
 80053d0:	441a      	add	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053da:	b29b      	uxth	r3, r3
 80053dc:	61bb      	str	r3, [r7, #24]
        break;
 80053de:	e00e      	b.n	80053fe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	085b      	lsrs	r3, r3, #1
 80053e6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	61bb      	str	r3, [r7, #24]
        break;
 80053f6:	e002      	b.n	80053fe <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	75fb      	strb	r3, [r7, #23]
        break;
 80053fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b0f      	cmp	r3, #15
 8005402:	d908      	bls.n	8005416 <UART_SetConfig+0x526>
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540a:	d204      	bcs.n	8005416 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	60da      	str	r2, [r3, #12]
 8005414:	e001      	b.n	800541a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005426:	7dfb      	ldrb	r3, [r7, #23]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3720      	adds	r7, #32
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	01e84800 	.word	0x01e84800
 8005434:	00f42400 	.word	0x00f42400

08005438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01a      	beq.n	800554e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005536:	d10a      	bne.n	800554e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	605a      	str	r2, [r3, #4]
  }
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af02      	add	r7, sp, #8
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800558a:	f7fb ffd3 	bl	8001534 <HAL_GetTick>
 800558e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b08      	cmp	r3, #8
 800559c:	d10e      	bne.n	80055bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800559e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f814 	bl	80055da <UART_WaitOnFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e00a      	b.n	80055d2 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	4613      	mov	r3, r2
 80055e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ea:	e02a      	b.n	8005642 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f2:	d026      	beq.n	8005642 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f4:	f7fb ff9e 	bl	8001534 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	429a      	cmp	r2, r3
 8005602:	d302      	bcc.n	800560a <UART_WaitOnFlagUntilTimeout+0x30>
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d11b      	bne.n	8005642 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005618:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0201 	bic.w	r2, r2, #1
 8005628:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2220      	movs	r2, #32
 800562e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e00f      	b.n	8005662 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4013      	ands	r3, r2
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	429a      	cmp	r2, r3
 8005650:	bf0c      	ite	eq
 8005652:	2301      	moveq	r3, #1
 8005654:	2300      	movne	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	429a      	cmp	r2, r3
 800565e:	d0c5      	beq.n	80055ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800566c:	b084      	sub	sp, #16
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	f107 001c 	add.w	r0, r7, #28
 800567a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	2b01      	cmp	r3, #1
 8005682:	d120      	bne.n	80056c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	4b20      	ldr	r3, [pc, #128]	; (8005718 <USB_CoreInit+0xac>)
 8005696:	4013      	ands	r3, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d105      	bne.n	80056ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa60 	bl	8005b80 <USB_CoreReset>
 80056c0:	4603      	mov	r3, r0
 80056c2:	73fb      	strb	r3, [r7, #15]
 80056c4:	e010      	b.n	80056e8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fa54 	bl	8005b80 <USB_CoreReset>
 80056d8:	4603      	mov	r3, r0
 80056da:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d10b      	bne.n	8005706 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f043 0206 	orr.w	r2, r3, #6
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f043 0220 	orr.w	r2, r3, #32
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005706:	7bfb      	ldrb	r3, [r7, #15]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005712:	b004      	add	sp, #16
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	ffbdffbf 	.word	0xffbdffbf

0800571c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f023 0201 	bic.w	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d106      	bne.n	800576a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60da      	str	r2, [r3, #12]
 8005768:	e00b      	b.n	8005782 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	60da      	str	r2, [r3, #12]
 800577c:	e001      	b.n	8005782 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e003      	b.n	800578a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005782:	2032      	movs	r0, #50	; 0x32
 8005784:	f7fb fee2 	bl	800154c <HAL_Delay>

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005794:	b084      	sub	sp, #16
 8005796:	b580      	push	{r7, lr}
 8005798:	b086      	sub	sp, #24
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	e009      	b.n	80057c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	3340      	adds	r3, #64	; 0x40
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	2200      	movs	r2, #0
 80057c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	3301      	adds	r3, #1
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b0e      	cmp	r3, #14
 80057cc:	d9f2      	bls.n	80057b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d112      	bne.n	80057fa <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e005      	b.n	8005806 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800580c:	461a      	mov	r2, r3
 800580e:	2300      	movs	r3, #0
 8005810:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005818:	4619      	mov	r1, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005820:	461a      	mov	r2, r3
 8005822:	680b      	ldr	r3, [r1, #0]
 8005824:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	2b01      	cmp	r3, #1
 800582a:	d10c      	bne.n	8005846 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d104      	bne.n	800583c <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005832:	2100      	movs	r1, #0
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f971 	bl	8005b1c <USB_SetDevSpeed>
 800583a:	e018      	b.n	800586e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800583c:	2101      	movs	r1, #1
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f96c 	bl	8005b1c <USB_SetDevSpeed>
 8005844:	e013      	b.n	800586e <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	2b03      	cmp	r3, #3
 800584a:	d10c      	bne.n	8005866 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005852:	2100      	movs	r1, #0
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f961 	bl	8005b1c <USB_SetDevSpeed>
 800585a:	e008      	b.n	800586e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800585c:	2101      	movs	r1, #1
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f95c 	bl	8005b1c <USB_SetDevSpeed>
 8005864:	e003      	b.n	800586e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005866:	2103      	movs	r1, #3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f957 	bl	8005b1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800586e:	2110      	movs	r1, #16
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f90b 	bl	8005a8c <USB_FlushTxFifo>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f929 	bl	8005ad8 <USB_FlushRxFifo>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005896:	461a      	mov	r2, r3
 8005898:	2300      	movs	r3, #0
 800589a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a2:	461a      	mov	r2, r3
 80058a4:	2300      	movs	r3, #0
 80058a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	461a      	mov	r2, r3
 80058b0:	2300      	movs	r3, #0
 80058b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	e043      	b.n	8005942 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058d0:	d118      	bne.n	8005904 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	461a      	mov	r2, r3
 80058e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	e013      	b.n	8005916 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fa:	461a      	mov	r2, r3
 80058fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e008      	b.n	8005916 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005910:	461a      	mov	r2, r3
 8005912:	2300      	movs	r3, #0
 8005914:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005922:	461a      	mov	r2, r3
 8005924:	2300      	movs	r3, #0
 8005926:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	461a      	mov	r2, r3
 8005936:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800593a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	3301      	adds	r3, #1
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	429a      	cmp	r2, r3
 8005948:	d3b7      	bcc.n	80058ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800594a:	2300      	movs	r3, #0
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	e043      	b.n	80059d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005966:	d118      	bne.n	800599a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	461a      	mov	r2, r3
 800597c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e013      	b.n	80059ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	461a      	mov	r2, r3
 8005992:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	e008      	b.n	80059ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a6:	461a      	mov	r2, r3
 80059a8:	2300      	movs	r3, #0
 80059aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b8:	461a      	mov	r2, r3
 80059ba:	2300      	movs	r3, #0
 80059bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ca:	461a      	mov	r2, r3
 80059cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3301      	adds	r3, #1
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d3b7      	bcc.n	8005950 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d110      	bne.n	8005a1c <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a00:	461a      	mov	r2, r3
 8005a02:	4b1e      	ldr	r3, [pc, #120]	; (8005a7c <USB_DevInit+0x2e8>)
 8005a04:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a14:	4619      	mov	r1, r3
 8005a16:	4b1a      	ldr	r3, [pc, #104]	; (8005a80 <USB_DevInit+0x2ec>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f043 0210 	orr.w	r2, r3, #16
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699a      	ldr	r2, [r3, #24]
 8005a40:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <USB_DevInit+0x2f0>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f043 0208 	orr.w	r2, r3, #8
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d105      	bne.n	8005a6c <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699a      	ldr	r2, [r3, #24]
 8005a64:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <USB_DevInit+0x2f4>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a78:	b004      	add	sp, #16
 8005a7a:	4770      	bx	lr
 8005a7c:	00800100 	.word	0x00800100
 8005a80:	00010003 	.word	0x00010003
 8005a84:	803c3800 	.word	0x803c3800
 8005a88:	40000004 	.word	0x40000004

08005a8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	f043 0220 	orr.w	r2, r3, #32
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <USB_FlushTxFifo+0x48>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d901      	bls.n	8005ab8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e006      	b.n	8005ac6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d0f0      	beq.n	8005aa6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	00030d40 	.word	0x00030d40

08005ad8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2210      	movs	r2, #16
 8005ae8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3301      	adds	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <USB_FlushRxFifo+0x40>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d901      	bls.n	8005afc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e006      	b.n	8005b0a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d0f0      	beq.n	8005aea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	00030d40 	.word	0x00030d40

08005b1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b68:	f043 0302 	orr.w	r3, r3, #2
 8005b6c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005b6e:	2003      	movs	r0, #3
 8005b70:	f7fb fcec 	bl	800154c <HAL_Delay>

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <USB_CoreReset+0x64>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e01b      	b.n	8005bd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	daf2      	bge.n	8005b8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f043 0201 	orr.w	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <USB_CoreReset+0x64>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e006      	b.n	8005bd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d0f0      	beq.n	8005bb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	00030d40 	.word	0x00030d40

08005be8 <__errno>:
 8005be8:	4b01      	ldr	r3, [pc, #4]	; (8005bf0 <__errno+0x8>)
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000024 	.word	0x20000024

08005bf4 <__libc_init_array>:
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	4e0d      	ldr	r6, [pc, #52]	; (8005c2c <__libc_init_array+0x38>)
 8005bf8:	4c0d      	ldr	r4, [pc, #52]	; (8005c30 <__libc_init_array+0x3c>)
 8005bfa:	1ba4      	subs	r4, r4, r6
 8005bfc:	10a4      	asrs	r4, r4, #2
 8005bfe:	2500      	movs	r5, #0
 8005c00:	42a5      	cmp	r5, r4
 8005c02:	d109      	bne.n	8005c18 <__libc_init_array+0x24>
 8005c04:	4e0b      	ldr	r6, [pc, #44]	; (8005c34 <__libc_init_array+0x40>)
 8005c06:	4c0c      	ldr	r4, [pc, #48]	; (8005c38 <__libc_init_array+0x44>)
 8005c08:	f000 fc26 	bl	8006458 <_init>
 8005c0c:	1ba4      	subs	r4, r4, r6
 8005c0e:	10a4      	asrs	r4, r4, #2
 8005c10:	2500      	movs	r5, #0
 8005c12:	42a5      	cmp	r5, r4
 8005c14:	d105      	bne.n	8005c22 <__libc_init_array+0x2e>
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c1c:	4798      	blx	r3
 8005c1e:	3501      	adds	r5, #1
 8005c20:	e7ee      	b.n	8005c00 <__libc_init_array+0xc>
 8005c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c26:	4798      	blx	r3
 8005c28:	3501      	adds	r5, #1
 8005c2a:	e7f2      	b.n	8005c12 <__libc_init_array+0x1e>
 8005c2c:	080064e8 	.word	0x080064e8
 8005c30:	080064e8 	.word	0x080064e8
 8005c34:	080064e8 	.word	0x080064e8
 8005c38:	080064ec 	.word	0x080064ec

08005c3c <memset>:
 8005c3c:	4402      	add	r2, r0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d100      	bne.n	8005c46 <memset+0xa>
 8005c44:	4770      	bx	lr
 8005c46:	f803 1b01 	strb.w	r1, [r3], #1
 8005c4a:	e7f9      	b.n	8005c40 <memset+0x4>

08005c4c <siprintf>:
 8005c4c:	b40e      	push	{r1, r2, r3}
 8005c4e:	b500      	push	{lr}
 8005c50:	b09c      	sub	sp, #112	; 0x70
 8005c52:	ab1d      	add	r3, sp, #116	; 0x74
 8005c54:	9002      	str	r0, [sp, #8]
 8005c56:	9006      	str	r0, [sp, #24]
 8005c58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c5c:	4809      	ldr	r0, [pc, #36]	; (8005c84 <siprintf+0x38>)
 8005c5e:	9107      	str	r1, [sp, #28]
 8005c60:	9104      	str	r1, [sp, #16]
 8005c62:	4909      	ldr	r1, [pc, #36]	; (8005c88 <siprintf+0x3c>)
 8005c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c68:	9105      	str	r1, [sp, #20]
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	a902      	add	r1, sp, #8
 8005c70:	f000 f866 	bl	8005d40 <_svfiprintf_r>
 8005c74:	9b02      	ldr	r3, [sp, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	b01c      	add	sp, #112	; 0x70
 8005c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c80:	b003      	add	sp, #12
 8005c82:	4770      	bx	lr
 8005c84:	20000024 	.word	0x20000024
 8005c88:	ffff0208 	.word	0xffff0208

08005c8c <__ssputs_r>:
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	688e      	ldr	r6, [r1, #8]
 8005c92:	429e      	cmp	r6, r3
 8005c94:	4682      	mov	sl, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	4690      	mov	r8, r2
 8005c9a:	4699      	mov	r9, r3
 8005c9c:	d837      	bhi.n	8005d0e <__ssputs_r+0x82>
 8005c9e:	898a      	ldrh	r2, [r1, #12]
 8005ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ca4:	d031      	beq.n	8005d0a <__ssputs_r+0x7e>
 8005ca6:	6825      	ldr	r5, [r4, #0]
 8005ca8:	6909      	ldr	r1, [r1, #16]
 8005caa:	1a6f      	subs	r7, r5, r1
 8005cac:	6965      	ldr	r5, [r4, #20]
 8005cae:	2302      	movs	r3, #2
 8005cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8005cb8:	f109 0301 	add.w	r3, r9, #1
 8005cbc:	443b      	add	r3, r7
 8005cbe:	429d      	cmp	r5, r3
 8005cc0:	bf38      	it	cc
 8005cc2:	461d      	movcc	r5, r3
 8005cc4:	0553      	lsls	r3, r2, #21
 8005cc6:	d530      	bpl.n	8005d2a <__ssputs_r+0x9e>
 8005cc8:	4629      	mov	r1, r5
 8005cca:	f000 fb2b 	bl	8006324 <_malloc_r>
 8005cce:	4606      	mov	r6, r0
 8005cd0:	b950      	cbnz	r0, 8005ce8 <__ssputs_r+0x5c>
 8005cd2:	230c      	movs	r3, #12
 8005cd4:	f8ca 3000 	str.w	r3, [sl]
 8005cd8:	89a3      	ldrh	r3, [r4, #12]
 8005cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cde:	81a3      	strh	r3, [r4, #12]
 8005ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce8:	463a      	mov	r2, r7
 8005cea:	6921      	ldr	r1, [r4, #16]
 8005cec:	f000 faa8 	bl	8006240 <memcpy>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfa:	81a3      	strh	r3, [r4, #12]
 8005cfc:	6126      	str	r6, [r4, #16]
 8005cfe:	6165      	str	r5, [r4, #20]
 8005d00:	443e      	add	r6, r7
 8005d02:	1bed      	subs	r5, r5, r7
 8005d04:	6026      	str	r6, [r4, #0]
 8005d06:	60a5      	str	r5, [r4, #8]
 8005d08:	464e      	mov	r6, r9
 8005d0a:	454e      	cmp	r6, r9
 8005d0c:	d900      	bls.n	8005d10 <__ssputs_r+0x84>
 8005d0e:	464e      	mov	r6, r9
 8005d10:	4632      	mov	r2, r6
 8005d12:	4641      	mov	r1, r8
 8005d14:	6820      	ldr	r0, [r4, #0]
 8005d16:	f000 fa9e 	bl	8006256 <memmove>
 8005d1a:	68a3      	ldr	r3, [r4, #8]
 8005d1c:	1b9b      	subs	r3, r3, r6
 8005d1e:	60a3      	str	r3, [r4, #8]
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	441e      	add	r6, r3
 8005d24:	6026      	str	r6, [r4, #0]
 8005d26:	2000      	movs	r0, #0
 8005d28:	e7dc      	b.n	8005ce4 <__ssputs_r+0x58>
 8005d2a:	462a      	mov	r2, r5
 8005d2c:	f000 fb54 	bl	80063d8 <_realloc_r>
 8005d30:	4606      	mov	r6, r0
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d1e2      	bne.n	8005cfc <__ssputs_r+0x70>
 8005d36:	6921      	ldr	r1, [r4, #16]
 8005d38:	4650      	mov	r0, sl
 8005d3a:	f000 faa5 	bl	8006288 <_free_r>
 8005d3e:	e7c8      	b.n	8005cd2 <__ssputs_r+0x46>

08005d40 <_svfiprintf_r>:
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	461d      	mov	r5, r3
 8005d46:	898b      	ldrh	r3, [r1, #12]
 8005d48:	061f      	lsls	r7, r3, #24
 8005d4a:	b09d      	sub	sp, #116	; 0x74
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	460c      	mov	r4, r1
 8005d50:	4616      	mov	r6, r2
 8005d52:	d50f      	bpl.n	8005d74 <_svfiprintf_r+0x34>
 8005d54:	690b      	ldr	r3, [r1, #16]
 8005d56:	b96b      	cbnz	r3, 8005d74 <_svfiprintf_r+0x34>
 8005d58:	2140      	movs	r1, #64	; 0x40
 8005d5a:	f000 fae3 	bl	8006324 <_malloc_r>
 8005d5e:	6020      	str	r0, [r4, #0]
 8005d60:	6120      	str	r0, [r4, #16]
 8005d62:	b928      	cbnz	r0, 8005d70 <_svfiprintf_r+0x30>
 8005d64:	230c      	movs	r3, #12
 8005d66:	f8c8 3000 	str.w	r3, [r8]
 8005d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6e:	e0c8      	b.n	8005f02 <_svfiprintf_r+0x1c2>
 8005d70:	2340      	movs	r3, #64	; 0x40
 8005d72:	6163      	str	r3, [r4, #20]
 8005d74:	2300      	movs	r3, #0
 8005d76:	9309      	str	r3, [sp, #36]	; 0x24
 8005d78:	2320      	movs	r3, #32
 8005d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d7e:	2330      	movs	r3, #48	; 0x30
 8005d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d84:	9503      	str	r5, [sp, #12]
 8005d86:	f04f 0b01 	mov.w	fp, #1
 8005d8a:	4637      	mov	r7, r6
 8005d8c:	463d      	mov	r5, r7
 8005d8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d92:	b10b      	cbz	r3, 8005d98 <_svfiprintf_r+0x58>
 8005d94:	2b25      	cmp	r3, #37	; 0x25
 8005d96:	d13e      	bne.n	8005e16 <_svfiprintf_r+0xd6>
 8005d98:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d9c:	d00b      	beq.n	8005db6 <_svfiprintf_r+0x76>
 8005d9e:	4653      	mov	r3, sl
 8005da0:	4632      	mov	r2, r6
 8005da2:	4621      	mov	r1, r4
 8005da4:	4640      	mov	r0, r8
 8005da6:	f7ff ff71 	bl	8005c8c <__ssputs_r>
 8005daa:	3001      	adds	r0, #1
 8005dac:	f000 80a4 	beq.w	8005ef8 <_svfiprintf_r+0x1b8>
 8005db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db2:	4453      	add	r3, sl
 8005db4:	9309      	str	r3, [sp, #36]	; 0x24
 8005db6:	783b      	ldrb	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 809d 	beq.w	8005ef8 <_svfiprintf_r+0x1b8>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dc8:	9304      	str	r3, [sp, #16]
 8005dca:	9307      	str	r3, [sp, #28]
 8005dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8005dd2:	462f      	mov	r7, r5
 8005dd4:	2205      	movs	r2, #5
 8005dd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005dda:	4850      	ldr	r0, [pc, #320]	; (8005f1c <_svfiprintf_r+0x1dc>)
 8005ddc:	f7fa fa20 	bl	8000220 <memchr>
 8005de0:	9b04      	ldr	r3, [sp, #16]
 8005de2:	b9d0      	cbnz	r0, 8005e1a <_svfiprintf_r+0xda>
 8005de4:	06d9      	lsls	r1, r3, #27
 8005de6:	bf44      	itt	mi
 8005de8:	2220      	movmi	r2, #32
 8005dea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dee:	071a      	lsls	r2, r3, #28
 8005df0:	bf44      	itt	mi
 8005df2:	222b      	movmi	r2, #43	; 0x2b
 8005df4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005df8:	782a      	ldrb	r2, [r5, #0]
 8005dfa:	2a2a      	cmp	r2, #42	; 0x2a
 8005dfc:	d015      	beq.n	8005e2a <_svfiprintf_r+0xea>
 8005dfe:	9a07      	ldr	r2, [sp, #28]
 8005e00:	462f      	mov	r7, r5
 8005e02:	2000      	movs	r0, #0
 8005e04:	250a      	movs	r5, #10
 8005e06:	4639      	mov	r1, r7
 8005e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e0c:	3b30      	subs	r3, #48	; 0x30
 8005e0e:	2b09      	cmp	r3, #9
 8005e10:	d94d      	bls.n	8005eae <_svfiprintf_r+0x16e>
 8005e12:	b1b8      	cbz	r0, 8005e44 <_svfiprintf_r+0x104>
 8005e14:	e00f      	b.n	8005e36 <_svfiprintf_r+0xf6>
 8005e16:	462f      	mov	r7, r5
 8005e18:	e7b8      	b.n	8005d8c <_svfiprintf_r+0x4c>
 8005e1a:	4a40      	ldr	r2, [pc, #256]	; (8005f1c <_svfiprintf_r+0x1dc>)
 8005e1c:	1a80      	subs	r0, r0, r2
 8005e1e:	fa0b f000 	lsl.w	r0, fp, r0
 8005e22:	4318      	orrs	r0, r3
 8005e24:	9004      	str	r0, [sp, #16]
 8005e26:	463d      	mov	r5, r7
 8005e28:	e7d3      	b.n	8005dd2 <_svfiprintf_r+0x92>
 8005e2a:	9a03      	ldr	r2, [sp, #12]
 8005e2c:	1d11      	adds	r1, r2, #4
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	9103      	str	r1, [sp, #12]
 8005e32:	2a00      	cmp	r2, #0
 8005e34:	db01      	blt.n	8005e3a <_svfiprintf_r+0xfa>
 8005e36:	9207      	str	r2, [sp, #28]
 8005e38:	e004      	b.n	8005e44 <_svfiprintf_r+0x104>
 8005e3a:	4252      	negs	r2, r2
 8005e3c:	f043 0302 	orr.w	r3, r3, #2
 8005e40:	9207      	str	r2, [sp, #28]
 8005e42:	9304      	str	r3, [sp, #16]
 8005e44:	783b      	ldrb	r3, [r7, #0]
 8005e46:	2b2e      	cmp	r3, #46	; 0x2e
 8005e48:	d10c      	bne.n	8005e64 <_svfiprintf_r+0x124>
 8005e4a:	787b      	ldrb	r3, [r7, #1]
 8005e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e4e:	d133      	bne.n	8005eb8 <_svfiprintf_r+0x178>
 8005e50:	9b03      	ldr	r3, [sp, #12]
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	9203      	str	r2, [sp, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	bfb8      	it	lt
 8005e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e60:	3702      	adds	r7, #2
 8005e62:	9305      	str	r3, [sp, #20]
 8005e64:	4d2e      	ldr	r5, [pc, #184]	; (8005f20 <_svfiprintf_r+0x1e0>)
 8005e66:	7839      	ldrb	r1, [r7, #0]
 8005e68:	2203      	movs	r2, #3
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f7fa f9d8 	bl	8000220 <memchr>
 8005e70:	b138      	cbz	r0, 8005e82 <_svfiprintf_r+0x142>
 8005e72:	2340      	movs	r3, #64	; 0x40
 8005e74:	1b40      	subs	r0, r0, r5
 8005e76:	fa03 f000 	lsl.w	r0, r3, r0
 8005e7a:	9b04      	ldr	r3, [sp, #16]
 8005e7c:	4303      	orrs	r3, r0
 8005e7e:	3701      	adds	r7, #1
 8005e80:	9304      	str	r3, [sp, #16]
 8005e82:	7839      	ldrb	r1, [r7, #0]
 8005e84:	4827      	ldr	r0, [pc, #156]	; (8005f24 <_svfiprintf_r+0x1e4>)
 8005e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e8a:	2206      	movs	r2, #6
 8005e8c:	1c7e      	adds	r6, r7, #1
 8005e8e:	f7fa f9c7 	bl	8000220 <memchr>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d038      	beq.n	8005f08 <_svfiprintf_r+0x1c8>
 8005e96:	4b24      	ldr	r3, [pc, #144]	; (8005f28 <_svfiprintf_r+0x1e8>)
 8005e98:	bb13      	cbnz	r3, 8005ee0 <_svfiprintf_r+0x1a0>
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	3307      	adds	r3, #7
 8005e9e:	f023 0307 	bic.w	r3, r3, #7
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	9303      	str	r3, [sp, #12]
 8005ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea8:	444b      	add	r3, r9
 8005eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8005eac:	e76d      	b.n	8005d8a <_svfiprintf_r+0x4a>
 8005eae:	fb05 3202 	mla	r2, r5, r2, r3
 8005eb2:	2001      	movs	r0, #1
 8005eb4:	460f      	mov	r7, r1
 8005eb6:	e7a6      	b.n	8005e06 <_svfiprintf_r+0xc6>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	3701      	adds	r7, #1
 8005ebc:	9305      	str	r3, [sp, #20]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	250a      	movs	r5, #10
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ec8:	3a30      	subs	r2, #48	; 0x30
 8005eca:	2a09      	cmp	r2, #9
 8005ecc:	d903      	bls.n	8005ed6 <_svfiprintf_r+0x196>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0c8      	beq.n	8005e64 <_svfiprintf_r+0x124>
 8005ed2:	9105      	str	r1, [sp, #20]
 8005ed4:	e7c6      	b.n	8005e64 <_svfiprintf_r+0x124>
 8005ed6:	fb05 2101 	mla	r1, r5, r1, r2
 8005eda:	2301      	movs	r3, #1
 8005edc:	4607      	mov	r7, r0
 8005ede:	e7f0      	b.n	8005ec2 <_svfiprintf_r+0x182>
 8005ee0:	ab03      	add	r3, sp, #12
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <_svfiprintf_r+0x1ec>)
 8005ee8:	a904      	add	r1, sp, #16
 8005eea:	4640      	mov	r0, r8
 8005eec:	f3af 8000 	nop.w
 8005ef0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ef4:	4681      	mov	r9, r0
 8005ef6:	d1d6      	bne.n	8005ea6 <_svfiprintf_r+0x166>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	065b      	lsls	r3, r3, #25
 8005efc:	f53f af35 	bmi.w	8005d6a <_svfiprintf_r+0x2a>
 8005f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f02:	b01d      	add	sp, #116	; 0x74
 8005f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f08:	ab03      	add	r3, sp, #12
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <_svfiprintf_r+0x1ec>)
 8005f10:	a904      	add	r1, sp, #16
 8005f12:	4640      	mov	r0, r8
 8005f14:	f000 f882 	bl	800601c <_printf_i>
 8005f18:	e7ea      	b.n	8005ef0 <_svfiprintf_r+0x1b0>
 8005f1a:	bf00      	nop
 8005f1c:	080064ac 	.word	0x080064ac
 8005f20:	080064b2 	.word	0x080064b2
 8005f24:	080064b6 	.word	0x080064b6
 8005f28:	00000000 	.word	0x00000000
 8005f2c:	08005c8d 	.word	0x08005c8d

08005f30 <_printf_common>:
 8005f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	4691      	mov	r9, r2
 8005f36:	461f      	mov	r7, r3
 8005f38:	688a      	ldr	r2, [r1, #8]
 8005f3a:	690b      	ldr	r3, [r1, #16]
 8005f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f40:	4293      	cmp	r3, r2
 8005f42:	bfb8      	it	lt
 8005f44:	4613      	movlt	r3, r2
 8005f46:	f8c9 3000 	str.w	r3, [r9]
 8005f4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f4e:	4606      	mov	r6, r0
 8005f50:	460c      	mov	r4, r1
 8005f52:	b112      	cbz	r2, 8005f5a <_printf_common+0x2a>
 8005f54:	3301      	adds	r3, #1
 8005f56:	f8c9 3000 	str.w	r3, [r9]
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	0699      	lsls	r1, r3, #26
 8005f5e:	bf42      	ittt	mi
 8005f60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f64:	3302      	addmi	r3, #2
 8005f66:	f8c9 3000 	strmi.w	r3, [r9]
 8005f6a:	6825      	ldr	r5, [r4, #0]
 8005f6c:	f015 0506 	ands.w	r5, r5, #6
 8005f70:	d107      	bne.n	8005f82 <_printf_common+0x52>
 8005f72:	f104 0a19 	add.w	sl, r4, #25
 8005f76:	68e3      	ldr	r3, [r4, #12]
 8005f78:	f8d9 2000 	ldr.w	r2, [r9]
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	42ab      	cmp	r3, r5
 8005f80:	dc28      	bgt.n	8005fd4 <_printf_common+0xa4>
 8005f82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f86:	6822      	ldr	r2, [r4, #0]
 8005f88:	3300      	adds	r3, #0
 8005f8a:	bf18      	it	ne
 8005f8c:	2301      	movne	r3, #1
 8005f8e:	0692      	lsls	r2, r2, #26
 8005f90:	d42d      	bmi.n	8005fee <_printf_common+0xbe>
 8005f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f96:	4639      	mov	r1, r7
 8005f98:	4630      	mov	r0, r6
 8005f9a:	47c0      	blx	r8
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d020      	beq.n	8005fe2 <_printf_common+0xb2>
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	68e5      	ldr	r5, [r4, #12]
 8005fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8005fa8:	f003 0306 	and.w	r3, r3, #6
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	bf08      	it	eq
 8005fb0:	1aad      	subeq	r5, r5, r2
 8005fb2:	68a3      	ldr	r3, [r4, #8]
 8005fb4:	6922      	ldr	r2, [r4, #16]
 8005fb6:	bf0c      	ite	eq
 8005fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fbc:	2500      	movne	r5, #0
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	bfc4      	itt	gt
 8005fc2:	1a9b      	subgt	r3, r3, r2
 8005fc4:	18ed      	addgt	r5, r5, r3
 8005fc6:	f04f 0900 	mov.w	r9, #0
 8005fca:	341a      	adds	r4, #26
 8005fcc:	454d      	cmp	r5, r9
 8005fce:	d11a      	bne.n	8006006 <_printf_common+0xd6>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e008      	b.n	8005fe6 <_printf_common+0xb6>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	4652      	mov	r2, sl
 8005fd8:	4639      	mov	r1, r7
 8005fda:	4630      	mov	r0, r6
 8005fdc:	47c0      	blx	r8
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d103      	bne.n	8005fea <_printf_common+0xba>
 8005fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fea:	3501      	adds	r5, #1
 8005fec:	e7c3      	b.n	8005f76 <_printf_common+0x46>
 8005fee:	18e1      	adds	r1, r4, r3
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	2030      	movs	r0, #48	; 0x30
 8005ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ff8:	4422      	add	r2, r4
 8005ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ffe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006002:	3302      	adds	r3, #2
 8006004:	e7c5      	b.n	8005f92 <_printf_common+0x62>
 8006006:	2301      	movs	r3, #1
 8006008:	4622      	mov	r2, r4
 800600a:	4639      	mov	r1, r7
 800600c:	4630      	mov	r0, r6
 800600e:	47c0      	blx	r8
 8006010:	3001      	adds	r0, #1
 8006012:	d0e6      	beq.n	8005fe2 <_printf_common+0xb2>
 8006014:	f109 0901 	add.w	r9, r9, #1
 8006018:	e7d8      	b.n	8005fcc <_printf_common+0x9c>
	...

0800601c <_printf_i>:
 800601c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006020:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006024:	460c      	mov	r4, r1
 8006026:	7e09      	ldrb	r1, [r1, #24]
 8006028:	b085      	sub	sp, #20
 800602a:	296e      	cmp	r1, #110	; 0x6e
 800602c:	4617      	mov	r7, r2
 800602e:	4606      	mov	r6, r0
 8006030:	4698      	mov	r8, r3
 8006032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006034:	f000 80b3 	beq.w	800619e <_printf_i+0x182>
 8006038:	d822      	bhi.n	8006080 <_printf_i+0x64>
 800603a:	2963      	cmp	r1, #99	; 0x63
 800603c:	d036      	beq.n	80060ac <_printf_i+0x90>
 800603e:	d80a      	bhi.n	8006056 <_printf_i+0x3a>
 8006040:	2900      	cmp	r1, #0
 8006042:	f000 80b9 	beq.w	80061b8 <_printf_i+0x19c>
 8006046:	2958      	cmp	r1, #88	; 0x58
 8006048:	f000 8083 	beq.w	8006152 <_printf_i+0x136>
 800604c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006050:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006054:	e032      	b.n	80060bc <_printf_i+0xa0>
 8006056:	2964      	cmp	r1, #100	; 0x64
 8006058:	d001      	beq.n	800605e <_printf_i+0x42>
 800605a:	2969      	cmp	r1, #105	; 0x69
 800605c:	d1f6      	bne.n	800604c <_printf_i+0x30>
 800605e:	6820      	ldr	r0, [r4, #0]
 8006060:	6813      	ldr	r3, [r2, #0]
 8006062:	0605      	lsls	r5, r0, #24
 8006064:	f103 0104 	add.w	r1, r3, #4
 8006068:	d52a      	bpl.n	80060c0 <_printf_i+0xa4>
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6011      	str	r1, [r2, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	da03      	bge.n	800607a <_printf_i+0x5e>
 8006072:	222d      	movs	r2, #45	; 0x2d
 8006074:	425b      	negs	r3, r3
 8006076:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800607a:	486f      	ldr	r0, [pc, #444]	; (8006238 <_printf_i+0x21c>)
 800607c:	220a      	movs	r2, #10
 800607e:	e039      	b.n	80060f4 <_printf_i+0xd8>
 8006080:	2973      	cmp	r1, #115	; 0x73
 8006082:	f000 809d 	beq.w	80061c0 <_printf_i+0x1a4>
 8006086:	d808      	bhi.n	800609a <_printf_i+0x7e>
 8006088:	296f      	cmp	r1, #111	; 0x6f
 800608a:	d020      	beq.n	80060ce <_printf_i+0xb2>
 800608c:	2970      	cmp	r1, #112	; 0x70
 800608e:	d1dd      	bne.n	800604c <_printf_i+0x30>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	f043 0320 	orr.w	r3, r3, #32
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	e003      	b.n	80060a2 <_printf_i+0x86>
 800609a:	2975      	cmp	r1, #117	; 0x75
 800609c:	d017      	beq.n	80060ce <_printf_i+0xb2>
 800609e:	2978      	cmp	r1, #120	; 0x78
 80060a0:	d1d4      	bne.n	800604c <_printf_i+0x30>
 80060a2:	2378      	movs	r3, #120	; 0x78
 80060a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060a8:	4864      	ldr	r0, [pc, #400]	; (800623c <_printf_i+0x220>)
 80060aa:	e055      	b.n	8006158 <_printf_i+0x13c>
 80060ac:	6813      	ldr	r3, [r2, #0]
 80060ae:	1d19      	adds	r1, r3, #4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6011      	str	r1, [r2, #0]
 80060b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060bc:	2301      	movs	r3, #1
 80060be:	e08c      	b.n	80061da <_printf_i+0x1be>
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6011      	str	r1, [r2, #0]
 80060c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060c8:	bf18      	it	ne
 80060ca:	b21b      	sxthne	r3, r3
 80060cc:	e7cf      	b.n	800606e <_printf_i+0x52>
 80060ce:	6813      	ldr	r3, [r2, #0]
 80060d0:	6825      	ldr	r5, [r4, #0]
 80060d2:	1d18      	adds	r0, r3, #4
 80060d4:	6010      	str	r0, [r2, #0]
 80060d6:	0628      	lsls	r0, r5, #24
 80060d8:	d501      	bpl.n	80060de <_printf_i+0xc2>
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	e002      	b.n	80060e4 <_printf_i+0xc8>
 80060de:	0668      	lsls	r0, r5, #25
 80060e0:	d5fb      	bpl.n	80060da <_printf_i+0xbe>
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	4854      	ldr	r0, [pc, #336]	; (8006238 <_printf_i+0x21c>)
 80060e6:	296f      	cmp	r1, #111	; 0x6f
 80060e8:	bf14      	ite	ne
 80060ea:	220a      	movne	r2, #10
 80060ec:	2208      	moveq	r2, #8
 80060ee:	2100      	movs	r1, #0
 80060f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060f4:	6865      	ldr	r5, [r4, #4]
 80060f6:	60a5      	str	r5, [r4, #8]
 80060f8:	2d00      	cmp	r5, #0
 80060fa:	f2c0 8095 	blt.w	8006228 <_printf_i+0x20c>
 80060fe:	6821      	ldr	r1, [r4, #0]
 8006100:	f021 0104 	bic.w	r1, r1, #4
 8006104:	6021      	str	r1, [r4, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d13d      	bne.n	8006186 <_printf_i+0x16a>
 800610a:	2d00      	cmp	r5, #0
 800610c:	f040 808e 	bne.w	800622c <_printf_i+0x210>
 8006110:	4665      	mov	r5, ip
 8006112:	2a08      	cmp	r2, #8
 8006114:	d10b      	bne.n	800612e <_printf_i+0x112>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	07db      	lsls	r3, r3, #31
 800611a:	d508      	bpl.n	800612e <_printf_i+0x112>
 800611c:	6923      	ldr	r3, [r4, #16]
 800611e:	6862      	ldr	r2, [r4, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	bfde      	ittt	le
 8006124:	2330      	movle	r3, #48	; 0x30
 8006126:	f805 3c01 	strble.w	r3, [r5, #-1]
 800612a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800612e:	ebac 0305 	sub.w	r3, ip, r5
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	f8cd 8000 	str.w	r8, [sp]
 8006138:	463b      	mov	r3, r7
 800613a:	aa03      	add	r2, sp, #12
 800613c:	4621      	mov	r1, r4
 800613e:	4630      	mov	r0, r6
 8006140:	f7ff fef6 	bl	8005f30 <_printf_common>
 8006144:	3001      	adds	r0, #1
 8006146:	d14d      	bne.n	80061e4 <_printf_i+0x1c8>
 8006148:	f04f 30ff 	mov.w	r0, #4294967295
 800614c:	b005      	add	sp, #20
 800614e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006152:	4839      	ldr	r0, [pc, #228]	; (8006238 <_printf_i+0x21c>)
 8006154:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006158:	6813      	ldr	r3, [r2, #0]
 800615a:	6821      	ldr	r1, [r4, #0]
 800615c:	1d1d      	adds	r5, r3, #4
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6015      	str	r5, [r2, #0]
 8006162:	060a      	lsls	r2, r1, #24
 8006164:	d50b      	bpl.n	800617e <_printf_i+0x162>
 8006166:	07ca      	lsls	r2, r1, #31
 8006168:	bf44      	itt	mi
 800616a:	f041 0120 	orrmi.w	r1, r1, #32
 800616e:	6021      	strmi	r1, [r4, #0]
 8006170:	b91b      	cbnz	r3, 800617a <_printf_i+0x15e>
 8006172:	6822      	ldr	r2, [r4, #0]
 8006174:	f022 0220 	bic.w	r2, r2, #32
 8006178:	6022      	str	r2, [r4, #0]
 800617a:	2210      	movs	r2, #16
 800617c:	e7b7      	b.n	80060ee <_printf_i+0xd2>
 800617e:	064d      	lsls	r5, r1, #25
 8006180:	bf48      	it	mi
 8006182:	b29b      	uxthmi	r3, r3
 8006184:	e7ef      	b.n	8006166 <_printf_i+0x14a>
 8006186:	4665      	mov	r5, ip
 8006188:	fbb3 f1f2 	udiv	r1, r3, r2
 800618c:	fb02 3311 	mls	r3, r2, r1, r3
 8006190:	5cc3      	ldrb	r3, [r0, r3]
 8006192:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006196:	460b      	mov	r3, r1
 8006198:	2900      	cmp	r1, #0
 800619a:	d1f5      	bne.n	8006188 <_printf_i+0x16c>
 800619c:	e7b9      	b.n	8006112 <_printf_i+0xf6>
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	6825      	ldr	r5, [r4, #0]
 80061a2:	6961      	ldr	r1, [r4, #20]
 80061a4:	1d18      	adds	r0, r3, #4
 80061a6:	6010      	str	r0, [r2, #0]
 80061a8:	0628      	lsls	r0, r5, #24
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	d501      	bpl.n	80061b2 <_printf_i+0x196>
 80061ae:	6019      	str	r1, [r3, #0]
 80061b0:	e002      	b.n	80061b8 <_printf_i+0x19c>
 80061b2:	066a      	lsls	r2, r5, #25
 80061b4:	d5fb      	bpl.n	80061ae <_printf_i+0x192>
 80061b6:	8019      	strh	r1, [r3, #0]
 80061b8:	2300      	movs	r3, #0
 80061ba:	6123      	str	r3, [r4, #16]
 80061bc:	4665      	mov	r5, ip
 80061be:	e7b9      	b.n	8006134 <_printf_i+0x118>
 80061c0:	6813      	ldr	r3, [r2, #0]
 80061c2:	1d19      	adds	r1, r3, #4
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	681d      	ldr	r5, [r3, #0]
 80061c8:	6862      	ldr	r2, [r4, #4]
 80061ca:	2100      	movs	r1, #0
 80061cc:	4628      	mov	r0, r5
 80061ce:	f7fa f827 	bl	8000220 <memchr>
 80061d2:	b108      	cbz	r0, 80061d8 <_printf_i+0x1bc>
 80061d4:	1b40      	subs	r0, r0, r5
 80061d6:	6060      	str	r0, [r4, #4]
 80061d8:	6863      	ldr	r3, [r4, #4]
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	2300      	movs	r3, #0
 80061de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061e2:	e7a7      	b.n	8006134 <_printf_i+0x118>
 80061e4:	6923      	ldr	r3, [r4, #16]
 80061e6:	462a      	mov	r2, r5
 80061e8:	4639      	mov	r1, r7
 80061ea:	4630      	mov	r0, r6
 80061ec:	47c0      	blx	r8
 80061ee:	3001      	adds	r0, #1
 80061f0:	d0aa      	beq.n	8006148 <_printf_i+0x12c>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	079b      	lsls	r3, r3, #30
 80061f6:	d413      	bmi.n	8006220 <_printf_i+0x204>
 80061f8:	68e0      	ldr	r0, [r4, #12]
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	4298      	cmp	r0, r3
 80061fe:	bfb8      	it	lt
 8006200:	4618      	movlt	r0, r3
 8006202:	e7a3      	b.n	800614c <_printf_i+0x130>
 8006204:	2301      	movs	r3, #1
 8006206:	464a      	mov	r2, r9
 8006208:	4639      	mov	r1, r7
 800620a:	4630      	mov	r0, r6
 800620c:	47c0      	blx	r8
 800620e:	3001      	adds	r0, #1
 8006210:	d09a      	beq.n	8006148 <_printf_i+0x12c>
 8006212:	3501      	adds	r5, #1
 8006214:	68e3      	ldr	r3, [r4, #12]
 8006216:	9a03      	ldr	r2, [sp, #12]
 8006218:	1a9b      	subs	r3, r3, r2
 800621a:	42ab      	cmp	r3, r5
 800621c:	dcf2      	bgt.n	8006204 <_printf_i+0x1e8>
 800621e:	e7eb      	b.n	80061f8 <_printf_i+0x1dc>
 8006220:	2500      	movs	r5, #0
 8006222:	f104 0919 	add.w	r9, r4, #25
 8006226:	e7f5      	b.n	8006214 <_printf_i+0x1f8>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1ac      	bne.n	8006186 <_printf_i+0x16a>
 800622c:	7803      	ldrb	r3, [r0, #0]
 800622e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006236:	e76c      	b.n	8006112 <_printf_i+0xf6>
 8006238:	080064bd 	.word	0x080064bd
 800623c:	080064ce 	.word	0x080064ce

08006240 <memcpy>:
 8006240:	b510      	push	{r4, lr}
 8006242:	1e43      	subs	r3, r0, #1
 8006244:	440a      	add	r2, r1
 8006246:	4291      	cmp	r1, r2
 8006248:	d100      	bne.n	800624c <memcpy+0xc>
 800624a:	bd10      	pop	{r4, pc}
 800624c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006254:	e7f7      	b.n	8006246 <memcpy+0x6>

08006256 <memmove>:
 8006256:	4288      	cmp	r0, r1
 8006258:	b510      	push	{r4, lr}
 800625a:	eb01 0302 	add.w	r3, r1, r2
 800625e:	d807      	bhi.n	8006270 <memmove+0x1a>
 8006260:	1e42      	subs	r2, r0, #1
 8006262:	4299      	cmp	r1, r3
 8006264:	d00a      	beq.n	800627c <memmove+0x26>
 8006266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800626a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800626e:	e7f8      	b.n	8006262 <memmove+0xc>
 8006270:	4283      	cmp	r3, r0
 8006272:	d9f5      	bls.n	8006260 <memmove+0xa>
 8006274:	1881      	adds	r1, r0, r2
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	42d3      	cmn	r3, r2
 800627a:	d100      	bne.n	800627e <memmove+0x28>
 800627c:	bd10      	pop	{r4, pc}
 800627e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006282:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006286:	e7f7      	b.n	8006278 <memmove+0x22>

08006288 <_free_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4605      	mov	r5, r0
 800628c:	2900      	cmp	r1, #0
 800628e:	d045      	beq.n	800631c <_free_r+0x94>
 8006290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006294:	1f0c      	subs	r4, r1, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	bfb8      	it	lt
 800629a:	18e4      	addlt	r4, r4, r3
 800629c:	f000 f8d2 	bl	8006444 <__malloc_lock>
 80062a0:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <_free_r+0x98>)
 80062a2:	6813      	ldr	r3, [r2, #0]
 80062a4:	4610      	mov	r0, r2
 80062a6:	b933      	cbnz	r3, 80062b6 <_free_r+0x2e>
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	6014      	str	r4, [r2, #0]
 80062ac:	4628      	mov	r0, r5
 80062ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062b2:	f000 b8c8 	b.w	8006446 <__malloc_unlock>
 80062b6:	42a3      	cmp	r3, r4
 80062b8:	d90c      	bls.n	80062d4 <_free_r+0x4c>
 80062ba:	6821      	ldr	r1, [r4, #0]
 80062bc:	1862      	adds	r2, r4, r1
 80062be:	4293      	cmp	r3, r2
 80062c0:	bf04      	itt	eq
 80062c2:	681a      	ldreq	r2, [r3, #0]
 80062c4:	685b      	ldreq	r3, [r3, #4]
 80062c6:	6063      	str	r3, [r4, #4]
 80062c8:	bf04      	itt	eq
 80062ca:	1852      	addeq	r2, r2, r1
 80062cc:	6022      	streq	r2, [r4, #0]
 80062ce:	6004      	str	r4, [r0, #0]
 80062d0:	e7ec      	b.n	80062ac <_free_r+0x24>
 80062d2:	4613      	mov	r3, r2
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	b10a      	cbz	r2, 80062dc <_free_r+0x54>
 80062d8:	42a2      	cmp	r2, r4
 80062da:	d9fa      	bls.n	80062d2 <_free_r+0x4a>
 80062dc:	6819      	ldr	r1, [r3, #0]
 80062de:	1858      	adds	r0, r3, r1
 80062e0:	42a0      	cmp	r0, r4
 80062e2:	d10b      	bne.n	80062fc <_free_r+0x74>
 80062e4:	6820      	ldr	r0, [r4, #0]
 80062e6:	4401      	add	r1, r0
 80062e8:	1858      	adds	r0, r3, r1
 80062ea:	4282      	cmp	r2, r0
 80062ec:	6019      	str	r1, [r3, #0]
 80062ee:	d1dd      	bne.n	80062ac <_free_r+0x24>
 80062f0:	6810      	ldr	r0, [r2, #0]
 80062f2:	6852      	ldr	r2, [r2, #4]
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	4401      	add	r1, r0
 80062f8:	6019      	str	r1, [r3, #0]
 80062fa:	e7d7      	b.n	80062ac <_free_r+0x24>
 80062fc:	d902      	bls.n	8006304 <_free_r+0x7c>
 80062fe:	230c      	movs	r3, #12
 8006300:	602b      	str	r3, [r5, #0]
 8006302:	e7d3      	b.n	80062ac <_free_r+0x24>
 8006304:	6820      	ldr	r0, [r4, #0]
 8006306:	1821      	adds	r1, r4, r0
 8006308:	428a      	cmp	r2, r1
 800630a:	bf04      	itt	eq
 800630c:	6811      	ldreq	r1, [r2, #0]
 800630e:	6852      	ldreq	r2, [r2, #4]
 8006310:	6062      	str	r2, [r4, #4]
 8006312:	bf04      	itt	eq
 8006314:	1809      	addeq	r1, r1, r0
 8006316:	6021      	streq	r1, [r4, #0]
 8006318:	605c      	str	r4, [r3, #4]
 800631a:	e7c7      	b.n	80062ac <_free_r+0x24>
 800631c:	bd38      	pop	{r3, r4, r5, pc}
 800631e:	bf00      	nop
 8006320:	200000b0 	.word	0x200000b0

08006324 <_malloc_r>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	1ccd      	adds	r5, r1, #3
 8006328:	f025 0503 	bic.w	r5, r5, #3
 800632c:	3508      	adds	r5, #8
 800632e:	2d0c      	cmp	r5, #12
 8006330:	bf38      	it	cc
 8006332:	250c      	movcc	r5, #12
 8006334:	2d00      	cmp	r5, #0
 8006336:	4606      	mov	r6, r0
 8006338:	db01      	blt.n	800633e <_malloc_r+0x1a>
 800633a:	42a9      	cmp	r1, r5
 800633c:	d903      	bls.n	8006346 <_malloc_r+0x22>
 800633e:	230c      	movs	r3, #12
 8006340:	6033      	str	r3, [r6, #0]
 8006342:	2000      	movs	r0, #0
 8006344:	bd70      	pop	{r4, r5, r6, pc}
 8006346:	f000 f87d 	bl	8006444 <__malloc_lock>
 800634a:	4a21      	ldr	r2, [pc, #132]	; (80063d0 <_malloc_r+0xac>)
 800634c:	6814      	ldr	r4, [r2, #0]
 800634e:	4621      	mov	r1, r4
 8006350:	b991      	cbnz	r1, 8006378 <_malloc_r+0x54>
 8006352:	4c20      	ldr	r4, [pc, #128]	; (80063d4 <_malloc_r+0xb0>)
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	b91b      	cbnz	r3, 8006360 <_malloc_r+0x3c>
 8006358:	4630      	mov	r0, r6
 800635a:	f000 f863 	bl	8006424 <_sbrk_r>
 800635e:	6020      	str	r0, [r4, #0]
 8006360:	4629      	mov	r1, r5
 8006362:	4630      	mov	r0, r6
 8006364:	f000 f85e 	bl	8006424 <_sbrk_r>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d124      	bne.n	80063b6 <_malloc_r+0x92>
 800636c:	230c      	movs	r3, #12
 800636e:	6033      	str	r3, [r6, #0]
 8006370:	4630      	mov	r0, r6
 8006372:	f000 f868 	bl	8006446 <__malloc_unlock>
 8006376:	e7e4      	b.n	8006342 <_malloc_r+0x1e>
 8006378:	680b      	ldr	r3, [r1, #0]
 800637a:	1b5b      	subs	r3, r3, r5
 800637c:	d418      	bmi.n	80063b0 <_malloc_r+0x8c>
 800637e:	2b0b      	cmp	r3, #11
 8006380:	d90f      	bls.n	80063a2 <_malloc_r+0x7e>
 8006382:	600b      	str	r3, [r1, #0]
 8006384:	50cd      	str	r5, [r1, r3]
 8006386:	18cc      	adds	r4, r1, r3
 8006388:	4630      	mov	r0, r6
 800638a:	f000 f85c 	bl	8006446 <__malloc_unlock>
 800638e:	f104 000b 	add.w	r0, r4, #11
 8006392:	1d23      	adds	r3, r4, #4
 8006394:	f020 0007 	bic.w	r0, r0, #7
 8006398:	1ac3      	subs	r3, r0, r3
 800639a:	d0d3      	beq.n	8006344 <_malloc_r+0x20>
 800639c:	425a      	negs	r2, r3
 800639e:	50e2      	str	r2, [r4, r3]
 80063a0:	e7d0      	b.n	8006344 <_malloc_r+0x20>
 80063a2:	428c      	cmp	r4, r1
 80063a4:	684b      	ldr	r3, [r1, #4]
 80063a6:	bf16      	itet	ne
 80063a8:	6063      	strne	r3, [r4, #4]
 80063aa:	6013      	streq	r3, [r2, #0]
 80063ac:	460c      	movne	r4, r1
 80063ae:	e7eb      	b.n	8006388 <_malloc_r+0x64>
 80063b0:	460c      	mov	r4, r1
 80063b2:	6849      	ldr	r1, [r1, #4]
 80063b4:	e7cc      	b.n	8006350 <_malloc_r+0x2c>
 80063b6:	1cc4      	adds	r4, r0, #3
 80063b8:	f024 0403 	bic.w	r4, r4, #3
 80063bc:	42a0      	cmp	r0, r4
 80063be:	d005      	beq.n	80063cc <_malloc_r+0xa8>
 80063c0:	1a21      	subs	r1, r4, r0
 80063c2:	4630      	mov	r0, r6
 80063c4:	f000 f82e 	bl	8006424 <_sbrk_r>
 80063c8:	3001      	adds	r0, #1
 80063ca:	d0cf      	beq.n	800636c <_malloc_r+0x48>
 80063cc:	6025      	str	r5, [r4, #0]
 80063ce:	e7db      	b.n	8006388 <_malloc_r+0x64>
 80063d0:	200000b0 	.word	0x200000b0
 80063d4:	200000b4 	.word	0x200000b4

080063d8 <_realloc_r>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	4607      	mov	r7, r0
 80063dc:	4614      	mov	r4, r2
 80063de:	460e      	mov	r6, r1
 80063e0:	b921      	cbnz	r1, 80063ec <_realloc_r+0x14>
 80063e2:	4611      	mov	r1, r2
 80063e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063e8:	f7ff bf9c 	b.w	8006324 <_malloc_r>
 80063ec:	b922      	cbnz	r2, 80063f8 <_realloc_r+0x20>
 80063ee:	f7ff ff4b 	bl	8006288 <_free_r>
 80063f2:	4625      	mov	r5, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063f8:	f000 f826 	bl	8006448 <_malloc_usable_size_r>
 80063fc:	42a0      	cmp	r0, r4
 80063fe:	d20f      	bcs.n	8006420 <_realloc_r+0x48>
 8006400:	4621      	mov	r1, r4
 8006402:	4638      	mov	r0, r7
 8006404:	f7ff ff8e 	bl	8006324 <_malloc_r>
 8006408:	4605      	mov	r5, r0
 800640a:	2800      	cmp	r0, #0
 800640c:	d0f2      	beq.n	80063f4 <_realloc_r+0x1c>
 800640e:	4631      	mov	r1, r6
 8006410:	4622      	mov	r2, r4
 8006412:	f7ff ff15 	bl	8006240 <memcpy>
 8006416:	4631      	mov	r1, r6
 8006418:	4638      	mov	r0, r7
 800641a:	f7ff ff35 	bl	8006288 <_free_r>
 800641e:	e7e9      	b.n	80063f4 <_realloc_r+0x1c>
 8006420:	4635      	mov	r5, r6
 8006422:	e7e7      	b.n	80063f4 <_realloc_r+0x1c>

08006424 <_sbrk_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4c06      	ldr	r4, [pc, #24]	; (8006440 <_sbrk_r+0x1c>)
 8006428:	2300      	movs	r3, #0
 800642a:	4605      	mov	r5, r0
 800642c:	4608      	mov	r0, r1
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	f7fa fe34 	bl	800109c <_sbrk>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_sbrk_r+0x1a>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	b103      	cbz	r3, 800643e <_sbrk_r+0x1a>
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	20000688 	.word	0x20000688

08006444 <__malloc_lock>:
 8006444:	4770      	bx	lr

08006446 <__malloc_unlock>:
 8006446:	4770      	bx	lr

08006448 <_malloc_usable_size_r>:
 8006448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800644c:	1f18      	subs	r0, r3, #4
 800644e:	2b00      	cmp	r3, #0
 8006450:	bfbc      	itt	lt
 8006452:	580b      	ldrlt	r3, [r1, r0]
 8006454:	18c0      	addlt	r0, r0, r3
 8006456:	4770      	bx	lr

08006458 <_init>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr

08006464 <_fini>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	bf00      	nop
 8006468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646a:	bc08      	pop	{r3}
 800646c:	469e      	mov	lr, r3
 800646e:	4770      	bx	lr
