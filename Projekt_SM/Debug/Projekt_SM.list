
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a854  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800aa28  0800aa28  0001aa28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acd8  0800acd8  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800acd8  0800acd8  0001acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ace0  0800ace0  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ace0  0800ace0  0001ace0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ace4  0800ace4  0001ace4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800ace8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  200002cc  0800afb4  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d20  0800afb4  00020d20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b89e  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d7e  00000000  00000000  0003bb9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f0  00000000  00000000  0003f918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  00040f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029e7d  00000000  00000000  000422e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015805  00000000  00000000  0006c15d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe049  00000000  00000000  00081962  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017f9ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b4  00000000  00000000  0017fa28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002cc 	.word	0x200002cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aa0c 	.word	0x0800aa0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002d0 	.word	0x200002d0
 800020c:	0800aa0c 	.word	0x0800aa0c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f5c:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <MX_ADC1_Init+0xa0>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000fae:	f001 ff0d 	bl	8002dcc <HAL_ADC_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000fb8:	f001 f864 	bl	8002084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000fce:	f002 f84d 	bl	800306c <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fd8:	f001 f854 	bl	8002084 <Error_Handler>
  }

}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000380 	.word	0x20000380
 8000fe8:	40012000 	.word	0x40012000

08000fec <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <MX_ADC2_Init+0x9c>)
 8001000:	4a22      	ldr	r2, [pc, #136]	; (800108c <MX_ADC2_Init+0xa0>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <MX_ADC2_Init+0x9c>)
 8001006:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800100a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <MX_ADC2_Init+0x9c>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_ADC2_Init+0x9c>)
 8001014:	2201      	movs	r2, #1
 8001016:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_ADC2_Init+0x9c>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_ADC2_Init+0x9c>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_ADC2_Init+0x9c>)
 8001028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_ADC2_Init+0x9c>)
 8001030:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_ADC2_Init+0x9c>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_ADC2_Init+0x9c>)
 800103e:	2201      	movs	r2, #1
 8001040:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_ADC2_Init+0x9c>)
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_ADC2_Init+0x9c>)
 800104c:	2201      	movs	r2, #1
 800104e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <MX_ADC2_Init+0x9c>)
 8001052:	f001 febb 	bl	8002dcc <HAL_ADC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800105c:	f001 f812 	bl	8002084 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001060:	2304      	movs	r3, #4
 8001062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001064:	2301      	movs	r3, #1
 8001066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001068:	2307      	movs	r3, #7
 800106a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_ADC2_Init+0x9c>)
 8001072:	f001 fffb 	bl	800306c <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800107c:	f001 f802 	bl	8002084 <Error_Handler>
  }

}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000338 	.word	0x20000338
 800108c:	40012100 	.word	0x40012100

08001090 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a5a      	ldr	r2, [pc, #360]	; (8001218 <HAL_ADC_MspInit+0x188>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d154      	bne.n	800115c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010b2:	4b5a      	ldr	r3, [pc, #360]	; (800121c <HAL_ADC_MspInit+0x18c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a59      	ldr	r2, [pc, #356]	; (800121c <HAL_ADC_MspInit+0x18c>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b57      	ldr	r3, [pc, #348]	; (800121c <HAL_ADC_MspInit+0x18c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b54      	ldr	r3, [pc, #336]	; (800121c <HAL_ADC_MspInit+0x18c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a53      	ldr	r2, [pc, #332]	; (800121c <HAL_ADC_MspInit+0x18c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b51      	ldr	r3, [pc, #324]	; (800121c <HAL_ADC_MspInit+0x18c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010e2:	2308      	movs	r3, #8
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	484a      	ldr	r0, [pc, #296]	; (8001220 <HAL_ADC_MspInit+0x190>)
 80010f6:	f003 fcd7 	bl	8004aa8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010fa:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <HAL_ADC_MspInit+0x194>)
 80010fc:	4a4a      	ldr	r2, [pc, #296]	; (8001228 <HAL_ADC_MspInit+0x198>)
 80010fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001100:	4b48      	ldr	r3, [pc, #288]	; (8001224 <HAL_ADC_MspInit+0x194>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <HAL_ADC_MspInit+0x194>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800110c:	4b45      	ldr	r3, [pc, #276]	; (8001224 <HAL_ADC_MspInit+0x194>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001112:	4b44      	ldr	r3, [pc, #272]	; (8001224 <HAL_ADC_MspInit+0x194>)
 8001114:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001118:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <HAL_ADC_MspInit+0x194>)
 800111c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001120:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001122:	4b40      	ldr	r3, [pc, #256]	; (8001224 <HAL_ADC_MspInit+0x194>)
 8001124:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001128:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800112a:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <HAL_ADC_MspInit+0x194>)
 800112c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001130:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001132:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <HAL_ADC_MspInit+0x194>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001138:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <HAL_ADC_MspInit+0x194>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113e:	4839      	ldr	r0, [pc, #228]	; (8001224 <HAL_ADC_MspInit+0x194>)
 8001140:	f002 fcae 	bl	8003aa0 <HAL_DMA_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800114a:	f000 ff9b 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a34      	ldr	r2, [pc, #208]	; (8001224 <HAL_ADC_MspInit+0x194>)
 8001152:	639a      	str	r2, [r3, #56]	; 0x38
 8001154:	4a33      	ldr	r2, [pc, #204]	; (8001224 <HAL_ADC_MspInit+0x194>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800115a:	e059      	b.n	8001210 <HAL_ADC_MspInit+0x180>
  else if(adcHandle->Instance==ADC2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a32      	ldr	r2, [pc, #200]	; (800122c <HAL_ADC_MspInit+0x19c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d154      	bne.n	8001210 <HAL_ADC_MspInit+0x180>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_ADC_MspInit+0x18c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a2c      	ldr	r2, [pc, #176]	; (800121c <HAL_ADC_MspInit+0x18c>)
 800116c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_ADC_MspInit+0x18c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b27      	ldr	r3, [pc, #156]	; (800121c <HAL_ADC_MspInit+0x18c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a26      	ldr	r2, [pc, #152]	; (800121c <HAL_ADC_MspInit+0x18c>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_ADC_MspInit+0x18c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001196:	2310      	movs	r3, #16
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	481d      	ldr	r0, [pc, #116]	; (8001220 <HAL_ADC_MspInit+0x190>)
 80011aa:	f003 fc7d 	bl	8004aa8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <HAL_ADC_MspInit+0x1a4>)
 80011b2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 80011b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011ba:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 80011ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 80011d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 80011da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011de:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 80011e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80011f4:	480e      	ldr	r0, [pc, #56]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 80011f6:	f002 fc53 	bl	8003aa0 <HAL_DMA_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_ADC_MspInit+0x174>
      Error_Handler();
 8001200:	f000 ff40 	bl	8002084 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 8001208:	639a      	str	r2, [r3, #56]	; 0x38
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_ADC_MspInit+0x1a0>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001210:	bf00      	nop
 8001212:	3730      	adds	r7, #48	; 0x30
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40012000 	.word	0x40012000
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000
 8001224:	200003c8 	.word	0x200003c8
 8001228:	40026410 	.word	0x40026410
 800122c:	40012100 	.word	0x40012100
 8001230:	20000428 	.word	0x20000428
 8001234:	40026440 	.word	0x40026440

08001238 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_DAC_Init+0x4c>)
 8001248:	4a0f      	ldr	r2, [pc, #60]	; (8001288 <MX_DAC_Init+0x50>)
 800124a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_DAC_Init+0x4c>)
 800124e:	f002 face 	bl	80037ee <HAL_DAC_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001258:	f000 ff14 	bl	8002084 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800125c:	232c      	movs	r3, #44	; 0x2c
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2210      	movs	r2, #16
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_DAC_Init+0x4c>)
 800126c:	f002 fb9b 	bl	80039a6 <HAL_DAC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001276:	f000 ff05 	bl	8002084 <Error_Handler>
  }

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000488 	.word	0x20000488
 8001288:	40007400 	.word	0x40007400

0800128c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a19      	ldr	r2, [pc, #100]	; (8001310 <HAL_DAC_MspInit+0x84>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d12b      	bne.n	8001306 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a18      	ldr	r2, [pc, #96]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_DAC_MspInit+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012de:	2320      	movs	r3, #32
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <HAL_DAC_MspInit+0x8c>)
 80012f2:	f003 fbd9 	bl	8004aa8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2036      	movs	r0, #54	; 0x36
 80012fc:	f002 fa41 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001300:	2036      	movs	r0, #54	; 0x36
 8001302:	f002 fa5a 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40007400 	.word	0x40007400
 8001314:	40023800 	.word	0x40023800
 8001318:	40020000 	.word	0x40020000

0800131c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <MX_DMA_Init+0x48>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <MX_DMA_Init+0x48>)
 8001328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <MX_DMA_Init+0x48>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2038      	movs	r0, #56	; 0x38
 8001340:	f002 fa1f 	bl	8003782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001344:	2038      	movs	r0, #56	; 0x38
 8001346:	f002 fa38 	bl	80037ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	203a      	movs	r0, #58	; 0x3a
 8001350:	f002 fa17 	bl	8003782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001354:	203a      	movs	r0, #58	; 0x3a
 8001356:	f002 fa30 	bl	80037ba <HAL_NVIC_EnableIRQ>

}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_ETH_Init+0x78>)
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <MX_ETH_Init+0x7c>)
 8001370:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_ETH_Init+0x78>)
 8001374:	2201      	movs	r2, #1
 8001376:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_ETH_Init+0x78>)
 800137a:	2200      	movs	r2, #0
 800137c:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_ETH_Init+0x78>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_ETH_Init+0x78>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_ETH_Init+0x78>)
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	3302      	adds	r3, #2
 8001396:	22e1      	movs	r2, #225	; 0xe1
 8001398:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_ETH_Init+0x78>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	3303      	adds	r3, #3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_ETH_Init+0x78>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_ETH_Init+0x78>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	3305      	adds	r3, #5
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_ETH_Init+0x78>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_ETH_Init+0x78>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_ETH_Init+0x78>)
 80013c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013ca:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_ETH_Init+0x78>)
 80013ce:	f002 feff 	bl	80041d0 <HAL_ETH_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80013d8:	f000 fe54 	bl	8002084 <Error_Handler>
  }

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000049c 	.word	0x2000049c
 80013e4:	40028000 	.word	0x40028000

080013e8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a4e      	ldr	r2, [pc, #312]	; (8001540 <HAL_ETH_MspInit+0x158>)
 8001406:	4293      	cmp	r3, r2
 8001408:	f040 8096 	bne.w	8001538 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800140c:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 8001412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
 8001418:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	623b      	str	r3, [r7, #32]
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4a46      	ldr	r2, [pc, #280]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 800142a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800142e:	6313      	str	r3, [r2, #48]	; 0x30
 8001430:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	4a40      	ldr	r2, [pc, #256]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 8001442:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001446:	6313      	str	r3, [r2, #48]	; 0x30
 8001448:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001454:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a3a      	ldr	r2, [pc, #232]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a34      	ldr	r2, [pc, #208]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
 8001478:	4b32      	ldr	r3, [pc, #200]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a2e      	ldr	r2, [pc, #184]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
 8001490:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800149c:	4b29      	ldr	r3, [pc, #164]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a28      	ldr	r2, [pc, #160]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 80014a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_ETH_MspInit+0x15c>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014b4:	2332      	movs	r3, #50	; 0x32
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014c4:	230b      	movs	r3, #11
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	481e      	ldr	r0, [pc, #120]	; (8001548 <HAL_ETH_MspInit+0x160>)
 80014d0:	f003 faea 	bl	8004aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014d4:	2386      	movs	r3, #134	; 0x86
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014e4:	230b      	movs	r3, #11
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4817      	ldr	r0, [pc, #92]	; (800154c <HAL_ETH_MspInit+0x164>)
 80014f0:	f003 fada 	bl	8004aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001506:	230b      	movs	r3, #11
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <HAL_ETH_MspInit+0x168>)
 8001512:	f003 fac9 	bl	8004aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001516:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001528:	230b      	movs	r3, #11
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <HAL_ETH_MspInit+0x16c>)
 8001534:	f003 fab8 	bl	8004aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001538:	bf00      	nop
 800153a:	3738      	adds	r7, #56	; 0x38
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40028000 	.word	0x40028000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020800 	.word	0x40020800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40021800 	.word	0x40021800

08001558 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156e:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <MX_GPIO_Init+0x194>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a5e      	ldr	r2, [pc, #376]	; (80016ec <MX_GPIO_Init+0x194>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b5c      	ldr	r3, [pc, #368]	; (80016ec <MX_GPIO_Init+0x194>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4b59      	ldr	r3, [pc, #356]	; (80016ec <MX_GPIO_Init+0x194>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a58      	ldr	r2, [pc, #352]	; (80016ec <MX_GPIO_Init+0x194>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <MX_GPIO_Init+0x194>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159e:	4b53      	ldr	r3, [pc, #332]	; (80016ec <MX_GPIO_Init+0x194>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a52      	ldr	r2, [pc, #328]	; (80016ec <MX_GPIO_Init+0x194>)
 80015a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b50      	ldr	r3, [pc, #320]	; (80016ec <MX_GPIO_Init+0x194>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <MX_GPIO_Init+0x194>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a4c      	ldr	r2, [pc, #304]	; (80016ec <MX_GPIO_Init+0x194>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <MX_GPIO_Init+0x194>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b47      	ldr	r3, [pc, #284]	; (80016ec <MX_GPIO_Init+0x194>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a46      	ldr	r2, [pc, #280]	; (80016ec <MX_GPIO_Init+0x194>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b44      	ldr	r3, [pc, #272]	; (80016ec <MX_GPIO_Init+0x194>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <MX_GPIO_Init+0x194>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a40      	ldr	r2, [pc, #256]	; (80016ec <MX_GPIO_Init+0x194>)
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <MX_GPIO_Init+0x194>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <MX_GPIO_Init+0x194>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a3a      	ldr	r2, [pc, #232]	; (80016ec <MX_GPIO_Init+0x194>)
 8001604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <MX_GPIO_Init+0x194>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|Enable_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2114      	movs	r1, #20
 800161a:	4835      	ldr	r0, [pc, #212]	; (80016f0 <MX_GPIO_Init+0x198>)
 800161c:	f003 fbee 	bl	8004dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f244 0181 	movw	r1, #16513	; 0x4081
 8001626:	4833      	ldr	r0, [pc, #204]	; (80016f4 <MX_GPIO_Init+0x19c>)
 8001628:	f003 fbe8 	bl	8004dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2140      	movs	r1, #64	; 0x40
 8001630:	4831      	ldr	r0, [pc, #196]	; (80016f8 <MX_GPIO_Init+0x1a0>)
 8001632:	f003 fbe3 	bl	8004dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	21f0      	movs	r1, #240	; 0xf0
 800163a:	4830      	ldr	r0, [pc, #192]	; (80016fc <MX_GPIO_Init+0x1a4>)
 800163c:	f003 fbde 	bl	8004dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = RS_Pin|Enable_Pin;
 8001640:	2314      	movs	r3, #20
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	4826      	ldr	r0, [pc, #152]	; (80016f0 <MX_GPIO_Init+0x198>)
 8001658:	f003 fa26 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800165c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <MX_GPIO_Init+0x1a8>)
 8001664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4824      	ldr	r0, [pc, #144]	; (8001704 <MX_GPIO_Init+0x1ac>)
 8001672:	f003 fa19 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001676:	f244 0381 	movw	r3, #16513	; 0x4081
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4619      	mov	r1, r3
 800168e:	4819      	ldr	r0, [pc, #100]	; (80016f4 <MX_GPIO_Init+0x19c>)
 8001690:	f003 fa0a 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001694:	2340      	movs	r3, #64	; 0x40
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	4813      	ldr	r0, [pc, #76]	; (80016f8 <MX_GPIO_Init+0x1a0>)
 80016ac:	f003 f9fc 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_GPIO_Init+0x1a0>)
 80016c4:	f003 f9f0 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 80016c8:	23f0      	movs	r3, #240	; 0xf0
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	4619      	mov	r1, r3
 80016de:	4807      	ldr	r0, [pc, #28]	; (80016fc <MX_GPIO_Init+0x1a4>)
 80016e0:	f003 f9e2 	bl	8004aa8 <HAL_GPIO_Init>

}
 80016e4:	bf00      	nop
 80016e6:	3730      	adds	r7, #48	; 0x30
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40020400 	.word	0x40020400
 80016f8:	40021800 	.word	0x40021800
 80016fc:	40020c00 	.word	0x40020c00
 8001700:	10110000 	.word	0x10110000
 8001704:	40020800 	.word	0x40020800

08001708 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8001716:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800171a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800171e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001722:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8001724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001726:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001728:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800172a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f80e 	bl	800175e <Lcd_init>

	return lcd;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	461d      	mov	r5, r3
 8001746:	f107 0410 	add.w	r4, r7, #16
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001752:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	3728      	adds	r7, #40	; 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bdb0      	pop	{r4, r5, r7, pc}

0800175e <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7d9b      	ldrb	r3, [r3, #22]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10c      	bne.n	8001788 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800176e:	2133      	movs	r1, #51	; 0x33
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f86d 	bl	8001850 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8001776:	2132      	movs	r1, #50	; 0x32
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f869 	bl	8001850 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800177e:	2128      	movs	r1, #40	; 0x28
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f865 	bl	8001850 <lcd_write_command>
 8001786:	e003      	b.n	8001790 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001788:	2138      	movs	r1, #56	; 0x38
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f860 	bl	8001850 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001790:	2101      	movs	r1, #1
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f85c 	bl	8001850 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001798:	210c      	movs	r1, #12
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f858 	bl	8001850 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80017a0:	2106      	movs	r1, #6
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f854 	bl	8001850 <lcd_write_command>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	4906      	ldr	r1, [pc, #24]	; (80017dc <Lcd_int+0x2c>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f006 ff84 	bl	80086d0 <siprintf>

	Lcd_string(lcd, buffer);
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f806 	bl	80017e0 <Lcd_string>
}
 80017d4:	bf00      	nop
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	0800aa28 	.word	0x0800aa28

080017e0 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e00a      	b.n	8001806 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f856 	bl	80018ac <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	3301      	adds	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	7bfc      	ldrb	r4, [r7, #15]
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f7fe fd0b 	bl	8000224 <strlen>
 800180e:	4603      	mov	r3, r0
 8001810:	429c      	cmp	r4, r3
 8001812:	d3ed      	bcc.n	80017f0 <Lcd_string+0x10>
	}
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}

0800181c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
 8001828:	4613      	mov	r3, r2
 800182a:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	4a07      	ldr	r2, [pc, #28]	; (800184c <Lcd_cursor+0x30>)
 8001830:	5cd2      	ldrb	r2, [r2, r3]
 8001832:	78bb      	ldrb	r3, [r7, #2]
 8001834:	4413      	add	r3, r2
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3b80      	subs	r3, #128	; 0x80
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f806 	bl	8001850 <lcd_write_command>
	#endif
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	0800aab0 	.word	0x0800aab0

08001850 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6898      	ldr	r0, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	899b      	ldrh	r3, [r3, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	4619      	mov	r1, r3
 8001868:	f003 fac8 	bl	8004dfc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7d9b      	ldrb	r3, [r3, #22]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d111      	bne.n	8001898 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2204      	movs	r2, #4
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f842 	bl	8001908 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2204      	movs	r2, #4
 800188e:	4619      	mov	r1, r3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f839 	bl	8001908 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001896:	e005      	b.n	80018a4 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	2208      	movs	r2, #8
 800189c:	4619      	mov	r1, r3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f832 	bl	8001908 <lcd_write>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6898      	ldr	r0, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	899b      	ldrh	r3, [r3, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4619      	mov	r1, r3
 80018c4:	f003 fa9a 	bl	8004dfc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7d9b      	ldrb	r3, [r3, #22]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d111      	bne.n	80018f4 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2204      	movs	r2, #4
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f814 	bl	8001908 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2204      	movs	r2, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f80b 	bl	8001908 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80018f2:	e005      	b.n	8001900 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	2208      	movs	r2, #8
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f804 	bl	8001908 <lcd_write>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
 8001914:	4613      	mov	r3, r2
 8001916:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e019      	b.n	8001952 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	8819      	ldrh	r1, [r3, #0]
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	fa42 f303 	asr.w	r3, r2, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	f003 fa58 	bl	8004dfc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	3301      	adds	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	78bb      	ldrb	r3, [r7, #2]
 8001956:	429a      	cmp	r2, r3
 8001958:	d3e1      	bcc.n	800191e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6918      	ldr	r0, [r3, #16]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8a9b      	ldrh	r3, [r3, #20]
 8001962:	2201      	movs	r2, #1
 8001964:	4619      	mov	r1, r3
 8001966:	f003 fa49 	bl	8004dfc <HAL_GPIO_WritePin>
	DELAY(1);
 800196a:	2001      	movs	r0, #1
 800196c:	f001 fa0c 	bl	8002d88 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6918      	ldr	r0, [r3, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	8a9b      	ldrh	r3, [r3, #20]
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	f003 fa3e 	bl	8004dfc <HAL_GPIO_WritePin>
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <Set_Sinus_Values>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//Scale samples values to set amplitude
void Set_Sinus_Values()
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
	for(int j = 0; j < 100; j++) {
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	e032      	b.n	80019fa <Set_Sinus_Values+0x72>
		sine[j] = (float)sine[j] * A * 2.0 / 3.3;
 8001994:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <Set_Sinus_Values+0x88>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a4:	ee17 0a90 	vmov	r0, s15
 80019a8:	f7fe fdfe 	bl	80005a8 <__aeabi_f2d>
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <Set_Sinus_Values+0x8c>)
 80019ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	f7fe fe4f 	bl	8000658 <__aeabi_dmul>
 80019ba:	4603      	mov	r3, r0
 80019bc:	460c      	mov	r4, r1
 80019be:	4618      	mov	r0, r3
 80019c0:	4621      	mov	r1, r4
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	f7fe fc91 	bl	80002ec <__adddf3>
 80019ca:	4603      	mov	r3, r0
 80019cc:	460c      	mov	r4, r1
 80019ce:	4618      	mov	r0, r3
 80019d0:	4621      	mov	r1, r4
 80019d2:	a30d      	add	r3, pc, #52	; (adr r3, 8001a08 <Set_Sinus_Values+0x80>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe ff68 	bl	80008ac <__aeabi_ddiv>
 80019dc:	4603      	mov	r3, r0
 80019de:	460c      	mov	r4, r1
 80019e0:	4618      	mov	r0, r3
 80019e2:	4621      	mov	r1, r4
 80019e4:	f7ff f910 	bl	8000c08 <__aeabi_d2uiz>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b299      	uxth	r1, r3
 80019ec:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <Set_Sinus_Values+0x88>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j = 0; j < 100; j++) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3301      	adds	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b63      	cmp	r3, #99	; 0x63
 80019fe:	ddc9      	ble.n	8001994 <Set_Sinus_Values+0xc>
	}
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	66666666 	.word	0x66666666
 8001a0c:	400a6666 	.word	0x400a6666
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000000 	.word	0x20000000

08001a18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) { //If interrupt comes from timer 2
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a28:	d102      	bne.n	8001a30 <HAL_TIM_PeriodElapsedCallback+0x18>
		ifDisplay = 1;
 8001a2a:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM3) { //If interrupt comes from timer 3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d102      	bne.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x28>
		ifServo=1;
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM4){ //If interrupt comes from timer 4
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d116      	bne.n	8001a78 <HAL_TIM_PeriodElapsedCallback+0x60>
		//HAL_GPIO_WritePin(_GPIO_Port, _Pin, GPIO_PIN_SET);
		i += 1;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a52:	6013      	str	r3, [r2, #0]
		if (i >= 50) {
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b31      	cmp	r3, #49	; 0x31
 8001a5a:	dd02      	ble.n	8001a62 <HAL_TIM_PeriodElapsedCallback+0x4a>
			i = 0;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
		}
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sine[2*i]);
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2110      	movs	r1, #16
 8001a72:	481b      	ldr	r0, [pc, #108]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a74:	f001 ffe4 	bl	8003a40 <HAL_DAC_SetValue>
		//HAL_GPIO_WritePin(_GPIO_Port, _Pin, GPIO_PIN_RESET);
	}
	if(htim->Instance == TIM5){ //If interrupt comes from timer 5
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d103      	bne.n	8001a8a <HAL_TIM_PeriodElapsedCallback+0x72>
		pot_value = pot_read_from_DMA;
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001a88:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM6){ //If interrupt comes from timer 6
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d114      	bne.n	8001abe <HAL_TIM_PeriodElapsedCallback+0xa6>
		if(current_sample < BUFFER_SIZE) {
 8001a94:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2264      	movs	r2, #100	; 0x64
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	da0c      	bge.n	8001ab8 <HAL_TIM_PeriodElapsedCallback+0xa0>
			sensor_values_buffer[current_sample] = sensor_read_from_DMA;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	4915      	ldr	r1, [pc, #84]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			current_sample++;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001ab4:	6013      	str	r3, [r2, #0]
		}
		else {
			calculateRMS = 1;
		}
	}
}
 8001ab6:	e002      	b.n	8001abe <HAL_TIM_PeriodElapsedCallback+0xa6>
			calculateRMS = 1;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000304 	.word	0x20000304
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	20000308 	.word	0x20000308
 8001ad4:	40000800 	.word	0x40000800
 8001ad8:	200002e8 	.word	0x200002e8
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	20000488 	.word	0x20000488
 8001ae4:	40000c00 	.word	0x40000c00
 8001ae8:	200002f0 	.word	0x200002f0
 8001aec:	200002ec 	.word	0x200002ec
 8001af0:	40001000 	.word	0x40001000
 8001af4:	200002f8 	.word	0x200002f8
 8001af8:	200002fc 	.word	0x200002fc
 8001afc:	200004e4 	.word	0x200004e4
 8001b00:	20000300 	.word	0x20000300

08001b04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	//Listening again
	UART_status = HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedMessage, 7);
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	4912      	ldr	r1, [pc, #72]	; (8001b58 <HAL_UART_RxCpltCallback+0x54>)
 8001b10:	4812      	ldr	r0, [pc, #72]	; (8001b5c <HAL_UART_RxCpltCallback+0x58>)
 8001b12:	f005 fc69 	bl	80073e8 <HAL_UART_Receive_IT>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_UART_RxCpltCallback+0x5c>)
 8001b1c:	601a      	str	r2, [r3, #0]

	//Save received data
	for (int i = 0; i < MESSAGE_MAX_SIZE; i++) {
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e00b      	b.n	8001b3c <HAL_UART_RxCpltCallback+0x38>
		savedMessage[i] = receivedMessage[i];
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <HAL_UART_RxCpltCallback+0x54>)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	7819      	ldrb	r1, [r3, #0]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <HAL_UART_RxCpltCallback+0x60>)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	460a      	mov	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MESSAGE_MAX_SIZE; i++) {
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b07      	cmp	r3, #7
 8001b40:	ddf0      	ble.n	8001b24 <HAL_UART_RxCpltCallback+0x20>
	}
	receivedMessage[0] = '\0';
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_UART_RxCpltCallback+0x54>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]

	//Set flag to action
	ifUART = 1;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_UART_RxCpltCallback+0x64>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000310 	.word	0x20000310
 8001b5c:	20000894 	.word	0x20000894
 8001b60:	20000328 	.word	0x20000328
 8001b64:	20000318 	.word	0x20000318
 8001b68:	20000324 	.word	0x20000324
 8001b6c:	00000000 	.word	0x00000000

08001b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	b08d      	sub	sp, #52	; 0x34
 8001b74:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b76:	f001 f8aa 	bl	8002cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b7a:	f000 f9dd 	bl	8001f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b7e:	f7ff fceb 	bl	8001558 <MX_GPIO_Init>
  MX_ETH_Init();
 8001b82:	f7ff fbf1 	bl	8001368 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b86:	f000 ff11 	bl	80029ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b8a:	f000 ffed 	bl	8002b68 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8001b8e:	f7ff fbc5 	bl	800131c <MX_DMA_Init>
  MX_ADC1_Init();
 8001b92:	f7ff f9d9 	bl	8000f48 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001b96:	f000 fc0b 	bl	80023b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b9a:	f000 fcb5 	bl	8002508 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b9e:	f000 fd01 	bl	80025a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ba2:	f000 fd4f 	bl	8002644 <MX_TIM4_Init>
  MX_DAC_Init();
 8001ba6:	f7ff fb47 	bl	8001238 <MX_DAC_Init>
  MX_ADC2_Init();
 8001baa:	f7ff fa1f 	bl	8000fec <MX_ADC2_Init>
  MX_TIM5_Init();
 8001bae:	f000 fd97 	bl	80026e0 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001bb2:	f000 ff2b 	bl	8002a0c <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8001bb6:	f000 fde3 	bl	8002780 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //Start tim2 to write data from joystick to the lcd display
  HAL_TIM_Base_Start_IT(&htim2);
 8001bba:	48b3      	ldr	r0, [pc, #716]	; (8001e88 <main+0x318>)
 8001bbc:	f004 fb52 	bl	8006264 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001bc0:	48b2      	ldr	r0, [pc, #712]	; (8001e8c <main+0x31c>)
 8001bc2:	f004 fb4f 	bl	8006264 <HAL_TIM_Base_Start_IT>

  //Create lcd
  my_lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, Enable_GPIO_Port, Enable_Pin, LCD_4_BIT_MODE);
 8001bc6:	4cb2      	ldr	r4, [pc, #712]	; (8001e90 <main+0x320>)
 8001bc8:	4638      	mov	r0, r7
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9303      	str	r3, [sp, #12]
 8001bce:	2310      	movs	r3, #16
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	4bb0      	ldr	r3, [pc, #704]	; (8001e94 <main+0x324>)
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	4bae      	ldr	r3, [pc, #696]	; (8001e94 <main+0x324>)
 8001bdc:	4aae      	ldr	r2, [pc, #696]	; (8001e98 <main+0x328>)
 8001bde:	49af      	ldr	r1, [pc, #700]	; (8001e9c <main+0x32c>)
 8001be0:	f7ff fd92 	bl	8001708 <Lcd_create>
 8001be4:	4625      	mov	r5, r4
 8001be6:	463c      	mov	r4, r7
 8001be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bf0:	e885 0003 	stmia.w	r5, {r0, r1}

  //Initialize micro servo sg90
  Servo_Init(&servo1, &htim1, TIM_CHANNEL_4);
 8001bf4:	220c      	movs	r2, #12
 8001bf6:	49aa      	ldr	r1, [pc, #680]	; (8001ea0 <main+0x330>)
 8001bf8:	48aa      	ldr	r0, [pc, #680]	; (8001ea4 <main+0x334>)
 8001bfa:	f000 fa4a 	bl	8002092 <Servo_Init>

  //Sinus
  Set_Sinus_Values();
 8001bfe:	f7ff fec3 	bl	8001988 <Set_Sinus_Values>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001c02:	2110      	movs	r1, #16
 8001c04:	48a8      	ldr	r0, [pc, #672]	; (8001ea8 <main+0x338>)
 8001c06:	f001 fe14 	bl	8003832 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001c0a:	48a8      	ldr	r0, [pc, #672]	; (8001eac <main+0x33c>)
 8001c0c:	f004 fb2a 	bl	8006264 <HAL_TIM_Base_Start_IT>

  //Interrupts for DMA adc1 (potentiometer)
  HAL_TIM_Base_Start_IT(&htim5);
 8001c10:	48a7      	ldr	r0, [pc, #668]	; (8001eb0 <main+0x340>)
 8001c12:	f004 fb27 	bl	8006264 <HAL_TIM_Base_Start_IT>

  //Interrupts for DMA adc2 (sensor)
  HAL_TIM_Base_Start_IT(&htim6);
 8001c16:	48a7      	ldr	r0, [pc, #668]	; (8001eb4 <main+0x344>)
 8001c18:	f004 fb24 	bl	8006264 <HAL_TIM_Base_Start_IT>

  //Start ADC conversion from the potentiometer and sensor
  HAL_ADC_Start_DMA(&hadc1, &pot_read_from_DMA, 1);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	49a6      	ldr	r1, [pc, #664]	; (8001eb8 <main+0x348>)
 8001c20:	48a6      	ldr	r0, [pc, #664]	; (8001ebc <main+0x34c>)
 8001c22:	f001 f917 	bl	8002e54 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &sensor_read_from_DMA, 1);
 8001c26:	2201      	movs	r2, #1
 8001c28:	49a5      	ldr	r1, [pc, #660]	; (8001ec0 <main+0x350>)
 8001c2a:	48a6      	ldr	r0, [pc, #664]	; (8001ec4 <main+0x354>)
 8001c2c:	f001 f912 	bl	8002e54 <HAL_ADC_Start_DMA>

  //UART listening
  UART_status = HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedMessage, 7);
 8001c30:	2207      	movs	r2, #7
 8001c32:	49a5      	ldr	r1, [pc, #660]	; (8001ec8 <main+0x358>)
 8001c34:	48a5      	ldr	r0, [pc, #660]	; (8001ecc <main+0x35c>)
 8001c36:	f005 fbd7 	bl	80073e8 <HAL_UART_Receive_IT>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4ba4      	ldr	r3, [pc, #656]	; (8001ed0 <main+0x360>)
 8001c40:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ifDisplay == 1) {
 8001c42:	4ba4      	ldr	r3, [pc, #656]	; (8001ed4 <main+0x364>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d132      	bne.n	8001cb0 <main+0x140>
		  Lcd_cursor(&my_lcd, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4890      	ldr	r0, [pc, #576]	; (8001e90 <main+0x320>)
 8001c50:	f7ff fde4 	bl	800181c <Lcd_cursor>
		  Lcd_string(&my_lcd, "                ");
 8001c54:	49a0      	ldr	r1, [pc, #640]	; (8001ed8 <main+0x368>)
 8001c56:	488e      	ldr	r0, [pc, #568]	; (8001e90 <main+0x320>)
 8001c58:	f7ff fdc2 	bl	80017e0 <Lcd_string>
		  Lcd_cursor(&my_lcd, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	488b      	ldr	r0, [pc, #556]	; (8001e90 <main+0x320>)
 8001c62:	f7ff fddb 	bl	800181c <Lcd_cursor>
		  Lcd_string(&my_lcd, "Sens: ");
 8001c66:	499d      	ldr	r1, [pc, #628]	; (8001edc <main+0x36c>)
 8001c68:	4889      	ldr	r0, [pc, #548]	; (8001e90 <main+0x320>)
 8001c6a:	f7ff fdb9 	bl	80017e0 <Lcd_string>
		  Lcd_int(&my_lcd, sensor_RMS);
 8001c6e:	4b9c      	ldr	r3, [pc, #624]	; (8001ee0 <main+0x370>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4619      	mov	r1, r3
 8001c74:	4886      	ldr	r0, [pc, #536]	; (8001e90 <main+0x320>)
 8001c76:	f7ff fd9b 	bl	80017b0 <Lcd_int>
		  Lcd_cursor(&my_lcd, 1, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4884      	ldr	r0, [pc, #528]	; (8001e90 <main+0x320>)
 8001c80:	f7ff fdcc 	bl	800181c <Lcd_cursor>
		  Lcd_string(&my_lcd, "                ");
 8001c84:	4994      	ldr	r1, [pc, #592]	; (8001ed8 <main+0x368>)
 8001c86:	4882      	ldr	r0, [pc, #520]	; (8001e90 <main+0x320>)
 8001c88:	f7ff fdaa 	bl	80017e0 <Lcd_string>
		  Lcd_cursor(&my_lcd, 1, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2101      	movs	r1, #1
 8001c90:	487f      	ldr	r0, [pc, #508]	; (8001e90 <main+0x320>)
 8001c92:	f7ff fdc3 	bl	800181c <Lcd_cursor>
		  Lcd_string(&my_lcd, "Pot: ");
 8001c96:	4993      	ldr	r1, [pc, #588]	; (8001ee4 <main+0x374>)
 8001c98:	487d      	ldr	r0, [pc, #500]	; (8001e90 <main+0x320>)
 8001c9a:	f7ff fda1 	bl	80017e0 <Lcd_string>
		  Lcd_int(&my_lcd, pot_value);
 8001c9e:	4b92      	ldr	r3, [pc, #584]	; (8001ee8 <main+0x378>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	487a      	ldr	r0, [pc, #488]	; (8001e90 <main+0x320>)
 8001ca6:	f7ff fd83 	bl	80017b0 <Lcd_int>
		  ifDisplay = 0;
 8001caa:	4b8a      	ldr	r3, [pc, #552]	; (8001ed4 <main+0x364>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
	  }
	  if(ifServo)
 8001cb0:	4b8e      	ldr	r3, [pc, #568]	; (8001eec <main+0x37c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d016      	beq.n	8001ce6 <main+0x176>
	  {
		  angle = pot_value * 150 / 4095 + 30;
 8001cb8:	4b8b      	ldr	r3, [pc, #556]	; (8001ee8 <main+0x378>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2296      	movs	r2, #150	; 0x96
 8001cbe:	fb02 f203 	mul.w	r2, r2, r3
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <main+0x380>)
 8001cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8001cc8:	1ad2      	subs	r2, r2, r3
 8001cca:	0852      	lsrs	r2, r2, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	0adb      	lsrs	r3, r3, #11
 8001cd0:	331e      	adds	r3, #30
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b87      	ldr	r3, [pc, #540]	; (8001ef4 <main+0x384>)
 8001cd6:	601a      	str	r2, [r3, #0]
		  Servo_SetAngle(&servo1, angle);
 8001cd8:	4b86      	ldr	r3, [pc, #536]	; (8001ef4 <main+0x384>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4870      	ldr	r0, [pc, #448]	; (8001ea4 <main+0x334>)
 8001ce2:	f000 fa0a 	bl	80020fa <Servo_SetAngle>
	  }
	  if(calculateRMS) {
 8001ce6:	4b84      	ldr	r3, [pc, #528]	; (8001ef8 <main+0x388>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d050      	beq.n	8001d90 <main+0x220>
			int squares_sum = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	e026      	b.n	8001d46 <main+0x1d6>
				squares_sum += pow(sensor_values_buffer[i], 2);
 8001cf8:	4a80      	ldr	r2, [pc, #512]	; (8001efc <main+0x38c>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc2f 	bl	8000564 <__aeabi_ui2d>
 8001d06:	4603      	mov	r3, r0
 8001d08:	460c      	mov	r4, r1
 8001d0a:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8001e80 <main+0x310>
 8001d0e:	ec44 3b10 	vmov	d0, r3, r4
 8001d12:	f007 fdc9 	bl	80098a8 <pow>
 8001d16:	ec56 5b10 	vmov	r5, r6, d0
 8001d1a:	69f8      	ldr	r0, [r7, #28]
 8001d1c:	f7fe fc32 	bl	8000584 <__aeabi_i2d>
 8001d20:	4603      	mov	r3, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	461a      	mov	r2, r3
 8001d26:	4623      	mov	r3, r4
 8001d28:	4628      	mov	r0, r5
 8001d2a:	4631      	mov	r1, r6
 8001d2c:	f7fe fade 	bl	80002ec <__adddf3>
 8001d30:	4603      	mov	r3, r0
 8001d32:	460c      	mov	r4, r1
 8001d34:	4618      	mov	r0, r3
 8001d36:	4621      	mov	r1, r4
 8001d38:	f7fe ff3e 	bl	8000bb8 <__aeabi_d2iz>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	61fb      	str	r3, [r7, #28]
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	3301      	adds	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	2264      	movs	r2, #100	; 0x64
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	dbd4      	blt.n	8001cf8 <main+0x188>
			}
			sensor_RMS = sqrt(squares_sum / 100.0);
 8001d4e:	69f8      	ldr	r0, [r7, #28]
 8001d50:	f7fe fc18 	bl	8000584 <__aeabi_i2d>
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	4b69      	ldr	r3, [pc, #420]	; (8001f00 <main+0x390>)
 8001d5a:	f7fe fda7 	bl	80008ac <__aeabi_ddiv>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460c      	mov	r4, r1
 8001d62:	ec44 3b17 	vmov	d7, r3, r4
 8001d66:	eeb0 0a47 	vmov.f32	s0, s14
 8001d6a:	eef0 0a67 	vmov.f32	s1, s15
 8001d6e:	f007 ff0b 	bl	8009b88 <sqrt>
 8001d72:	ec54 3b10 	vmov	r3, r4, d0
 8001d76:	4618      	mov	r0, r3
 8001d78:	4621      	mov	r1, r4
 8001d7a:	f7fe ff45 	bl	8000c08 <__aeabi_d2uiz>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b57      	ldr	r3, [pc, #348]	; (8001ee0 <main+0x370>)
 8001d82:	601a      	str	r2, [r3, #0]
			current_sample = 0;
 8001d84:	4b5f      	ldr	r3, [pc, #380]	; (8001f04 <main+0x394>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
			calculateRMS = 0;
 8001d8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <main+0x388>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
	  }

	  //LEDs' control by UART
	  if(ifUART) {
 8001d90:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <main+0x398>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f43f af54 	beq.w	8001c42 <main+0xd2>
		  if (!strcmp(savedMessage, "LD_R_ON") || !strcmp(savedMessage, "LD_G_ON") || !strcmp(savedMessage, "LD_B_ON")) {
 8001d9a:	495c      	ldr	r1, [pc, #368]	; (8001f0c <main+0x39c>)
 8001d9c:	485c      	ldr	r0, [pc, #368]	; (8001f10 <main+0x3a0>)
 8001d9e:	f7fe fa37 	bl	8000210 <strcmp>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00d      	beq.n	8001dc4 <main+0x254>
 8001da8:	495a      	ldr	r1, [pc, #360]	; (8001f14 <main+0x3a4>)
 8001daa:	4859      	ldr	r0, [pc, #356]	; (8001f10 <main+0x3a0>)
 8001dac:	f7fe fa30 	bl	8000210 <strcmp>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <main+0x254>
 8001db6:	4958      	ldr	r1, [pc, #352]	; (8001f18 <main+0x3a8>)
 8001db8:	4855      	ldr	r0, [pc, #340]	; (8001f10 <main+0x3a0>)
 8001dba:	f7fe fa29 	bl	8000210 <strcmp>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d121      	bne.n	8001e08 <main+0x298>
			  sscanf((char*)savedMessage, "LD_%c_ON", &ledColor);
 8001dc4:	4a55      	ldr	r2, [pc, #340]	; (8001f1c <main+0x3ac>)
 8001dc6:	4956      	ldr	r1, [pc, #344]	; (8001f20 <main+0x3b0>)
 8001dc8:	4851      	ldr	r0, [pc, #324]	; (8001f10 <main+0x3a0>)
 8001dca:	f006 fca1 	bl	8008710 <siscanf>
			  switch(ledColor) {
 8001dce:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <main+0x3ac>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b47      	cmp	r3, #71	; 0x47
 8001dd4:	d004      	beq.n	8001de0 <main+0x270>
 8001dd6:	2b52      	cmp	r3, #82	; 0x52
 8001dd8:	d00c      	beq.n	8001df4 <main+0x284>
 8001dda:	2b42      	cmp	r3, #66	; 0x42
 8001ddc:	d005      	beq.n	8001dea <main+0x27a>
 8001dde:	e00f      	b.n	8001e00 <main+0x290>
			  case 'G':
				  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	2101      	movs	r1, #1
 8001de4:	484f      	ldr	r0, [pc, #316]	; (8001f24 <main+0x3b4>)
 8001de6:	f003 f809 	bl	8004dfc <HAL_GPIO_WritePin>
			  case 'B':
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001dea:	2201      	movs	r2, #1
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	484d      	ldr	r0, [pc, #308]	; (8001f24 <main+0x3b4>)
 8001df0:	f003 f804 	bl	8004dfc <HAL_GPIO_WritePin>
			  case 'R':
				  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001df4:	2201      	movs	r2, #1
 8001df6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dfa:	484a      	ldr	r0, [pc, #296]	; (8001f24 <main+0x3b4>)
 8001dfc:	f002 fffe 	bl	8004dfc <HAL_GPIO_WritePin>
			  }
			  savedMessage[0] = '\0';
 8001e00:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <main+0x3a0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
		  if (!strcmp(savedMessage, "LD_R_ON") || !strcmp(savedMessage, "LD_G_ON") || !strcmp(savedMessage, "LD_B_ON")) {
 8001e06:	e035      	b.n	8001e74 <main+0x304>
		  }
		  else if (!strcmp(savedMessage, "LD_R_OFF") || !strcmp(savedMessage, "LD_G_OFF") || !strcmp(savedMessage, "LD_B_OFF")) {
 8001e08:	4947      	ldr	r1, [pc, #284]	; (8001f28 <main+0x3b8>)
 8001e0a:	4841      	ldr	r0, [pc, #260]	; (8001f10 <main+0x3a0>)
 8001e0c:	f7fe fa00 	bl	8000210 <strcmp>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00d      	beq.n	8001e32 <main+0x2c2>
 8001e16:	4945      	ldr	r1, [pc, #276]	; (8001f2c <main+0x3bc>)
 8001e18:	483d      	ldr	r0, [pc, #244]	; (8001f10 <main+0x3a0>)
 8001e1a:	f7fe f9f9 	bl	8000210 <strcmp>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <main+0x2c2>
 8001e24:	4942      	ldr	r1, [pc, #264]	; (8001f30 <main+0x3c0>)
 8001e26:	483a      	ldr	r0, [pc, #232]	; (8001f10 <main+0x3a0>)
 8001e28:	f7fe f9f2 	bl	8000210 <strcmp>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d120      	bne.n	8001e74 <main+0x304>
			  sscanf((char*)savedMessage, "LD_%c_OFF", &ledColor);
 8001e32:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <main+0x3ac>)
 8001e34:	493f      	ldr	r1, [pc, #252]	; (8001f34 <main+0x3c4>)
 8001e36:	4836      	ldr	r0, [pc, #216]	; (8001f10 <main+0x3a0>)
 8001e38:	f006 fc6a 	bl	8008710 <siscanf>
			  switch(ledColor) {
 8001e3c:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <main+0x3ac>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b47      	cmp	r3, #71	; 0x47
 8001e42:	d004      	beq.n	8001e4e <main+0x2de>
 8001e44:	2b52      	cmp	r3, #82	; 0x52
 8001e46:	d00c      	beq.n	8001e62 <main+0x2f2>
 8001e48:	2b42      	cmp	r3, #66	; 0x42
 8001e4a:	d005      	beq.n	8001e58 <main+0x2e8>
 8001e4c:	e00f      	b.n	8001e6e <main+0x2fe>
			  case 'G':
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2101      	movs	r1, #1
 8001e52:	4834      	ldr	r0, [pc, #208]	; (8001f24 <main+0x3b4>)
 8001e54:	f002 ffd2 	bl	8004dfc <HAL_GPIO_WritePin>
			  case 'B':
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2180      	movs	r1, #128	; 0x80
 8001e5c:	4831      	ldr	r0, [pc, #196]	; (8001f24 <main+0x3b4>)
 8001e5e:	f002 ffcd 	bl	8004dfc <HAL_GPIO_WritePin>
			  case 'R':
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e68:	482e      	ldr	r0, [pc, #184]	; (8001f24 <main+0x3b4>)
 8001e6a:	f002 ffc7 	bl	8004dfc <HAL_GPIO_WritePin>
			  }
			  savedMessage[0] = '\0';
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <main+0x3a0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
		  }

		  ifUART = 0;
 8001e74:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <main+0x398>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
	  if(ifDisplay == 1) {
 8001e7a:	e6e2      	b.n	8001c42 <main+0xd2>
 8001e7c:	f3af 8000 	nop.w
 8001e80:	00000000 	.word	0x00000000
 8001e84:	40000000 	.word	0x40000000
 8001e88:	200007d4 	.word	0x200007d4
 8001e8c:	20000714 	.word	0x20000714
 8001e90:	2000067c 	.word	0x2000067c
 8001e94:	40021000 	.word	0x40021000
 8001e98:	200000e4 	.word	0x200000e4
 8001e9c:	200000d4 	.word	0x200000d4
 8001ea0:	20000794 	.word	0x20000794
 8001ea4:	20000674 	.word	0x20000674
 8001ea8:	20000488 	.word	0x20000488
 8001eac:	20000694 	.word	0x20000694
 8001eb0:	200006d4 	.word	0x200006d4
 8001eb4:	20000754 	.word	0x20000754
 8001eb8:	200002f0 	.word	0x200002f0
 8001ebc:	20000380 	.word	0x20000380
 8001ec0:	200002fc 	.word	0x200002fc
 8001ec4:	20000338 	.word	0x20000338
 8001ec8:	20000310 	.word	0x20000310
 8001ecc:	20000894 	.word	0x20000894
 8001ed0:	20000328 	.word	0x20000328
 8001ed4:	20000304 	.word	0x20000304
 8001ed8:	0800aa2c 	.word	0x0800aa2c
 8001edc:	0800aa40 	.word	0x0800aa40
 8001ee0:	200002f4 	.word	0x200002f4
 8001ee4:	0800aa48 	.word	0x0800aa48
 8001ee8:	200002ec 	.word	0x200002ec
 8001eec:	20000308 	.word	0x20000308
 8001ef0:	00100101 	.word	0x00100101
 8001ef4:	2000030c 	.word	0x2000030c
 8001ef8:	20000300 	.word	0x20000300
 8001efc:	200004e4 	.word	0x200004e4
 8001f00:	40590000 	.word	0x40590000
 8001f04:	200002f8 	.word	0x200002f8
 8001f08:	20000324 	.word	0x20000324
 8001f0c:	0800aa50 	.word	0x0800aa50
 8001f10:	20000318 	.word	0x20000318
 8001f14:	0800aa58 	.word	0x0800aa58
 8001f18:	0800aa60 	.word	0x0800aa60
 8001f1c:	20000320 	.word	0x20000320
 8001f20:	0800aa68 	.word	0x0800aa68
 8001f24:	40020400 	.word	0x40020400
 8001f28:	0800aa74 	.word	0x0800aa74
 8001f2c:	0800aa80 	.word	0x0800aa80
 8001f30:	0800aa8c 	.word	0x0800aa8c
 8001f34:	0800aa98 	.word	0x0800aa98

08001f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0b4      	sub	sp, #208	; 0xd0
 8001f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f42:	2230      	movs	r2, #48	; 0x30
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f006 fbba 	bl	80086c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	2284      	movs	r2, #132	; 0x84
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f006 fbab 	bl	80086c0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001f6a:	f003 f89d 	bl	80050a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4b42      	ldr	r3, [pc, #264]	; (8002078 <SystemClock_Config+0x140>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a41      	ldr	r2, [pc, #260]	; (8002078 <SystemClock_Config+0x140>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <SystemClock_Config+0x140>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <SystemClock_Config+0x144>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f8e:	4a3b      	ldr	r2, [pc, #236]	; (800207c <SystemClock_Config+0x144>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <SystemClock_Config+0x144>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001fa8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001fac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 108;
 8001fc4:	236c      	movs	r3, #108	; 0x6c
 8001fc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 f8c4 	bl	8005168 <HAL_RCC_OscConfig>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001fe6:	f000 f84d 	bl	8002084 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001fea:	f003 f86d 	bl	80050c8 <HAL_PWREx_EnableOverDrive>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ff4:	f000 f846 	bl	8002084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800200a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002018:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800201c:	2103      	movs	r1, #3
 800201e:	4618      	mov	r0, r3
 8002020:	f003 fb12 	bl	8005648 <HAL_RCC_ClockConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800202a:	f000 f82b 	bl	8002084 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <SystemClock_Config+0x148>)
 8002030:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8002032:	2360      	movs	r3, #96	; 0x60
 8002034:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002036:	2302      	movs	r3, #2
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800203a:	2302      	movs	r3, #2
 800203c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800203e:	2301      	movs	r3, #1
 8002040:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002046:	2300      	movs	r3, #0
 8002048:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800204a:	2300      	movs	r3, #0
 800204c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800204e:	2300      	movs	r3, #0
 8002050:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002052:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002056:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fce6 	bl	8005a30 <HAL_RCCEx_PeriphCLKConfig>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <SystemClock_Config+0x136>
  {
    Error_Handler();
 800206a:	f000 f80b 	bl	8002084 <Error_Handler>
  }
}
 800206e:	bf00      	nop
 8002070:	37d0      	adds	r7, #208	; 0xd0
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40007000 	.word	0x40007000
 8002080:	00200900 	.word	0x00200900

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <Servo_Init>:

//
//	Servo innitialization
//
void Servo_Init(servo_t *servo, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
	servo->htim = _htim;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	601a      	str	r2, [r3, #0]
	servo->channel = _channel;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_Start(servo->htim, servo->channel);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4619      	mov	r1, r3
 80020b4:	4610      	mov	r0, r2
 80020b6:	f004 f935 	bl	8006324 <HAL_TIM_PWM_Start>
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <map>:

//
//	map help function
//
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	1a8a      	subs	r2, r1, r2
 80020dc:	fb02 f203 	mul.w	r2, r2, r3
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1acb      	subs	r3, r1, r3
 80020e6:	fb92 f2f3 	sdiv	r2, r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	4413      	add	r3, r2
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <Servo_SetAngle>:

//
//	Servo set angle function
//
void Servo_SetAngle(servo_t *servo, uint16_t angle)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af02      	add	r7, sp, #8
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	807b      	strh	r3, [r7, #2]
	if(angle < 0) angle = 0;
	if(angle > 180) angle = 180;
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	2bb4      	cmp	r3, #180	; 0xb4
 800210a:	d901      	bls.n	8002110 <Servo_SetAngle+0x16>
 800210c:	23b4      	movs	r3, #180	; 0xb4
 800210e:	807b      	strh	r3, [r7, #2]

	  uint16_t tmp = map(angle, ANGLE_MIN, ANGLE_MAX, SERVO_MIN, SERVO_MAX);
 8002110:	8878      	ldrh	r0, [r7, #2]
 8002112:	f640 137e 	movw	r3, #2430	; 0x97e
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	f240 2326 	movw	r3, #550	; 0x226
 800211c:	22b4      	movs	r2, #180	; 0xb4
 800211e:	2100      	movs	r1, #0
 8002120:	f7ff ffcf 	bl	80020c2 <map>
 8002124:	4603      	mov	r3, r0
 8002126:	81fb      	strh	r3, [r7, #14]
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <Servo_SetAngle+0x42>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	89fa      	ldrh	r2, [r7, #14]
 8002138:	635a      	str	r2, [r3, #52]	; 0x34
}
 800213a:	e02c      	b.n	8002196 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d105      	bne.n	8002150 <Servo_SetAngle+0x56>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	89fa      	ldrh	r2, [r7, #14]
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800214e:	e022      	b.n	8002196 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d105      	bne.n	8002164 <Servo_SetAngle+0x6a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	89fa      	ldrh	r2, [r7, #14]
 8002160:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002162:	e018      	b.n	8002196 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b0c      	cmp	r3, #12
 800216a:	d105      	bne.n	8002178 <Servo_SetAngle+0x7e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	89fa      	ldrh	r2, [r7, #14]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002176:	e00e      	b.n	8002196 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b10      	cmp	r3, #16
 800217e:	d105      	bne.n	800218c <Servo_SetAngle+0x92>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	89fa      	ldrh	r2, [r7, #14]
 8002188:	659a      	str	r2, [r3, #88]	; 0x58
}
 800218a:	e004      	b.n	8002196 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	89fa      	ldrh	r2, [r7, #14]
 8002194:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_MspInit+0x44>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <HAL_MspInit+0x44>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_MspInit+0x44>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_MspInit+0x44>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <HAL_MspInit+0x44>)
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_MspInit+0x44>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <HardFault_Handler+0x4>

080021fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <MemManage_Handler+0x4>

08002202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <BusFault_Handler+0x4>

08002208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <UsageFault_Handler+0x4>

0800220e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223c:	f000 fd84 	bl	8002d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <TIM2_IRQHandler+0x10>)
 800224a:	f004 f8af 	bl	80063ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200007d4 	.word	0x200007d4

08002258 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <TIM3_IRQHandler+0x10>)
 800225e:	f004 f8a5 	bl	80063ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000714 	.word	0x20000714

0800226c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM4_IRQHandler+0x10>)
 8002272:	f004 f89b 	bl	80063ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000694 	.word	0x20000694

08002280 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <TIM5_IRQHandler+0x10>)
 8002286:	f004 f891 	bl	80063ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200006d4 	.word	0x200006d4

08002294 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <TIM6_DAC_IRQHandler+0x14>)
 800229a:	f001 fb30 	bl	80038fe <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800229e:	4803      	ldr	r0, [pc, #12]	; (80022ac <TIM6_DAC_IRQHandler+0x18>)
 80022a0:	f004 f884 	bl	80063ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000488 	.word	0x20000488
 80022ac:	20000754 	.word	0x20000754

080022b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <DMA2_Stream0_IRQHandler+0x10>)
 80022b6:	f001 fd23 	bl	8003d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200003c8 	.word	0x200003c8

080022c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80022c8:	4802      	ldr	r0, [pc, #8]	; (80022d4 <DMA2_Stream2_IRQHandler+0x10>)
 80022ca:	f001 fd19 	bl	8003d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000428 	.word	0x20000428

080022d8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <USART6_IRQHandler+0x10>)
 80022de:	f005 f925 	bl	800752c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000894 	.word	0x20000894

080022ec <_sbrk>:
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <_sbrk+0x50>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <_sbrk+0x16>
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <_sbrk+0x50>)
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <_sbrk+0x54>)
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <_sbrk+0x50>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <_sbrk+0x50>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4413      	add	r3, r2
 8002310:	466a      	mov	r2, sp
 8002312:	4293      	cmp	r3, r2
 8002314:	d907      	bls.n	8002326 <_sbrk+0x3a>
 8002316:	f006 f9a9 	bl	800866c <__errno>
 800231a:	4602      	mov	r2, r0
 800231c:	230c      	movs	r3, #12
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
 8002324:	e006      	b.n	8002334 <_sbrk+0x48>
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <_sbrk+0x50>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	4a03      	ldr	r2, [pc, #12]	; (800233c <_sbrk+0x50>)
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	2000032c 	.word	0x2000032c
 8002340:	20000d20 	.word	0x20000d20

08002344 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <SystemInit+0x5c>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <SystemInit+0x5c>)
 8002350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <SystemInit+0x60>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <SystemInit+0x60>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <SystemInit+0x60>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <SystemInit+0x60>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	490d      	ldr	r1, [pc, #52]	; (80023a4 <SystemInit+0x60>)
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <SystemInit+0x64>)
 8002372:	4013      	ands	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <SystemInit+0x60>)
 8002378:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <SystemInit+0x68>)
 800237a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <SystemInit+0x60>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <SystemInit+0x60>)
 8002382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002386:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <SystemInit+0x60>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SystemInit+0x5c>)
 8002390:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002394:	609a      	str	r2, [r3, #8]
#endif
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00
 80023a4:	40023800 	.word	0x40023800
 80023a8:	fef6ffff 	.word	0xfef6ffff
 80023ac:	24003010 	.word	0x24003010

080023b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b09a      	sub	sp, #104	; 0x68
 80023b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
 80023e0:	615a      	str	r2, [r3, #20]
 80023e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	222c      	movs	r2, #44	; 0x2c
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f006 f968 	bl	80086c0 <memset>

  htim1.Instance = TIM1;
 80023f0:	4b43      	ldr	r3, [pc, #268]	; (8002500 <MX_TIM1_Init+0x150>)
 80023f2:	4a44      	ldr	r2, [pc, #272]	; (8002504 <MX_TIM1_Init+0x154>)
 80023f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80023f6:	4b42      	ldr	r3, [pc, #264]	; (8002500 <MX_TIM1_Init+0x150>)
 80023f8:	2247      	movs	r2, #71	; 0x47
 80023fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b40      	ldr	r3, [pc, #256]	; (8002500 <MX_TIM1_Init+0x150>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <MX_TIM1_Init+0x150>)
 8002404:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002408:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <MX_TIM1_Init+0x150>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <MX_TIM1_Init+0x150>)
 8002412:	2200      	movs	r2, #0
 8002414:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002416:	4b3a      	ldr	r3, [pc, #232]	; (8002500 <MX_TIM1_Init+0x150>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800241c:	4838      	ldr	r0, [pc, #224]	; (8002500 <MX_TIM1_Init+0x150>)
 800241e:	f003 fef5 	bl	800620c <HAL_TIM_Base_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002428:	f7ff fe2c 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800242c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002430:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002432:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002436:	4619      	mov	r1, r3
 8002438:	4831      	ldr	r0, [pc, #196]	; (8002500 <MX_TIM1_Init+0x150>)
 800243a:	f004 f9ef 	bl	800681c <HAL_TIM_ConfigClockSource>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002444:	f7ff fe1e 	bl	8002084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002448:	482d      	ldr	r0, [pc, #180]	; (8002500 <MX_TIM1_Init+0x150>)
 800244a:	f003 ff35 	bl	80062b8 <HAL_TIM_PWM_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002454:	f7ff fe16 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002458:	2300      	movs	r3, #0
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002464:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002468:	4619      	mov	r1, r3
 800246a:	4825      	ldr	r0, [pc, #148]	; (8002500 <MX_TIM1_Init+0x150>)
 800246c:	f004 fe76 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002476:	f7ff fe05 	bl	8002084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800247a:	2360      	movs	r3, #96	; 0x60
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 800247e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002484:	2300      	movs	r3, #0
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800248c:	2300      	movs	r3, #0
 800248e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002494:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002498:	220c      	movs	r2, #12
 800249a:	4619      	mov	r1, r3
 800249c:	4818      	ldr	r0, [pc, #96]	; (8002500 <MX_TIM1_Init+0x150>)
 800249e:	f004 f8a5 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80024a8:	f7ff fdec 	bl	8002084 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4619      	mov	r1, r3
 80024e0:	4807      	ldr	r0, [pc, #28]	; (8002500 <MX_TIM1_Init+0x150>)
 80024e2:	f004 fe97 	bl	8007214 <HAL_TIMEx_ConfigBreakDeadTime>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80024ec:	f7ff fdca 	bl	8002084 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80024f0:	4803      	ldr	r0, [pc, #12]	; (8002500 <MX_TIM1_Init+0x150>)
 80024f2:	f000 fa23 	bl	800293c <HAL_TIM_MspPostInit>

}
 80024f6:	bf00      	nop
 80024f8:	3768      	adds	r7, #104	; 0x68
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000794 	.word	0x20000794
 8002504:	40010000 	.word	0x40010000

08002508 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800252c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002530:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002534:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <MX_TIM2_Init+0x98>)
 800253e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002542:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002546:	2200      	movs	r2, #0
 8002548:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <MX_TIM2_Init+0x98>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002550:	4813      	ldr	r0, [pc, #76]	; (80025a0 <MX_TIM2_Init+0x98>)
 8002552:	f003 fe5b 	bl	800620c <HAL_TIM_Base_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800255c:	f7ff fd92 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	4619      	mov	r1, r3
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <MX_TIM2_Init+0x98>)
 800256e:	f004 f955 	bl	800681c <HAL_TIM_ConfigClockSource>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002578:	f7ff fd84 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800257c:	2320      	movs	r3, #32
 800257e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_TIM2_Init+0x98>)
 800258a:	f004 fde7 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002594:	f7ff fd76 	bl	8002084 <Error_Handler>
  }

}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200007d4 	.word	0x200007d4

080025a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <MX_TIM3_Init+0x98>)
 80025c4:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <MX_TIM3_Init+0x9c>)
 80025c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80025c8:	4b1c      	ldr	r3, [pc, #112]	; (800263c <MX_TIM3_Init+0x98>)
 80025ca:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80025ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	4b1a      	ldr	r3, [pc, #104]	; (800263c <MX_TIM3_Init+0x98>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <MX_TIM3_Init+0x98>)
 80025d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <MX_TIM3_Init+0x98>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b15      	ldr	r3, [pc, #84]	; (800263c <MX_TIM3_Init+0x98>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025ea:	4814      	ldr	r0, [pc, #80]	; (800263c <MX_TIM3_Init+0x98>)
 80025ec:	f003 fe0e 	bl	800620c <HAL_TIM_Base_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80025f6:	f7ff fd45 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	4619      	mov	r1, r3
 8002606:	480d      	ldr	r0, [pc, #52]	; (800263c <MX_TIM3_Init+0x98>)
 8002608:	f004 f908 	bl	800681c <HAL_TIM_ConfigClockSource>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002612:	f7ff fd37 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	4619      	mov	r1, r3
 8002622:	4806      	ldr	r0, [pc, #24]	; (800263c <MX_TIM3_Init+0x98>)
 8002624:	f004 fd9a 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800262e:	f7ff fd29 	bl	8002084 <Error_Handler>
  }

}
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000714 	.word	0x20000714
 8002640:	40000400 	.word	0x40000400

08002644 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264a:	f107 0310 	add.w	r3, r7, #16
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <MX_TIM4_Init+0x94>)
 8002664:	4a1d      	ldr	r2, [pc, #116]	; (80026dc <MX_TIM4_Init+0x98>)
 8002666:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <MX_TIM4_Init+0x94>)
 800266a:	2247      	movs	r2, #71	; 0x47
 800266c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <MX_TIM4_Init+0x94>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8002674:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <MX_TIM4_Init+0x94>)
 8002676:	2209      	movs	r2, #9
 8002678:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267a:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <MX_TIM4_Init+0x94>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <MX_TIM4_Init+0x94>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002686:	4814      	ldr	r0, [pc, #80]	; (80026d8 <MX_TIM4_Init+0x94>)
 8002688:	f003 fdc0 	bl	800620c <HAL_TIM_Base_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002692:	f7ff fcf7 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800269a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4619      	mov	r1, r3
 80026a2:	480d      	ldr	r0, [pc, #52]	; (80026d8 <MX_TIM4_Init+0x94>)
 80026a4:	f004 f8ba 	bl	800681c <HAL_TIM_ConfigClockSource>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80026ae:	f7ff fce9 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026b2:	2320      	movs	r3, #32
 80026b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	4619      	mov	r1, r3
 80026be:	4806      	ldr	r0, [pc, #24]	; (80026d8 <MX_TIM4_Init+0x94>)
 80026c0:	f004 fd4c 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80026ca:	f7ff fcdb 	bl	8002084 <Error_Handler>
  }

}
 80026ce:	bf00      	nop
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000694 	.word	0x20000694
 80026dc:	40000800 	.word	0x40000800

080026e0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e6:	f107 0310 	add.w	r3, r7, #16
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80026fe:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <MX_TIM5_Init+0x98>)
 8002700:	4a1e      	ldr	r2, [pc, #120]	; (800277c <MX_TIM5_Init+0x9c>)
 8002702:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7199;
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <MX_TIM5_Init+0x98>)
 8002706:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800270a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <MX_TIM5_Init+0x98>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <MX_TIM5_Init+0x98>)
 8002714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002718:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <MX_TIM5_Init+0x98>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <MX_TIM5_Init+0x98>)
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002726:	4814      	ldr	r0, [pc, #80]	; (8002778 <MX_TIM5_Init+0x98>)
 8002728:	f003 fd70 	bl	800620c <HAL_TIM_Base_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002732:	f7ff fca7 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	4619      	mov	r1, r3
 8002742:	480d      	ldr	r0, [pc, #52]	; (8002778 <MX_TIM5_Init+0x98>)
 8002744:	f004 f86a 	bl	800681c <HAL_TIM_ConfigClockSource>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800274e:	f7ff fc99 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002752:	2320      	movs	r3, #32
 8002754:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4806      	ldr	r0, [pc, #24]	; (8002778 <MX_TIM5_Init+0x98>)
 8002760:	f004 fcfc 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800276a:	f7ff fc8b 	bl	8002084 <Error_Handler>
  }

}
 800276e:	bf00      	nop
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200006d4 	.word	0x200006d4
 800277c:	40000c00 	.word	0x40000c00

08002780 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8002790:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <MX_TIM6_Init+0x64>)
 8002792:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <MX_TIM6_Init+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <MX_TIM6_Init+0x64>)
 8002798:	2247      	movs	r2, #71	; 0x47
 800279a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <MX_TIM6_Init+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <MX_TIM6_Init+0x64>)
 80027a4:	2263      	movs	r2, #99	; 0x63
 80027a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <MX_TIM6_Init+0x64>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027ae:	480d      	ldr	r0, [pc, #52]	; (80027e4 <MX_TIM6_Init+0x64>)
 80027b0:	f003 fd2c 	bl	800620c <HAL_TIM_Base_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80027ba:	f7ff fc63 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027be:	2320      	movs	r3, #32
 80027c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	4619      	mov	r1, r3
 80027ca:	4806      	ldr	r0, [pc, #24]	; (80027e4 <MX_TIM6_Init+0x64>)
 80027cc:	f004 fcc6 	bl	800715c <HAL_TIMEx_MasterConfigSynchronization>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80027d6:	f7ff fc55 	bl	8002084 <Error_Handler>
  }

}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000754 	.word	0x20000754
 80027e8:	40001000 	.word	0x40001000

080027ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a4a      	ldr	r2, [pc, #296]	; (8002924 <HAL_TIM_Base_MspInit+0x138>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10c      	bne.n	8002818 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027fe:	4b4a      	ldr	r3, [pc, #296]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a49      	ldr	r2, [pc, #292]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b47      	ldr	r3, [pc, #284]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002816:	e080      	b.n	800291a <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002820:	d114      	bne.n	800284c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002822:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a40      	ldr	r2, [pc, #256]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b3e      	ldr	r3, [pc, #248]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800283a:	2200      	movs	r2, #0
 800283c:	2100      	movs	r1, #0
 800283e:	201c      	movs	r0, #28
 8002840:	f000 ff9f 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002844:	201c      	movs	r0, #28
 8002846:	f000 ffb8 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 800284a:	e066      	b.n	800291a <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a36      	ldr	r2, [pc, #216]	; (800292c <HAL_TIM_Base_MspInit+0x140>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d114      	bne.n	8002880 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002856:	4b34      	ldr	r3, [pc, #208]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a33      	ldr	r2, [pc, #204]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	201d      	movs	r0, #29
 8002874:	f000 ff85 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002878:	201d      	movs	r0, #29
 800287a:	f000 ff9e 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 800287e:	e04c      	b.n	800291a <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM4)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a2a      	ldr	r2, [pc, #168]	; (8002930 <HAL_TIM_Base_MspInit+0x144>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d114      	bne.n	80028b4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4a26      	ldr	r2, [pc, #152]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	6413      	str	r3, [r2, #64]	; 0x40
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2100      	movs	r1, #0
 80028a6:	201e      	movs	r0, #30
 80028a8:	f000 ff6b 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028ac:	201e      	movs	r0, #30
 80028ae:	f000 ff84 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 80028b2:	e032      	b.n	800291a <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM5)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <HAL_TIM_Base_MspInit+0x148>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d114      	bne.n	80028e8 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028be:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a19      	ldr	r2, [pc, #100]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 80028c4:	f043 0308 	orr.w	r3, r3, #8
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	2032      	movs	r0, #50	; 0x32
 80028dc:	f000 ff51 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80028e0:	2032      	movs	r0, #50	; 0x32
 80028e2:	f000 ff6a 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 80028e6:	e018      	b.n	800291a <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM6)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a12      	ldr	r2, [pc, #72]	; (8002938 <HAL_TIM_Base_MspInit+0x14c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d113      	bne.n	800291a <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a0c      	ldr	r2, [pc, #48]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 80028f8:	f043 0310 	orr.w	r3, r3, #16
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_TIM_Base_MspInit+0x13c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	2036      	movs	r0, #54	; 0x36
 8002910:	f000 ff37 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002914:	2036      	movs	r0, #54	; 0x36
 8002916:	f000 ff50 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 800291a:	bf00      	nop
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40010000 	.word	0x40010000
 8002928:	40023800 	.word	0x40023800
 800292c:	40000400 	.word	0x40000400
 8002930:	40000800 	.word	0x40000800
 8002934:	40000c00 	.word	0x40000c00
 8002938:	40001000 	.word	0x40001000

0800293c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_TIM_MspPostInit+0x64>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d11c      	bne.n	8002998 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_TIM_MspPostInit+0x68>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <HAL_TIM_MspPostInit+0x68>)
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_TIM_MspPostInit+0x68>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800297a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002988:	2301      	movs	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	4619      	mov	r1, r3
 8002992:	4805      	ldr	r0, [pc, #20]	; (80029a8 <HAL_TIM_MspPostInit+0x6c>)
 8002994:	f002 f888 	bl	8004aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002998:	bf00      	nop
 800299a:	3720      	adds	r7, #32
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40021000 	.word	0x40021000

080029ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029b2:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <MX_USART3_UART_Init+0x5c>)
 80029b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029b6:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029d2:	220c      	movs	r2, #12
 80029d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029f0:	f004 fcac 	bl	800734c <HAL_UART_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80029fa:	f7ff fb43 	bl	8002084 <Error_Handler>
  }

}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000814 	.word	0x20000814
 8002a08:	40004800 	.word	0x40004800

08002a0c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <MX_USART6_UART_Init+0x58>)
 8002a12:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <MX_USART6_UART_Init+0x5c>)
 8002a14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002a16:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <MX_USART6_UART_Init+0x58>)
 8002a18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <MX_USART6_UART_Init+0x58>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <MX_USART6_UART_Init+0x58>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MX_USART6_UART_Init+0x58>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MX_USART6_UART_Init+0x58>)
 8002a32:	220c      	movs	r2, #12
 8002a34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <MX_USART6_UART_Init+0x58>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_USART6_UART_Init+0x58>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <MX_USART6_UART_Init+0x58>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_USART6_UART_Init+0x58>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a4e:	4805      	ldr	r0, [pc, #20]	; (8002a64 <MX_USART6_UART_Init+0x58>)
 8002a50:	f004 fc7c 	bl	800734c <HAL_UART_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002a5a:	f7ff fb13 	bl	8002084 <Error_Handler>
  }

}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000894 	.word	0x20000894
 8002a68:	40011400 	.word	0x40011400

08002a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	; 0x30
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 031c 	add.w	r3, r7, #28
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a32      	ldr	r2, [pc, #200]	; (8002b54 <HAL_UART_MspInit+0xe8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d129      	bne.n	8002ae2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a8e:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a31      	ldr	r2, [pc, #196]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b2f      	ldr	r3, [pc, #188]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a2b      	ldr	r2, [pc, #172]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002aac:	f043 0308 	orr.w	r3, r3, #8
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002acc:	2303      	movs	r3, #3
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ad0:	2307      	movs	r3, #7
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad4:	f107 031c 	add.w	r3, r7, #28
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4820      	ldr	r0, [pc, #128]	; (8002b5c <HAL_UART_MspInit+0xf0>)
 8002adc:	f001 ffe4 	bl	8004aa8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002ae0:	e034      	b.n	8002b4c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <HAL_UART_MspInit+0xf4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d12f      	bne.n	8002b4c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002aec:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af0:	4a19      	ldr	r2, [pc, #100]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002af2:	f043 0320 	orr.w	r3, r3, #32
 8002af6:	6453      	str	r3, [r2, #68]	; 0x44
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	4a13      	ldr	r2, [pc, #76]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_UART_MspInit+0xec>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b1c:	23c0      	movs	r3, #192	; 0xc0
 8002b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	4619      	mov	r1, r3
 8002b36:	480b      	ldr	r0, [pc, #44]	; (8002b64 <HAL_UART_MspInit+0xf8>)
 8002b38:	f001 ffb6 	bl	8004aa8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2100      	movs	r1, #0
 8002b40:	2047      	movs	r0, #71	; 0x47
 8002b42:	f000 fe1e 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002b46:	2047      	movs	r0, #71	; 0x47
 8002b48:	f000 fe37 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 8002b4c:	bf00      	nop
 8002b4e:	3730      	adds	r7, #48	; 0x30
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40004800 	.word	0x40004800
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40020c00 	.word	0x40020c00
 8002b60:	40011400 	.word	0x40011400
 8002b64:	40020800 	.word	0x40020800

08002b68 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002b72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b76:	2206      	movs	r2, #6
 8002b78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b86:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b88:	2202      	movs	r2, #2
 8002b8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002b98:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002baa:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002bac:	f002 f93f 	bl	8004e2e <HAL_PCD_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002bb6:	f7ff fa65 	bl	8002084 <Error_Handler>
  }

}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000914 	.word	0x20000914

08002bc4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be4:	d141      	bne.n	8002c6a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be6:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <HAL_PCD_MspInit+0xb0>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a22      	ldr	r2, [pc, #136]	; (8002c74 <HAL_PCD_MspInit+0xb0>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_PCD_MspInit+0xb0>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002bfe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c10:	230a      	movs	r3, #10
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4817      	ldr	r0, [pc, #92]	; (8002c78 <HAL_PCD_MspInit+0xb4>)
 8002c1c:	f001 ff44 	bl	8004aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c2e:	f107 0314 	add.w	r3, r7, #20
 8002c32:	4619      	mov	r1, r3
 8002c34:	4810      	ldr	r0, [pc, #64]	; (8002c78 <HAL_PCD_MspInit+0xb4>)
 8002c36:	f001 ff37 	bl	8004aa8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_PCD_MspInit+0xb0>)
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3e:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <HAL_PCD_MspInit+0xb0>)
 8002c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c44:	6353      	str	r3, [r2, #52]	; 0x34
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_PCD_MspInit+0xb0>)
 8002c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_PCD_MspInit+0xb0>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <HAL_PCD_MspInit+0xb0>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_PCD_MspInit+0xb0>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3728      	adds	r7, #40	; 0x28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40020000 	.word	0x40020000

08002c7c <Reset_Handler>:
 8002c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cb4 <LoopFillZerobss+0x14>
 8002c80:	2100      	movs	r1, #0
 8002c82:	e003      	b.n	8002c8c <LoopCopyDataInit>

08002c84 <CopyDataInit>:
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <LoopFillZerobss+0x18>)
 8002c86:	585b      	ldr	r3, [r3, r1]
 8002c88:	5043      	str	r3, [r0, r1]
 8002c8a:	3104      	adds	r1, #4

08002c8c <LoopCopyDataInit>:
 8002c8c:	480b      	ldr	r0, [pc, #44]	; (8002cbc <LoopFillZerobss+0x1c>)
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <LoopFillZerobss+0x20>)
 8002c90:	1842      	adds	r2, r0, r1
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d3f6      	bcc.n	8002c84 <CopyDataInit>
 8002c96:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <LoopFillZerobss+0x24>)
 8002c98:	e002      	b.n	8002ca0 <LoopFillZerobss>

08002c9a <FillZerobss>:
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f842 3b04 	str.w	r3, [r2], #4

08002ca0 <LoopFillZerobss>:
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <LoopFillZerobss+0x28>)
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d3f9      	bcc.n	8002c9a <FillZerobss>
 8002ca6:	f7ff fb4d 	bl	8002344 <SystemInit>
 8002caa:	f005 fce5 	bl	8008678 <__libc_init_array>
 8002cae:	f7fe ff5f 	bl	8001b70 <main>
 8002cb2:	4770      	bx	lr
 8002cb4:	20050000 	.word	0x20050000
 8002cb8:	0800ace8 	.word	0x0800ace8
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	200002cc 	.word	0x200002cc
 8002cc4:	200002cc 	.word	0x200002cc
 8002cc8:	20000d20 	.word	0x20000d20

08002ccc <ADC_IRQHandler>:
 8002ccc:	e7fe      	b.n	8002ccc <ADC_IRQHandler>

08002cce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd2:	2003      	movs	r0, #3
 8002cd4:	f000 fd4a 	bl	800376c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f000 f805 	bl	8002ce8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002cde:	f7ff fa5f 	bl	80021a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_InitTick+0x54>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_InitTick+0x58>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fd65 	bl	80037d6 <HAL_SYSTICK_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00e      	b.n	8002d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b0f      	cmp	r3, #15
 8002d1a:	d80a      	bhi.n	8002d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	f000 fd2d 	bl	8003782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d28:	4a06      	ldr	r2, [pc, #24]	; (8002d44 <HAL_InitTick+0x5c>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e000      	b.n	8002d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200000ec 	.word	0x200000ec
 8002d40:	200000f4 	.word	0x200000f4
 8002d44:	200000f0 	.word	0x200000f0

08002d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_IncTick+0x20>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_IncTick+0x24>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_IncTick+0x24>)
 8002d5a:	6013      	str	r3, [r2, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	200000f4 	.word	0x200000f4
 8002d6c:	20000d18 	.word	0x20000d18

08002d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return uwTick;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_GetTick+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000d18 	.word	0x20000d18

08002d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff ffee 	bl	8002d70 <HAL_GetTick>
 8002d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d005      	beq.n	8002dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_Delay+0x40>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dae:	bf00      	nop
 8002db0:	f7ff ffde 	bl	8002d70 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d8f7      	bhi.n	8002db0 <HAL_Delay+0x28>
  {
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200000f4 	.word	0x200000f4

08002dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e031      	b.n	8002e46 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe f950 	bl	8001090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d116      	bne.n	8002e38 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_ADC_Init+0x84>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	f043 0202 	orr.w	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fa5a 	bl	80032d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
 8002e36:	e001      	b.n	8002e3c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	ffffeefd 	.word	0xffffeefd

08002e54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_Start_DMA+0x1e>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e0c7      	b.n	8003002 <HAL_ADC_Start_DMA+0x1ae>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d018      	beq.n	8002eba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002e98:	4b5c      	ldr	r3, [pc, #368]	; (800300c <HAL_ADC_Start_DMA+0x1b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a5c      	ldr	r2, [pc, #368]	; (8003010 <HAL_ADC_Start_DMA+0x1bc>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	0c9a      	lsrs	r2, r3, #18
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002eac:	e002      	b.n	8002eb4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f9      	bne.n	8002eae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 809b 	bne.w	8003000 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ece:	4b51      	ldr	r3, [pc, #324]	; (8003014 <HAL_ADC_Start_DMA+0x1c0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ef0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f04:	d106      	bne.n	8002f14 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f023 0206 	bic.w	r2, r3, #6
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
 8002f12:	e002      	b.n	8002f1a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	4a3c      	ldr	r2, [pc, #240]	; (8003018 <HAL_ADC_Start_DMA+0x1c4>)
 8002f28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	4a3b      	ldr	r2, [pc, #236]	; (800301c <HAL_ADC_Start_DMA+0x1c8>)
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	4a3a      	ldr	r2, [pc, #232]	; (8003020 <HAL_ADC_Start_DMA+0x1cc>)
 8002f38:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f52:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f62:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	334c      	adds	r3, #76	; 0x4c
 8002f6e:	4619      	mov	r1, r3
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f000 fe42 	bl	8003bfc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002f78:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_ADC_Start_DMA+0x1d0>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10f      	bne.n	8002fa4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d136      	bne.n	8003000 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	e02d      	b.n	8003000 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_ADC_Start_DMA+0x1d4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10e      	bne.n	8002fcc <HAL_ADC_Start_DMA+0x178>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fca:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002fcc:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_ADC_Start_DMA+0x1d0>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d113      	bne.n	8003000 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a13      	ldr	r2, [pc, #76]	; (800302c <HAL_ADC_Start_DMA+0x1d8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d10e      	bne.n	8003000 <HAL_ADC_Start_DMA+0x1ac>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ffe:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200000ec 	.word	0x200000ec
 8003010:	431bde83 	.word	0x431bde83
 8003014:	fffff8fe 	.word	0xfffff8fe
 8003018:	080034c9 	.word	0x080034c9
 800301c:	08003583 	.word	0x08003583
 8003020:	0800359f 	.word	0x0800359f
 8003024:	40012300 	.word	0x40012300
 8003028:	40012000 	.word	0x40012000
 800302c:	40012200 	.word	0x40012200

08003030 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x1c>
 8003084:	2302      	movs	r3, #2
 8003086:	e115      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x248>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b09      	cmp	r3, #9
 8003096:	d935      	bls.n	8003104 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68d9      	ldr	r1, [r3, #12]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	3b1e      	subs	r3, #30
 80030ae:	2207      	movs	r2, #7
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43da      	mvns	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	400a      	ands	r2, r1
 80030bc:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7f      	ldr	r2, [pc, #508]	; (80032c0 <HAL_ADC_ConfigChannel+0x254>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10a      	bne.n	80030de <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68d9      	ldr	r1, [r3, #12]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	061a      	lsls	r2, r3, #24
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	60da      	str	r2, [r3, #12]
 80030dc:	e035      	b.n	800314a <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68d9      	ldr	r1, [r3, #12]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	4618      	mov	r0, r3
 80030f0:	4603      	mov	r3, r0
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4403      	add	r3, r0
 80030f6:	3b1e      	subs	r3, #30
 80030f8:	409a      	lsls	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	e022      	b.n	800314a <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6919      	ldr	r1, [r3, #16]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	2207      	movs	r2, #7
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43da      	mvns	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	400a      	ands	r2, r1
 8003126:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6919      	ldr	r1, [r3, #16]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	4618      	mov	r0, r3
 800313a:	4603      	mov	r3, r0
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4403      	add	r3, r0
 8003140:	409a      	lsls	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b06      	cmp	r3, #6
 8003150:	d824      	bhi.n	800319c <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	3b05      	subs	r3, #5
 8003164:	221f      	movs	r2, #31
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	400a      	ands	r2, r1
 8003172:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	b29b      	uxth	r3, r3
 8003180:	4618      	mov	r0, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	3b05      	subs	r3, #5
 800318e:	fa00 f203 	lsl.w	r2, r0, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
 800319a:	e04c      	b.n	8003236 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b0c      	cmp	r3, #12
 80031a2:	d824      	bhi.n	80031ee <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	3b23      	subs	r3, #35	; 0x23
 80031b6:	221f      	movs	r2, #31
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43da      	mvns	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	400a      	ands	r2, r1
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	4618      	mov	r0, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	3b23      	subs	r3, #35	; 0x23
 80031e0:	fa00 f203 	lsl.w	r2, r0, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
 80031ec:	e023      	b.n	8003236 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	3b41      	subs	r3, #65	; 0x41
 8003200:	221f      	movs	r2, #31
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43da      	mvns	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	400a      	ands	r2, r1
 800320e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	4618      	mov	r0, r3
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	3b41      	subs	r3, #65	; 0x41
 800322a:	fa00 f203 	lsl.w	r2, r0, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <HAL_ADC_ConfigChannel+0x258>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d109      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1e8>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b12      	cmp	r3, #18
 8003246:	d105      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003248:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <HAL_ADC_ConfigChannel+0x25c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <HAL_ADC_ConfigChannel+0x25c>)
 800324e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003252:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_ADC_ConfigChannel+0x258>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d125      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x23e>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <HAL_ADC_ConfigChannel+0x254>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <HAL_ADC_ConfigChannel+0x204>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b11      	cmp	r3, #17
 800326e:	d11c      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003270:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003276:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800327a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <HAL_ADC_ConfigChannel+0x254>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d111      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_ADC_ConfigChannel+0x260>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <HAL_ADC_ConfigChannel+0x264>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	0c9a      	lsrs	r2, r3, #18
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800329c:	e002      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f9      	bne.n	800329e <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	10000012 	.word	0x10000012
 80032c4:	40012000 	.word	0x40012000
 80032c8:	40012300 	.word	0x40012300
 80032cc:	200000ec 	.word	0x200000ec
 80032d0:	431bde83 	.word	0x431bde83

080032d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80032dc:	4b78      	ldr	r3, [pc, #480]	; (80034c0 <ADC_Init+0x1ec>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a77      	ldr	r2, [pc, #476]	; (80034c0 <ADC_Init+0x1ec>)
 80032e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80032e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80032e8:	4b75      	ldr	r3, [pc, #468]	; (80034c0 <ADC_Init+0x1ec>)
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4973      	ldr	r1, [pc, #460]	; (80034c0 <ADC_Init+0x1ec>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	021a      	lsls	r2, r3, #8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6899      	ldr	r1, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	4a58      	ldr	r2, [pc, #352]	; (80034c4 <ADC_Init+0x1f0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003376:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6899      	ldr	r1, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6899      	ldr	r1, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	e00f      	b.n	80033ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0202 	bic.w	r2, r2, #2
 80033dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6899      	ldr	r1, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	005a      	lsls	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800340a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800341a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	3b01      	subs	r3, #1
 8003428:	035a      	lsls	r2, r3, #13
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	e007      	b.n	8003444 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003442:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	3b01      	subs	r3, #1
 8003460:	051a      	lsls	r2, r3, #20
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6899      	ldr	r1, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003486:	025a      	lsls	r2, r3, #9
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6899      	ldr	r1, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	029a      	lsls	r2, r3, #10
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	40012300 	.word	0x40012300
 80034c4:	0f000001 	.word	0x0f000001

080034c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d13c      	bne.n	800355c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d12b      	bne.n	8003554 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003500:	2b00      	cmp	r3, #0
 8003502:	d127      	bne.n	8003554 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800351c:	2b00      	cmp	r3, #0
 800351e:	d119      	bne.n	8003554 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0220 	bic.w	r2, r2, #32
 800352e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d105      	bne.n	8003554 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f043 0201 	orr.w	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff fd6b 	bl	8003030 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800355a:	e00e      	b.n	800357a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff fd75 	bl	8003058 <HAL_ADC_ErrorCallback>
}
 800356e:	e004      	b.n	800357a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	4798      	blx	r3
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f7ff fd57 	bl	8003044 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f043 0204 	orr.w	r2, r3, #4
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff fd4a 	bl	8003058 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035dc:	4b0b      	ldr	r3, [pc, #44]	; (800360c <__NVIC_SetPriorityGrouping+0x40>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035e8:	4013      	ands	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <__NVIC_SetPriorityGrouping+0x44>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035fa:	4a04      	ldr	r2, [pc, #16]	; (800360c <__NVIC_SetPriorityGrouping+0x40>)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	60d3      	str	r3, [r2, #12]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000ed00 	.word	0xe000ed00
 8003610:	05fa0000 	.word	0x05fa0000

08003614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <__NVIC_GetPriorityGrouping+0x18>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	f003 0307 	and.w	r3, r3, #7
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000ed00 	.word	0xe000ed00

08003630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	2b00      	cmp	r3, #0
 8003640:	db0b      	blt.n	800365a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	f003 021f 	and.w	r2, r3, #31
 8003648:	4907      	ldr	r1, [pc, #28]	; (8003668 <__NVIC_EnableIRQ+0x38>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	2001      	movs	r0, #1
 8003652:	fa00 f202 	lsl.w	r2, r0, r2
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	e000e100 	.word	0xe000e100

0800366c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367c:	2b00      	cmp	r3, #0
 800367e:	db0a      	blt.n	8003696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	490c      	ldr	r1, [pc, #48]	; (80036b8 <__NVIC_SetPriority+0x4c>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	0112      	lsls	r2, r2, #4
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	440b      	add	r3, r1
 8003690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003694:	e00a      	b.n	80036ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4908      	ldr	r1, [pc, #32]	; (80036bc <__NVIC_SetPriority+0x50>)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	3b04      	subs	r3, #4
 80036a4:	0112      	lsls	r2, r2, #4
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	440b      	add	r3, r1
 80036aa:	761a      	strb	r2, [r3, #24]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000e100 	.word	0xe000e100
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f1c3 0307 	rsb	r3, r3, #7
 80036da:	2b04      	cmp	r3, #4
 80036dc:	bf28      	it	cs
 80036de:	2304      	movcs	r3, #4
 80036e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	d902      	bls.n	80036f0 <NVIC_EncodePriority+0x30>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3b03      	subs	r3, #3
 80036ee:	e000      	b.n	80036f2 <NVIC_EncodePriority+0x32>
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43da      	mvns	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	401a      	ands	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003708:	f04f 31ff 	mov.w	r1, #4294967295
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	43d9      	mvns	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	4313      	orrs	r3, r2
         );
}
 800371a:	4618      	mov	r0, r3
 800371c:	3724      	adds	r7, #36	; 0x24
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003738:	d301      	bcc.n	800373e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373a:	2301      	movs	r3, #1
 800373c:	e00f      	b.n	800375e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <SysTick_Config+0x40>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003746:	210f      	movs	r1, #15
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	f7ff ff8e 	bl	800366c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <SysTick_Config+0x40>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003756:	4b04      	ldr	r3, [pc, #16]	; (8003768 <SysTick_Config+0x40>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000e010 	.word	0xe000e010

0800376c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff29 	bl	80035cc <__NVIC_SetPriorityGrouping>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003794:	f7ff ff3e 	bl	8003614 <__NVIC_GetPriorityGrouping>
 8003798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff8e 	bl	80036c0 <NVIC_EncodePriority>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff5d 	bl	800366c <__NVIC_SetPriority>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff31 	bl	8003630 <__NVIC_EnableIRQ>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ffa2 	bl	8003728 <SysTick_Config>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e014      	b.n	800382a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	791b      	ldrb	r3, [r3, #4]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7fd fd3b 	bl	800128c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0, tmp2 = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	2300      	movs	r3, #0
 8003842:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	795b      	ldrb	r3, [r3, #5]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_DAC_Start+0x1e>
 800384c:	2302      	movs	r3, #2
 800384e:	e050      	b.n	80038f2 <HAL_DAC_Start+0xc0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6819      	ldr	r1, [r3, #0]
 8003862:	2201      	movs	r2, #1
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	409a      	lsls	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d11a      	bne.n	80038ac <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800388c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d127      	bne.n	80038e4 <HAL_DAC_Start+0xb2>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b38      	cmp	r3, #56	; 0x38
 8003898:	d124      	bne.n	80038e4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0201 	orr.w	r2, r2, #1
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	e01b      	b.n	80038e4 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b6:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80038c2:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038ca:	d10b      	bne.n	80038e4 <HAL_DAC_Start+0xb2>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80038d2:	d107      	bne.n	80038e4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0202 	orr.w	r2, r2, #2
 80038e2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003914:	d118      	bne.n	8003948 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2204      	movs	r2, #4
 800391a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003930:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003940:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f825 	bl	8003992 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003956:	d118      	bne.n	800398a <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2204      	movs	r2, #4
 800395c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f043 0202 	orr.w	r2, r3, #2
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003972:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f880 	bl	8003a8a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b087      	sub	sp, #28
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	795b      	ldrb	r3, [r3, #5]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_DAC_ConfigChannel+0x20>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e036      	b.n	8003a34 <HAL_DAC_ConfigChannel+0x8e>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2202      	movs	r2, #2
 80039d0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80039da:	f640 72fe 	movw	r2, #4094	; 0xffe
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4013      	ands	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	22c0      	movs	r2, #192	; 0xc0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	400a      	ands	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4413      	add	r3, r2
 8003a64:	3308      	adds	r3, #8
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e004      	b.n	8003a74 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	3314      	adds	r3, #20
 8003a72:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	461a      	mov	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003aac:	f7ff f960 	bl	8002d70 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e099      	b.n	8003bf0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003adc:	e00f      	b.n	8003afe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ade:	f7ff f947 	bl	8002d70 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b05      	cmp	r3, #5
 8003aea:	d908      	bls.n	8003afe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2203      	movs	r2, #3
 8003af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e078      	b.n	8003bf0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e8      	bne.n	8003ade <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4b38      	ldr	r3, [pc, #224]	; (8003bf8 <HAL_DMA_Init+0x158>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d107      	bne.n	8003b68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4313      	orrs	r3, r2
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 0307 	bic.w	r3, r3, #7
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d117      	bne.n	8003bc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fa99 	bl	80040dc <DMA_CheckFifoParam>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2240      	movs	r2, #64	; 0x40
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e016      	b.n	8003bf0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa50 	bl	8004070 <DMA_CalcBaseAndBitshift>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	223f      	movs	r2, #63	; 0x3f
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	f010803f 	.word	0xf010803f

08003bfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_DMA_Start_IT+0x26>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e048      	b.n	8003cb4 <HAL_DMA_Start_IT+0xb8>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d137      	bne.n	8003ca6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f9e2 	bl	8004014 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	223f      	movs	r2, #63	; 0x3f
 8003c56:	409a      	lsls	r2, r3
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0216 	orr.w	r2, r2, #22
 8003c6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c7a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0208 	orr.w	r2, r2, #8
 8003c92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e005      	b.n	8003cb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d004      	beq.n	8003cda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2280      	movs	r2, #128	; 0x80
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e00c      	b.n	8003cf4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2205      	movs	r2, #5
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0201 	bic.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003d0c:	4b92      	ldr	r3, [pc, #584]	; (8003f58 <HAL_DMA_IRQHandler+0x258>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a92      	ldr	r2, [pc, #584]	; (8003f5c <HAL_DMA_IRQHandler+0x25c>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	0a9b      	lsrs	r3, r3, #10
 8003d18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	2208      	movs	r2, #8
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d01a      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d013      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0204 	bic.w	r2, r2, #4
 8003d52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	2208      	movs	r2, #8
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	f043 0201 	orr.w	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d70:	2201      	movs	r2, #1
 8003d72:	409a      	lsls	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d012      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00b      	beq.n	8003da2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	2201      	movs	r2, #1
 8003d90:	409a      	lsls	r2, r3
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9a:	f043 0202 	orr.w	r2, r3, #2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da6:	2204      	movs	r2, #4
 8003da8:	409a      	lsls	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d012      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00b      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd0:	f043 0204 	orr.w	r2, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	2210      	movs	r2, #16
 8003dde:	409a      	lsls	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4013      	ands	r3, r2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d043      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d03c      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	2210      	movs	r2, #16
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d018      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d108      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d024      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
 8003e2e:	e01f      	b.n	8003e70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01b      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
 8003e40:	e016      	b.n	8003e70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d107      	bne.n	8003e60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0208 	bic.w	r2, r2, #8
 8003e5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	2220      	movs	r2, #32
 8003e76:	409a      	lsls	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 808e 	beq.w	8003f9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8086 	beq.w	8003f9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	2220      	movs	r2, #32
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d136      	bne.n	8003f18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0216 	bic.w	r2, r2, #22
 8003eb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d103      	bne.n	8003eda <HAL_DMA_IRQHandler+0x1da>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0208 	bic.w	r2, r2, #8
 8003ee8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	223f      	movs	r2, #63	; 0x3f
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d07d      	beq.n	800400a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	4798      	blx	r3
        }
        return;
 8003f16:	e078      	b.n	800400a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d01c      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d108      	bne.n	8003f46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d030      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4798      	blx	r3
 8003f44:	e02b      	b.n	8003f9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d027      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
 8003f56:	e022      	b.n	8003f9e <HAL_DMA_IRQHandler+0x29e>
 8003f58:	200000ec 	.word	0x200000ec
 8003f5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10f      	bne.n	8003f8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0210 	bic.w	r2, r2, #16
 8003f7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d032      	beq.n	800400c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d022      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2205      	movs	r2, #5
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d307      	bcc.n	8003fe6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f2      	bne.n	8003fca <HAL_DMA_IRQHandler+0x2ca>
 8003fe4:	e000      	b.n	8003fe8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003fe6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
 8004008:	e000      	b.n	800400c <HAL_DMA_IRQHandler+0x30c>
        return;
 800400a:	bf00      	nop
    }
  }
}
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop

08004014 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004030:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d108      	bne.n	8004054 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004052:	e007      	b.n	8004064 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	60da      	str	r2, [r3, #12]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	3b10      	subs	r3, #16
 8004080:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <DMA_CalcBaseAndBitshift+0x60>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800408a:	4a12      	ldr	r2, [pc, #72]	; (80040d4 <DMA_CalcBaseAndBitshift+0x64>)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b03      	cmp	r3, #3
 800409c:	d908      	bls.n	80040b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <DMA_CalcBaseAndBitshift+0x68>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	1d1a      	adds	r2, r3, #4
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	659a      	str	r2, [r3, #88]	; 0x58
 80040ae:	e006      	b.n	80040be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <DMA_CalcBaseAndBitshift+0x68>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	aaaaaaab 	.word	0xaaaaaaab
 80040d4:	0800aacc 	.word	0x0800aacc
 80040d8:	fffffc00 	.word	0xfffffc00

080040dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d11f      	bne.n	8004136 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d855      	bhi.n	80041a8 <DMA_CheckFifoParam+0xcc>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <DMA_CheckFifoParam+0x28>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004115 	.word	0x08004115
 8004108:	08004127 	.word	0x08004127
 800410c:	08004115 	.word	0x08004115
 8004110:	080041a9 	.word	0x080041a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d045      	beq.n	80041ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004124:	e042      	b.n	80041ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800412e:	d13f      	bne.n	80041b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004134:	e03c      	b.n	80041b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413e:	d121      	bne.n	8004184 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b03      	cmp	r3, #3
 8004144:	d836      	bhi.n	80041b4 <DMA_CheckFifoParam+0xd8>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <DMA_CheckFifoParam+0x70>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	0800415d 	.word	0x0800415d
 8004150:	08004163 	.word	0x08004163
 8004154:	0800415d 	.word	0x0800415d
 8004158:	08004175 	.word	0x08004175
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      break;
 8004160:	e02f      	b.n	80041c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d024      	beq.n	80041b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004172:	e021      	b.n	80041b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800417c:	d11e      	bne.n	80041bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004182:	e01b      	b.n	80041bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d902      	bls.n	8004190 <DMA_CheckFifoParam+0xb4>
 800418a:	2b03      	cmp	r3, #3
 800418c:	d003      	beq.n	8004196 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800418e:	e018      	b.n	80041c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	e015      	b.n	80041c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00e      	beq.n	80041c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
      break;
 80041a6:	e00b      	b.n	80041c0 <DMA_CheckFifoParam+0xe4>
      break;
 80041a8:	bf00      	nop
 80041aa:	e00a      	b.n	80041c2 <DMA_CheckFifoParam+0xe6>
      break;
 80041ac:	bf00      	nop
 80041ae:	e008      	b.n	80041c2 <DMA_CheckFifoParam+0xe6>
      break;
 80041b0:	bf00      	nop
 80041b2:	e006      	b.n	80041c2 <DMA_CheckFifoParam+0xe6>
      break;
 80041b4:	bf00      	nop
 80041b6:	e004      	b.n	80041c2 <DMA_CheckFifoParam+0xe6>
      break;
 80041b8:	bf00      	nop
 80041ba:	e002      	b.n	80041c2 <DMA_CheckFifoParam+0xe6>
      break;   
 80041bc:	bf00      	nop
 80041be:	e000      	b.n	80041c2 <DMA_CheckFifoParam+0xe6>
      break;
 80041c0:	bf00      	nop
    }
  } 
  
  return status; 
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80041e0:	4ba9      	ldr	r3, [pc, #676]	; (8004488 <HAL_ETH_Init+0x2b8>)
 80041e2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e183      	b.n	80044fe <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd f8ec 	bl	80013e8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004210:	4b9e      	ldr	r3, [pc, #632]	; (800448c <HAL_ETH_Init+0x2bc>)
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	4a9d      	ldr	r2, [pc, #628]	; (800448c <HAL_ETH_Init+0x2bc>)
 8004216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800421a:	6453      	str	r3, [r2, #68]	; 0x44
 800421c:	4b9b      	ldr	r3, [pc, #620]	; (800448c <HAL_ETH_Init+0x2bc>)
 800421e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004228:	4b99      	ldr	r3, [pc, #612]	; (8004490 <HAL_ETH_Init+0x2c0>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a98      	ldr	r2, [pc, #608]	; (8004490 <HAL_ETH_Init+0x2c0>)
 800422e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004232:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004234:	4b96      	ldr	r3, [pc, #600]	; (8004490 <HAL_ETH_Init+0x2c0>)
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	4994      	ldr	r1, [pc, #592]	; (8004490 <HAL_ETH_Init+0x2c0>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0201 	orr.w	r2, r2, #1
 8004254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004258:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800425a:	f7fe fd89 	bl	8002d70 <HAL_GetTick>
 800425e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004260:	e011      	b.n	8004286 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004262:	f7fe fd85 	bl	8002d70 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004270:	d909      	bls.n	8004286 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2203      	movs	r2, #3
 8004276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e13b      	b.n	80044fe <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e4      	bne.n	8004262 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f023 031c 	bic.w	r3, r3, #28
 80042a6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80042a8:	f001 fb8e 	bl	80059c8 <HAL_RCC_GetHCLKFreq>
 80042ac:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	4a78      	ldr	r2, [pc, #480]	; (8004494 <HAL_ETH_Init+0x2c4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d908      	bls.n	80042c8 <HAL_ETH_Init+0xf8>
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	4a77      	ldr	r2, [pc, #476]	; (8004498 <HAL_ETH_Init+0x2c8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d804      	bhi.n	80042c8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f043 0308 	orr.w	r3, r3, #8
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	e027      	b.n	8004318 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	4a73      	ldr	r2, [pc, #460]	; (8004498 <HAL_ETH_Init+0x2c8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d908      	bls.n	80042e2 <HAL_ETH_Init+0x112>
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	4a72      	ldr	r2, [pc, #456]	; (800449c <HAL_ETH_Init+0x2cc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d804      	bhi.n	80042e2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f043 030c 	orr.w	r3, r3, #12
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	e01a      	b.n	8004318 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	4a6d      	ldr	r2, [pc, #436]	; (800449c <HAL_ETH_Init+0x2cc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d903      	bls.n	80042f2 <HAL_ETH_Init+0x122>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	4a6c      	ldr	r2, [pc, #432]	; (80044a0 <HAL_ETH_Init+0x2d0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d911      	bls.n	8004316 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	4a6a      	ldr	r2, [pc, #424]	; (80044a0 <HAL_ETH_Init+0x2d0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d908      	bls.n	800430c <HAL_ETH_Init+0x13c>
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	4a69      	ldr	r2, [pc, #420]	; (80044a4 <HAL_ETH_Init+0x2d4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d804      	bhi.n	800430c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f043 0304 	orr.w	r3, r3, #4
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	e005      	b.n	8004318 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f043 0310 	orr.w	r3, r3, #16
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	e000      	b.n	8004318 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004316:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004320:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004324:	2100      	movs	r1, #0
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f956 	bl	80045d8 <HAL_ETH_WritePHYRegister>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004336:	6939      	ldr	r1, [r7, #16]
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f9b3 	bl	80046a4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e0d9      	b.n	80044fe <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800434a:	20ff      	movs	r0, #255	; 0xff
 800434c:	f7fe fd1c 	bl	8002d88 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80a7 	beq.w	80044a8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800435a:	f7fe fd09 	bl	8002d70 <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004360:	f107 030c 	add.w	r3, r7, #12
 8004364:	461a      	mov	r2, r3
 8004366:	2101      	movs	r1, #1
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f8cd 	bl	8004508 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800436e:	f7fe fcff 	bl	8002d70 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	; 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d90f      	bls.n	80043a0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004384:	6939      	ldr	r1, [r7, #16]
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f98c 	bl	80046a4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e0ae      	b.n	80044fe <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0da      	beq.n	8004360 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80043aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043ae:	2100      	movs	r1, #0
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f911 	bl	80045d8 <HAL_ETH_WritePHYRegister>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80043c0:	6939      	ldr	r1, [r7, #16]
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f96e 	bl	80046a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80043d0:	2301      	movs	r3, #1
 80043d2:	e094      	b.n	80044fe <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80043d4:	f7fe fccc 	bl	8002d70 <HAL_GetTick>
 80043d8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80043da:	f107 030c 	add.w	r3, r7, #12
 80043de:	461a      	mov	r2, r3
 80043e0:	2101      	movs	r1, #1
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f890 	bl	8004508 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80043e8:	f7fe fcc2 	bl	8002d70 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d90f      	bls.n	800441a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80043fe:	6939      	ldr	r1, [r7, #16]
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f94f 	bl	80046a4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e071      	b.n	80044fe <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0da      	beq.n	80043da <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004424:	f107 030c 	add.w	r3, r7, #12
 8004428:	461a      	mov	r2, r3
 800442a:	211f      	movs	r1, #31
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f86b 	bl	8004508 <HAL_ETH_ReadPHYRegister>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00b      	beq.n	8004450 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800443c:	6939      	ldr	r1, [r7, #16]
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f930 	bl	80046a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800444c:	2301      	movs	r3, #1
 800444e:	e056      	b.n	80044fe <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	e002      	b.n	800446a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
 800447a:	e037      	b.n	80044ec <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	e032      	b.n	80044ec <HAL_ETH_Init+0x31c>
 8004486:	bf00      	nop
 8004488:	03938700 	.word	0x03938700
 800448c:	40023800 	.word	0x40023800
 8004490:	40013800 	.word	0x40013800
 8004494:	01312cff 	.word	0x01312cff
 8004498:	02160ebf 	.word	0x02160ebf
 800449c:	039386ff 	.word	0x039386ff
 80044a0:	05f5e0ff 	.word	0x05f5e0ff
 80044a4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	08db      	lsrs	r3, r3, #3
 80044ae:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80044b8:	4313      	orrs	r3, r2
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	2100      	movs	r1, #0
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f889 	bl	80045d8 <HAL_ETH_WritePHYRegister>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80044d0:	6939      	ldr	r1, [r7, #16]
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8e6 	bl	80046a4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e00c      	b.n	80044fe <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80044e4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80044e8:	f7fe fc4e 	bl	8002d88 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80044ec:	6939      	ldr	r1, [r7, #16]
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f8d8 	bl	80046a4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop

08004508 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	460b      	mov	r3, r1
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b82      	cmp	r3, #130	; 0x82
 8004528:	d101      	bne.n	800452e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800452a:	2302      	movs	r3, #2
 800452c:	e050      	b.n	80045d0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2282      	movs	r2, #130	; 0x82
 8004532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 031c 	and.w	r3, r3, #28
 8004544:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8a1b      	ldrh	r3, [r3, #16]
 800454a:	02db      	lsls	r3, r3, #11
 800454c:	b29b      	uxth	r3, r3
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004554:	897b      	ldrh	r3, [r7, #10]
 8004556:	019b      	lsls	r3, r3, #6
 8004558:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f023 0302 	bic.w	r3, r3, #2
 8004568:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800457a:	f7fe fbf9 	bl	8002d70 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004580:	e015      	b.n	80045ae <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004582:	f7fe fbf5 	bl	8002d70 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004590:	d309      	bcc.n	80045a6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e014      	b.n	80045d0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e4      	bne.n	8004582 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	460b      	mov	r3, r1
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b42      	cmp	r3, #66	; 0x42
 80045f8:	d101      	bne.n	80045fe <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
 80045fc:	e04e      	b.n	800469c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2242      	movs	r2, #66	; 0x42
 8004602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 031c 	and.w	r3, r3, #28
 8004614:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8a1b      	ldrh	r3, [r3, #16]
 800461a:	02db      	lsls	r3, r3, #11
 800461c:	b29b      	uxth	r3, r3
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004624:	897b      	ldrh	r3, [r7, #10]
 8004626:	019b      	lsls	r3, r3, #6
 8004628:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f043 0302 	orr.w	r3, r3, #2
 8004638:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004654:	f7fe fb8c 	bl	8002d70 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800465a:	e015      	b.n	8004688 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800465c:	f7fe fb88 	bl	8002d70 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466a:	d309      	bcc.n	8004680 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e00d      	b.n	800469c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e4      	bne.n	800465c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b0b0      	sub	sp, #192	; 0xc0
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046c0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80046d2:	2300      	movs	r3, #0
 80046d4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80046da:	2300      	movs	r3, #0
 80046dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80046de:	2300      	movs	r3, #0
 80046e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80046ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ee:	663b      	str	r3, [r7, #96]	; 0x60
 80046f0:	e001      	b.n	80046f6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80046f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046fa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004700:	2300      	movs	r3, #0
 8004702:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004704:	2300      	movs	r3, #0
 8004706:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004708:	2300      	movs	r3, #0
 800470a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800470c:	2300      	movs	r3, #0
 800470e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004710:	2340      	movs	r3, #64	; 0x40
 8004712:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004714:	2300      	movs	r3, #0
 8004716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800471a:	2300      	movs	r3, #0
 800471c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004720:	2300      	movs	r3, #0
 8004722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004726:	2300      	movs	r3, #0
 8004728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800472c:	2300      	movs	r3, #0
 800472e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004732:	2300      	movs	r3, #0
 8004734:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004738:	2300      	movs	r3, #0
 800473a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800473e:	2300      	movs	r3, #0
 8004740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800474a:	2300      	movs	r3, #0
 800474c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004750:	2300      	movs	r3, #0
 8004752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004756:	2300      	movs	r3, #0
 8004758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800475c:	2300      	movs	r3, #0
 800475e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004762:	2300      	movs	r3, #0
 8004764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004768:	2300      	movs	r3, #0
 800476a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004778:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800477c:	4bab      	ldr	r3, [pc, #684]	; (8004a2c <ETH_MACDMAConfig+0x388>)
 800477e:	4013      	ands	r3, r2
 8004780:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004784:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004788:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800478a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800478c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800478e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004790:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004796:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800479a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800479c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800479e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80047a4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80047a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80047a8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80047aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80047ac:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80047ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80047b0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80047b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80047b4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80047b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80047b8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80047ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047cc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80047d8:	2001      	movs	r0, #1
 80047da:	f7fe fad5 	bl	8002d88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047e6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80047e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80047ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80047ec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80047ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80047f0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80047f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80047f6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80047f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80047fc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80047fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004802:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004808:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800480c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004814:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004816:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004822:	2001      	movs	r0, #1
 8004824:	f7fe fab0 	bl	8002d88 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004830:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800483a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004844:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004850:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004854:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004858:	4013      	ands	r3, r2
 800485a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800485e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004862:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004864:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004868:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800486a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800486e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004874:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800487a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800487c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004880:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004882:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004894:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7fe fa71 	bl	8002d88 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048ae:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80048b0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80048b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80048ca:	2001      	movs	r0, #1
 80048cc:	f7fe fa5c 	bl	8002d88 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048d8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80048da:	2300      	movs	r3, #0
 80048dc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80048de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048e2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80048e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048ec:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80048f6:	2300      	movs	r3, #0
 80048f8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80048fa:	2300      	movs	r3, #0
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80048fe:	2304      	movs	r3, #4
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800490c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800490e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004918:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800491a:	2380      	movs	r3, #128	; 0x80
 800491c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800491e:	2300      	movs	r3, #0
 8004920:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004922:	2300      	movs	r3, #0
 8004924:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	f241 0318 	movw	r3, #4120	; 0x1018
 800492e:	4413      	add	r3, r2
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8004936:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800493a:	4b3d      	ldr	r3, [pc, #244]	; (8004a30 <ETH_MACDMAConfig+0x38c>)
 800493c:	4013      	ands	r3, r2
 800493e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004942:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004944:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004946:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004948:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800494a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800494c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800494e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004950:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004952:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004954:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004956:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004958:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800495a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800495e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004962:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004964:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	f241 0318 	movw	r3, #4120	; 0x1018
 8004976:	4413      	add	r3, r2
 8004978:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800497c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	f241 0318 	movw	r3, #4120	; 0x1018
 8004986:	4413      	add	r3, r2
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800498e:	2001      	movs	r0, #1
 8004990:	f7fe f9fa 	bl	8002d88 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	f241 0318 	movw	r3, #4120	; 0x1018
 800499c:	4413      	add	r3, r2
 800499e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80049a2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80049a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80049a8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80049ac:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80049b0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80049b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80049b4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80049b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80049ba:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80049bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80049be:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80049c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049cc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80049dc:	2001      	movs	r0, #1
 80049de:	f7fe f9d3 	bl	8002d88 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80049ee:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d10d      	bne.n	8004a14 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	f241 031c 	movw	r3, #4124	; 0x101c
 8004a00:	4413      	add	r3, r2
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6811      	ldr	r1, [r2, #0]
 8004a08:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <ETH_MACDMAConfig+0x390>)
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	f241 031c 	movw	r3, #4124	; 0x101c
 8004a10:	440b      	add	r3, r1
 8004a12:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f80b 	bl	8004a38 <ETH_MACAddressConfig>
}
 8004a22:	bf00      	nop
 8004a24:	37c0      	adds	r7, #192	; 0xc0
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	ff20810f 	.word	0xff20810f
 8004a30:	f8de3f23 	.word	0xf8de3f23
 8004a34:	00010040 	.word	0x00010040

08004a38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3305      	adds	r3, #5
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	3204      	adds	r2, #4
 8004a50:	7812      	ldrb	r2, [r2, #0]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <ETH_MACAddressConfig+0x68>)
 8004a5a:	4413      	add	r3, r2
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3303      	adds	r3, #3
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	061a      	lsls	r2, r3, #24
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3302      	adds	r3, #2
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3301      	adds	r3, #1
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <ETH_MACAddressConfig+0x6c>)
 8004a8a:	4413      	add	r3, r2
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	6013      	str	r3, [r2, #0]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40028040 	.word	0x40028040
 8004aa4:	40028044 	.word	0x40028044

08004aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b089      	sub	sp, #36	; 0x24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	e175      	b.n	8004db4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ac8:	2201      	movs	r2, #1
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	f040 8164 	bne.w	8004dae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d003      	beq.n	8004af6 <HAL_GPIO_Init+0x4e>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b12      	cmp	r3, #18
 8004af4:	d123      	bne.n	8004b3e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	08da      	lsrs	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3208      	adds	r2, #8
 8004afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	220f      	movs	r2, #15
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	43db      	mvns	r3, r3
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4013      	ands	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	08da      	lsrs	r2, r3, #3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3208      	adds	r2, #8
 8004b38:	69b9      	ldr	r1, [r7, #24]
 8004b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	2203      	movs	r2, #3
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4013      	ands	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 0203 	and.w	r2, r3, #3
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d00b      	beq.n	8004b92 <HAL_GPIO_Init+0xea>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d007      	beq.n	8004b92 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b86:	2b11      	cmp	r3, #17
 8004b88:	d003      	beq.n	8004b92 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b12      	cmp	r3, #18
 8004b90:	d130      	bne.n	8004bf4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bc8:	2201      	movs	r2, #1
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	091b      	lsrs	r3, r3, #4
 8004bde:	f003 0201 	and.w	r2, r3, #1
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	2203      	movs	r2, #3
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 80be 	beq.w	8004dae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c32:	4b65      	ldr	r3, [pc, #404]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	4a64      	ldr	r2, [pc, #400]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c3e:	4b62      	ldr	r3, [pc, #392]	; (8004dc8 <HAL_GPIO_Init+0x320>)
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c4a:	4a60      	ldr	r2, [pc, #384]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	3302      	adds	r3, #2
 8004c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	220f      	movs	r2, #15
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43db      	mvns	r3, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a57      	ldr	r2, [pc, #348]	; (8004dd0 <HAL_GPIO_Init+0x328>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d037      	beq.n	8004ce6 <HAL_GPIO_Init+0x23e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a56      	ldr	r2, [pc, #344]	; (8004dd4 <HAL_GPIO_Init+0x32c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d031      	beq.n	8004ce2 <HAL_GPIO_Init+0x23a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a55      	ldr	r2, [pc, #340]	; (8004dd8 <HAL_GPIO_Init+0x330>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d02b      	beq.n	8004cde <HAL_GPIO_Init+0x236>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a54      	ldr	r2, [pc, #336]	; (8004ddc <HAL_GPIO_Init+0x334>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d025      	beq.n	8004cda <HAL_GPIO_Init+0x232>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a53      	ldr	r2, [pc, #332]	; (8004de0 <HAL_GPIO_Init+0x338>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01f      	beq.n	8004cd6 <HAL_GPIO_Init+0x22e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a52      	ldr	r2, [pc, #328]	; (8004de4 <HAL_GPIO_Init+0x33c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d019      	beq.n	8004cd2 <HAL_GPIO_Init+0x22a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a51      	ldr	r2, [pc, #324]	; (8004de8 <HAL_GPIO_Init+0x340>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <HAL_GPIO_Init+0x226>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a50      	ldr	r2, [pc, #320]	; (8004dec <HAL_GPIO_Init+0x344>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00d      	beq.n	8004cca <HAL_GPIO_Init+0x222>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a4f      	ldr	r2, [pc, #316]	; (8004df0 <HAL_GPIO_Init+0x348>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d007      	beq.n	8004cc6 <HAL_GPIO_Init+0x21e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a4e      	ldr	r2, [pc, #312]	; (8004df4 <HAL_GPIO_Init+0x34c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d101      	bne.n	8004cc2 <HAL_GPIO_Init+0x21a>
 8004cbe:	2309      	movs	r3, #9
 8004cc0:	e012      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cc2:	230a      	movs	r3, #10
 8004cc4:	e010      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	e00e      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cca:	2307      	movs	r3, #7
 8004ccc:	e00c      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cce:	2306      	movs	r3, #6
 8004cd0:	e00a      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cd2:	2305      	movs	r3, #5
 8004cd4:	e008      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cd6:	2304      	movs	r3, #4
 8004cd8:	e006      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e004      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e002      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_GPIO_Init+0x240>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	f002 0203 	and.w	r2, r2, #3
 8004cee:	0092      	lsls	r2, r2, #2
 8004cf0:	4093      	lsls	r3, r2
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004cf8:	4934      	ldr	r1, [pc, #208]	; (8004dcc <HAL_GPIO_Init+0x324>)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	089b      	lsrs	r3, r3, #2
 8004cfe:	3302      	adds	r3, #2
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d06:	4b3c      	ldr	r3, [pc, #240]	; (8004df8 <HAL_GPIO_Init+0x350>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4013      	ands	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d2a:	4a33      	ldr	r2, [pc, #204]	; (8004df8 <HAL_GPIO_Init+0x350>)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d30:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <HAL_GPIO_Init+0x350>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d54:	4a28      	ldr	r2, [pc, #160]	; (8004df8 <HAL_GPIO_Init+0x350>)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d5a:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <HAL_GPIO_Init+0x350>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d7e:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <HAL_GPIO_Init+0x350>)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d84:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <HAL_GPIO_Init+0x350>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	4013      	ands	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004da8:	4a13      	ldr	r2, [pc, #76]	; (8004df8 <HAL_GPIO_Init+0x350>)
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3301      	adds	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b0f      	cmp	r3, #15
 8004db8:	f67f ae86 	bls.w	8004ac8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004dbc:	bf00      	nop
 8004dbe:	3724      	adds	r7, #36	; 0x24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40013800 	.word	0x40013800
 8004dd0:	40020000 	.word	0x40020000
 8004dd4:	40020400 	.word	0x40020400
 8004dd8:	40020800 	.word	0x40020800
 8004ddc:	40020c00 	.word	0x40020c00
 8004de0:	40021000 	.word	0x40021000
 8004de4:	40021400 	.word	0x40021400
 8004de8:	40021800 	.word	0x40021800
 8004dec:	40021c00 	.word	0x40021c00
 8004df0:	40022000 	.word	0x40022000
 8004df4:	40022400 	.word	0x40022400
 8004df8:	40013c00 	.word	0x40013c00

08004dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	807b      	strh	r3, [r7, #2]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e0c:	787b      	ldrb	r3, [r7, #1]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004e18:	e003      	b.n	8004e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e1a:	887b      	ldrh	r3, [r7, #2]
 8004e1c:	041a      	lsls	r2, r3, #16
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	619a      	str	r2, [r3, #24]
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e30:	b08f      	sub	sp, #60	; 0x3c
 8004e32:	af0a      	add	r7, sp, #40	; 0x28
 8004e34:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e10a      	b.n	8005056 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fd feb5 	bl	8002bc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f003 f99a 	bl	80081a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	687e      	ldr	r6, [r7, #4]
 8004e74:	466d      	mov	r5, sp
 8004e76:	f106 0410 	add.w	r4, r6, #16
 8004e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e86:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e8a:	1d33      	adds	r3, r6, #4
 8004e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e8e:	6838      	ldr	r0, [r7, #0]
 8004e90:	f003 f92e 	bl	80080f0 <USB_CoreInit>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e0d7      	b.n	8005056 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f003 f988 	bl	80081c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]
 8004eb6:	e04a      	b.n	8004f4e <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004eb8:	7bfa      	ldrb	r2, [r7, #15]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	333d      	adds	r3, #61	; 0x3d
 8004ec8:	2201      	movs	r2, #1
 8004eca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ecc:	7bfa      	ldrb	r2, [r7, #15]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	333c      	adds	r3, #60	; 0x3c
 8004edc:	7bfa      	ldrb	r2, [r7, #15]
 8004ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ee0:	7bfa      	ldrb	r2, [r7, #15]
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	b298      	uxth	r0, r3
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3342      	adds	r3, #66	; 0x42
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ef8:	7bfa      	ldrb	r2, [r7, #15]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	333f      	adds	r3, #63	; 0x3f
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f0c:	7bfa      	ldrb	r2, [r7, #15]
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	3344      	adds	r3, #68	; 0x44
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f20:	7bfa      	ldrb	r2, [r7, #15]
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	4613      	mov	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	3348      	adds	r3, #72	; 0x48
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f34:	7bfa      	ldrb	r2, [r7, #15]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	3350      	adds	r3, #80	; 0x50
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
 8004f4e:	7bfa      	ldrb	r2, [r7, #15]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d3af      	bcc.n	8004eb8 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]
 8004f5c:	e044      	b.n	8004fe8 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f74:	7bfa      	ldrb	r2, [r7, #15]
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f8a:	7bfa      	ldrb	r2, [r7, #15]
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fa0:	7bfa      	ldrb	r2, [r7, #15]
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fb6:	7bfa      	ldrb	r2, [r7, #15]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fcc:	7bfa      	ldrb	r2, [r7, #15]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
 8004fe8:	7bfa      	ldrb	r2, [r7, #15]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d3b5      	bcc.n	8004f5e <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	687e      	ldr	r6, [r7, #4]
 8004ffa:	466d      	mov	r5, sp
 8004ffc:	f106 0410 	add.w	r4, r6, #16
 8005000:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005002:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005008:	e894 0003 	ldmia.w	r4, {r0, r1}
 800500c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005010:	1d33      	adds	r3, r6, #4
 8005012:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005014:	6838      	ldr	r0, [r7, #0]
 8005016:	f003 f8ff 	bl	8008218 <USB_DevInit>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e014      	b.n	8005056 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	2b01      	cmp	r3, #1
 8005042:	d102      	bne.n	800504a <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f80b 	bl	8005060 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f003 fabf 	bl	80085d2 <USB_DevDisconnect>

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005060 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8005090:	4313      	orrs	r3, r2
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	10000003 	.word	0x10000003

080050a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a04      	ldr	r2, [pc, #16]	; (80050c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b6:	6013      	str	r3, [r2, #0]
}
 80050b8:	bf00      	nop
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40007000 	.word	0x40007000

080050c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80050d2:	4b23      	ldr	r3, [pc, #140]	; (8005160 <HAL_PWREx_EnableOverDrive+0x98>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	4a22      	ldr	r2, [pc, #136]	; (8005160 <HAL_PWREx_EnableOverDrive+0x98>)
 80050d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050dc:	6413      	str	r3, [r2, #64]	; 0x40
 80050de:	4b20      	ldr	r3, [pc, #128]	; (8005160 <HAL_PWREx_EnableOverDrive+0x98>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80050ea:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050f6:	f7fd fe3b 	bl	8002d70 <HAL_GetTick>
 80050fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050fc:	e009      	b.n	8005112 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050fe:	f7fd fe37 	bl	8002d70 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800510c:	d901      	bls.n	8005112 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e022      	b.n	8005158 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005112:	4b14      	ldr	r3, [pc, #80]	; (8005164 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511e:	d1ee      	bne.n	80050fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005120:	4b10      	ldr	r3, [pc, #64]	; (8005164 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a0f      	ldr	r2, [pc, #60]	; (8005164 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800512a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800512c:	f7fd fe20 	bl	8002d70 <HAL_GetTick>
 8005130:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005132:	e009      	b.n	8005148 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005134:	f7fd fe1c 	bl	8002d70 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005142:	d901      	bls.n	8005148 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e007      	b.n	8005158 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005148:	4b06      	ldr	r3, [pc, #24]	; (8005164 <HAL_PWREx_EnableOverDrive+0x9c>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005154:	d1ee      	bne.n	8005134 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40023800 	.word	0x40023800
 8005164:	40007000 	.word	0x40007000

08005168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005170:	2300      	movs	r3, #0
 8005172:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e25c      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8087 	beq.w	800529a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800518c:	4b96      	ldr	r3, [pc, #600]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 030c 	and.w	r3, r3, #12
 8005194:	2b04      	cmp	r3, #4
 8005196:	d00c      	beq.n	80051b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005198:	4b93      	ldr	r3, [pc, #588]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 030c 	and.w	r3, r3, #12
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d112      	bne.n	80051ca <HAL_RCC_OscConfig+0x62>
 80051a4:	4b90      	ldr	r3, [pc, #576]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b0:	d10b      	bne.n	80051ca <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b2:	4b8d      	ldr	r3, [pc, #564]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d06c      	beq.n	8005298 <HAL_RCC_OscConfig+0x130>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d168      	bne.n	8005298 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e236      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d2:	d106      	bne.n	80051e2 <HAL_RCC_OscConfig+0x7a>
 80051d4:	4b84      	ldr	r3, [pc, #528]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a83      	ldr	r2, [pc, #524]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80051da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	e02e      	b.n	8005240 <HAL_RCC_OscConfig+0xd8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10c      	bne.n	8005204 <HAL_RCC_OscConfig+0x9c>
 80051ea:	4b7f      	ldr	r3, [pc, #508]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a7e      	ldr	r2, [pc, #504]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80051f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	4b7c      	ldr	r3, [pc, #496]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a7b      	ldr	r2, [pc, #492]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80051fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e01d      	b.n	8005240 <HAL_RCC_OscConfig+0xd8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0xc0>
 800520e:	4b76      	ldr	r3, [pc, #472]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a75      	ldr	r2, [pc, #468]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4b73      	ldr	r3, [pc, #460]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a72      	ldr	r2, [pc, #456]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0xd8>
 8005228:	4b6f      	ldr	r3, [pc, #444]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a6e      	ldr	r2, [pc, #440]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 800522e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b6c      	ldr	r3, [pc, #432]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6b      	ldr	r2, [pc, #428]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 800523a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800523e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d013      	beq.n	8005270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fd fd92 	bl	8002d70 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005250:	f7fd fd8e 	bl	8002d70 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e1ea      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005262:	4b61      	ldr	r3, [pc, #388]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0xe8>
 800526e:	e014      	b.n	800529a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fd fd7e 	bl	8002d70 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005278:	f7fd fd7a 	bl	8002d70 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b64      	cmp	r3, #100	; 0x64
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e1d6      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528a:	4b57      	ldr	r3, [pc, #348]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x110>
 8005296:	e000      	b.n	800529a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d069      	beq.n	800537a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052a6:	4b50      	ldr	r3, [pc, #320]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052b2:	4b4d      	ldr	r3, [pc, #308]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d11c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x190>
 80052be:	4b4a      	ldr	r3, [pc, #296]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d116      	bne.n	80052f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ca:	4b47      	ldr	r3, [pc, #284]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d005      	beq.n	80052e2 <HAL_RCC_OscConfig+0x17a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d001      	beq.n	80052e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e1aa      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e2:	4b41      	ldr	r3, [pc, #260]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	493d      	ldr	r1, [pc, #244]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052f6:	e040      	b.n	800537a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d023      	beq.n	8005348 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005300:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a38      	ldr	r2, [pc, #224]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fd fd30 	bl	8002d70 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005314:	f7fd fd2c 	bl	8002d70 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e188      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005326:	4b30      	ldr	r3, [pc, #192]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005332:	4b2d      	ldr	r3, [pc, #180]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4929      	ldr	r1, [pc, #164]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]
 8005346:	e018      	b.n	800537a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005348:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fd fd0c 	bl	8002d70 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800535c:	f7fd fd08 	bl	8002d70 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e164      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800536e:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d038      	beq.n	80053f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d019      	beq.n	80053c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800538e:	4b16      	ldr	r3, [pc, #88]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539a:	f7fd fce9 	bl	8002d70 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053a2:	f7fd fce5 	bl	8002d70 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e141      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053b4:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80053b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x23a>
 80053c0:	e01a      	b.n	80053f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053c2:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80053c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c6:	4a08      	ldr	r2, [pc, #32]	; (80053e8 <HAL_RCC_OscConfig+0x280>)
 80053c8:	f023 0301 	bic.w	r3, r3, #1
 80053cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ce:	f7fd fccf 	bl	8002d70 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d4:	e00a      	b.n	80053ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053d6:	f7fd fccb 	bl	8002d70 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d903      	bls.n	80053ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e127      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
 80053e8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ec:	4b94      	ldr	r3, [pc, #592]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80053ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1ee      	bne.n	80053d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80a4 	beq.w	800554e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005406:	4b8e      	ldr	r3, [pc, #568]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10d      	bne.n	800542e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005412:	4b8b      	ldr	r3, [pc, #556]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	4a8a      	ldr	r2, [pc, #552]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541c:	6413      	str	r3, [r2, #64]	; 0x40
 800541e:	4b88      	ldr	r3, [pc, #544]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800542a:	2301      	movs	r3, #1
 800542c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800542e:	4b85      	ldr	r3, [pc, #532]	; (8005644 <HAL_RCC_OscConfig+0x4dc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	2b00      	cmp	r3, #0
 8005438:	d118      	bne.n	800546c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800543a:	4b82      	ldr	r3, [pc, #520]	; (8005644 <HAL_RCC_OscConfig+0x4dc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a81      	ldr	r2, [pc, #516]	; (8005644 <HAL_RCC_OscConfig+0x4dc>)
 8005440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005446:	f7fd fc93 	bl	8002d70 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800544e:	f7fd fc8f 	bl	8002d70 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b64      	cmp	r3, #100	; 0x64
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e0eb      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005460:	4b78      	ldr	r3, [pc, #480]	; (8005644 <HAL_RCC_OscConfig+0x4dc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d106      	bne.n	8005482 <HAL_RCC_OscConfig+0x31a>
 8005474:	4b72      	ldr	r3, [pc, #456]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	4a71      	ldr	r2, [pc, #452]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	6713      	str	r3, [r2, #112]	; 0x70
 8005480:	e02d      	b.n	80054de <HAL_RCC_OscConfig+0x376>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10c      	bne.n	80054a4 <HAL_RCC_OscConfig+0x33c>
 800548a:	4b6d      	ldr	r3, [pc, #436]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 800548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548e:	4a6c      	ldr	r2, [pc, #432]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005490:	f023 0301 	bic.w	r3, r3, #1
 8005494:	6713      	str	r3, [r2, #112]	; 0x70
 8005496:	4b6a      	ldr	r3, [pc, #424]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549a:	4a69      	ldr	r2, [pc, #420]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 800549c:	f023 0304 	bic.w	r3, r3, #4
 80054a0:	6713      	str	r3, [r2, #112]	; 0x70
 80054a2:	e01c      	b.n	80054de <HAL_RCC_OscConfig+0x376>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b05      	cmp	r3, #5
 80054aa:	d10c      	bne.n	80054c6 <HAL_RCC_OscConfig+0x35e>
 80054ac:	4b64      	ldr	r3, [pc, #400]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80054ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b0:	4a63      	ldr	r2, [pc, #396]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80054b2:	f043 0304 	orr.w	r3, r3, #4
 80054b6:	6713      	str	r3, [r2, #112]	; 0x70
 80054b8:	4b61      	ldr	r3, [pc, #388]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	4a60      	ldr	r2, [pc, #384]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	6713      	str	r3, [r2, #112]	; 0x70
 80054c4:	e00b      	b.n	80054de <HAL_RCC_OscConfig+0x376>
 80054c6:	4b5e      	ldr	r3, [pc, #376]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	4a5d      	ldr	r2, [pc, #372]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	6713      	str	r3, [r2, #112]	; 0x70
 80054d2:	4b5b      	ldr	r3, [pc, #364]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	4a5a      	ldr	r2, [pc, #360]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80054d8:	f023 0304 	bic.w	r3, r3, #4
 80054dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d015      	beq.n	8005512 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e6:	f7fd fc43 	bl	8002d70 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ec:	e00a      	b.n	8005504 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ee:	f7fd fc3f 	bl	8002d70 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e099      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005504:	4b4e      	ldr	r3, [pc, #312]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0ee      	beq.n	80054ee <HAL_RCC_OscConfig+0x386>
 8005510:	e014      	b.n	800553c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005512:	f7fd fc2d 	bl	8002d70 <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005518:	e00a      	b.n	8005530 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800551a:	f7fd fc29 	bl	8002d70 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	f241 3288 	movw	r2, #5000	; 0x1388
 8005528:	4293      	cmp	r3, r2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e083      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005530:	4b43      	ldr	r3, [pc, #268]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1ee      	bne.n	800551a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800553c:	7dfb      	ldrb	r3, [r7, #23]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d105      	bne.n	800554e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005542:	4b3f      	ldr	r3, [pc, #252]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	4a3e      	ldr	r2, [pc, #248]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800554c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d06f      	beq.n	8005636 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005556:	4b3a      	ldr	r3, [pc, #232]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 030c 	and.w	r3, r3, #12
 800555e:	2b08      	cmp	r3, #8
 8005560:	d067      	beq.n	8005632 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d149      	bne.n	80055fe <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556a:	4b35      	ldr	r3, [pc, #212]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a34      	ldr	r2, [pc, #208]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005576:	f7fd fbfb 	bl	8002d70 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557e:	f7fd fbf7 	bl	8002d70 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e053      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005590:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f0      	bne.n	800557e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	019b      	lsls	r3, r3, #6
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	085b      	lsrs	r3, r3, #1
 80055b4:	3b01      	subs	r3, #1
 80055b6:	041b      	lsls	r3, r3, #16
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	061b      	lsls	r3, r3, #24
 80055c0:	4313      	orrs	r3, r2
 80055c2:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80055c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055c8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055ca:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80055d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d6:	f7fd fbcb 	bl	8002d70 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055de:	f7fd fbc7 	bl	8002d70 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e023      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f0:	4b13      	ldr	r3, [pc, #76]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCC_OscConfig+0x476>
 80055fc:	e01b      	b.n	8005636 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a0f      	ldr	r2, [pc, #60]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560a:	f7fd fbb1 	bl	8002d70 <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005612:	f7fd fbad 	bl	8002d70 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e009      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <HAL_RCC_OscConfig+0x4d8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f0      	bne.n	8005612 <HAL_RCC_OscConfig+0x4aa>
 8005630:	e001      	b.n	8005636 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40023800 	.word	0x40023800
 8005644:	40007000 	.word	0x40007000

08005648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e0ce      	b.n	80057fe <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005660:	4b69      	ldr	r3, [pc, #420]	; (8005808 <HAL_RCC_ClockConfig+0x1c0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d910      	bls.n	8005690 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566e:	4b66      	ldr	r3, [pc, #408]	; (8005808 <HAL_RCC_ClockConfig+0x1c0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f023 020f 	bic.w	r2, r3, #15
 8005676:	4964      	ldr	r1, [pc, #400]	; (8005808 <HAL_RCC_ClockConfig+0x1c0>)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	4313      	orrs	r3, r2
 800567c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800567e:	4b62      	ldr	r3, [pc, #392]	; (8005808 <HAL_RCC_ClockConfig+0x1c0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d001      	beq.n	8005690 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0b6      	b.n	80057fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d020      	beq.n	80056de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056a8:	4b58      	ldr	r3, [pc, #352]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	4a57      	ldr	r2, [pc, #348]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80056ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056c0:	4b52      	ldr	r3, [pc, #328]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	4a51      	ldr	r2, [pc, #324]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80056c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056cc:	4b4f      	ldr	r3, [pc, #316]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	494c      	ldr	r1, [pc, #304]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d040      	beq.n	800576c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d107      	bne.n	8005702 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f2:	4b46      	ldr	r3, [pc, #280]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d115      	bne.n	800572a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e07d      	b.n	80057fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d107      	bne.n	800571a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570a:	4b40      	ldr	r3, [pc, #256]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e071      	b.n	80057fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571a:	4b3c      	ldr	r3, [pc, #240]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e069      	b.n	80057fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800572a:	4b38      	ldr	r3, [pc, #224]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f023 0203 	bic.w	r2, r3, #3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	4935      	ldr	r1, [pc, #212]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 8005738:	4313      	orrs	r3, r2
 800573a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573c:	f7fd fb18 	bl	8002d70 <HAL_GetTick>
 8005740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005742:	e00a      	b.n	800575a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005744:	f7fd fb14 	bl	8002d70 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e051      	b.n	80057fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575a:	4b2c      	ldr	r3, [pc, #176]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 020c 	and.w	r2, r3, #12
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	429a      	cmp	r2, r3
 800576a:	d1eb      	bne.n	8005744 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800576c:	4b26      	ldr	r3, [pc, #152]	; (8005808 <HAL_RCC_ClockConfig+0x1c0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d210      	bcs.n	800579c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577a:	4b23      	ldr	r3, [pc, #140]	; (8005808 <HAL_RCC_ClockConfig+0x1c0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f023 020f 	bic.w	r2, r3, #15
 8005782:	4921      	ldr	r1, [pc, #132]	; (8005808 <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	4313      	orrs	r3, r2
 8005788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800578a:	4b1f      	ldr	r3, [pc, #124]	; (8005808 <HAL_RCC_ClockConfig+0x1c0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e030      	b.n	80057fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057a8:	4b18      	ldr	r3, [pc, #96]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	4915      	ldr	r1, [pc, #84]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057c6:	4b11      	ldr	r3, [pc, #68]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	490d      	ldr	r1, [pc, #52]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057da:	f000 f81d 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 80057de:	4601      	mov	r1, r0
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <HAL_RCC_ClockConfig+0x1c4>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	4a09      	ldr	r2, [pc, #36]	; (8005810 <HAL_RCC_ClockConfig+0x1c8>)
 80057ec:	5cd3      	ldrb	r3, [r2, r3]
 80057ee:	fa21 f303 	lsr.w	r3, r1, r3
 80057f2:	4a08      	ldr	r2, [pc, #32]	; (8005814 <HAL_RCC_ClockConfig+0x1cc>)
 80057f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80057f6:	2000      	movs	r0, #0
 80057f8:	f7fd fa76 	bl	8002ce8 <HAL_InitTick>

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40023c00 	.word	0x40023c00
 800580c:	40023800 	.word	0x40023800
 8005810:	0800aab4 	.word	0x0800aab4
 8005814:	200000ec 	.word	0x200000ec

08005818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	2300      	movs	r3, #0
 8005828:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800582e:	4b63      	ldr	r3, [pc, #396]	; (80059bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
 8005836:	2b04      	cmp	r3, #4
 8005838:	d007      	beq.n	800584a <HAL_RCC_GetSysClockFreq+0x32>
 800583a:	2b08      	cmp	r3, #8
 800583c:	d008      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0x38>
 800583e:	2b00      	cmp	r3, #0
 8005840:	f040 80b4 	bne.w	80059ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005844:	4b5e      	ldr	r3, [pc, #376]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005846:	60bb      	str	r3, [r7, #8]
       break;
 8005848:	e0b3      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800584a:	4b5e      	ldr	r3, [pc, #376]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800584c:	60bb      	str	r3, [r7, #8]
      break;
 800584e:	e0b0      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005850:	4b5a      	ldr	r3, [pc, #360]	; (80059bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005858:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800585a:	4b58      	ldr	r3, [pc, #352]	; (80059bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d04a      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005866:	4b55      	ldr	r3, [pc, #340]	; (80059bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	099b      	lsrs	r3, r3, #6
 800586c:	f04f 0400 	mov.w	r4, #0
 8005870:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	ea03 0501 	and.w	r5, r3, r1
 800587c:	ea04 0602 	and.w	r6, r4, r2
 8005880:	4629      	mov	r1, r5
 8005882:	4632      	mov	r2, r6
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	f04f 0400 	mov.w	r4, #0
 800588c:	0154      	lsls	r4, r2, #5
 800588e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005892:	014b      	lsls	r3, r1, #5
 8005894:	4619      	mov	r1, r3
 8005896:	4622      	mov	r2, r4
 8005898:	1b49      	subs	r1, r1, r5
 800589a:	eb62 0206 	sbc.w	r2, r2, r6
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	f04f 0400 	mov.w	r4, #0
 80058a6:	0194      	lsls	r4, r2, #6
 80058a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058ac:	018b      	lsls	r3, r1, #6
 80058ae:	1a5b      	subs	r3, r3, r1
 80058b0:	eb64 0402 	sbc.w	r4, r4, r2
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	00e2      	lsls	r2, r4, #3
 80058be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058c2:	00d9      	lsls	r1, r3, #3
 80058c4:	460b      	mov	r3, r1
 80058c6:	4614      	mov	r4, r2
 80058c8:	195b      	adds	r3, r3, r5
 80058ca:	eb44 0406 	adc.w	r4, r4, r6
 80058ce:	f04f 0100 	mov.w	r1, #0
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	0262      	lsls	r2, r4, #9
 80058d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80058dc:	0259      	lsls	r1, r3, #9
 80058de:	460b      	mov	r3, r1
 80058e0:	4614      	mov	r4, r2
 80058e2:	4618      	mov	r0, r3
 80058e4:	4621      	mov	r1, r4
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f04f 0400 	mov.w	r4, #0
 80058ec:	461a      	mov	r2, r3
 80058ee:	4623      	mov	r3, r4
 80058f0:	f7fb f9aa 	bl	8000c48 <__aeabi_uldivmod>
 80058f4:	4603      	mov	r3, r0
 80058f6:	460c      	mov	r4, r1
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	e049      	b.n	8005990 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058fc:	4b2f      	ldr	r3, [pc, #188]	; (80059bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	099b      	lsrs	r3, r3, #6
 8005902:	f04f 0400 	mov.w	r4, #0
 8005906:	f240 11ff 	movw	r1, #511	; 0x1ff
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	ea03 0501 	and.w	r5, r3, r1
 8005912:	ea04 0602 	and.w	r6, r4, r2
 8005916:	4629      	mov	r1, r5
 8005918:	4632      	mov	r2, r6
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	f04f 0400 	mov.w	r4, #0
 8005922:	0154      	lsls	r4, r2, #5
 8005924:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005928:	014b      	lsls	r3, r1, #5
 800592a:	4619      	mov	r1, r3
 800592c:	4622      	mov	r2, r4
 800592e:	1b49      	subs	r1, r1, r5
 8005930:	eb62 0206 	sbc.w	r2, r2, r6
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	f04f 0400 	mov.w	r4, #0
 800593c:	0194      	lsls	r4, r2, #6
 800593e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005942:	018b      	lsls	r3, r1, #6
 8005944:	1a5b      	subs	r3, r3, r1
 8005946:	eb64 0402 	sbc.w	r4, r4, r2
 800594a:	f04f 0100 	mov.w	r1, #0
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	00e2      	lsls	r2, r4, #3
 8005954:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005958:	00d9      	lsls	r1, r3, #3
 800595a:	460b      	mov	r3, r1
 800595c:	4614      	mov	r4, r2
 800595e:	195b      	adds	r3, r3, r5
 8005960:	eb44 0406 	adc.w	r4, r4, r6
 8005964:	f04f 0100 	mov.w	r1, #0
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	02a2      	lsls	r2, r4, #10
 800596e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005972:	0299      	lsls	r1, r3, #10
 8005974:	460b      	mov	r3, r1
 8005976:	4614      	mov	r4, r2
 8005978:	4618      	mov	r0, r3
 800597a:	4621      	mov	r1, r4
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	461a      	mov	r2, r3
 8005984:	4623      	mov	r3, r4
 8005986:	f7fb f95f 	bl	8000c48 <__aeabi_uldivmod>
 800598a:	4603      	mov	r3, r0
 800598c:	460c      	mov	r4, r1
 800598e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005990:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	0c1b      	lsrs	r3, r3, #16
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	3301      	adds	r3, #1
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a8:	60bb      	str	r3, [r7, #8]
      break;
 80059aa:	e002      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80059ae:	60bb      	str	r3, [r7, #8]
      break;
 80059b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059b2:	68bb      	ldr	r3, [r7, #8]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059bc:	40023800 	.word	0x40023800
 80059c0:	00f42400 	.word	0x00f42400
 80059c4:	007a1200 	.word	0x007a1200

080059c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059cc:	4b03      	ldr	r3, [pc, #12]	; (80059dc <HAL_RCC_GetHCLKFreq+0x14>)
 80059ce:	681b      	ldr	r3, [r3, #0]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	200000ec 	.word	0x200000ec

080059e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059e4:	f7ff fff0 	bl	80059c8 <HAL_RCC_GetHCLKFreq>
 80059e8:	4601      	mov	r1, r0
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	0a9b      	lsrs	r3, r3, #10
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	4a03      	ldr	r2, [pc, #12]	; (8005a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f6:	5cd3      	ldrb	r3, [r2, r3]
 80059f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40023800 	.word	0x40023800
 8005a04:	0800aac4 	.word	0x0800aac4

08005a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a0c:	f7ff ffdc 	bl	80059c8 <HAL_RCC_GetHCLKFreq>
 8005a10:	4601      	mov	r1, r0
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	0b5b      	lsrs	r3, r3, #13
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	4a03      	ldr	r2, [pc, #12]	; (8005a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a1e:	5cd3      	ldrb	r3, [r2, r3]
 8005a20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	0800aac4 	.word	0x0800aac4

08005a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d012      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a58:	4b69      	ldr	r3, [pc, #420]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4a68      	ldr	r2, [pc, #416]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005a62:	6093      	str	r3, [r2, #8]
 8005a64:	4b66      	ldr	r3, [pc, #408]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	4964      	ldr	r1, [pc, #400]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d017      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a8a:	4b5d      	ldr	r3, [pc, #372]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a98:	4959      	ldr	r1, [pc, #356]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aa8:	d101      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d017      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ac6:	4b4e      	ldr	r3, [pc, #312]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005acc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	494a      	ldr	r1, [pc, #296]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae4:	d101      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005af2:	2301      	movs	r3, #1
 8005af4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005b02:	2301      	movs	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 808b 	beq.w	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b14:	4b3a      	ldr	r3, [pc, #232]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	4a39      	ldr	r2, [pc, #228]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8005b20:	4b37      	ldr	r3, [pc, #220]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b2c:	4b35      	ldr	r3, [pc, #212]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a34      	ldr	r2, [pc, #208]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b38:	f7fd f91a 	bl	8002d70 <HAL_GetTick>
 8005b3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b40:	f7fd f916 	bl	8002d70 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b64      	cmp	r3, #100	; 0x64
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e355      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b52:	4b2c      	ldr	r3, [pc, #176]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b5e:	4b28      	ldr	r3, [pc, #160]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d035      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d02e      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b7c:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b86:	4b1e      	ldr	r3, [pc, #120]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b92:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b9e:	4a18      	ldr	r2, [pc, #96]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ba4:	4b16      	ldr	r3, [pc, #88]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d114      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb0:	f7fd f8de 	bl	8002d70 <HAL_GetTick>
 8005bb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb6:	e00a      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bb8:	f7fd f8da 	bl	8002d70 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e317      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bce:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0ee      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be6:	d111      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005bf4:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bf6:	400b      	ands	r3, r1
 8005bf8:	4901      	ldr	r1, [pc, #4]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	608b      	str	r3, [r1, #8]
 8005bfe:	e00b      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005c00:	40023800 	.word	0x40023800
 8005c04:	40007000 	.word	0x40007000
 8005c08:	0ffffcff 	.word	0x0ffffcff
 8005c0c:	4bb0      	ldr	r3, [pc, #704]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	4aaf      	ldr	r2, [pc, #700]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c16:	6093      	str	r3, [r2, #8]
 8005c18:	4bad      	ldr	r3, [pc, #692]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c24:	49aa      	ldr	r1, [pc, #680]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0310 	and.w	r3, r3, #16
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d010      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c36:	4ba6      	ldr	r3, [pc, #664]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3c:	4aa4      	ldr	r2, [pc, #656]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c46:	4ba2      	ldr	r3, [pc, #648]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	499f      	ldr	r1, [pc, #636]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c64:	4b9a      	ldr	r3, [pc, #616]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c72:	4997      	ldr	r1, [pc, #604]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c86:	4b92      	ldr	r3, [pc, #584]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c94:	498e      	ldr	r1, [pc, #568]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ca8:	4b89      	ldr	r3, [pc, #548]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb6:	4986      	ldr	r1, [pc, #536]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005cca:	4b81      	ldr	r3, [pc, #516]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	497d      	ldr	r1, [pc, #500]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cec:	4b78      	ldr	r3, [pc, #480]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f023 0203 	bic.w	r2, r3, #3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	4975      	ldr	r1, [pc, #468]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d0e:	4b70      	ldr	r3, [pc, #448]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d14:	f023 020c 	bic.w	r2, r3, #12
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d1c:	496c      	ldr	r1, [pc, #432]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d30:	4b67      	ldr	r3, [pc, #412]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3e:	4964      	ldr	r1, [pc, #400]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d52:	4b5f      	ldr	r3, [pc, #380]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d58:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d60:	495b      	ldr	r1, [pc, #364]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d74:	4b56      	ldr	r3, [pc, #344]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	4953      	ldr	r1, [pc, #332]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d96:	4b4e      	ldr	r3, [pc, #312]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	494a      	ldr	r1, [pc, #296]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005db8:	4b45      	ldr	r3, [pc, #276]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc6:	4942      	ldr	r1, [pc, #264]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005dda:	4b3d      	ldr	r3, [pc, #244]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de8:	4939      	ldr	r1, [pc, #228]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005dfc:	4b34      	ldr	r3, [pc, #208]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e0a:	4931      	ldr	r1, [pc, #196]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d011      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005e1e:	4b2c      	ldr	r3, [pc, #176]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e24:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e2c:	4928      	ldr	r1, [pc, #160]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6c:	4918      	ldr	r1, [pc, #96]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e80:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e90:	490f      	ldr	r1, [pc, #60]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d005      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ea6:	f040 80d8 	bne.w	800605a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005eaa:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a08      	ldr	r2, [pc, #32]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005eb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb6:	f7fc ff5b 	bl	8002d70 <HAL_GetTick>
 8005eba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ebc:	e00a      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ebe:	f7fc ff57 	bl	8002d70 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b64      	cmp	r3, #100	; 0x64
 8005eca:	d903      	bls.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e196      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005ed0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ed4:	4b6c      	ldr	r3, [pc, #432]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1ee      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d021      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d11d      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ef4:	4b64      	ldr	r3, [pc, #400]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005efa:	0c1b      	lsrs	r3, r3, #16
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f02:	4b61      	ldr	r3, [pc, #388]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f08:	0e1b      	lsrs	r3, r3, #24
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	019a      	lsls	r2, r3, #6
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	041b      	lsls	r3, r3, #16
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	061b      	lsls	r3, r3, #24
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	071b      	lsls	r3, r3, #28
 8005f28:	4957      	ldr	r1, [pc, #348]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d02e      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f5a:	d129      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f5c:	4b4a      	ldr	r3, [pc, #296]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f62:	0c1b      	lsrs	r3, r3, #16
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f6a:	4b47      	ldr	r3, [pc, #284]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f70:	0f1b      	lsrs	r3, r3, #28
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	019a      	lsls	r2, r3, #6
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	041b      	lsls	r3, r3, #16
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	061b      	lsls	r3, r3, #24
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	071b      	lsls	r3, r3, #28
 8005f90:	493d      	ldr	r1, [pc, #244]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f98:	4b3b      	ldr	r3, [pc, #236]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f9e:	f023 021f 	bic.w	r2, r3, #31
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	4937      	ldr	r1, [pc, #220]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01d      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fbc:	4b32      	ldr	r3, [pc, #200]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc2:	0e1b      	lsrs	r3, r3, #24
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fca:	4b2f      	ldr	r3, [pc, #188]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd0:	0f1b      	lsrs	r3, r3, #28
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	019a      	lsls	r2, r3, #6
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	061b      	lsls	r3, r3, #24
 8005fea:	431a      	orrs	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	071b      	lsls	r3, r3, #28
 8005ff0:	4925      	ldr	r1, [pc, #148]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d011      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	019a      	lsls	r2, r3, #6
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	041b      	lsls	r3, r3, #16
 8006010:	431a      	orrs	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	061b      	lsls	r3, r3, #24
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	071b      	lsls	r3, r3, #28
 8006020:	4919      	ldr	r1, [pc, #100]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006028:	4b17      	ldr	r3, [pc, #92]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a16      	ldr	r2, [pc, #88]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800602e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006034:	f7fc fe9c 	bl	8002d70 <HAL_GetTick>
 8006038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800603a:	e008      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800603c:	f7fc fe98 	bl	8002d70 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b64      	cmp	r3, #100	; 0x64
 8006048:	d901      	bls.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e0d7      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800604e:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f0      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b01      	cmp	r3, #1
 800605e:	f040 80cd 	bne.w	80061fc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a08      	ldr	r2, [pc, #32]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800606c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800606e:	f7fc fe7f 	bl	8002d70 <HAL_GetTick>
 8006072:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006074:	e00a      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006076:	f7fc fe7b 	bl	8002d70 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b64      	cmp	r3, #100	; 0x64
 8006082:	d903      	bls.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e0ba      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006088:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800608c:	4b5e      	ldr	r3, [pc, #376]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006098:	d0ed      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d009      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d02e      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d12a      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80060c2:	4b51      	ldr	r3, [pc, #324]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060d0:	4b4d      	ldr	r3, [pc, #308]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d6:	0f1b      	lsrs	r3, r3, #28
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	019a      	lsls	r2, r3, #6
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	041b      	lsls	r3, r3, #16
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	061b      	lsls	r3, r3, #24
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	071b      	lsls	r3, r3, #28
 80060f6:	4944      	ldr	r1, [pc, #272]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060fe:	4b42      	ldr	r3, [pc, #264]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006104:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	3b01      	subs	r3, #1
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	493d      	ldr	r1, [pc, #244]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d022      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800612c:	d11d      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800612e:	4b36      	ldr	r3, [pc, #216]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006134:	0e1b      	lsrs	r3, r3, #24
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800613c:	4b32      	ldr	r3, [pc, #200]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	0f1b      	lsrs	r3, r3, #28
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	019a      	lsls	r2, r3, #6
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	041b      	lsls	r3, r3, #16
 8006156:	431a      	orrs	r2, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	061b      	lsls	r3, r3, #24
 800615c:	431a      	orrs	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	071b      	lsls	r3, r3, #28
 8006162:	4929      	ldr	r1, [pc, #164]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006164:	4313      	orrs	r3, r2
 8006166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d028      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006176:	4b24      	ldr	r3, [pc, #144]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617c:	0e1b      	lsrs	r3, r3, #24
 800617e:	f003 030f 	and.w	r3, r3, #15
 8006182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006184:	4b20      	ldr	r3, [pc, #128]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618a:	0c1b      	lsrs	r3, r3, #16
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	019a      	lsls	r2, r3, #6
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	431a      	orrs	r2, r3
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	061b      	lsls	r3, r3, #24
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	071b      	lsls	r3, r3, #28
 80061aa:	4917      	ldr	r1, [pc, #92]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80061b2:	4b15      	ldr	r3, [pc, #84]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	4911      	ldr	r1, [pc, #68]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80061c8:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a0e      	ldr	r2, [pc, #56]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d4:	f7fc fdcc 	bl	8002d70 <HAL_GetTick>
 80061d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061dc:	f7fc fdc8 	bl	8002d70 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b64      	cmp	r3, #100	; 0x64
 80061e8:	d901      	bls.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e007      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061ee:	4b06      	ldr	r3, [pc, #24]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061fa:	d1ef      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	40023800 	.word	0x40023800

0800620c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e01d      	b.n	800625a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fc fada 	bl	80027ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3304      	adds	r3, #4
 8006248:	4619      	mov	r1, r3
 800624a:	4610      	mov	r0, r2
 800624c:	f000 fbc8 	bl	80069e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	4b0c      	ldr	r3, [pc, #48]	; (80062b4 <HAL_TIM_Base_Start_IT+0x50>)
 8006284:	4013      	ands	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b06      	cmp	r3, #6
 800628c:	d00b      	beq.n	80062a6 <HAL_TIM_Base_Start_IT+0x42>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006294:	d007      	beq.n	80062a6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0201 	orr.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	00010007 	.word	0x00010007

080062b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e01d      	b.n	8006306 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d106      	bne.n	80062e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f815 	bl	800630e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f000 fb72 	bl	80069e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
	...

08006324 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2201      	movs	r2, #1
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f000 feea 	bl	8007110 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a17      	ldr	r2, [pc, #92]	; (80063a0 <HAL_TIM_PWM_Start+0x7c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_TIM_PWM_Start+0x2c>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a16      	ldr	r2, [pc, #88]	; (80063a4 <HAL_TIM_PWM_Start+0x80>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d101      	bne.n	8006354 <HAL_TIM_PWM_Start+0x30>
 8006350:	2301      	movs	r3, #1
 8006352:	e000      	b.n	8006356 <HAL_TIM_PWM_Start+0x32>
 8006354:	2300      	movs	r3, #0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <HAL_TIM_PWM_Start+0x84>)
 8006372:	4013      	ands	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b06      	cmp	r3, #6
 800637a:	d00b      	beq.n	8006394 <HAL_TIM_PWM_Start+0x70>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006382:	d007      	beq.n	8006394 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400
 80063a8:	00010007 	.word	0x00010007

080063ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d122      	bne.n	8006408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d11b      	bne.n	8006408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0202 	mvn.w	r2, #2
 80063d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fad8 	bl	80069a4 <HAL_TIM_IC_CaptureCallback>
 80063f4:	e005      	b.n	8006402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 faca 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fadb 	bl	80069b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d122      	bne.n	800645c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b04      	cmp	r3, #4
 8006422:	d11b      	bne.n	800645c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f06f 0204 	mvn.w	r2, #4
 800642c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2202      	movs	r2, #2
 8006432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 faae 	bl	80069a4 <HAL_TIM_IC_CaptureCallback>
 8006448:	e005      	b.n	8006456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 faa0 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fab1 	bl	80069b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b08      	cmp	r3, #8
 8006468:	d122      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b08      	cmp	r3, #8
 8006476:	d11b      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0208 	mvn.w	r2, #8
 8006480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2204      	movs	r2, #4
 8006486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa84 	bl	80069a4 <HAL_TIM_IC_CaptureCallback>
 800649c:	e005      	b.n	80064aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa76 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fa87 	bl	80069b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0310 	and.w	r3, r3, #16
 80064ba:	2b10      	cmp	r3, #16
 80064bc:	d122      	bne.n	8006504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b10      	cmp	r3, #16
 80064ca:	d11b      	bne.n	8006504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0210 	mvn.w	r2, #16
 80064d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2208      	movs	r2, #8
 80064da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fa5a 	bl	80069a4 <HAL_TIM_IC_CaptureCallback>
 80064f0:	e005      	b.n	80064fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa4c 	bl	8006990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fa5d 	bl	80069b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b01      	cmp	r3, #1
 8006510:	d10e      	bne.n	8006530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b01      	cmp	r3, #1
 800651e:	d107      	bne.n	8006530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0201 	mvn.w	r2, #1
 8006528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fb fa74 	bl	8001a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	d10e      	bne.n	800655c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006548:	2b80      	cmp	r3, #128	; 0x80
 800654a:	d107      	bne.n	800655c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fee4 	bl	8007324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656a:	d10e      	bne.n	800658a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006576:	2b80      	cmp	r3, #128	; 0x80
 8006578:	d107      	bne.n	800658a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fed7 	bl	8007338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d10e      	bne.n	80065b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	d107      	bne.n	80065b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa0b 	bl	80069cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	d10e      	bne.n	80065e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d107      	bne.n	80065e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f06f 0220 	mvn.w	r2, #32
 80065da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fe97 	bl	8007310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006602:	2302      	movs	r3, #2
 8006604:	e105      	b.n	8006812 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b14      	cmp	r3, #20
 800661a:	f200 80f0 	bhi.w	80067fe <HAL_TIM_PWM_ConfigChannel+0x212>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006679 	.word	0x08006679
 8006628:	080067ff 	.word	0x080067ff
 800662c:	080067ff 	.word	0x080067ff
 8006630:	080067ff 	.word	0x080067ff
 8006634:	080066b9 	.word	0x080066b9
 8006638:	080067ff 	.word	0x080067ff
 800663c:	080067ff 	.word	0x080067ff
 8006640:	080067ff 	.word	0x080067ff
 8006644:	080066fb 	.word	0x080066fb
 8006648:	080067ff 	.word	0x080067ff
 800664c:	080067ff 	.word	0x080067ff
 8006650:	080067ff 	.word	0x080067ff
 8006654:	0800673b 	.word	0x0800673b
 8006658:	080067ff 	.word	0x080067ff
 800665c:	080067ff 	.word	0x080067ff
 8006660:	080067ff 	.word	0x080067ff
 8006664:	0800677d 	.word	0x0800677d
 8006668:	080067ff 	.word	0x080067ff
 800666c:	080067ff 	.word	0x080067ff
 8006670:	080067ff 	.word	0x080067ff
 8006674:	080067bd 	.word	0x080067bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fa4e 	bl	8006b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0208 	orr.w	r2, r2, #8
 8006692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0204 	bic.w	r2, r2, #4
 80066a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6999      	ldr	r1, [r3, #24]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	619a      	str	r2, [r3, #24]
      break;
 80066b6:	e0a3      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 faa0 	bl	8006c04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699a      	ldr	r2, [r3, #24]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6999      	ldr	r1, [r3, #24]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	021a      	lsls	r2, r3, #8
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	619a      	str	r2, [r3, #24]
      break;
 80066f8:	e082      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68b9      	ldr	r1, [r7, #8]
 8006700:	4618      	mov	r0, r3
 8006702:	f000 faf7 	bl	8006cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69da      	ldr	r2, [r3, #28]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 0208 	orr.w	r2, r2, #8
 8006714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0204 	bic.w	r2, r2, #4
 8006724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69d9      	ldr	r1, [r3, #28]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	691a      	ldr	r2, [r3, #16]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	61da      	str	r2, [r3, #28]
      break;
 8006738:	e062      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fb4d 	bl	8006de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69da      	ldr	r2, [r3, #28]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69d9      	ldr	r1, [r3, #28]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	021a      	lsls	r2, r3, #8
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	61da      	str	r2, [r3, #28]
      break;
 800677a:	e041      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fb84 	bl	8006e90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0208 	orr.w	r2, r2, #8
 8006796:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0204 	bic.w	r2, r2, #4
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067ba:	e021      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fbb6 	bl	8006f34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	021a      	lsls	r2, r3, #8
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067fc:	e000      	b.n	8006800 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80067fe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop

0800681c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_TIM_ConfigClockSource+0x18>
 8006830:	2302      	movs	r3, #2
 8006832:	e0a6      	b.n	8006982 <HAL_TIM_ConfigClockSource+0x166>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4b4f      	ldr	r3, [pc, #316]	; (800698c <HAL_TIM_ConfigClockSource+0x170>)
 8006850:	4013      	ands	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800685a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	d067      	beq.n	800693c <HAL_TIM_ConfigClockSource+0x120>
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d80b      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x6c>
 8006870:	2b10      	cmp	r3, #16
 8006872:	d073      	beq.n	800695c <HAL_TIM_ConfigClockSource+0x140>
 8006874:	2b10      	cmp	r3, #16
 8006876:	d802      	bhi.n	800687e <HAL_TIM_ConfigClockSource+0x62>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d06f      	beq.n	800695c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800687c:	e078      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800687e:	2b20      	cmp	r3, #32
 8006880:	d06c      	beq.n	800695c <HAL_TIM_ConfigClockSource+0x140>
 8006882:	2b30      	cmp	r3, #48	; 0x30
 8006884:	d06a      	beq.n	800695c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006886:	e073      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006888:	2b70      	cmp	r3, #112	; 0x70
 800688a:	d00d      	beq.n	80068a8 <HAL_TIM_ConfigClockSource+0x8c>
 800688c:	2b70      	cmp	r3, #112	; 0x70
 800688e:	d804      	bhi.n	800689a <HAL_TIM_ConfigClockSource+0x7e>
 8006890:	2b50      	cmp	r3, #80	; 0x50
 8006892:	d033      	beq.n	80068fc <HAL_TIM_ConfigClockSource+0xe0>
 8006894:	2b60      	cmp	r3, #96	; 0x60
 8006896:	d041      	beq.n	800691c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006898:	e06a      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800689a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689e:	d066      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x152>
 80068a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a4:	d017      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80068a6:	e063      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	6899      	ldr	r1, [r3, #8]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f000 fc0a 	bl	80070d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	609a      	str	r2, [r3, #8]
      break;
 80068d4:	e04c      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	6899      	ldr	r1, [r3, #8]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f000 fbf3 	bl	80070d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068f8:	609a      	str	r2, [r3, #8]
      break;
 80068fa:	e039      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	6859      	ldr	r1, [r3, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	461a      	mov	r2, r3
 800690a:	f000 fb67 	bl	8006fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2150      	movs	r1, #80	; 0x50
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fbc0 	bl	800709a <TIM_ITRx_SetConfig>
      break;
 800691a:	e029      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	6859      	ldr	r1, [r3, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	461a      	mov	r2, r3
 800692a:	f000 fb86 	bl	800703a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2160      	movs	r1, #96	; 0x60
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fbb0 	bl	800709a <TIM_ITRx_SetConfig>
      break;
 800693a:	e019      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6859      	ldr	r1, [r3, #4]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	461a      	mov	r2, r3
 800694a:	f000 fb47 	bl	8006fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2140      	movs	r1, #64	; 0x40
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fba0 	bl	800709a <TIM_ITRx_SetConfig>
      break;
 800695a:	e009      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4619      	mov	r1, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f000 fb97 	bl	800709a <TIM_ITRx_SetConfig>
      break;
 800696c:	e000      	b.n	8006970 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800696e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	fffeff88 	.word	0xfffeff88

08006990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a40      	ldr	r2, [pc, #256]	; (8006af4 <TIM_Base_SetConfig+0x114>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d013      	beq.n	8006a20 <TIM_Base_SetConfig+0x40>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fe:	d00f      	beq.n	8006a20 <TIM_Base_SetConfig+0x40>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a3d      	ldr	r2, [pc, #244]	; (8006af8 <TIM_Base_SetConfig+0x118>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d00b      	beq.n	8006a20 <TIM_Base_SetConfig+0x40>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a3c      	ldr	r2, [pc, #240]	; (8006afc <TIM_Base_SetConfig+0x11c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d007      	beq.n	8006a20 <TIM_Base_SetConfig+0x40>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a3b      	ldr	r2, [pc, #236]	; (8006b00 <TIM_Base_SetConfig+0x120>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d003      	beq.n	8006a20 <TIM_Base_SetConfig+0x40>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a3a      	ldr	r2, [pc, #232]	; (8006b04 <TIM_Base_SetConfig+0x124>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d108      	bne.n	8006a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a2f      	ldr	r2, [pc, #188]	; (8006af4 <TIM_Base_SetConfig+0x114>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d02b      	beq.n	8006a92 <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a40:	d027      	beq.n	8006a92 <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a2c      	ldr	r2, [pc, #176]	; (8006af8 <TIM_Base_SetConfig+0x118>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d023      	beq.n	8006a92 <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a2b      	ldr	r2, [pc, #172]	; (8006afc <TIM_Base_SetConfig+0x11c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d01f      	beq.n	8006a92 <TIM_Base_SetConfig+0xb2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a2a      	ldr	r2, [pc, #168]	; (8006b00 <TIM_Base_SetConfig+0x120>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d01b      	beq.n	8006a92 <TIM_Base_SetConfig+0xb2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a29      	ldr	r2, [pc, #164]	; (8006b04 <TIM_Base_SetConfig+0x124>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d017      	beq.n	8006a92 <TIM_Base_SetConfig+0xb2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a28      	ldr	r2, [pc, #160]	; (8006b08 <TIM_Base_SetConfig+0x128>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d013      	beq.n	8006a92 <TIM_Base_SetConfig+0xb2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a27      	ldr	r2, [pc, #156]	; (8006b0c <TIM_Base_SetConfig+0x12c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d00f      	beq.n	8006a92 <TIM_Base_SetConfig+0xb2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a26      	ldr	r2, [pc, #152]	; (8006b10 <TIM_Base_SetConfig+0x130>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d00b      	beq.n	8006a92 <TIM_Base_SetConfig+0xb2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a25      	ldr	r2, [pc, #148]	; (8006b14 <TIM_Base_SetConfig+0x134>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d007      	beq.n	8006a92 <TIM_Base_SetConfig+0xb2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a24      	ldr	r2, [pc, #144]	; (8006b18 <TIM_Base_SetConfig+0x138>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d003      	beq.n	8006a92 <TIM_Base_SetConfig+0xb2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a23      	ldr	r2, [pc, #140]	; (8006b1c <TIM_Base_SetConfig+0x13c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d108      	bne.n	8006aa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a0a      	ldr	r2, [pc, #40]	; (8006af4 <TIM_Base_SetConfig+0x114>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d003      	beq.n	8006ad8 <TIM_Base_SetConfig+0xf8>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a0c      	ldr	r2, [pc, #48]	; (8006b04 <TIM_Base_SetConfig+0x124>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d103      	bne.n	8006ae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	691a      	ldr	r2, [r3, #16]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	615a      	str	r2, [r3, #20]
}
 8006ae6:	bf00      	nop
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40010000 	.word	0x40010000
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	40010400 	.word	0x40010400
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40014400 	.word	0x40014400
 8006b10:	40014800 	.word	0x40014800
 8006b14:	40001800 	.word	0x40001800
 8006b18:	40001c00 	.word	0x40001c00
 8006b1c:	40002000 	.word	0x40002000

08006b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f023 0201 	bic.w	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4b2b      	ldr	r3, [pc, #172]	; (8006bf8 <TIM_OC1_SetConfig+0xd8>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f023 0302 	bic.w	r3, r3, #2
 8006b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a21      	ldr	r2, [pc, #132]	; (8006bfc <TIM_OC1_SetConfig+0xdc>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC1_SetConfig+0x64>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a20      	ldr	r2, [pc, #128]	; (8006c00 <TIM_OC1_SetConfig+0xe0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d10c      	bne.n	8006b9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0308 	bic.w	r3, r3, #8
 8006b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f023 0304 	bic.w	r3, r3, #4
 8006b9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a16      	ldr	r2, [pc, #88]	; (8006bfc <TIM_OC1_SetConfig+0xdc>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d003      	beq.n	8006bae <TIM_OC1_SetConfig+0x8e>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a15      	ldr	r2, [pc, #84]	; (8006c00 <TIM_OC1_SetConfig+0xe0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d111      	bne.n	8006bd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	621a      	str	r2, [r3, #32]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	fffeff8f 	.word	0xfffeff8f
 8006bfc:	40010000 	.word	0x40010000
 8006c00:	40010400 	.word	0x40010400

08006c04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f023 0210 	bic.w	r2, r3, #16
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4b2e      	ldr	r3, [pc, #184]	; (8006ce8 <TIM_OC2_SetConfig+0xe4>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f023 0320 	bic.w	r3, r3, #32
 8006c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a23      	ldr	r2, [pc, #140]	; (8006cec <TIM_OC2_SetConfig+0xe8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d003      	beq.n	8006c6c <TIM_OC2_SetConfig+0x68>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <TIM_OC2_SetConfig+0xec>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d10d      	bne.n	8006c88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a18      	ldr	r2, [pc, #96]	; (8006cec <TIM_OC2_SetConfig+0xe8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC2_SetConfig+0x94>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <TIM_OC2_SetConfig+0xec>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d113      	bne.n	8006cc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	feff8fff 	.word	0xfeff8fff
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40010400 	.word	0x40010400

08006cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4b2d      	ldr	r3, [pc, #180]	; (8006dd4 <TIM_OC3_SetConfig+0xe0>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0303 	bic.w	r3, r3, #3
 8006d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <TIM_OC3_SetConfig+0xe4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d003      	beq.n	8006d5a <TIM_OC3_SetConfig+0x66>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a21      	ldr	r2, [pc, #132]	; (8006ddc <TIM_OC3_SetConfig+0xe8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d10d      	bne.n	8006d76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a17      	ldr	r2, [pc, #92]	; (8006dd8 <TIM_OC3_SetConfig+0xe4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_OC3_SetConfig+0x92>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a16      	ldr	r2, [pc, #88]	; (8006ddc <TIM_OC3_SetConfig+0xe8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d113      	bne.n	8006dae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	621a      	str	r2, [r3, #32]
}
 8006dc8:	bf00      	nop
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	fffeff8f 	.word	0xfffeff8f
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	40010400 	.word	0x40010400

08006de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4b1e      	ldr	r3, [pc, #120]	; (8006e84 <TIM_OC4_SetConfig+0xa4>)
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	021b      	lsls	r3, r3, #8
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	031b      	lsls	r3, r3, #12
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a13      	ldr	r2, [pc, #76]	; (8006e88 <TIM_OC4_SetConfig+0xa8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_OC4_SetConfig+0x68>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a12      	ldr	r2, [pc, #72]	; (8006e8c <TIM_OC4_SetConfig+0xac>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d109      	bne.n	8006e5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	019b      	lsls	r3, r3, #6
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	feff8fff 	.word	0xfeff8fff
 8006e88:	40010000 	.word	0x40010000
 8006e8c:	40010400 	.word	0x40010400

08006e90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <TIM_OC5_SetConfig+0x98>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ed0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	041b      	lsls	r3, r3, #16
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a12      	ldr	r2, [pc, #72]	; (8006f2c <TIM_OC5_SetConfig+0x9c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d003      	beq.n	8006eee <TIM_OC5_SetConfig+0x5e>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a11      	ldr	r2, [pc, #68]	; (8006f30 <TIM_OC5_SetConfig+0xa0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d109      	bne.n	8006f02 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	621a      	str	r2, [r3, #32]
}
 8006f1c:	bf00      	nop
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	fffeff8f 	.word	0xfffeff8f
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40010400 	.word	0x40010400

08006f34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4b1c      	ldr	r3, [pc, #112]	; (8006fd0 <TIM_OC6_SetConfig+0x9c>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	021b      	lsls	r3, r3, #8
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	051b      	lsls	r3, r3, #20
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a13      	ldr	r2, [pc, #76]	; (8006fd4 <TIM_OC6_SetConfig+0xa0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d003      	beq.n	8006f94 <TIM_OC6_SetConfig+0x60>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a12      	ldr	r2, [pc, #72]	; (8006fd8 <TIM_OC6_SetConfig+0xa4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d109      	bne.n	8006fa8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	029b      	lsls	r3, r3, #10
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	621a      	str	r2, [r3, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	feff8fff 	.word	0xfeff8fff
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	40010400 	.word	0x40010400

08006fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f023 0201 	bic.w	r2, r3, #1
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	011b      	lsls	r3, r3, #4
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	4313      	orrs	r3, r2
 8007010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f023 030a 	bic.w	r3, r3, #10
 8007018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	621a      	str	r2, [r3, #32]
}
 800702e:	bf00      	nop
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800703a:	b480      	push	{r7}
 800703c:	b087      	sub	sp, #28
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	f023 0210 	bic.w	r2, r3, #16
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007064:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	031b      	lsls	r3, r3, #12
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007076:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f043 0307 	orr.w	r3, r3, #7
 80070bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	609a      	str	r2, [r3, #8]
}
 80070c4:	bf00      	nop
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	021a      	lsls	r2, r3, #8
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	609a      	str	r2, [r3, #8]
}
 8007104:	bf00      	nop
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	2201      	movs	r2, #1
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1a      	ldr	r2, [r3, #32]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	43db      	mvns	r3, r3
 8007132:	401a      	ands	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a1a      	ldr	r2, [r3, #32]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f003 031f 	and.w	r3, r3, #31
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	fa01 f303 	lsl.w	r3, r1, r3
 8007148:	431a      	orrs	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	621a      	str	r2, [r3, #32]
}
 800714e:	bf00      	nop
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
	...

0800715c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007170:	2302      	movs	r3, #2
 8007172:	e045      	b.n	8007200 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a1c      	ldr	r2, [pc, #112]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d004      	beq.n	80071a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1b      	ldr	r2, [pc, #108]	; (8007210 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d108      	bne.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071d2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	40010000 	.word	0x40010000
 8007210:	40010400 	.word	0x40010400

08007214 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800722c:	2302      	movs	r3, #2
 800722e:	e065      	b.n	80072fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	041b      	lsls	r3, r3, #16
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a16      	ldr	r2, [pc, #88]	; (8007308 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a14      	ldr	r2, [pc, #80]	; (800730c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d115      	bne.n	80072ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	051b      	lsls	r3, r3, #20
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40010000 	.word	0x40010000
 800730c:	40010400 	.word	0x40010400

08007310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e040      	b.n	80073e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007362:	2b00      	cmp	r3, #0
 8007364:	d106      	bne.n	8007374 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7fb fb7c 	bl	8002a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2224      	movs	r2, #36	; 0x24
 8007378:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0201 	bic.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f9fe 	bl	800778c <UART_SetConfig>
 8007390:	4603      	mov	r3, r0
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e022      	b.n	80073e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fc96 	bl	8007cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073c6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0201 	orr.w	r2, r2, #1
 80073d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fd1d 	bl	8007e18 <UART_CheckIdleState>
 80073de:	4603      	mov	r3, r0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	4613      	mov	r3, r2
 80073f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	f040 808a 	bne.w	8007514 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <HAL_UART_Receive_IT+0x24>
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e082      	b.n	8007516 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_UART_Receive_IT+0x36>
 800741a:	2302      	movs	r3, #2
 800741c:	e07b      	b.n	8007516 <HAL_UART_Receive_IT+0x12e>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	88fa      	ldrh	r2, [r7, #6]
 8007438:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744a:	d10e      	bne.n	800746a <HAL_UART_Receive_IT+0x82>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d105      	bne.n	8007460 <HAL_UART_Receive_IT+0x78>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f240 12ff 	movw	r2, #511	; 0x1ff
 800745a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800745e:	e02d      	b.n	80074bc <HAL_UART_Receive_IT+0xd4>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	22ff      	movs	r2, #255	; 0xff
 8007464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007468:	e028      	b.n	80074bc <HAL_UART_Receive_IT+0xd4>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10d      	bne.n	800748e <HAL_UART_Receive_IT+0xa6>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d104      	bne.n	8007484 <HAL_UART_Receive_IT+0x9c>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	22ff      	movs	r2, #255	; 0xff
 800747e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007482:	e01b      	b.n	80074bc <HAL_UART_Receive_IT+0xd4>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	227f      	movs	r2, #127	; 0x7f
 8007488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800748c:	e016      	b.n	80074bc <HAL_UART_Receive_IT+0xd4>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007496:	d10d      	bne.n	80074b4 <HAL_UART_Receive_IT+0xcc>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d104      	bne.n	80074aa <HAL_UART_Receive_IT+0xc2>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	227f      	movs	r2, #127	; 0x7f
 80074a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074a8:	e008      	b.n	80074bc <HAL_UART_Receive_IT+0xd4>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	223f      	movs	r2, #63	; 0x3f
 80074ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074b2:	e003      	b.n	80074bc <HAL_UART_Receive_IT+0xd4>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2222      	movs	r2, #34	; 0x22
 80074c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e0:	d107      	bne.n	80074f2 <HAL_UART_Receive_IT+0x10a>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d103      	bne.n	80074f2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4a0d      	ldr	r2, [pc, #52]	; (8007524 <HAL_UART_Receive_IT+0x13c>)
 80074ee:	661a      	str	r2, [r3, #96]	; 0x60
 80074f0:	e002      	b.n	80074f8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4a0c      	ldr	r2, [pc, #48]	; (8007528 <HAL_UART_Receive_IT+0x140>)
 80074f6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800750e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	e000      	b.n	8007516 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007514:	2302      	movs	r3, #2
  }
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	0800804b 	.word	0x0800804b
 8007528:	08007fa5 	.word	0x08007fa5

0800752c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d113      	bne.n	8007582 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00e      	beq.n	8007582 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 80eb 	beq.w	800774e <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
      }
      return;
 8007580:	e0e5      	b.n	800774e <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80c0 	beq.w	800770a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	d105      	bne.n	80075a0 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80b5 	beq.w	800770a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00e      	beq.n	80075c8 <HAL_UART_IRQHandler+0x9c>
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d009      	beq.n	80075c8 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2201      	movs	r2, #1
 80075ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c0:	f043 0201 	orr.w	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	f003 0302 	and.w	r3, r3, #2
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00e      	beq.n	80075f0 <HAL_UART_IRQHandler+0xc4>
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2202      	movs	r2, #2
 80075e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e8:	f043 0204 	orr.w	r2, r3, #4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00e      	beq.n	8007618 <HAL_UART_IRQHandler+0xec>
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d009      	beq.n	8007618 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2204      	movs	r2, #4
 800760a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007610:	f043 0202 	orr.w	r2, r3, #2
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d013      	beq.n	800764a <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b00      	cmp	r3, #0
 800762a:	d104      	bne.n	8007636 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2208      	movs	r2, #8
 800763c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007642:	f043 0208 	orr.w	r2, r3, #8
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d07f      	beq.n	8007752 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00c      	beq.n	8007676 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800767a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d004      	beq.n	8007694 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007690:	2b00      	cmp	r3, #0
 8007692:	d031      	beq.n	80076f8 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fc36 	bl	8007f06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a4:	2b40      	cmp	r3, #64	; 0x40
 80076a6:	d123      	bne.n	80076f0 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d013      	beq.n	80076e8 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076c4:	4a26      	ldr	r2, [pc, #152]	; (8007760 <HAL_UART_IRQHandler+0x234>)
 80076c6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fc faf5 	bl	8003cbc <HAL_DMA_Abort_IT>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d016      	beq.n	8007706 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80076e2:	4610      	mov	r0, r2
 80076e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e6:	e00e      	b.n	8007706 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f845 	bl	8007778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ee:	e00a      	b.n	8007706 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f841 	bl	8007778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f6:	e006      	b.n	8007706 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f83d 	bl	8007778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007704:	e025      	b.n	8007752 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007706:	bf00      	nop
    return;
 8007708:	e023      	b.n	8007752 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00d      	beq.n	8007730 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771a:	2b00      	cmp	r3, #0
 800771c:	d008      	beq.n	8007730 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007722:	2b00      	cmp	r3, #0
 8007724:	d017      	beq.n	8007756 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	4798      	blx	r3
    }
    return;
 800772e:	e012      	b.n	8007756 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00e      	beq.n	8007758 <HAL_UART_IRQHandler+0x22c>
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fc14 	bl	8007f72 <UART_EndTransmit_IT>
    return;
 800774a:	bf00      	nop
 800774c:	e004      	b.n	8007758 <HAL_UART_IRQHandler+0x22c>
      return;
 800774e:	bf00      	nop
 8007750:	e002      	b.n	8007758 <HAL_UART_IRQHandler+0x22c>
    return;
 8007752:	bf00      	nop
 8007754:	e000      	b.n	8007758 <HAL_UART_IRQHandler+0x22c>
    return;
 8007756:	bf00      	nop
  }

}
 8007758:	3720      	adds	r7, #32
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	08007f47 	.word	0x08007f47

08007764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007794:	2300      	movs	r3, #0
 8007796:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4bb1      	ldr	r3, [pc, #708]	; (8007a80 <UART_SetConfig+0x2f4>)
 80077bc:	4013      	ands	r3, r2
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6812      	ldr	r2, [r2, #0]
 80077c2:	6939      	ldr	r1, [r7, #16]
 80077c4:	430b      	orrs	r3, r1
 80077c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	430a      	orrs	r2, r1
 8007800:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a9f      	ldr	r2, [pc, #636]	; (8007a84 <UART_SetConfig+0x2f8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d121      	bne.n	8007850 <UART_SetConfig+0xc4>
 800780c:	4b9e      	ldr	r3, [pc, #632]	; (8007a88 <UART_SetConfig+0x2fc>)
 800780e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	2b03      	cmp	r3, #3
 8007818:	d816      	bhi.n	8007848 <UART_SetConfig+0xbc>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <UART_SetConfig+0x94>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007831 	.word	0x08007831
 8007824:	0800783d 	.word	0x0800783d
 8007828:	08007837 	.word	0x08007837
 800782c:	08007843 	.word	0x08007843
 8007830:	2301      	movs	r3, #1
 8007832:	77fb      	strb	r3, [r7, #31]
 8007834:	e151      	b.n	8007ada <UART_SetConfig+0x34e>
 8007836:	2302      	movs	r3, #2
 8007838:	77fb      	strb	r3, [r7, #31]
 800783a:	e14e      	b.n	8007ada <UART_SetConfig+0x34e>
 800783c:	2304      	movs	r3, #4
 800783e:	77fb      	strb	r3, [r7, #31]
 8007840:	e14b      	b.n	8007ada <UART_SetConfig+0x34e>
 8007842:	2308      	movs	r3, #8
 8007844:	77fb      	strb	r3, [r7, #31]
 8007846:	e148      	b.n	8007ada <UART_SetConfig+0x34e>
 8007848:	2310      	movs	r3, #16
 800784a:	77fb      	strb	r3, [r7, #31]
 800784c:	bf00      	nop
 800784e:	e144      	b.n	8007ada <UART_SetConfig+0x34e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a8d      	ldr	r2, [pc, #564]	; (8007a8c <UART_SetConfig+0x300>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d134      	bne.n	80078c4 <UART_SetConfig+0x138>
 800785a:	4b8b      	ldr	r3, [pc, #556]	; (8007a88 <UART_SetConfig+0x2fc>)
 800785c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007860:	f003 030c 	and.w	r3, r3, #12
 8007864:	2b0c      	cmp	r3, #12
 8007866:	d829      	bhi.n	80078bc <UART_SetConfig+0x130>
 8007868:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <UART_SetConfig+0xe4>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	080078a5 	.word	0x080078a5
 8007874:	080078bd 	.word	0x080078bd
 8007878:	080078bd 	.word	0x080078bd
 800787c:	080078bd 	.word	0x080078bd
 8007880:	080078b1 	.word	0x080078b1
 8007884:	080078bd 	.word	0x080078bd
 8007888:	080078bd 	.word	0x080078bd
 800788c:	080078bd 	.word	0x080078bd
 8007890:	080078ab 	.word	0x080078ab
 8007894:	080078bd 	.word	0x080078bd
 8007898:	080078bd 	.word	0x080078bd
 800789c:	080078bd 	.word	0x080078bd
 80078a0:	080078b7 	.word	0x080078b7
 80078a4:	2300      	movs	r3, #0
 80078a6:	77fb      	strb	r3, [r7, #31]
 80078a8:	e117      	b.n	8007ada <UART_SetConfig+0x34e>
 80078aa:	2302      	movs	r3, #2
 80078ac:	77fb      	strb	r3, [r7, #31]
 80078ae:	e114      	b.n	8007ada <UART_SetConfig+0x34e>
 80078b0:	2304      	movs	r3, #4
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e111      	b.n	8007ada <UART_SetConfig+0x34e>
 80078b6:	2308      	movs	r3, #8
 80078b8:	77fb      	strb	r3, [r7, #31]
 80078ba:	e10e      	b.n	8007ada <UART_SetConfig+0x34e>
 80078bc:	2310      	movs	r3, #16
 80078be:	77fb      	strb	r3, [r7, #31]
 80078c0:	bf00      	nop
 80078c2:	e10a      	b.n	8007ada <UART_SetConfig+0x34e>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a71      	ldr	r2, [pc, #452]	; (8007a90 <UART_SetConfig+0x304>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d120      	bne.n	8007910 <UART_SetConfig+0x184>
 80078ce:	4b6e      	ldr	r3, [pc, #440]	; (8007a88 <UART_SetConfig+0x2fc>)
 80078d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078d8:	2b10      	cmp	r3, #16
 80078da:	d00f      	beq.n	80078fc <UART_SetConfig+0x170>
 80078dc:	2b10      	cmp	r3, #16
 80078de:	d802      	bhi.n	80078e6 <UART_SetConfig+0x15a>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <UART_SetConfig+0x164>
 80078e4:	e010      	b.n	8007908 <UART_SetConfig+0x17c>
 80078e6:	2b20      	cmp	r3, #32
 80078e8:	d005      	beq.n	80078f6 <UART_SetConfig+0x16a>
 80078ea:	2b30      	cmp	r3, #48	; 0x30
 80078ec:	d009      	beq.n	8007902 <UART_SetConfig+0x176>
 80078ee:	e00b      	b.n	8007908 <UART_SetConfig+0x17c>
 80078f0:	2300      	movs	r3, #0
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e0f1      	b.n	8007ada <UART_SetConfig+0x34e>
 80078f6:	2302      	movs	r3, #2
 80078f8:	77fb      	strb	r3, [r7, #31]
 80078fa:	e0ee      	b.n	8007ada <UART_SetConfig+0x34e>
 80078fc:	2304      	movs	r3, #4
 80078fe:	77fb      	strb	r3, [r7, #31]
 8007900:	e0eb      	b.n	8007ada <UART_SetConfig+0x34e>
 8007902:	2308      	movs	r3, #8
 8007904:	77fb      	strb	r3, [r7, #31]
 8007906:	e0e8      	b.n	8007ada <UART_SetConfig+0x34e>
 8007908:	2310      	movs	r3, #16
 800790a:	77fb      	strb	r3, [r7, #31]
 800790c:	bf00      	nop
 800790e:	e0e4      	b.n	8007ada <UART_SetConfig+0x34e>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a5f      	ldr	r2, [pc, #380]	; (8007a94 <UART_SetConfig+0x308>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d120      	bne.n	800795c <UART_SetConfig+0x1d0>
 800791a:	4b5b      	ldr	r3, [pc, #364]	; (8007a88 <UART_SetConfig+0x2fc>)
 800791c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007920:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007924:	2b40      	cmp	r3, #64	; 0x40
 8007926:	d00f      	beq.n	8007948 <UART_SetConfig+0x1bc>
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	d802      	bhi.n	8007932 <UART_SetConfig+0x1a6>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <UART_SetConfig+0x1b0>
 8007930:	e010      	b.n	8007954 <UART_SetConfig+0x1c8>
 8007932:	2b80      	cmp	r3, #128	; 0x80
 8007934:	d005      	beq.n	8007942 <UART_SetConfig+0x1b6>
 8007936:	2bc0      	cmp	r3, #192	; 0xc0
 8007938:	d009      	beq.n	800794e <UART_SetConfig+0x1c2>
 800793a:	e00b      	b.n	8007954 <UART_SetConfig+0x1c8>
 800793c:	2300      	movs	r3, #0
 800793e:	77fb      	strb	r3, [r7, #31]
 8007940:	e0cb      	b.n	8007ada <UART_SetConfig+0x34e>
 8007942:	2302      	movs	r3, #2
 8007944:	77fb      	strb	r3, [r7, #31]
 8007946:	e0c8      	b.n	8007ada <UART_SetConfig+0x34e>
 8007948:	2304      	movs	r3, #4
 800794a:	77fb      	strb	r3, [r7, #31]
 800794c:	e0c5      	b.n	8007ada <UART_SetConfig+0x34e>
 800794e:	2308      	movs	r3, #8
 8007950:	77fb      	strb	r3, [r7, #31]
 8007952:	e0c2      	b.n	8007ada <UART_SetConfig+0x34e>
 8007954:	2310      	movs	r3, #16
 8007956:	77fb      	strb	r3, [r7, #31]
 8007958:	bf00      	nop
 800795a:	e0be      	b.n	8007ada <UART_SetConfig+0x34e>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a4d      	ldr	r2, [pc, #308]	; (8007a98 <UART_SetConfig+0x30c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d124      	bne.n	80079b0 <UART_SetConfig+0x224>
 8007966:	4b48      	ldr	r3, [pc, #288]	; (8007a88 <UART_SetConfig+0x2fc>)
 8007968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800796c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007974:	d012      	beq.n	800799c <UART_SetConfig+0x210>
 8007976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797a:	d802      	bhi.n	8007982 <UART_SetConfig+0x1f6>
 800797c:	2b00      	cmp	r3, #0
 800797e:	d007      	beq.n	8007990 <UART_SetConfig+0x204>
 8007980:	e012      	b.n	80079a8 <UART_SetConfig+0x21c>
 8007982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007986:	d006      	beq.n	8007996 <UART_SetConfig+0x20a>
 8007988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800798c:	d009      	beq.n	80079a2 <UART_SetConfig+0x216>
 800798e:	e00b      	b.n	80079a8 <UART_SetConfig+0x21c>
 8007990:	2300      	movs	r3, #0
 8007992:	77fb      	strb	r3, [r7, #31]
 8007994:	e0a1      	b.n	8007ada <UART_SetConfig+0x34e>
 8007996:	2302      	movs	r3, #2
 8007998:	77fb      	strb	r3, [r7, #31]
 800799a:	e09e      	b.n	8007ada <UART_SetConfig+0x34e>
 800799c:	2304      	movs	r3, #4
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	e09b      	b.n	8007ada <UART_SetConfig+0x34e>
 80079a2:	2308      	movs	r3, #8
 80079a4:	77fb      	strb	r3, [r7, #31]
 80079a6:	e098      	b.n	8007ada <UART_SetConfig+0x34e>
 80079a8:	2310      	movs	r3, #16
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	bf00      	nop
 80079ae:	e094      	b.n	8007ada <UART_SetConfig+0x34e>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a39      	ldr	r2, [pc, #228]	; (8007a9c <UART_SetConfig+0x310>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d124      	bne.n	8007a04 <UART_SetConfig+0x278>
 80079ba:	4b33      	ldr	r3, [pc, #204]	; (8007a88 <UART_SetConfig+0x2fc>)
 80079bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c8:	d012      	beq.n	80079f0 <UART_SetConfig+0x264>
 80079ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ce:	d802      	bhi.n	80079d6 <UART_SetConfig+0x24a>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d007      	beq.n	80079e4 <UART_SetConfig+0x258>
 80079d4:	e012      	b.n	80079fc <UART_SetConfig+0x270>
 80079d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079da:	d006      	beq.n	80079ea <UART_SetConfig+0x25e>
 80079dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079e0:	d009      	beq.n	80079f6 <UART_SetConfig+0x26a>
 80079e2:	e00b      	b.n	80079fc <UART_SetConfig+0x270>
 80079e4:	2301      	movs	r3, #1
 80079e6:	77fb      	strb	r3, [r7, #31]
 80079e8:	e077      	b.n	8007ada <UART_SetConfig+0x34e>
 80079ea:	2302      	movs	r3, #2
 80079ec:	77fb      	strb	r3, [r7, #31]
 80079ee:	e074      	b.n	8007ada <UART_SetConfig+0x34e>
 80079f0:	2304      	movs	r3, #4
 80079f2:	77fb      	strb	r3, [r7, #31]
 80079f4:	e071      	b.n	8007ada <UART_SetConfig+0x34e>
 80079f6:	2308      	movs	r3, #8
 80079f8:	77fb      	strb	r3, [r7, #31]
 80079fa:	e06e      	b.n	8007ada <UART_SetConfig+0x34e>
 80079fc:	2310      	movs	r3, #16
 80079fe:	77fb      	strb	r3, [r7, #31]
 8007a00:	bf00      	nop
 8007a02:	e06a      	b.n	8007ada <UART_SetConfig+0x34e>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a25      	ldr	r2, [pc, #148]	; (8007aa0 <UART_SetConfig+0x314>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d124      	bne.n	8007a58 <UART_SetConfig+0x2cc>
 8007a0e:	4b1e      	ldr	r3, [pc, #120]	; (8007a88 <UART_SetConfig+0x2fc>)
 8007a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a14:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a1c:	d012      	beq.n	8007a44 <UART_SetConfig+0x2b8>
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a22:	d802      	bhi.n	8007a2a <UART_SetConfig+0x29e>
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d007      	beq.n	8007a38 <UART_SetConfig+0x2ac>
 8007a28:	e012      	b.n	8007a50 <UART_SetConfig+0x2c4>
 8007a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a2e:	d006      	beq.n	8007a3e <UART_SetConfig+0x2b2>
 8007a30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a34:	d009      	beq.n	8007a4a <UART_SetConfig+0x2be>
 8007a36:	e00b      	b.n	8007a50 <UART_SetConfig+0x2c4>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	77fb      	strb	r3, [r7, #31]
 8007a3c:	e04d      	b.n	8007ada <UART_SetConfig+0x34e>
 8007a3e:	2302      	movs	r3, #2
 8007a40:	77fb      	strb	r3, [r7, #31]
 8007a42:	e04a      	b.n	8007ada <UART_SetConfig+0x34e>
 8007a44:	2304      	movs	r3, #4
 8007a46:	77fb      	strb	r3, [r7, #31]
 8007a48:	e047      	b.n	8007ada <UART_SetConfig+0x34e>
 8007a4a:	2308      	movs	r3, #8
 8007a4c:	77fb      	strb	r3, [r7, #31]
 8007a4e:	e044      	b.n	8007ada <UART_SetConfig+0x34e>
 8007a50:	2310      	movs	r3, #16
 8007a52:	77fb      	strb	r3, [r7, #31]
 8007a54:	bf00      	nop
 8007a56:	e040      	b.n	8007ada <UART_SetConfig+0x34e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a11      	ldr	r2, [pc, #68]	; (8007aa4 <UART_SetConfig+0x318>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d139      	bne.n	8007ad6 <UART_SetConfig+0x34a>
 8007a62:	4b09      	ldr	r3, [pc, #36]	; (8007a88 <UART_SetConfig+0x2fc>)
 8007a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a70:	d027      	beq.n	8007ac2 <UART_SetConfig+0x336>
 8007a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a76:	d817      	bhi.n	8007aa8 <UART_SetConfig+0x31c>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01c      	beq.n	8007ab6 <UART_SetConfig+0x32a>
 8007a7c:	e027      	b.n	8007ace <UART_SetConfig+0x342>
 8007a7e:	bf00      	nop
 8007a80:	efff69f3 	.word	0xefff69f3
 8007a84:	40011000 	.word	0x40011000
 8007a88:	40023800 	.word	0x40023800
 8007a8c:	40004400 	.word	0x40004400
 8007a90:	40004800 	.word	0x40004800
 8007a94:	40004c00 	.word	0x40004c00
 8007a98:	40005000 	.word	0x40005000
 8007a9c:	40011400 	.word	0x40011400
 8007aa0:	40007800 	.word	0x40007800
 8007aa4:	40007c00 	.word	0x40007c00
 8007aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aac:	d006      	beq.n	8007abc <UART_SetConfig+0x330>
 8007aae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ab2:	d009      	beq.n	8007ac8 <UART_SetConfig+0x33c>
 8007ab4:	e00b      	b.n	8007ace <UART_SetConfig+0x342>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	77fb      	strb	r3, [r7, #31]
 8007aba:	e00e      	b.n	8007ada <UART_SetConfig+0x34e>
 8007abc:	2302      	movs	r3, #2
 8007abe:	77fb      	strb	r3, [r7, #31]
 8007ac0:	e00b      	b.n	8007ada <UART_SetConfig+0x34e>
 8007ac2:	2304      	movs	r3, #4
 8007ac4:	77fb      	strb	r3, [r7, #31]
 8007ac6:	e008      	b.n	8007ada <UART_SetConfig+0x34e>
 8007ac8:	2308      	movs	r3, #8
 8007aca:	77fb      	strb	r3, [r7, #31]
 8007acc:	e005      	b.n	8007ada <UART_SetConfig+0x34e>
 8007ace:	2310      	movs	r3, #16
 8007ad0:	77fb      	strb	r3, [r7, #31]
 8007ad2:	bf00      	nop
 8007ad4:	e001      	b.n	8007ada <UART_SetConfig+0x34e>
 8007ad6:	2310      	movs	r3, #16
 8007ad8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ae2:	d17c      	bne.n	8007bde <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8007ae4:	7ffb      	ldrb	r3, [r7, #31]
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d859      	bhi.n	8007b9e <UART_SetConfig+0x412>
 8007aea:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <UART_SetConfig+0x364>)
 8007aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af0:	08007b15 	.word	0x08007b15
 8007af4:	08007b33 	.word	0x08007b33
 8007af8:	08007b51 	.word	0x08007b51
 8007afc:	08007b9f 	.word	0x08007b9f
 8007b00:	08007b69 	.word	0x08007b69
 8007b04:	08007b9f 	.word	0x08007b9f
 8007b08:	08007b9f 	.word	0x08007b9f
 8007b0c:	08007b9f 	.word	0x08007b9f
 8007b10:	08007b87 	.word	0x08007b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007b14:	f7fd ff64 	bl	80059e0 <HAL_RCC_GetPCLK1Freq>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	005a      	lsls	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	085b      	lsrs	r3, r3, #1
 8007b22:	441a      	add	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	61bb      	str	r3, [r7, #24]
        break;
 8007b30:	e038      	b.n	8007ba4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007b32:	f7fd ff69 	bl	8005a08 <HAL_RCC_GetPCLK2Freq>
 8007b36:	4603      	mov	r3, r0
 8007b38:	005a      	lsls	r2, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	441a      	add	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	61bb      	str	r3, [r7, #24]
        break;
 8007b4e:	e029      	b.n	8007ba4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	085a      	lsrs	r2, r3, #1
 8007b56:	4b5d      	ldr	r3, [pc, #372]	; (8007ccc <UART_SetConfig+0x540>)
 8007b58:	4413      	add	r3, r2
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6852      	ldr	r2, [r2, #4]
 8007b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	61bb      	str	r3, [r7, #24]
        break;
 8007b66:	e01d      	b.n	8007ba4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007b68:	f7fd fe56 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	005a      	lsls	r2, r3, #1
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	085b      	lsrs	r3, r3, #1
 8007b76:	441a      	add	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	61bb      	str	r3, [r7, #24]
        break;
 8007b84:	e00e      	b.n	8007ba4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	085b      	lsrs	r3, r3, #1
 8007b8c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	61bb      	str	r3, [r7, #24]
        break;
 8007b9c:	e002      	b.n	8007ba4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	75fb      	strb	r3, [r7, #23]
        break;
 8007ba2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	2b0f      	cmp	r3, #15
 8007ba8:	d916      	bls.n	8007bd8 <UART_SetConfig+0x44c>
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bb0:	d212      	bcs.n	8007bd8 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f023 030f 	bic.w	r3, r3, #15
 8007bba:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	89fb      	ldrh	r3, [r7, #14]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	89fa      	ldrh	r2, [r7, #14]
 8007bd4:	60da      	str	r2, [r3, #12]
 8007bd6:	e06e      	b.n	8007cb6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	75fb      	strb	r3, [r7, #23]
 8007bdc:	e06b      	b.n	8007cb6 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8007bde:	7ffb      	ldrb	r3, [r7, #31]
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d857      	bhi.n	8007c94 <UART_SetConfig+0x508>
 8007be4:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <UART_SetConfig+0x460>)
 8007be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bea:	bf00      	nop
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c2d 	.word	0x08007c2d
 8007bf4:	08007c49 	.word	0x08007c49
 8007bf8:	08007c95 	.word	0x08007c95
 8007bfc:	08007c61 	.word	0x08007c61
 8007c00:	08007c95 	.word	0x08007c95
 8007c04:	08007c95 	.word	0x08007c95
 8007c08:	08007c95 	.word	0x08007c95
 8007c0c:	08007c7d 	.word	0x08007c7d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007c10:	f7fd fee6 	bl	80059e0 <HAL_RCC_GetPCLK1Freq>
 8007c14:	4602      	mov	r2, r0
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	085b      	lsrs	r3, r3, #1
 8007c1c:	441a      	add	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	61bb      	str	r3, [r7, #24]
        break;
 8007c2a:	e036      	b.n	8007c9a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007c2c:	f7fd feec 	bl	8005a08 <HAL_RCC_GetPCLK2Freq>
 8007c30:	4602      	mov	r2, r0
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	085b      	lsrs	r3, r3, #1
 8007c38:	441a      	add	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	61bb      	str	r3, [r7, #24]
        break;
 8007c46:	e028      	b.n	8007c9a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	085a      	lsrs	r2, r3, #1
 8007c4e:	4b20      	ldr	r3, [pc, #128]	; (8007cd0 <UART_SetConfig+0x544>)
 8007c50:	4413      	add	r3, r2
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	6852      	ldr	r2, [r2, #4]
 8007c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	61bb      	str	r3, [r7, #24]
        break;
 8007c5e:	e01c      	b.n	8007c9a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007c60:	f7fd fdda 	bl	8005818 <HAL_RCC_GetSysClockFreq>
 8007c64:	4602      	mov	r2, r0
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	085b      	lsrs	r3, r3, #1
 8007c6c:	441a      	add	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	61bb      	str	r3, [r7, #24]
        break;
 8007c7a:	e00e      	b.n	8007c9a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	085b      	lsrs	r3, r3, #1
 8007c82:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	61bb      	str	r3, [r7, #24]
        break;
 8007c92:	e002      	b.n	8007c9a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	75fb      	strb	r3, [r7, #23]
        break;
 8007c98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	2b0f      	cmp	r3, #15
 8007c9e:	d908      	bls.n	8007cb2 <UART_SetConfig+0x526>
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca6:	d204      	bcs.n	8007cb2 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	60da      	str	r2, [r3, #12]
 8007cb0:	e001      	b.n	8007cb6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	01e84800 	.word	0x01e84800
 8007cd0:	00f42400 	.word	0x00f42400

08007cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	f003 0308 	and.w	r3, r3, #8
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	f003 0310 	and.w	r3, r3, #16
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d01a      	beq.n	8007dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd2:	d10a      	bne.n	8007dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	605a      	str	r2, [r3, #4]
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007e26:	f7fa ffa3 	bl	8002d70 <HAL_GetTick>
 8007e2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0308 	and.w	r3, r3, #8
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	d10e      	bne.n	8007e58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f814 	bl	8007e76 <UART_WaitOnFlagUntilTimeout>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e00a      	b.n	8007e6e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	603b      	str	r3, [r7, #0]
 8007e82:	4613      	mov	r3, r2
 8007e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e86:	e02a      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	d026      	beq.n	8007ede <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e90:	f7fa ff6e 	bl	8002d70 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d302      	bcc.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d11b      	bne.n	8007ede <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007eb4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 0201 	bic.w	r2, r2, #1
 8007ec4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e00f      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69da      	ldr	r2, [r3, #28]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	bf0c      	ite	eq
 8007eee:	2301      	moveq	r3, #1
 8007ef0:	2300      	movne	r3, #0
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d0c5      	beq.n	8007e88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f1c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0201 	bic.w	r2, r2, #1
 8007f2c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f7ff fc07 	bl	8007778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f88:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff fbe4 	bl	8007764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fb2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fb8:	2b22      	cmp	r3, #34	; 0x22
 8007fba:	d13a      	bne.n	8008032 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007fc4:	89bb      	ldrh	r3, [r7, #12]
 8007fc6:	b2d9      	uxtb	r1, r3
 8007fc8:	89fb      	ldrh	r3, [r7, #14]
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd0:	400a      	ands	r2, r1
 8007fd2:	b2d2      	uxtb	r2, r2
 8007fd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d121      	bne.n	8008042 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800800c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7f9 fd6a 	bl	8001b04 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008030:	e007      	b.n	8008042 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	699a      	ldr	r2, [r3, #24]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0208 	orr.w	r2, r2, #8
 8008040:	619a      	str	r2, [r3, #24]
}
 8008042:	bf00      	nop
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008058:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800805e:	2b22      	cmp	r3, #34	; 0x22
 8008060:	d13a      	bne.n	80080d8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008070:	89ba      	ldrh	r2, [r7, #12]
 8008072:	89fb      	ldrh	r3, [r7, #14]
 8008074:	4013      	ands	r3, r2
 8008076:	b29a      	uxth	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008080:	1c9a      	adds	r2, r3, #2
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800809e:	b29b      	uxth	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d121      	bne.n	80080e8 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080b2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0201 	bic.w	r2, r2, #1
 80080c2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2220      	movs	r2, #32
 80080c8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7f9 fd17 	bl	8001b04 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080d6:	e007      	b.n	80080e8 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0208 	orr.w	r2, r2, #8
 80080e6:	619a      	str	r2, [r3, #24]
}
 80080e8:	bf00      	nop
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080f0:	b084      	sub	sp, #16
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	f107 001c 	add.w	r0, r7, #28
 80080fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	2b01      	cmp	r3, #1
 8008106:	d120      	bne.n	800814a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	4b20      	ldr	r3, [pc, #128]	; (800819c <USB_CoreInit+0xac>)
 800811a:	4013      	ands	r3, r2
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800812c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800812e:	2b01      	cmp	r3, #1
 8008130:	d105      	bne.n	800813e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa60 	bl	8008604 <USB_CoreReset>
 8008144:	4603      	mov	r3, r0
 8008146:	73fb      	strb	r3, [r7, #15]
 8008148:	e010      	b.n	800816c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fa54 	bl	8008604 <USB_CoreReset>
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	2b01      	cmp	r3, #1
 8008170:	d10b      	bne.n	800818a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f043 0206 	orr.w	r2, r3, #6
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f043 0220 	orr.w	r2, r3, #32
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800818a:	7bfb      	ldrb	r3, [r7, #15]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008196:	b004      	add	sp, #16
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	ffbdffbf 	.word	0xffbdffbf

080081a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f023 0201 	bic.w	r2, r3, #1
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d106      	bne.n	80081ee <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	60da      	str	r2, [r3, #12]
 80081ec:	e00b      	b.n	8008206 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d106      	bne.n	8008202 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	60da      	str	r2, [r3, #12]
 8008200:	e001      	b.n	8008206 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e003      	b.n	800820e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008206:	2032      	movs	r0, #50	; 0x32
 8008208:	f7fa fdbe 	bl	8002d88 <HAL_Delay>

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008218:	b084      	sub	sp, #16
 800821a:	b580      	push	{r7, lr}
 800821c:	b086      	sub	sp, #24
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008232:	2300      	movs	r3, #0
 8008234:	613b      	str	r3, [r7, #16]
 8008236:	e009      	b.n	800824c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	3340      	adds	r3, #64	; 0x40
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	2200      	movs	r2, #0
 8008244:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	3301      	adds	r3, #1
 800824a:	613b      	str	r3, [r7, #16]
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2b0e      	cmp	r3, #14
 8008250:	d9f2      	bls.n	8008238 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d112      	bne.n	800827e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	e005      	b.n	800828a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008290:	461a      	mov	r2, r3
 8008292:	2300      	movs	r3, #0
 8008294:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829c:	4619      	mov	r1, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a4:	461a      	mov	r2, r3
 80082a6:	680b      	ldr	r3, [r1, #0]
 80082a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d10c      	bne.n	80082ca <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d104      	bne.n	80082c0 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80082b6:	2100      	movs	r1, #0
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f971 	bl	80085a0 <USB_SetDevSpeed>
 80082be:	e018      	b.n	80082f2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80082c0:	2101      	movs	r1, #1
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f96c 	bl	80085a0 <USB_SetDevSpeed>
 80082c8:	e013      	b.n	80082f2 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80082ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d10c      	bne.n	80082ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80082d6:	2100      	movs	r1, #0
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f961 	bl	80085a0 <USB_SetDevSpeed>
 80082de:	e008      	b.n	80082f2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80082e0:	2101      	movs	r1, #1
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f95c 	bl	80085a0 <USB_SetDevSpeed>
 80082e8:	e003      	b.n	80082f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80082ea:	2103      	movs	r1, #3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f957 	bl	80085a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80082f2:	2110      	movs	r1, #16
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f90b 	bl	8008510 <USB_FlushTxFifo>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f929 	bl	800855c <USB_FlushRxFifo>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831a:	461a      	mov	r2, r3
 800831c:	2300      	movs	r3, #0
 800831e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008326:	461a      	mov	r2, r3
 8008328:	2300      	movs	r3, #0
 800832a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008332:	461a      	mov	r2, r3
 8008334:	2300      	movs	r3, #0
 8008336:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008338:	2300      	movs	r3, #0
 800833a:	613b      	str	r3, [r7, #16]
 800833c:	e043      	b.n	80083c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	4413      	add	r3, r2
 8008346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008354:	d118      	bne.n	8008388 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	015a      	lsls	r2, r3, #5
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008368:	461a      	mov	r2, r3
 800836a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	e013      	b.n	800839a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837e:	461a      	mov	r2, r3
 8008380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	e008      	b.n	800839a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	461a      	mov	r2, r3
 8008396:	2300      	movs	r3, #0
 8008398:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a6:	461a      	mov	r2, r3
 80083a8:	2300      	movs	r3, #0
 80083aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b8:	461a      	mov	r2, r3
 80083ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	3301      	adds	r3, #1
 80083c4:	613b      	str	r3, [r7, #16]
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d3b7      	bcc.n	800833e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083ce:	2300      	movs	r3, #0
 80083d0:	613b      	str	r3, [r7, #16]
 80083d2:	e043      	b.n	800845c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083ea:	d118      	bne.n	800841e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fe:	461a      	mov	r2, r3
 8008400:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	e013      	b.n	8008430 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008414:	461a      	mov	r2, r3
 8008416:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	e008      	b.n	8008430 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842a:	461a      	mov	r2, r3
 800842c:	2300      	movs	r3, #0
 800842e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843c:	461a      	mov	r2, r3
 800843e:	2300      	movs	r3, #0
 8008440:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	461a      	mov	r2, r3
 8008450:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008454:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	3301      	adds	r3, #1
 800845a:	613b      	str	r3, [r7, #16]
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	429a      	cmp	r2, r3
 8008462:	d3b7      	bcc.n	80083d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008476:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	2b01      	cmp	r3, #1
 800847c:	d110      	bne.n	80084a0 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008484:	461a      	mov	r2, r3
 8008486:	4b1e      	ldr	r3, [pc, #120]	; (8008500 <USB_DevInit+0x2e8>)
 8008488:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008498:	4619      	mov	r1, r3
 800849a:	4b1a      	ldr	r3, [pc, #104]	; (8008504 <USB_DevInit+0x2ec>)
 800849c:	4313      	orrs	r3, r2
 800849e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80084ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d105      	bne.n	80084c0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	f043 0210 	orr.w	r2, r3, #16
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	699a      	ldr	r2, [r3, #24]
 80084c4:	4b10      	ldr	r3, [pc, #64]	; (8008508 <USB_DevInit+0x2f0>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d005      	beq.n	80084de <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	f043 0208 	orr.w	r2, r3, #8
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80084de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d105      	bne.n	80084f0 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	699a      	ldr	r2, [r3, #24]
 80084e8:	4b08      	ldr	r3, [pc, #32]	; (800850c <USB_DevInit+0x2f4>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084fc:	b004      	add	sp, #16
 80084fe:	4770      	bx	lr
 8008500:	00800100 	.word	0x00800100
 8008504:	00010003 	.word	0x00010003
 8008508:	803c3800 	.word	0x803c3800
 800850c:	40000004 	.word	0x40000004

08008510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	019b      	lsls	r3, r3, #6
 8008522:	f043 0220 	orr.w	r2, r3, #32
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3301      	adds	r3, #1
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4a09      	ldr	r2, [pc, #36]	; (8008558 <USB_FlushTxFifo+0x48>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d901      	bls.n	800853c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e006      	b.n	800854a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b20      	cmp	r3, #32
 8008546:	d0f0      	beq.n	800852a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	00030d40 	.word	0x00030d40

0800855c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2210      	movs	r2, #16
 800856c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4a09      	ldr	r2, [pc, #36]	; (800859c <USB_FlushRxFifo+0x40>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d901      	bls.n	8008580 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e006      	b.n	800858e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	f003 0310 	and.w	r3, r3, #16
 8008588:	2b10      	cmp	r3, #16
 800858a:	d0f0      	beq.n	800856e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	00030d40 	.word	0x00030d40

080085a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	68f9      	ldr	r1, [r7, #12]
 80085bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085c0:	4313      	orrs	r3, r2
 80085c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ec:	f043 0302 	orr.w	r3, r3, #2
 80085f0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80085f2:	2003      	movs	r0, #3
 80085f4:	f7fa fbc8 	bl	8002d88 <HAL_Delay>

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
	...

08008604 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3301      	adds	r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4a13      	ldr	r2, [pc, #76]	; (8008668 <USB_CoreReset+0x64>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d901      	bls.n	8008622 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e01b      	b.n	800865a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	daf2      	bge.n	8008610 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	f043 0201 	orr.w	r2, r3, #1
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3301      	adds	r3, #1
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4a09      	ldr	r2, [pc, #36]	; (8008668 <USB_CoreReset+0x64>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d901      	bls.n	800864c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e006      	b.n	800865a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	2b01      	cmp	r3, #1
 8008656:	d0f0      	beq.n	800863a <USB_CoreReset+0x36>

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	00030d40 	.word	0x00030d40

0800866c <__errno>:
 800866c:	4b01      	ldr	r3, [pc, #4]	; (8008674 <__errno+0x8>)
 800866e:	6818      	ldr	r0, [r3, #0]
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	200000f8 	.word	0x200000f8

08008678 <__libc_init_array>:
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	4e0d      	ldr	r6, [pc, #52]	; (80086b0 <__libc_init_array+0x38>)
 800867c:	4c0d      	ldr	r4, [pc, #52]	; (80086b4 <__libc_init_array+0x3c>)
 800867e:	1ba4      	subs	r4, r4, r6
 8008680:	10a4      	asrs	r4, r4, #2
 8008682:	2500      	movs	r5, #0
 8008684:	42a5      	cmp	r5, r4
 8008686:	d109      	bne.n	800869c <__libc_init_array+0x24>
 8008688:	4e0b      	ldr	r6, [pc, #44]	; (80086b8 <__libc_init_array+0x40>)
 800868a:	4c0c      	ldr	r4, [pc, #48]	; (80086bc <__libc_init_array+0x44>)
 800868c:	f002 f9be 	bl	800aa0c <_init>
 8008690:	1ba4      	subs	r4, r4, r6
 8008692:	10a4      	asrs	r4, r4, #2
 8008694:	2500      	movs	r5, #0
 8008696:	42a5      	cmp	r5, r4
 8008698:	d105      	bne.n	80086a6 <__libc_init_array+0x2e>
 800869a:	bd70      	pop	{r4, r5, r6, pc}
 800869c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086a0:	4798      	blx	r3
 80086a2:	3501      	adds	r5, #1
 80086a4:	e7ee      	b.n	8008684 <__libc_init_array+0xc>
 80086a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086aa:	4798      	blx	r3
 80086ac:	3501      	adds	r5, #1
 80086ae:	e7f2      	b.n	8008696 <__libc_init_array+0x1e>
 80086b0:	0800ace0 	.word	0x0800ace0
 80086b4:	0800ace0 	.word	0x0800ace0
 80086b8:	0800ace0 	.word	0x0800ace0
 80086bc:	0800ace4 	.word	0x0800ace4

080086c0 <memset>:
 80086c0:	4402      	add	r2, r0
 80086c2:	4603      	mov	r3, r0
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d100      	bne.n	80086ca <memset+0xa>
 80086c8:	4770      	bx	lr
 80086ca:	f803 1b01 	strb.w	r1, [r3], #1
 80086ce:	e7f9      	b.n	80086c4 <memset+0x4>

080086d0 <siprintf>:
 80086d0:	b40e      	push	{r1, r2, r3}
 80086d2:	b500      	push	{lr}
 80086d4:	b09c      	sub	sp, #112	; 0x70
 80086d6:	ab1d      	add	r3, sp, #116	; 0x74
 80086d8:	9002      	str	r0, [sp, #8]
 80086da:	9006      	str	r0, [sp, #24]
 80086dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086e0:	4809      	ldr	r0, [pc, #36]	; (8008708 <siprintf+0x38>)
 80086e2:	9107      	str	r1, [sp, #28]
 80086e4:	9104      	str	r1, [sp, #16]
 80086e6:	4909      	ldr	r1, [pc, #36]	; (800870c <siprintf+0x3c>)
 80086e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ec:	9105      	str	r1, [sp, #20]
 80086ee:	6800      	ldr	r0, [r0, #0]
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	a902      	add	r1, sp, #8
 80086f4:	f000 f892 	bl	800881c <_svfiprintf_r>
 80086f8:	9b02      	ldr	r3, [sp, #8]
 80086fa:	2200      	movs	r2, #0
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	b01c      	add	sp, #112	; 0x70
 8008700:	f85d eb04 	ldr.w	lr, [sp], #4
 8008704:	b003      	add	sp, #12
 8008706:	4770      	bx	lr
 8008708:	200000f8 	.word	0x200000f8
 800870c:	ffff0208 	.word	0xffff0208

08008710 <siscanf>:
 8008710:	b40e      	push	{r1, r2, r3}
 8008712:	b530      	push	{r4, r5, lr}
 8008714:	b09c      	sub	sp, #112	; 0x70
 8008716:	ac1f      	add	r4, sp, #124	; 0x7c
 8008718:	f44f 7201 	mov.w	r2, #516	; 0x204
 800871c:	f854 5b04 	ldr.w	r5, [r4], #4
 8008720:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008724:	9002      	str	r0, [sp, #8]
 8008726:	9006      	str	r0, [sp, #24]
 8008728:	f7f7 fd7c 	bl	8000224 <strlen>
 800872c:	4b0b      	ldr	r3, [pc, #44]	; (800875c <siscanf+0x4c>)
 800872e:	9003      	str	r0, [sp, #12]
 8008730:	9007      	str	r0, [sp, #28]
 8008732:	930b      	str	r3, [sp, #44]	; 0x2c
 8008734:	480a      	ldr	r0, [pc, #40]	; (8008760 <siscanf+0x50>)
 8008736:	9401      	str	r4, [sp, #4]
 8008738:	2300      	movs	r3, #0
 800873a:	930f      	str	r3, [sp, #60]	; 0x3c
 800873c:	9314      	str	r3, [sp, #80]	; 0x50
 800873e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008742:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008746:	462a      	mov	r2, r5
 8008748:	4623      	mov	r3, r4
 800874a:	a902      	add	r1, sp, #8
 800874c:	6800      	ldr	r0, [r0, #0]
 800874e:	f000 f9b7 	bl	8008ac0 <__ssvfiscanf_r>
 8008752:	b01c      	add	sp, #112	; 0x70
 8008754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008758:	b003      	add	sp, #12
 800875a:	4770      	bx	lr
 800875c:	08008765 	.word	0x08008765
 8008760:	200000f8 	.word	0x200000f8

08008764 <__seofread>:
 8008764:	2000      	movs	r0, #0
 8008766:	4770      	bx	lr

08008768 <__ssputs_r>:
 8008768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800876c:	688e      	ldr	r6, [r1, #8]
 800876e:	429e      	cmp	r6, r3
 8008770:	4682      	mov	sl, r0
 8008772:	460c      	mov	r4, r1
 8008774:	4690      	mov	r8, r2
 8008776:	4699      	mov	r9, r3
 8008778:	d837      	bhi.n	80087ea <__ssputs_r+0x82>
 800877a:	898a      	ldrh	r2, [r1, #12]
 800877c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008780:	d031      	beq.n	80087e6 <__ssputs_r+0x7e>
 8008782:	6825      	ldr	r5, [r4, #0]
 8008784:	6909      	ldr	r1, [r1, #16]
 8008786:	1a6f      	subs	r7, r5, r1
 8008788:	6965      	ldr	r5, [r4, #20]
 800878a:	2302      	movs	r3, #2
 800878c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008790:	fb95 f5f3 	sdiv	r5, r5, r3
 8008794:	f109 0301 	add.w	r3, r9, #1
 8008798:	443b      	add	r3, r7
 800879a:	429d      	cmp	r5, r3
 800879c:	bf38      	it	cc
 800879e:	461d      	movcc	r5, r3
 80087a0:	0553      	lsls	r3, r2, #21
 80087a2:	d530      	bpl.n	8008806 <__ssputs_r+0x9e>
 80087a4:	4629      	mov	r1, r5
 80087a6:	f000 ffd7 	bl	8009758 <_malloc_r>
 80087aa:	4606      	mov	r6, r0
 80087ac:	b950      	cbnz	r0, 80087c4 <__ssputs_r+0x5c>
 80087ae:	230c      	movs	r3, #12
 80087b0:	f8ca 3000 	str.w	r3, [sl]
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ba:	81a3      	strh	r3, [r4, #12]
 80087bc:	f04f 30ff 	mov.w	r0, #4294967295
 80087c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c4:	463a      	mov	r2, r7
 80087c6:	6921      	ldr	r1, [r4, #16]
 80087c8:	f000 ff54 	bl	8009674 <memcpy>
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d6:	81a3      	strh	r3, [r4, #12]
 80087d8:	6126      	str	r6, [r4, #16]
 80087da:	6165      	str	r5, [r4, #20]
 80087dc:	443e      	add	r6, r7
 80087de:	1bed      	subs	r5, r5, r7
 80087e0:	6026      	str	r6, [r4, #0]
 80087e2:	60a5      	str	r5, [r4, #8]
 80087e4:	464e      	mov	r6, r9
 80087e6:	454e      	cmp	r6, r9
 80087e8:	d900      	bls.n	80087ec <__ssputs_r+0x84>
 80087ea:	464e      	mov	r6, r9
 80087ec:	4632      	mov	r2, r6
 80087ee:	4641      	mov	r1, r8
 80087f0:	6820      	ldr	r0, [r4, #0]
 80087f2:	f000 ff4a 	bl	800968a <memmove>
 80087f6:	68a3      	ldr	r3, [r4, #8]
 80087f8:	1b9b      	subs	r3, r3, r6
 80087fa:	60a3      	str	r3, [r4, #8]
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	441e      	add	r6, r3
 8008800:	6026      	str	r6, [r4, #0]
 8008802:	2000      	movs	r0, #0
 8008804:	e7dc      	b.n	80087c0 <__ssputs_r+0x58>
 8008806:	462a      	mov	r2, r5
 8008808:	f001 f800 	bl	800980c <_realloc_r>
 800880c:	4606      	mov	r6, r0
 800880e:	2800      	cmp	r0, #0
 8008810:	d1e2      	bne.n	80087d8 <__ssputs_r+0x70>
 8008812:	6921      	ldr	r1, [r4, #16]
 8008814:	4650      	mov	r0, sl
 8008816:	f000 ff51 	bl	80096bc <_free_r>
 800881a:	e7c8      	b.n	80087ae <__ssputs_r+0x46>

0800881c <_svfiprintf_r>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	461d      	mov	r5, r3
 8008822:	898b      	ldrh	r3, [r1, #12]
 8008824:	061f      	lsls	r7, r3, #24
 8008826:	b09d      	sub	sp, #116	; 0x74
 8008828:	4680      	mov	r8, r0
 800882a:	460c      	mov	r4, r1
 800882c:	4616      	mov	r6, r2
 800882e:	d50f      	bpl.n	8008850 <_svfiprintf_r+0x34>
 8008830:	690b      	ldr	r3, [r1, #16]
 8008832:	b96b      	cbnz	r3, 8008850 <_svfiprintf_r+0x34>
 8008834:	2140      	movs	r1, #64	; 0x40
 8008836:	f000 ff8f 	bl	8009758 <_malloc_r>
 800883a:	6020      	str	r0, [r4, #0]
 800883c:	6120      	str	r0, [r4, #16]
 800883e:	b928      	cbnz	r0, 800884c <_svfiprintf_r+0x30>
 8008840:	230c      	movs	r3, #12
 8008842:	f8c8 3000 	str.w	r3, [r8]
 8008846:	f04f 30ff 	mov.w	r0, #4294967295
 800884a:	e0c8      	b.n	80089de <_svfiprintf_r+0x1c2>
 800884c:	2340      	movs	r3, #64	; 0x40
 800884e:	6163      	str	r3, [r4, #20]
 8008850:	2300      	movs	r3, #0
 8008852:	9309      	str	r3, [sp, #36]	; 0x24
 8008854:	2320      	movs	r3, #32
 8008856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800885a:	2330      	movs	r3, #48	; 0x30
 800885c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008860:	9503      	str	r5, [sp, #12]
 8008862:	f04f 0b01 	mov.w	fp, #1
 8008866:	4637      	mov	r7, r6
 8008868:	463d      	mov	r5, r7
 800886a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800886e:	b10b      	cbz	r3, 8008874 <_svfiprintf_r+0x58>
 8008870:	2b25      	cmp	r3, #37	; 0x25
 8008872:	d13e      	bne.n	80088f2 <_svfiprintf_r+0xd6>
 8008874:	ebb7 0a06 	subs.w	sl, r7, r6
 8008878:	d00b      	beq.n	8008892 <_svfiprintf_r+0x76>
 800887a:	4653      	mov	r3, sl
 800887c:	4632      	mov	r2, r6
 800887e:	4621      	mov	r1, r4
 8008880:	4640      	mov	r0, r8
 8008882:	f7ff ff71 	bl	8008768 <__ssputs_r>
 8008886:	3001      	adds	r0, #1
 8008888:	f000 80a4 	beq.w	80089d4 <_svfiprintf_r+0x1b8>
 800888c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888e:	4453      	add	r3, sl
 8008890:	9309      	str	r3, [sp, #36]	; 0x24
 8008892:	783b      	ldrb	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 809d 	beq.w	80089d4 <_svfiprintf_r+0x1b8>
 800889a:	2300      	movs	r3, #0
 800889c:	f04f 32ff 	mov.w	r2, #4294967295
 80088a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	9307      	str	r3, [sp, #28]
 80088a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088ac:	931a      	str	r3, [sp, #104]	; 0x68
 80088ae:	462f      	mov	r7, r5
 80088b0:	2205      	movs	r2, #5
 80088b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80088b6:	4850      	ldr	r0, [pc, #320]	; (80089f8 <_svfiprintf_r+0x1dc>)
 80088b8:	f7f7 fcc2 	bl	8000240 <memchr>
 80088bc:	9b04      	ldr	r3, [sp, #16]
 80088be:	b9d0      	cbnz	r0, 80088f6 <_svfiprintf_r+0xda>
 80088c0:	06d9      	lsls	r1, r3, #27
 80088c2:	bf44      	itt	mi
 80088c4:	2220      	movmi	r2, #32
 80088c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088ca:	071a      	lsls	r2, r3, #28
 80088cc:	bf44      	itt	mi
 80088ce:	222b      	movmi	r2, #43	; 0x2b
 80088d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088d4:	782a      	ldrb	r2, [r5, #0]
 80088d6:	2a2a      	cmp	r2, #42	; 0x2a
 80088d8:	d015      	beq.n	8008906 <_svfiprintf_r+0xea>
 80088da:	9a07      	ldr	r2, [sp, #28]
 80088dc:	462f      	mov	r7, r5
 80088de:	2000      	movs	r0, #0
 80088e0:	250a      	movs	r5, #10
 80088e2:	4639      	mov	r1, r7
 80088e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088e8:	3b30      	subs	r3, #48	; 0x30
 80088ea:	2b09      	cmp	r3, #9
 80088ec:	d94d      	bls.n	800898a <_svfiprintf_r+0x16e>
 80088ee:	b1b8      	cbz	r0, 8008920 <_svfiprintf_r+0x104>
 80088f0:	e00f      	b.n	8008912 <_svfiprintf_r+0xf6>
 80088f2:	462f      	mov	r7, r5
 80088f4:	e7b8      	b.n	8008868 <_svfiprintf_r+0x4c>
 80088f6:	4a40      	ldr	r2, [pc, #256]	; (80089f8 <_svfiprintf_r+0x1dc>)
 80088f8:	1a80      	subs	r0, r0, r2
 80088fa:	fa0b f000 	lsl.w	r0, fp, r0
 80088fe:	4318      	orrs	r0, r3
 8008900:	9004      	str	r0, [sp, #16]
 8008902:	463d      	mov	r5, r7
 8008904:	e7d3      	b.n	80088ae <_svfiprintf_r+0x92>
 8008906:	9a03      	ldr	r2, [sp, #12]
 8008908:	1d11      	adds	r1, r2, #4
 800890a:	6812      	ldr	r2, [r2, #0]
 800890c:	9103      	str	r1, [sp, #12]
 800890e:	2a00      	cmp	r2, #0
 8008910:	db01      	blt.n	8008916 <_svfiprintf_r+0xfa>
 8008912:	9207      	str	r2, [sp, #28]
 8008914:	e004      	b.n	8008920 <_svfiprintf_r+0x104>
 8008916:	4252      	negs	r2, r2
 8008918:	f043 0302 	orr.w	r3, r3, #2
 800891c:	9207      	str	r2, [sp, #28]
 800891e:	9304      	str	r3, [sp, #16]
 8008920:	783b      	ldrb	r3, [r7, #0]
 8008922:	2b2e      	cmp	r3, #46	; 0x2e
 8008924:	d10c      	bne.n	8008940 <_svfiprintf_r+0x124>
 8008926:	787b      	ldrb	r3, [r7, #1]
 8008928:	2b2a      	cmp	r3, #42	; 0x2a
 800892a:	d133      	bne.n	8008994 <_svfiprintf_r+0x178>
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	1d1a      	adds	r2, r3, #4
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	9203      	str	r2, [sp, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	bfb8      	it	lt
 8008938:	f04f 33ff 	movlt.w	r3, #4294967295
 800893c:	3702      	adds	r7, #2
 800893e:	9305      	str	r3, [sp, #20]
 8008940:	4d2e      	ldr	r5, [pc, #184]	; (80089fc <_svfiprintf_r+0x1e0>)
 8008942:	7839      	ldrb	r1, [r7, #0]
 8008944:	2203      	movs	r2, #3
 8008946:	4628      	mov	r0, r5
 8008948:	f7f7 fc7a 	bl	8000240 <memchr>
 800894c:	b138      	cbz	r0, 800895e <_svfiprintf_r+0x142>
 800894e:	2340      	movs	r3, #64	; 0x40
 8008950:	1b40      	subs	r0, r0, r5
 8008952:	fa03 f000 	lsl.w	r0, r3, r0
 8008956:	9b04      	ldr	r3, [sp, #16]
 8008958:	4303      	orrs	r3, r0
 800895a:	3701      	adds	r7, #1
 800895c:	9304      	str	r3, [sp, #16]
 800895e:	7839      	ldrb	r1, [r7, #0]
 8008960:	4827      	ldr	r0, [pc, #156]	; (8008a00 <_svfiprintf_r+0x1e4>)
 8008962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008966:	2206      	movs	r2, #6
 8008968:	1c7e      	adds	r6, r7, #1
 800896a:	f7f7 fc69 	bl	8000240 <memchr>
 800896e:	2800      	cmp	r0, #0
 8008970:	d038      	beq.n	80089e4 <_svfiprintf_r+0x1c8>
 8008972:	4b24      	ldr	r3, [pc, #144]	; (8008a04 <_svfiprintf_r+0x1e8>)
 8008974:	bb13      	cbnz	r3, 80089bc <_svfiprintf_r+0x1a0>
 8008976:	9b03      	ldr	r3, [sp, #12]
 8008978:	3307      	adds	r3, #7
 800897a:	f023 0307 	bic.w	r3, r3, #7
 800897e:	3308      	adds	r3, #8
 8008980:	9303      	str	r3, [sp, #12]
 8008982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008984:	444b      	add	r3, r9
 8008986:	9309      	str	r3, [sp, #36]	; 0x24
 8008988:	e76d      	b.n	8008866 <_svfiprintf_r+0x4a>
 800898a:	fb05 3202 	mla	r2, r5, r2, r3
 800898e:	2001      	movs	r0, #1
 8008990:	460f      	mov	r7, r1
 8008992:	e7a6      	b.n	80088e2 <_svfiprintf_r+0xc6>
 8008994:	2300      	movs	r3, #0
 8008996:	3701      	adds	r7, #1
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	4619      	mov	r1, r3
 800899c:	250a      	movs	r5, #10
 800899e:	4638      	mov	r0, r7
 80089a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a4:	3a30      	subs	r2, #48	; 0x30
 80089a6:	2a09      	cmp	r2, #9
 80089a8:	d903      	bls.n	80089b2 <_svfiprintf_r+0x196>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0c8      	beq.n	8008940 <_svfiprintf_r+0x124>
 80089ae:	9105      	str	r1, [sp, #20]
 80089b0:	e7c6      	b.n	8008940 <_svfiprintf_r+0x124>
 80089b2:	fb05 2101 	mla	r1, r5, r1, r2
 80089b6:	2301      	movs	r3, #1
 80089b8:	4607      	mov	r7, r0
 80089ba:	e7f0      	b.n	800899e <_svfiprintf_r+0x182>
 80089bc:	ab03      	add	r3, sp, #12
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	4622      	mov	r2, r4
 80089c2:	4b11      	ldr	r3, [pc, #68]	; (8008a08 <_svfiprintf_r+0x1ec>)
 80089c4:	a904      	add	r1, sp, #16
 80089c6:	4640      	mov	r0, r8
 80089c8:	f3af 8000 	nop.w
 80089cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089d0:	4681      	mov	r9, r0
 80089d2:	d1d6      	bne.n	8008982 <_svfiprintf_r+0x166>
 80089d4:	89a3      	ldrh	r3, [r4, #12]
 80089d6:	065b      	lsls	r3, r3, #25
 80089d8:	f53f af35 	bmi.w	8008846 <_svfiprintf_r+0x2a>
 80089dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089de:	b01d      	add	sp, #116	; 0x74
 80089e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e4:	ab03      	add	r3, sp, #12
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	4622      	mov	r2, r4
 80089ea:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <_svfiprintf_r+0x1ec>)
 80089ec:	a904      	add	r1, sp, #16
 80089ee:	4640      	mov	r0, r8
 80089f0:	f000 fa2c 	bl	8008e4c <_printf_i>
 80089f4:	e7ea      	b.n	80089cc <_svfiprintf_r+0x1b0>
 80089f6:	bf00      	nop
 80089f8:	0800aad4 	.word	0x0800aad4
 80089fc:	0800aada 	.word	0x0800aada
 8008a00:	0800aade 	.word	0x0800aade
 8008a04:	00000000 	.word	0x00000000
 8008a08:	08008769 	.word	0x08008769

08008a0c <_sungetc_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	1c4b      	adds	r3, r1, #1
 8008a10:	4614      	mov	r4, r2
 8008a12:	d103      	bne.n	8008a1c <_sungetc_r+0x10>
 8008a14:	f04f 35ff 	mov.w	r5, #4294967295
 8008a18:	4628      	mov	r0, r5
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	8993      	ldrh	r3, [r2, #12]
 8008a1e:	f023 0320 	bic.w	r3, r3, #32
 8008a22:	8193      	strh	r3, [r2, #12]
 8008a24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a26:	6852      	ldr	r2, [r2, #4]
 8008a28:	b2cd      	uxtb	r5, r1
 8008a2a:	b18b      	cbz	r3, 8008a50 <_sungetc_r+0x44>
 8008a2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	dd08      	ble.n	8008a44 <_sungetc_r+0x38>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	1e5a      	subs	r2, r3, #1
 8008a36:	6022      	str	r2, [r4, #0]
 8008a38:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008a3c:	6863      	ldr	r3, [r4, #4]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	6063      	str	r3, [r4, #4]
 8008a42:	e7e9      	b.n	8008a18 <_sungetc_r+0xc>
 8008a44:	4621      	mov	r1, r4
 8008a46:	f000 fdb7 	bl	80095b8 <__submore>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0f1      	beq.n	8008a32 <_sungetc_r+0x26>
 8008a4e:	e7e1      	b.n	8008a14 <_sungetc_r+0x8>
 8008a50:	6921      	ldr	r1, [r4, #16]
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	b151      	cbz	r1, 8008a6c <_sungetc_r+0x60>
 8008a56:	4299      	cmp	r1, r3
 8008a58:	d208      	bcs.n	8008a6c <_sungetc_r+0x60>
 8008a5a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008a5e:	42a9      	cmp	r1, r5
 8008a60:	d104      	bne.n	8008a6c <_sungetc_r+0x60>
 8008a62:	3b01      	subs	r3, #1
 8008a64:	3201      	adds	r2, #1
 8008a66:	6023      	str	r3, [r4, #0]
 8008a68:	6062      	str	r2, [r4, #4]
 8008a6a:	e7d5      	b.n	8008a18 <_sungetc_r+0xc>
 8008a6c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a74:	6363      	str	r3, [r4, #52]	; 0x34
 8008a76:	2303      	movs	r3, #3
 8008a78:	63a3      	str	r3, [r4, #56]	; 0x38
 8008a7a:	4623      	mov	r3, r4
 8008a7c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	2301      	movs	r3, #1
 8008a84:	e7dc      	b.n	8008a40 <_sungetc_r+0x34>

08008a86 <__ssrefill_r>:
 8008a86:	b510      	push	{r4, lr}
 8008a88:	460c      	mov	r4, r1
 8008a8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008a8c:	b169      	cbz	r1, 8008aaa <__ssrefill_r+0x24>
 8008a8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a92:	4299      	cmp	r1, r3
 8008a94:	d001      	beq.n	8008a9a <__ssrefill_r+0x14>
 8008a96:	f000 fe11 	bl	80096bc <_free_r>
 8008a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a9c:	6063      	str	r3, [r4, #4]
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	6360      	str	r0, [r4, #52]	; 0x34
 8008aa2:	b113      	cbz	r3, 8008aaa <__ssrefill_r+0x24>
 8008aa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	bd10      	pop	{r4, pc}
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	6063      	str	r3, [r4, #4]
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	f043 0320 	orr.w	r3, r3, #32
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	f04f 30ff 	mov.w	r0, #4294967295
 8008abe:	e7f3      	b.n	8008aa8 <__ssrefill_r+0x22>

08008ac0 <__ssvfiscanf_r>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008ac8:	460c      	mov	r4, r1
 8008aca:	2100      	movs	r1, #0
 8008acc:	9144      	str	r1, [sp, #272]	; 0x110
 8008ace:	9145      	str	r1, [sp, #276]	; 0x114
 8008ad0:	499f      	ldr	r1, [pc, #636]	; (8008d50 <__ssvfiscanf_r+0x290>)
 8008ad2:	91a0      	str	r1, [sp, #640]	; 0x280
 8008ad4:	f10d 0804 	add.w	r8, sp, #4
 8008ad8:	499e      	ldr	r1, [pc, #632]	; (8008d54 <__ssvfiscanf_r+0x294>)
 8008ada:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008d58 <__ssvfiscanf_r+0x298>
 8008ade:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	4692      	mov	sl, r2
 8008ae6:	91a1      	str	r1, [sp, #644]	; 0x284
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	270a      	movs	r7, #10
 8008aec:	f89a 3000 	ldrb.w	r3, [sl]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 812a 	beq.w	8008d4a <__ssvfiscanf_r+0x28a>
 8008af6:	4655      	mov	r5, sl
 8008af8:	f000 fd9c 	bl	8009634 <__locale_ctype_ptr>
 8008afc:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008b00:	4458      	add	r0, fp
 8008b02:	7843      	ldrb	r3, [r0, #1]
 8008b04:	f013 0308 	ands.w	r3, r3, #8
 8008b08:	d01c      	beq.n	8008b44 <__ssvfiscanf_r+0x84>
 8008b0a:	6863      	ldr	r3, [r4, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	dd12      	ble.n	8008b36 <__ssvfiscanf_r+0x76>
 8008b10:	f000 fd90 	bl	8009634 <__locale_ctype_ptr>
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	4410      	add	r0, r2
 8008b1a:	7842      	ldrb	r2, [r0, #1]
 8008b1c:	0712      	lsls	r2, r2, #28
 8008b1e:	d401      	bmi.n	8008b24 <__ssvfiscanf_r+0x64>
 8008b20:	46aa      	mov	sl, r5
 8008b22:	e7e3      	b.n	8008aec <__ssvfiscanf_r+0x2c>
 8008b24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008b26:	3201      	adds	r2, #1
 8008b28:	9245      	str	r2, [sp, #276]	; 0x114
 8008b2a:	6862      	ldr	r2, [r4, #4]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	3a01      	subs	r2, #1
 8008b30:	6062      	str	r2, [r4, #4]
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	e7e9      	b.n	8008b0a <__ssvfiscanf_r+0x4a>
 8008b36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	4798      	blx	r3
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d0e6      	beq.n	8008b10 <__ssvfiscanf_r+0x50>
 8008b42:	e7ed      	b.n	8008b20 <__ssvfiscanf_r+0x60>
 8008b44:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008b48:	f040 8082 	bne.w	8008c50 <__ssvfiscanf_r+0x190>
 8008b4c:	9343      	str	r3, [sp, #268]	; 0x10c
 8008b4e:	9341      	str	r3, [sp, #260]	; 0x104
 8008b50:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008b54:	2b2a      	cmp	r3, #42	; 0x2a
 8008b56:	d103      	bne.n	8008b60 <__ssvfiscanf_r+0xa0>
 8008b58:	2310      	movs	r3, #16
 8008b5a:	9341      	str	r3, [sp, #260]	; 0x104
 8008b5c:	f10a 0502 	add.w	r5, sl, #2
 8008b60:	46aa      	mov	sl, r5
 8008b62:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008b66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008b6a:	2a09      	cmp	r2, #9
 8008b6c:	d922      	bls.n	8008bb4 <__ssvfiscanf_r+0xf4>
 8008b6e:	2203      	movs	r2, #3
 8008b70:	4879      	ldr	r0, [pc, #484]	; (8008d58 <__ssvfiscanf_r+0x298>)
 8008b72:	f7f7 fb65 	bl	8000240 <memchr>
 8008b76:	b138      	cbz	r0, 8008b88 <__ssvfiscanf_r+0xc8>
 8008b78:	eba0 0309 	sub.w	r3, r0, r9
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	4098      	lsls	r0, r3
 8008b80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b82:	4318      	orrs	r0, r3
 8008b84:	9041      	str	r0, [sp, #260]	; 0x104
 8008b86:	46aa      	mov	sl, r5
 8008b88:	f89a 3000 	ldrb.w	r3, [sl]
 8008b8c:	2b67      	cmp	r3, #103	; 0x67
 8008b8e:	f10a 0501 	add.w	r5, sl, #1
 8008b92:	d82b      	bhi.n	8008bec <__ssvfiscanf_r+0x12c>
 8008b94:	2b65      	cmp	r3, #101	; 0x65
 8008b96:	f080 809f 	bcs.w	8008cd8 <__ssvfiscanf_r+0x218>
 8008b9a:	2b47      	cmp	r3, #71	; 0x47
 8008b9c:	d810      	bhi.n	8008bc0 <__ssvfiscanf_r+0x100>
 8008b9e:	2b45      	cmp	r3, #69	; 0x45
 8008ba0:	f080 809a 	bcs.w	8008cd8 <__ssvfiscanf_r+0x218>
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d06c      	beq.n	8008c82 <__ssvfiscanf_r+0x1c2>
 8008ba8:	2b25      	cmp	r3, #37	; 0x25
 8008baa:	d051      	beq.n	8008c50 <__ssvfiscanf_r+0x190>
 8008bac:	2303      	movs	r3, #3
 8008bae:	9347      	str	r3, [sp, #284]	; 0x11c
 8008bb0:	9742      	str	r7, [sp, #264]	; 0x108
 8008bb2:	e027      	b.n	8008c04 <__ssvfiscanf_r+0x144>
 8008bb4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008bb6:	fb07 1303 	mla	r3, r7, r3, r1
 8008bba:	3b30      	subs	r3, #48	; 0x30
 8008bbc:	9343      	str	r3, [sp, #268]	; 0x10c
 8008bbe:	e7cf      	b.n	8008b60 <__ssvfiscanf_r+0xa0>
 8008bc0:	2b5b      	cmp	r3, #91	; 0x5b
 8008bc2:	d06a      	beq.n	8008c9a <__ssvfiscanf_r+0x1da>
 8008bc4:	d80c      	bhi.n	8008be0 <__ssvfiscanf_r+0x120>
 8008bc6:	2b58      	cmp	r3, #88	; 0x58
 8008bc8:	d1f0      	bne.n	8008bac <__ssvfiscanf_r+0xec>
 8008bca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bd0:	9241      	str	r2, [sp, #260]	; 0x104
 8008bd2:	2210      	movs	r2, #16
 8008bd4:	9242      	str	r2, [sp, #264]	; 0x108
 8008bd6:	2b6e      	cmp	r3, #110	; 0x6e
 8008bd8:	bf8c      	ite	hi
 8008bda:	2304      	movhi	r3, #4
 8008bdc:	2303      	movls	r3, #3
 8008bde:	e010      	b.n	8008c02 <__ssvfiscanf_r+0x142>
 8008be0:	2b63      	cmp	r3, #99	; 0x63
 8008be2:	d065      	beq.n	8008cb0 <__ssvfiscanf_r+0x1f0>
 8008be4:	2b64      	cmp	r3, #100	; 0x64
 8008be6:	d1e1      	bne.n	8008bac <__ssvfiscanf_r+0xec>
 8008be8:	9742      	str	r7, [sp, #264]	; 0x108
 8008bea:	e7f4      	b.n	8008bd6 <__ssvfiscanf_r+0x116>
 8008bec:	2b70      	cmp	r3, #112	; 0x70
 8008bee:	d04b      	beq.n	8008c88 <__ssvfiscanf_r+0x1c8>
 8008bf0:	d826      	bhi.n	8008c40 <__ssvfiscanf_r+0x180>
 8008bf2:	2b6e      	cmp	r3, #110	; 0x6e
 8008bf4:	d062      	beq.n	8008cbc <__ssvfiscanf_r+0x1fc>
 8008bf6:	d84c      	bhi.n	8008c92 <__ssvfiscanf_r+0x1d2>
 8008bf8:	2b69      	cmp	r3, #105	; 0x69
 8008bfa:	d1d7      	bne.n	8008bac <__ssvfiscanf_r+0xec>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	9342      	str	r3, [sp, #264]	; 0x108
 8008c00:	2303      	movs	r3, #3
 8008c02:	9347      	str	r3, [sp, #284]	; 0x11c
 8008c04:	6863      	ldr	r3, [r4, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	dd68      	ble.n	8008cdc <__ssvfiscanf_r+0x21c>
 8008c0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c0c:	0659      	lsls	r1, r3, #25
 8008c0e:	d407      	bmi.n	8008c20 <__ssvfiscanf_r+0x160>
 8008c10:	f000 fd10 	bl	8009634 <__locale_ctype_ptr>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	781a      	ldrb	r2, [r3, #0]
 8008c18:	4410      	add	r0, r2
 8008c1a:	7842      	ldrb	r2, [r0, #1]
 8008c1c:	0712      	lsls	r2, r2, #28
 8008c1e:	d464      	bmi.n	8008cea <__ssvfiscanf_r+0x22a>
 8008c20:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	dc73      	bgt.n	8008d0e <__ssvfiscanf_r+0x24e>
 8008c26:	466b      	mov	r3, sp
 8008c28:	4622      	mov	r2, r4
 8008c2a:	a941      	add	r1, sp, #260	; 0x104
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 fa1f 	bl	8009070 <_scanf_chars>
 8008c32:	2801      	cmp	r0, #1
 8008c34:	f000 8089 	beq.w	8008d4a <__ssvfiscanf_r+0x28a>
 8008c38:	2802      	cmp	r0, #2
 8008c3a:	f47f af71 	bne.w	8008b20 <__ssvfiscanf_r+0x60>
 8008c3e:	e01d      	b.n	8008c7c <__ssvfiscanf_r+0x1bc>
 8008c40:	2b75      	cmp	r3, #117	; 0x75
 8008c42:	d0d1      	beq.n	8008be8 <__ssvfiscanf_r+0x128>
 8008c44:	2b78      	cmp	r3, #120	; 0x78
 8008c46:	d0c0      	beq.n	8008bca <__ssvfiscanf_r+0x10a>
 8008c48:	2b73      	cmp	r3, #115	; 0x73
 8008c4a:	d1af      	bne.n	8008bac <__ssvfiscanf_r+0xec>
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e7d8      	b.n	8008c02 <__ssvfiscanf_r+0x142>
 8008c50:	6863      	ldr	r3, [r4, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	dd0c      	ble.n	8008c70 <__ssvfiscanf_r+0x1b0>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	781a      	ldrb	r2, [r3, #0]
 8008c5a:	455a      	cmp	r2, fp
 8008c5c:	d175      	bne.n	8008d4a <__ssvfiscanf_r+0x28a>
 8008c5e:	3301      	adds	r3, #1
 8008c60:	6862      	ldr	r2, [r4, #4]
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008c66:	3a01      	subs	r2, #1
 8008c68:	3301      	adds	r3, #1
 8008c6a:	6062      	str	r2, [r4, #4]
 8008c6c:	9345      	str	r3, [sp, #276]	; 0x114
 8008c6e:	e757      	b.n	8008b20 <__ssvfiscanf_r+0x60>
 8008c70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c72:	4621      	mov	r1, r4
 8008c74:	4630      	mov	r0, r6
 8008c76:	4798      	blx	r3
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d0ec      	beq.n	8008c56 <__ssvfiscanf_r+0x196>
 8008c7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d159      	bne.n	8008d36 <__ssvfiscanf_r+0x276>
 8008c82:	f04f 30ff 	mov.w	r0, #4294967295
 8008c86:	e05c      	b.n	8008d42 <__ssvfiscanf_r+0x282>
 8008c88:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c8a:	f042 0220 	orr.w	r2, r2, #32
 8008c8e:	9241      	str	r2, [sp, #260]	; 0x104
 8008c90:	e79b      	b.n	8008bca <__ssvfiscanf_r+0x10a>
 8008c92:	2308      	movs	r3, #8
 8008c94:	9342      	str	r3, [sp, #264]	; 0x108
 8008c96:	2304      	movs	r3, #4
 8008c98:	e7b3      	b.n	8008c02 <__ssvfiscanf_r+0x142>
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	f000 fb3f 	bl	8009320 <__sccl>
 8008ca2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca8:	9341      	str	r3, [sp, #260]	; 0x104
 8008caa:	4605      	mov	r5, r0
 8008cac:	2301      	movs	r3, #1
 8008cae:	e7a8      	b.n	8008c02 <__ssvfiscanf_r+0x142>
 8008cb0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb6:	9341      	str	r3, [sp, #260]	; 0x104
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e7a2      	b.n	8008c02 <__ssvfiscanf_r+0x142>
 8008cbc:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008cbe:	06c3      	lsls	r3, r0, #27
 8008cc0:	f53f af2e 	bmi.w	8008b20 <__ssvfiscanf_r+0x60>
 8008cc4:	9b00      	ldr	r3, [sp, #0]
 8008cc6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008cc8:	1d19      	adds	r1, r3, #4
 8008cca:	9100      	str	r1, [sp, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	07c0      	lsls	r0, r0, #31
 8008cd0:	bf4c      	ite	mi
 8008cd2:	801a      	strhmi	r2, [r3, #0]
 8008cd4:	601a      	strpl	r2, [r3, #0]
 8008cd6:	e723      	b.n	8008b20 <__ssvfiscanf_r+0x60>
 8008cd8:	2305      	movs	r3, #5
 8008cda:	e792      	b.n	8008c02 <__ssvfiscanf_r+0x142>
 8008cdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	4798      	blx	r3
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d090      	beq.n	8008c0a <__ssvfiscanf_r+0x14a>
 8008ce8:	e7c8      	b.n	8008c7c <__ssvfiscanf_r+0x1bc>
 8008cea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008cec:	3201      	adds	r2, #1
 8008cee:	9245      	str	r2, [sp, #276]	; 0x114
 8008cf0:	6862      	ldr	r2, [r4, #4]
 8008cf2:	3a01      	subs	r2, #1
 8008cf4:	2a00      	cmp	r2, #0
 8008cf6:	6062      	str	r2, [r4, #4]
 8008cf8:	dd02      	ble.n	8008d00 <__ssvfiscanf_r+0x240>
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	e787      	b.n	8008c10 <__ssvfiscanf_r+0x150>
 8008d00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d02:	4621      	mov	r1, r4
 8008d04:	4630      	mov	r0, r6
 8008d06:	4798      	blx	r3
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d081      	beq.n	8008c10 <__ssvfiscanf_r+0x150>
 8008d0c:	e7b6      	b.n	8008c7c <__ssvfiscanf_r+0x1bc>
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	dc06      	bgt.n	8008d20 <__ssvfiscanf_r+0x260>
 8008d12:	466b      	mov	r3, sp
 8008d14:	4622      	mov	r2, r4
 8008d16:	a941      	add	r1, sp, #260	; 0x104
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f000 fa0d 	bl	8009138 <_scanf_i>
 8008d1e:	e788      	b.n	8008c32 <__ssvfiscanf_r+0x172>
 8008d20:	4b0e      	ldr	r3, [pc, #56]	; (8008d5c <__ssvfiscanf_r+0x29c>)
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f43f aefc 	beq.w	8008b20 <__ssvfiscanf_r+0x60>
 8008d28:	466b      	mov	r3, sp
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	a941      	add	r1, sp, #260	; 0x104
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f3af 8000 	nop.w
 8008d34:	e77d      	b.n	8008c32 <__ssvfiscanf_r+0x172>
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d3c:	bf18      	it	ne
 8008d3e:	f04f 30ff 	movne.w	r0, #4294967295
 8008d42:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d4c:	e7f9      	b.n	8008d42 <__ssvfiscanf_r+0x282>
 8008d4e:	bf00      	nop
 8008d50:	08008a0d 	.word	0x08008a0d
 8008d54:	08008a87 	.word	0x08008a87
 8008d58:	0800aada 	.word	0x0800aada
 8008d5c:	00000000 	.word	0x00000000

08008d60 <_printf_common>:
 8008d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d64:	4691      	mov	r9, r2
 8008d66:	461f      	mov	r7, r3
 8008d68:	688a      	ldr	r2, [r1, #8]
 8008d6a:	690b      	ldr	r3, [r1, #16]
 8008d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d70:	4293      	cmp	r3, r2
 8008d72:	bfb8      	it	lt
 8008d74:	4613      	movlt	r3, r2
 8008d76:	f8c9 3000 	str.w	r3, [r9]
 8008d7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d7e:	4606      	mov	r6, r0
 8008d80:	460c      	mov	r4, r1
 8008d82:	b112      	cbz	r2, 8008d8a <_printf_common+0x2a>
 8008d84:	3301      	adds	r3, #1
 8008d86:	f8c9 3000 	str.w	r3, [r9]
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	0699      	lsls	r1, r3, #26
 8008d8e:	bf42      	ittt	mi
 8008d90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008d94:	3302      	addmi	r3, #2
 8008d96:	f8c9 3000 	strmi.w	r3, [r9]
 8008d9a:	6825      	ldr	r5, [r4, #0]
 8008d9c:	f015 0506 	ands.w	r5, r5, #6
 8008da0:	d107      	bne.n	8008db2 <_printf_common+0x52>
 8008da2:	f104 0a19 	add.w	sl, r4, #25
 8008da6:	68e3      	ldr	r3, [r4, #12]
 8008da8:	f8d9 2000 	ldr.w	r2, [r9]
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	42ab      	cmp	r3, r5
 8008db0:	dc28      	bgt.n	8008e04 <_printf_common+0xa4>
 8008db2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008db6:	6822      	ldr	r2, [r4, #0]
 8008db8:	3300      	adds	r3, #0
 8008dba:	bf18      	it	ne
 8008dbc:	2301      	movne	r3, #1
 8008dbe:	0692      	lsls	r2, r2, #26
 8008dc0:	d42d      	bmi.n	8008e1e <_printf_common+0xbe>
 8008dc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	4630      	mov	r0, r6
 8008dca:	47c0      	blx	r8
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d020      	beq.n	8008e12 <_printf_common+0xb2>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	68e5      	ldr	r5, [r4, #12]
 8008dd4:	f8d9 2000 	ldr.w	r2, [r9]
 8008dd8:	f003 0306 	and.w	r3, r3, #6
 8008ddc:	2b04      	cmp	r3, #4
 8008dde:	bf08      	it	eq
 8008de0:	1aad      	subeq	r5, r5, r2
 8008de2:	68a3      	ldr	r3, [r4, #8]
 8008de4:	6922      	ldr	r2, [r4, #16]
 8008de6:	bf0c      	ite	eq
 8008de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dec:	2500      	movne	r5, #0
 8008dee:	4293      	cmp	r3, r2
 8008df0:	bfc4      	itt	gt
 8008df2:	1a9b      	subgt	r3, r3, r2
 8008df4:	18ed      	addgt	r5, r5, r3
 8008df6:	f04f 0900 	mov.w	r9, #0
 8008dfa:	341a      	adds	r4, #26
 8008dfc:	454d      	cmp	r5, r9
 8008dfe:	d11a      	bne.n	8008e36 <_printf_common+0xd6>
 8008e00:	2000      	movs	r0, #0
 8008e02:	e008      	b.n	8008e16 <_printf_common+0xb6>
 8008e04:	2301      	movs	r3, #1
 8008e06:	4652      	mov	r2, sl
 8008e08:	4639      	mov	r1, r7
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	47c0      	blx	r8
 8008e0e:	3001      	adds	r0, #1
 8008e10:	d103      	bne.n	8008e1a <_printf_common+0xba>
 8008e12:	f04f 30ff 	mov.w	r0, #4294967295
 8008e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1a:	3501      	adds	r5, #1
 8008e1c:	e7c3      	b.n	8008da6 <_printf_common+0x46>
 8008e1e:	18e1      	adds	r1, r4, r3
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	2030      	movs	r0, #48	; 0x30
 8008e24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e28:	4422      	add	r2, r4
 8008e2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e32:	3302      	adds	r3, #2
 8008e34:	e7c5      	b.n	8008dc2 <_printf_common+0x62>
 8008e36:	2301      	movs	r3, #1
 8008e38:	4622      	mov	r2, r4
 8008e3a:	4639      	mov	r1, r7
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	47c0      	blx	r8
 8008e40:	3001      	adds	r0, #1
 8008e42:	d0e6      	beq.n	8008e12 <_printf_common+0xb2>
 8008e44:	f109 0901 	add.w	r9, r9, #1
 8008e48:	e7d8      	b.n	8008dfc <_printf_common+0x9c>
	...

08008e4c <_printf_i>:
 8008e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008e54:	460c      	mov	r4, r1
 8008e56:	7e09      	ldrb	r1, [r1, #24]
 8008e58:	b085      	sub	sp, #20
 8008e5a:	296e      	cmp	r1, #110	; 0x6e
 8008e5c:	4617      	mov	r7, r2
 8008e5e:	4606      	mov	r6, r0
 8008e60:	4698      	mov	r8, r3
 8008e62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e64:	f000 80b3 	beq.w	8008fce <_printf_i+0x182>
 8008e68:	d822      	bhi.n	8008eb0 <_printf_i+0x64>
 8008e6a:	2963      	cmp	r1, #99	; 0x63
 8008e6c:	d036      	beq.n	8008edc <_printf_i+0x90>
 8008e6e:	d80a      	bhi.n	8008e86 <_printf_i+0x3a>
 8008e70:	2900      	cmp	r1, #0
 8008e72:	f000 80b9 	beq.w	8008fe8 <_printf_i+0x19c>
 8008e76:	2958      	cmp	r1, #88	; 0x58
 8008e78:	f000 8083 	beq.w	8008f82 <_printf_i+0x136>
 8008e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008e84:	e032      	b.n	8008eec <_printf_i+0xa0>
 8008e86:	2964      	cmp	r1, #100	; 0x64
 8008e88:	d001      	beq.n	8008e8e <_printf_i+0x42>
 8008e8a:	2969      	cmp	r1, #105	; 0x69
 8008e8c:	d1f6      	bne.n	8008e7c <_printf_i+0x30>
 8008e8e:	6820      	ldr	r0, [r4, #0]
 8008e90:	6813      	ldr	r3, [r2, #0]
 8008e92:	0605      	lsls	r5, r0, #24
 8008e94:	f103 0104 	add.w	r1, r3, #4
 8008e98:	d52a      	bpl.n	8008ef0 <_printf_i+0xa4>
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6011      	str	r1, [r2, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	da03      	bge.n	8008eaa <_printf_i+0x5e>
 8008ea2:	222d      	movs	r2, #45	; 0x2d
 8008ea4:	425b      	negs	r3, r3
 8008ea6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008eaa:	486f      	ldr	r0, [pc, #444]	; (8009068 <_printf_i+0x21c>)
 8008eac:	220a      	movs	r2, #10
 8008eae:	e039      	b.n	8008f24 <_printf_i+0xd8>
 8008eb0:	2973      	cmp	r1, #115	; 0x73
 8008eb2:	f000 809d 	beq.w	8008ff0 <_printf_i+0x1a4>
 8008eb6:	d808      	bhi.n	8008eca <_printf_i+0x7e>
 8008eb8:	296f      	cmp	r1, #111	; 0x6f
 8008eba:	d020      	beq.n	8008efe <_printf_i+0xb2>
 8008ebc:	2970      	cmp	r1, #112	; 0x70
 8008ebe:	d1dd      	bne.n	8008e7c <_printf_i+0x30>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	f043 0320 	orr.w	r3, r3, #32
 8008ec6:	6023      	str	r3, [r4, #0]
 8008ec8:	e003      	b.n	8008ed2 <_printf_i+0x86>
 8008eca:	2975      	cmp	r1, #117	; 0x75
 8008ecc:	d017      	beq.n	8008efe <_printf_i+0xb2>
 8008ece:	2978      	cmp	r1, #120	; 0x78
 8008ed0:	d1d4      	bne.n	8008e7c <_printf_i+0x30>
 8008ed2:	2378      	movs	r3, #120	; 0x78
 8008ed4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ed8:	4864      	ldr	r0, [pc, #400]	; (800906c <_printf_i+0x220>)
 8008eda:	e055      	b.n	8008f88 <_printf_i+0x13c>
 8008edc:	6813      	ldr	r3, [r2, #0]
 8008ede:	1d19      	adds	r1, r3, #4
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6011      	str	r1, [r2, #0]
 8008ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eec:	2301      	movs	r3, #1
 8008eee:	e08c      	b.n	800900a <_printf_i+0x1be>
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6011      	str	r1, [r2, #0]
 8008ef4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ef8:	bf18      	it	ne
 8008efa:	b21b      	sxthne	r3, r3
 8008efc:	e7cf      	b.n	8008e9e <_printf_i+0x52>
 8008efe:	6813      	ldr	r3, [r2, #0]
 8008f00:	6825      	ldr	r5, [r4, #0]
 8008f02:	1d18      	adds	r0, r3, #4
 8008f04:	6010      	str	r0, [r2, #0]
 8008f06:	0628      	lsls	r0, r5, #24
 8008f08:	d501      	bpl.n	8008f0e <_printf_i+0xc2>
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	e002      	b.n	8008f14 <_printf_i+0xc8>
 8008f0e:	0668      	lsls	r0, r5, #25
 8008f10:	d5fb      	bpl.n	8008f0a <_printf_i+0xbe>
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	4854      	ldr	r0, [pc, #336]	; (8009068 <_printf_i+0x21c>)
 8008f16:	296f      	cmp	r1, #111	; 0x6f
 8008f18:	bf14      	ite	ne
 8008f1a:	220a      	movne	r2, #10
 8008f1c:	2208      	moveq	r2, #8
 8008f1e:	2100      	movs	r1, #0
 8008f20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f24:	6865      	ldr	r5, [r4, #4]
 8008f26:	60a5      	str	r5, [r4, #8]
 8008f28:	2d00      	cmp	r5, #0
 8008f2a:	f2c0 8095 	blt.w	8009058 <_printf_i+0x20c>
 8008f2e:	6821      	ldr	r1, [r4, #0]
 8008f30:	f021 0104 	bic.w	r1, r1, #4
 8008f34:	6021      	str	r1, [r4, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d13d      	bne.n	8008fb6 <_printf_i+0x16a>
 8008f3a:	2d00      	cmp	r5, #0
 8008f3c:	f040 808e 	bne.w	800905c <_printf_i+0x210>
 8008f40:	4665      	mov	r5, ip
 8008f42:	2a08      	cmp	r2, #8
 8008f44:	d10b      	bne.n	8008f5e <_printf_i+0x112>
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	07db      	lsls	r3, r3, #31
 8008f4a:	d508      	bpl.n	8008f5e <_printf_i+0x112>
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	6862      	ldr	r2, [r4, #4]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	bfde      	ittt	le
 8008f54:	2330      	movle	r3, #48	; 0x30
 8008f56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f5e:	ebac 0305 	sub.w	r3, ip, r5
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	f8cd 8000 	str.w	r8, [sp]
 8008f68:	463b      	mov	r3, r7
 8008f6a:	aa03      	add	r2, sp, #12
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7ff fef6 	bl	8008d60 <_printf_common>
 8008f74:	3001      	adds	r0, #1
 8008f76:	d14d      	bne.n	8009014 <_printf_i+0x1c8>
 8008f78:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7c:	b005      	add	sp, #20
 8008f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f82:	4839      	ldr	r0, [pc, #228]	; (8009068 <_printf_i+0x21c>)
 8008f84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008f88:	6813      	ldr	r3, [r2, #0]
 8008f8a:	6821      	ldr	r1, [r4, #0]
 8008f8c:	1d1d      	adds	r5, r3, #4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6015      	str	r5, [r2, #0]
 8008f92:	060a      	lsls	r2, r1, #24
 8008f94:	d50b      	bpl.n	8008fae <_printf_i+0x162>
 8008f96:	07ca      	lsls	r2, r1, #31
 8008f98:	bf44      	itt	mi
 8008f9a:	f041 0120 	orrmi.w	r1, r1, #32
 8008f9e:	6021      	strmi	r1, [r4, #0]
 8008fa0:	b91b      	cbnz	r3, 8008faa <_printf_i+0x15e>
 8008fa2:	6822      	ldr	r2, [r4, #0]
 8008fa4:	f022 0220 	bic.w	r2, r2, #32
 8008fa8:	6022      	str	r2, [r4, #0]
 8008faa:	2210      	movs	r2, #16
 8008fac:	e7b7      	b.n	8008f1e <_printf_i+0xd2>
 8008fae:	064d      	lsls	r5, r1, #25
 8008fb0:	bf48      	it	mi
 8008fb2:	b29b      	uxthmi	r3, r3
 8008fb4:	e7ef      	b.n	8008f96 <_printf_i+0x14a>
 8008fb6:	4665      	mov	r5, ip
 8008fb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fbc:	fb02 3311 	mls	r3, r2, r1, r3
 8008fc0:	5cc3      	ldrb	r3, [r0, r3]
 8008fc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	d1f5      	bne.n	8008fb8 <_printf_i+0x16c>
 8008fcc:	e7b9      	b.n	8008f42 <_printf_i+0xf6>
 8008fce:	6813      	ldr	r3, [r2, #0]
 8008fd0:	6825      	ldr	r5, [r4, #0]
 8008fd2:	6961      	ldr	r1, [r4, #20]
 8008fd4:	1d18      	adds	r0, r3, #4
 8008fd6:	6010      	str	r0, [r2, #0]
 8008fd8:	0628      	lsls	r0, r5, #24
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	d501      	bpl.n	8008fe2 <_printf_i+0x196>
 8008fde:	6019      	str	r1, [r3, #0]
 8008fe0:	e002      	b.n	8008fe8 <_printf_i+0x19c>
 8008fe2:	066a      	lsls	r2, r5, #25
 8008fe4:	d5fb      	bpl.n	8008fde <_printf_i+0x192>
 8008fe6:	8019      	strh	r1, [r3, #0]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	4665      	mov	r5, ip
 8008fee:	e7b9      	b.n	8008f64 <_printf_i+0x118>
 8008ff0:	6813      	ldr	r3, [r2, #0]
 8008ff2:	1d19      	adds	r1, r3, #4
 8008ff4:	6011      	str	r1, [r2, #0]
 8008ff6:	681d      	ldr	r5, [r3, #0]
 8008ff8:	6862      	ldr	r2, [r4, #4]
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	f7f7 f91f 	bl	8000240 <memchr>
 8009002:	b108      	cbz	r0, 8009008 <_printf_i+0x1bc>
 8009004:	1b40      	subs	r0, r0, r5
 8009006:	6060      	str	r0, [r4, #4]
 8009008:	6863      	ldr	r3, [r4, #4]
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	2300      	movs	r3, #0
 800900e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009012:	e7a7      	b.n	8008f64 <_printf_i+0x118>
 8009014:	6923      	ldr	r3, [r4, #16]
 8009016:	462a      	mov	r2, r5
 8009018:	4639      	mov	r1, r7
 800901a:	4630      	mov	r0, r6
 800901c:	47c0      	blx	r8
 800901e:	3001      	adds	r0, #1
 8009020:	d0aa      	beq.n	8008f78 <_printf_i+0x12c>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	079b      	lsls	r3, r3, #30
 8009026:	d413      	bmi.n	8009050 <_printf_i+0x204>
 8009028:	68e0      	ldr	r0, [r4, #12]
 800902a:	9b03      	ldr	r3, [sp, #12]
 800902c:	4298      	cmp	r0, r3
 800902e:	bfb8      	it	lt
 8009030:	4618      	movlt	r0, r3
 8009032:	e7a3      	b.n	8008f7c <_printf_i+0x130>
 8009034:	2301      	movs	r3, #1
 8009036:	464a      	mov	r2, r9
 8009038:	4639      	mov	r1, r7
 800903a:	4630      	mov	r0, r6
 800903c:	47c0      	blx	r8
 800903e:	3001      	adds	r0, #1
 8009040:	d09a      	beq.n	8008f78 <_printf_i+0x12c>
 8009042:	3501      	adds	r5, #1
 8009044:	68e3      	ldr	r3, [r4, #12]
 8009046:	9a03      	ldr	r2, [sp, #12]
 8009048:	1a9b      	subs	r3, r3, r2
 800904a:	42ab      	cmp	r3, r5
 800904c:	dcf2      	bgt.n	8009034 <_printf_i+0x1e8>
 800904e:	e7eb      	b.n	8009028 <_printf_i+0x1dc>
 8009050:	2500      	movs	r5, #0
 8009052:	f104 0919 	add.w	r9, r4, #25
 8009056:	e7f5      	b.n	8009044 <_printf_i+0x1f8>
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1ac      	bne.n	8008fb6 <_printf_i+0x16a>
 800905c:	7803      	ldrb	r3, [r0, #0]
 800905e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009062:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009066:	e76c      	b.n	8008f42 <_printf_i+0xf6>
 8009068:	0800aae5 	.word	0x0800aae5
 800906c:	0800aaf6 	.word	0x0800aaf6

08009070 <_scanf_chars>:
 8009070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009074:	4615      	mov	r5, r2
 8009076:	688a      	ldr	r2, [r1, #8]
 8009078:	4680      	mov	r8, r0
 800907a:	460c      	mov	r4, r1
 800907c:	b932      	cbnz	r2, 800908c <_scanf_chars+0x1c>
 800907e:	698a      	ldr	r2, [r1, #24]
 8009080:	2a00      	cmp	r2, #0
 8009082:	bf14      	ite	ne
 8009084:	f04f 32ff 	movne.w	r2, #4294967295
 8009088:	2201      	moveq	r2, #1
 800908a:	608a      	str	r2, [r1, #8]
 800908c:	6822      	ldr	r2, [r4, #0]
 800908e:	06d1      	lsls	r1, r2, #27
 8009090:	bf5f      	itttt	pl
 8009092:	681a      	ldrpl	r2, [r3, #0]
 8009094:	1d11      	addpl	r1, r2, #4
 8009096:	6019      	strpl	r1, [r3, #0]
 8009098:	6817      	ldrpl	r7, [r2, #0]
 800909a:	2600      	movs	r6, #0
 800909c:	69a3      	ldr	r3, [r4, #24]
 800909e:	b1db      	cbz	r3, 80090d8 <_scanf_chars+0x68>
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d107      	bne.n	80090b4 <_scanf_chars+0x44>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	6962      	ldr	r2, [r4, #20]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	5cd3      	ldrb	r3, [r2, r3]
 80090ac:	b9a3      	cbnz	r3, 80090d8 <_scanf_chars+0x68>
 80090ae:	2e00      	cmp	r6, #0
 80090b0:	d132      	bne.n	8009118 <_scanf_chars+0xa8>
 80090b2:	e006      	b.n	80090c2 <_scanf_chars+0x52>
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d007      	beq.n	80090c8 <_scanf_chars+0x58>
 80090b8:	2e00      	cmp	r6, #0
 80090ba:	d12d      	bne.n	8009118 <_scanf_chars+0xa8>
 80090bc:	69a3      	ldr	r3, [r4, #24]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d12a      	bne.n	8009118 <_scanf_chars+0xa8>
 80090c2:	2001      	movs	r0, #1
 80090c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c8:	f000 fab4 	bl	8009634 <__locale_ctype_ptr>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	4418      	add	r0, r3
 80090d2:	7843      	ldrb	r3, [r0, #1]
 80090d4:	071b      	lsls	r3, r3, #28
 80090d6:	d4ef      	bmi.n	80090b8 <_scanf_chars+0x48>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	06da      	lsls	r2, r3, #27
 80090dc:	bf5e      	ittt	pl
 80090de:	682b      	ldrpl	r3, [r5, #0]
 80090e0:	781b      	ldrbpl	r3, [r3, #0]
 80090e2:	703b      	strbpl	r3, [r7, #0]
 80090e4:	682a      	ldr	r2, [r5, #0]
 80090e6:	686b      	ldr	r3, [r5, #4]
 80090e8:	f102 0201 	add.w	r2, r2, #1
 80090ec:	602a      	str	r2, [r5, #0]
 80090ee:	68a2      	ldr	r2, [r4, #8]
 80090f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80090f4:	f102 32ff 	add.w	r2, r2, #4294967295
 80090f8:	606b      	str	r3, [r5, #4]
 80090fa:	f106 0601 	add.w	r6, r6, #1
 80090fe:	bf58      	it	pl
 8009100:	3701      	addpl	r7, #1
 8009102:	60a2      	str	r2, [r4, #8]
 8009104:	b142      	cbz	r2, 8009118 <_scanf_chars+0xa8>
 8009106:	2b00      	cmp	r3, #0
 8009108:	dcc8      	bgt.n	800909c <_scanf_chars+0x2c>
 800910a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800910e:	4629      	mov	r1, r5
 8009110:	4640      	mov	r0, r8
 8009112:	4798      	blx	r3
 8009114:	2800      	cmp	r0, #0
 8009116:	d0c1      	beq.n	800909c <_scanf_chars+0x2c>
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	f013 0310 	ands.w	r3, r3, #16
 800911e:	d105      	bne.n	800912c <_scanf_chars+0xbc>
 8009120:	68e2      	ldr	r2, [r4, #12]
 8009122:	3201      	adds	r2, #1
 8009124:	60e2      	str	r2, [r4, #12]
 8009126:	69a2      	ldr	r2, [r4, #24]
 8009128:	b102      	cbz	r2, 800912c <_scanf_chars+0xbc>
 800912a:	703b      	strb	r3, [r7, #0]
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	441e      	add	r6, r3
 8009130:	6126      	str	r6, [r4, #16]
 8009132:	2000      	movs	r0, #0
 8009134:	e7c6      	b.n	80090c4 <_scanf_chars+0x54>
	...

08009138 <_scanf_i>:
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	469a      	mov	sl, r3
 800913e:	4b74      	ldr	r3, [pc, #464]	; (8009310 <_scanf_i+0x1d8>)
 8009140:	460c      	mov	r4, r1
 8009142:	4683      	mov	fp, r0
 8009144:	4616      	mov	r6, r2
 8009146:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800914a:	b087      	sub	sp, #28
 800914c:	ab03      	add	r3, sp, #12
 800914e:	68a7      	ldr	r7, [r4, #8]
 8009150:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009154:	4b6f      	ldr	r3, [pc, #444]	; (8009314 <_scanf_i+0x1dc>)
 8009156:	69a1      	ldr	r1, [r4, #24]
 8009158:	4a6f      	ldr	r2, [pc, #444]	; (8009318 <_scanf_i+0x1e0>)
 800915a:	2903      	cmp	r1, #3
 800915c:	bf08      	it	eq
 800915e:	461a      	moveq	r2, r3
 8009160:	1e7b      	subs	r3, r7, #1
 8009162:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8009166:	bf84      	itt	hi
 8009168:	f240 135d 	movwhi	r3, #349	; 0x15d
 800916c:	60a3      	strhi	r3, [r4, #8]
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	9200      	str	r2, [sp, #0]
 8009172:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009176:	bf88      	it	hi
 8009178:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800917c:	f104 091c 	add.w	r9, r4, #28
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bf8c      	ite	hi
 8009184:	197f      	addhi	r7, r7, r5
 8009186:	2700      	movls	r7, #0
 8009188:	464b      	mov	r3, r9
 800918a:	f04f 0800 	mov.w	r8, #0
 800918e:	9301      	str	r3, [sp, #4]
 8009190:	6831      	ldr	r1, [r6, #0]
 8009192:	ab03      	add	r3, sp, #12
 8009194:	2202      	movs	r2, #2
 8009196:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800919a:	7809      	ldrb	r1, [r1, #0]
 800919c:	f7f7 f850 	bl	8000240 <memchr>
 80091a0:	9b01      	ldr	r3, [sp, #4]
 80091a2:	b330      	cbz	r0, 80091f2 <_scanf_i+0xba>
 80091a4:	f1b8 0f01 	cmp.w	r8, #1
 80091a8:	d15a      	bne.n	8009260 <_scanf_i+0x128>
 80091aa:	6862      	ldr	r2, [r4, #4]
 80091ac:	b92a      	cbnz	r2, 80091ba <_scanf_i+0x82>
 80091ae:	6822      	ldr	r2, [r4, #0]
 80091b0:	2108      	movs	r1, #8
 80091b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091b6:	6061      	str	r1, [r4, #4]
 80091b8:	6022      	str	r2, [r4, #0]
 80091ba:	6822      	ldr	r2, [r4, #0]
 80091bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80091c0:	6022      	str	r2, [r4, #0]
 80091c2:	68a2      	ldr	r2, [r4, #8]
 80091c4:	1e51      	subs	r1, r2, #1
 80091c6:	60a1      	str	r1, [r4, #8]
 80091c8:	b19a      	cbz	r2, 80091f2 <_scanf_i+0xba>
 80091ca:	6832      	ldr	r2, [r6, #0]
 80091cc:	1c51      	adds	r1, r2, #1
 80091ce:	6031      	str	r1, [r6, #0]
 80091d0:	7812      	ldrb	r2, [r2, #0]
 80091d2:	701a      	strb	r2, [r3, #0]
 80091d4:	1c5d      	adds	r5, r3, #1
 80091d6:	6873      	ldr	r3, [r6, #4]
 80091d8:	3b01      	subs	r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	6073      	str	r3, [r6, #4]
 80091de:	dc07      	bgt.n	80091f0 <_scanf_i+0xb8>
 80091e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091e4:	4631      	mov	r1, r6
 80091e6:	4658      	mov	r0, fp
 80091e8:	4798      	blx	r3
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f040 8086 	bne.w	80092fc <_scanf_i+0x1c4>
 80091f0:	462b      	mov	r3, r5
 80091f2:	f108 0801 	add.w	r8, r8, #1
 80091f6:	f1b8 0f03 	cmp.w	r8, #3
 80091fa:	d1c8      	bne.n	800918e <_scanf_i+0x56>
 80091fc:	6862      	ldr	r2, [r4, #4]
 80091fe:	b90a      	cbnz	r2, 8009204 <_scanf_i+0xcc>
 8009200:	220a      	movs	r2, #10
 8009202:	6062      	str	r2, [r4, #4]
 8009204:	6862      	ldr	r2, [r4, #4]
 8009206:	4945      	ldr	r1, [pc, #276]	; (800931c <_scanf_i+0x1e4>)
 8009208:	6960      	ldr	r0, [r4, #20]
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	1a89      	subs	r1, r1, r2
 800920e:	f000 f887 	bl	8009320 <__sccl>
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	f04f 0800 	mov.w	r8, #0
 8009218:	461d      	mov	r5, r3
 800921a:	68a3      	ldr	r3, [r4, #8]
 800921c:	6822      	ldr	r2, [r4, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d03a      	beq.n	8009298 <_scanf_i+0x160>
 8009222:	6831      	ldr	r1, [r6, #0]
 8009224:	6960      	ldr	r0, [r4, #20]
 8009226:	f891 c000 	ldrb.w	ip, [r1]
 800922a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800922e:	2800      	cmp	r0, #0
 8009230:	d032      	beq.n	8009298 <_scanf_i+0x160>
 8009232:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009236:	d121      	bne.n	800927c <_scanf_i+0x144>
 8009238:	0510      	lsls	r0, r2, #20
 800923a:	d51f      	bpl.n	800927c <_scanf_i+0x144>
 800923c:	f108 0801 	add.w	r8, r8, #1
 8009240:	b117      	cbz	r7, 8009248 <_scanf_i+0x110>
 8009242:	3301      	adds	r3, #1
 8009244:	3f01      	subs	r7, #1
 8009246:	60a3      	str	r3, [r4, #8]
 8009248:	6873      	ldr	r3, [r6, #4]
 800924a:	3b01      	subs	r3, #1
 800924c:	2b00      	cmp	r3, #0
 800924e:	6073      	str	r3, [r6, #4]
 8009250:	dd1b      	ble.n	800928a <_scanf_i+0x152>
 8009252:	6833      	ldr	r3, [r6, #0]
 8009254:	3301      	adds	r3, #1
 8009256:	6033      	str	r3, [r6, #0]
 8009258:	68a3      	ldr	r3, [r4, #8]
 800925a:	3b01      	subs	r3, #1
 800925c:	60a3      	str	r3, [r4, #8]
 800925e:	e7dc      	b.n	800921a <_scanf_i+0xe2>
 8009260:	f1b8 0f02 	cmp.w	r8, #2
 8009264:	d1ad      	bne.n	80091c2 <_scanf_i+0x8a>
 8009266:	6822      	ldr	r2, [r4, #0]
 8009268:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800926c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009270:	d1bf      	bne.n	80091f2 <_scanf_i+0xba>
 8009272:	2110      	movs	r1, #16
 8009274:	6061      	str	r1, [r4, #4]
 8009276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800927a:	e7a1      	b.n	80091c0 <_scanf_i+0x88>
 800927c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009280:	6022      	str	r2, [r4, #0]
 8009282:	780b      	ldrb	r3, [r1, #0]
 8009284:	702b      	strb	r3, [r5, #0]
 8009286:	3501      	adds	r5, #1
 8009288:	e7de      	b.n	8009248 <_scanf_i+0x110>
 800928a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800928e:	4631      	mov	r1, r6
 8009290:	4658      	mov	r0, fp
 8009292:	4798      	blx	r3
 8009294:	2800      	cmp	r0, #0
 8009296:	d0df      	beq.n	8009258 <_scanf_i+0x120>
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	05d9      	lsls	r1, r3, #23
 800929c:	d50c      	bpl.n	80092b8 <_scanf_i+0x180>
 800929e:	454d      	cmp	r5, r9
 80092a0:	d908      	bls.n	80092b4 <_scanf_i+0x17c>
 80092a2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80092a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092aa:	4632      	mov	r2, r6
 80092ac:	4658      	mov	r0, fp
 80092ae:	4798      	blx	r3
 80092b0:	1e6f      	subs	r7, r5, #1
 80092b2:	463d      	mov	r5, r7
 80092b4:	454d      	cmp	r5, r9
 80092b6:	d029      	beq.n	800930c <_scanf_i+0x1d4>
 80092b8:	6822      	ldr	r2, [r4, #0]
 80092ba:	f012 0210 	ands.w	r2, r2, #16
 80092be:	d113      	bne.n	80092e8 <_scanf_i+0x1b0>
 80092c0:	702a      	strb	r2, [r5, #0]
 80092c2:	6863      	ldr	r3, [r4, #4]
 80092c4:	9e00      	ldr	r6, [sp, #0]
 80092c6:	4649      	mov	r1, r9
 80092c8:	4658      	mov	r0, fp
 80092ca:	47b0      	blx	r6
 80092cc:	f8da 3000 	ldr.w	r3, [sl]
 80092d0:	6821      	ldr	r1, [r4, #0]
 80092d2:	1d1a      	adds	r2, r3, #4
 80092d4:	f8ca 2000 	str.w	r2, [sl]
 80092d8:	f011 0f20 	tst.w	r1, #32
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	d010      	beq.n	8009302 <_scanf_i+0x1ca>
 80092e0:	6018      	str	r0, [r3, #0]
 80092e2:	68e3      	ldr	r3, [r4, #12]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60e3      	str	r3, [r4, #12]
 80092e8:	eba5 0509 	sub.w	r5, r5, r9
 80092ec:	44a8      	add	r8, r5
 80092ee:	6925      	ldr	r5, [r4, #16]
 80092f0:	4445      	add	r5, r8
 80092f2:	6125      	str	r5, [r4, #16]
 80092f4:	2000      	movs	r0, #0
 80092f6:	b007      	add	sp, #28
 80092f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fc:	f04f 0800 	mov.w	r8, #0
 8009300:	e7ca      	b.n	8009298 <_scanf_i+0x160>
 8009302:	07ca      	lsls	r2, r1, #31
 8009304:	bf4c      	ite	mi
 8009306:	8018      	strhmi	r0, [r3, #0]
 8009308:	6018      	strpl	r0, [r3, #0]
 800930a:	e7ea      	b.n	80092e2 <_scanf_i+0x1aa>
 800930c:	2001      	movs	r0, #1
 800930e:	e7f2      	b.n	80092f6 <_scanf_i+0x1be>
 8009310:	0800aaa4 	.word	0x0800aaa4
 8009314:	0800947d 	.word	0x0800947d
 8009318:	08009595 	.word	0x08009595
 800931c:	0800ab17 	.word	0x0800ab17

08009320 <__sccl>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	780b      	ldrb	r3, [r1, #0]
 8009324:	2b5e      	cmp	r3, #94	; 0x5e
 8009326:	bf13      	iteet	ne
 8009328:	1c4a      	addne	r2, r1, #1
 800932a:	1c8a      	addeq	r2, r1, #2
 800932c:	784b      	ldrbeq	r3, [r1, #1]
 800932e:	2100      	movne	r1, #0
 8009330:	bf08      	it	eq
 8009332:	2101      	moveq	r1, #1
 8009334:	1e44      	subs	r4, r0, #1
 8009336:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800933a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800933e:	42ac      	cmp	r4, r5
 8009340:	d1fb      	bne.n	800933a <__sccl+0x1a>
 8009342:	b913      	cbnz	r3, 800934a <__sccl+0x2a>
 8009344:	3a01      	subs	r2, #1
 8009346:	4610      	mov	r0, r2
 8009348:	bd70      	pop	{r4, r5, r6, pc}
 800934a:	f081 0401 	eor.w	r4, r1, #1
 800934e:	54c4      	strb	r4, [r0, r3]
 8009350:	1c51      	adds	r1, r2, #1
 8009352:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8009356:	2d2d      	cmp	r5, #45	; 0x2d
 8009358:	f101 36ff 	add.w	r6, r1, #4294967295
 800935c:	460a      	mov	r2, r1
 800935e:	d006      	beq.n	800936e <__sccl+0x4e>
 8009360:	2d5d      	cmp	r5, #93	; 0x5d
 8009362:	d0f0      	beq.n	8009346 <__sccl+0x26>
 8009364:	b90d      	cbnz	r5, 800936a <__sccl+0x4a>
 8009366:	4632      	mov	r2, r6
 8009368:	e7ed      	b.n	8009346 <__sccl+0x26>
 800936a:	462b      	mov	r3, r5
 800936c:	e7ef      	b.n	800934e <__sccl+0x2e>
 800936e:	780e      	ldrb	r6, [r1, #0]
 8009370:	2e5d      	cmp	r6, #93	; 0x5d
 8009372:	d0fa      	beq.n	800936a <__sccl+0x4a>
 8009374:	42b3      	cmp	r3, r6
 8009376:	dcf8      	bgt.n	800936a <__sccl+0x4a>
 8009378:	3301      	adds	r3, #1
 800937a:	429e      	cmp	r6, r3
 800937c:	54c4      	strb	r4, [r0, r3]
 800937e:	dcfb      	bgt.n	8009378 <__sccl+0x58>
 8009380:	3102      	adds	r1, #2
 8009382:	e7e6      	b.n	8009352 <__sccl+0x32>

08009384 <_strtol_l.isra.0>:
 8009384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	4680      	mov	r8, r0
 800938a:	4689      	mov	r9, r1
 800938c:	4692      	mov	sl, r2
 800938e:	461e      	mov	r6, r3
 8009390:	460f      	mov	r7, r1
 8009392:	463d      	mov	r5, r7
 8009394:	9808      	ldr	r0, [sp, #32]
 8009396:	f815 4b01 	ldrb.w	r4, [r5], #1
 800939a:	f000 f947 	bl	800962c <__locale_ctype_ptr_l>
 800939e:	4420      	add	r0, r4
 80093a0:	7843      	ldrb	r3, [r0, #1]
 80093a2:	f013 0308 	ands.w	r3, r3, #8
 80093a6:	d132      	bne.n	800940e <_strtol_l.isra.0+0x8a>
 80093a8:	2c2d      	cmp	r4, #45	; 0x2d
 80093aa:	d132      	bne.n	8009412 <_strtol_l.isra.0+0x8e>
 80093ac:	787c      	ldrb	r4, [r7, #1]
 80093ae:	1cbd      	adds	r5, r7, #2
 80093b0:	2201      	movs	r2, #1
 80093b2:	2e00      	cmp	r6, #0
 80093b4:	d05d      	beq.n	8009472 <_strtol_l.isra.0+0xee>
 80093b6:	2e10      	cmp	r6, #16
 80093b8:	d109      	bne.n	80093ce <_strtol_l.isra.0+0x4a>
 80093ba:	2c30      	cmp	r4, #48	; 0x30
 80093bc:	d107      	bne.n	80093ce <_strtol_l.isra.0+0x4a>
 80093be:	782b      	ldrb	r3, [r5, #0]
 80093c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093c4:	2b58      	cmp	r3, #88	; 0x58
 80093c6:	d14f      	bne.n	8009468 <_strtol_l.isra.0+0xe4>
 80093c8:	786c      	ldrb	r4, [r5, #1]
 80093ca:	2610      	movs	r6, #16
 80093cc:	3502      	adds	r5, #2
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	bf14      	ite	ne
 80093d2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80093d6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80093da:	2700      	movs	r7, #0
 80093dc:	fbb1 fcf6 	udiv	ip, r1, r6
 80093e0:	4638      	mov	r0, r7
 80093e2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80093e6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80093ea:	2b09      	cmp	r3, #9
 80093ec:	d817      	bhi.n	800941e <_strtol_l.isra.0+0x9a>
 80093ee:	461c      	mov	r4, r3
 80093f0:	42a6      	cmp	r6, r4
 80093f2:	dd23      	ble.n	800943c <_strtol_l.isra.0+0xb8>
 80093f4:	1c7b      	adds	r3, r7, #1
 80093f6:	d007      	beq.n	8009408 <_strtol_l.isra.0+0x84>
 80093f8:	4584      	cmp	ip, r0
 80093fa:	d31c      	bcc.n	8009436 <_strtol_l.isra.0+0xb2>
 80093fc:	d101      	bne.n	8009402 <_strtol_l.isra.0+0x7e>
 80093fe:	45a6      	cmp	lr, r4
 8009400:	db19      	blt.n	8009436 <_strtol_l.isra.0+0xb2>
 8009402:	fb00 4006 	mla	r0, r0, r6, r4
 8009406:	2701      	movs	r7, #1
 8009408:	f815 4b01 	ldrb.w	r4, [r5], #1
 800940c:	e7eb      	b.n	80093e6 <_strtol_l.isra.0+0x62>
 800940e:	462f      	mov	r7, r5
 8009410:	e7bf      	b.n	8009392 <_strtol_l.isra.0+0xe>
 8009412:	2c2b      	cmp	r4, #43	; 0x2b
 8009414:	bf04      	itt	eq
 8009416:	1cbd      	addeq	r5, r7, #2
 8009418:	787c      	ldrbeq	r4, [r7, #1]
 800941a:	461a      	mov	r2, r3
 800941c:	e7c9      	b.n	80093b2 <_strtol_l.isra.0+0x2e>
 800941e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009422:	2b19      	cmp	r3, #25
 8009424:	d801      	bhi.n	800942a <_strtol_l.isra.0+0xa6>
 8009426:	3c37      	subs	r4, #55	; 0x37
 8009428:	e7e2      	b.n	80093f0 <_strtol_l.isra.0+0x6c>
 800942a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800942e:	2b19      	cmp	r3, #25
 8009430:	d804      	bhi.n	800943c <_strtol_l.isra.0+0xb8>
 8009432:	3c57      	subs	r4, #87	; 0x57
 8009434:	e7dc      	b.n	80093f0 <_strtol_l.isra.0+0x6c>
 8009436:	f04f 37ff 	mov.w	r7, #4294967295
 800943a:	e7e5      	b.n	8009408 <_strtol_l.isra.0+0x84>
 800943c:	1c7b      	adds	r3, r7, #1
 800943e:	d108      	bne.n	8009452 <_strtol_l.isra.0+0xce>
 8009440:	2322      	movs	r3, #34	; 0x22
 8009442:	f8c8 3000 	str.w	r3, [r8]
 8009446:	4608      	mov	r0, r1
 8009448:	f1ba 0f00 	cmp.w	sl, #0
 800944c:	d107      	bne.n	800945e <_strtol_l.isra.0+0xda>
 800944e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009452:	b102      	cbz	r2, 8009456 <_strtol_l.isra.0+0xd2>
 8009454:	4240      	negs	r0, r0
 8009456:	f1ba 0f00 	cmp.w	sl, #0
 800945a:	d0f8      	beq.n	800944e <_strtol_l.isra.0+0xca>
 800945c:	b10f      	cbz	r7, 8009462 <_strtol_l.isra.0+0xde>
 800945e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009462:	f8ca 9000 	str.w	r9, [sl]
 8009466:	e7f2      	b.n	800944e <_strtol_l.isra.0+0xca>
 8009468:	2430      	movs	r4, #48	; 0x30
 800946a:	2e00      	cmp	r6, #0
 800946c:	d1af      	bne.n	80093ce <_strtol_l.isra.0+0x4a>
 800946e:	2608      	movs	r6, #8
 8009470:	e7ad      	b.n	80093ce <_strtol_l.isra.0+0x4a>
 8009472:	2c30      	cmp	r4, #48	; 0x30
 8009474:	d0a3      	beq.n	80093be <_strtol_l.isra.0+0x3a>
 8009476:	260a      	movs	r6, #10
 8009478:	e7a9      	b.n	80093ce <_strtol_l.isra.0+0x4a>
	...

0800947c <_strtol_r>:
 800947c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800947e:	4c06      	ldr	r4, [pc, #24]	; (8009498 <_strtol_r+0x1c>)
 8009480:	4d06      	ldr	r5, [pc, #24]	; (800949c <_strtol_r+0x20>)
 8009482:	6824      	ldr	r4, [r4, #0]
 8009484:	6a24      	ldr	r4, [r4, #32]
 8009486:	2c00      	cmp	r4, #0
 8009488:	bf08      	it	eq
 800948a:	462c      	moveq	r4, r5
 800948c:	9400      	str	r4, [sp, #0]
 800948e:	f7ff ff79 	bl	8009384 <_strtol_l.isra.0>
 8009492:	b003      	add	sp, #12
 8009494:	bd30      	pop	{r4, r5, pc}
 8009496:	bf00      	nop
 8009498:	200000f8 	.word	0x200000f8
 800949c:	2000015c 	.word	0x2000015c

080094a0 <_strtoul_l.isra.0>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	4680      	mov	r8, r0
 80094a6:	4689      	mov	r9, r1
 80094a8:	4692      	mov	sl, r2
 80094aa:	461e      	mov	r6, r3
 80094ac:	460f      	mov	r7, r1
 80094ae:	463d      	mov	r5, r7
 80094b0:	9808      	ldr	r0, [sp, #32]
 80094b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094b6:	f000 f8b9 	bl	800962c <__locale_ctype_ptr_l>
 80094ba:	4420      	add	r0, r4
 80094bc:	7843      	ldrb	r3, [r0, #1]
 80094be:	f013 0308 	ands.w	r3, r3, #8
 80094c2:	d130      	bne.n	8009526 <_strtoul_l.isra.0+0x86>
 80094c4:	2c2d      	cmp	r4, #45	; 0x2d
 80094c6:	d130      	bne.n	800952a <_strtoul_l.isra.0+0x8a>
 80094c8:	787c      	ldrb	r4, [r7, #1]
 80094ca:	1cbd      	adds	r5, r7, #2
 80094cc:	2101      	movs	r1, #1
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	d05c      	beq.n	800958c <_strtoul_l.isra.0+0xec>
 80094d2:	2e10      	cmp	r6, #16
 80094d4:	d109      	bne.n	80094ea <_strtoul_l.isra.0+0x4a>
 80094d6:	2c30      	cmp	r4, #48	; 0x30
 80094d8:	d107      	bne.n	80094ea <_strtoul_l.isra.0+0x4a>
 80094da:	782b      	ldrb	r3, [r5, #0]
 80094dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094e0:	2b58      	cmp	r3, #88	; 0x58
 80094e2:	d14e      	bne.n	8009582 <_strtoul_l.isra.0+0xe2>
 80094e4:	786c      	ldrb	r4, [r5, #1]
 80094e6:	2610      	movs	r6, #16
 80094e8:	3502      	adds	r5, #2
 80094ea:	f04f 32ff 	mov.w	r2, #4294967295
 80094ee:	2300      	movs	r3, #0
 80094f0:	fbb2 f2f6 	udiv	r2, r2, r6
 80094f4:	fb06 fc02 	mul.w	ip, r6, r2
 80094f8:	ea6f 0c0c 	mvn.w	ip, ip
 80094fc:	4618      	mov	r0, r3
 80094fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009502:	2f09      	cmp	r7, #9
 8009504:	d817      	bhi.n	8009536 <_strtoul_l.isra.0+0x96>
 8009506:	463c      	mov	r4, r7
 8009508:	42a6      	cmp	r6, r4
 800950a:	dd23      	ble.n	8009554 <_strtoul_l.isra.0+0xb4>
 800950c:	2b00      	cmp	r3, #0
 800950e:	db1e      	blt.n	800954e <_strtoul_l.isra.0+0xae>
 8009510:	4282      	cmp	r2, r0
 8009512:	d31c      	bcc.n	800954e <_strtoul_l.isra.0+0xae>
 8009514:	d101      	bne.n	800951a <_strtoul_l.isra.0+0x7a>
 8009516:	45a4      	cmp	ip, r4
 8009518:	db19      	blt.n	800954e <_strtoul_l.isra.0+0xae>
 800951a:	fb00 4006 	mla	r0, r0, r6, r4
 800951e:	2301      	movs	r3, #1
 8009520:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009524:	e7eb      	b.n	80094fe <_strtoul_l.isra.0+0x5e>
 8009526:	462f      	mov	r7, r5
 8009528:	e7c1      	b.n	80094ae <_strtoul_l.isra.0+0xe>
 800952a:	2c2b      	cmp	r4, #43	; 0x2b
 800952c:	bf04      	itt	eq
 800952e:	1cbd      	addeq	r5, r7, #2
 8009530:	787c      	ldrbeq	r4, [r7, #1]
 8009532:	4619      	mov	r1, r3
 8009534:	e7cb      	b.n	80094ce <_strtoul_l.isra.0+0x2e>
 8009536:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800953a:	2f19      	cmp	r7, #25
 800953c:	d801      	bhi.n	8009542 <_strtoul_l.isra.0+0xa2>
 800953e:	3c37      	subs	r4, #55	; 0x37
 8009540:	e7e2      	b.n	8009508 <_strtoul_l.isra.0+0x68>
 8009542:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009546:	2f19      	cmp	r7, #25
 8009548:	d804      	bhi.n	8009554 <_strtoul_l.isra.0+0xb4>
 800954a:	3c57      	subs	r4, #87	; 0x57
 800954c:	e7dc      	b.n	8009508 <_strtoul_l.isra.0+0x68>
 800954e:	f04f 33ff 	mov.w	r3, #4294967295
 8009552:	e7e5      	b.n	8009520 <_strtoul_l.isra.0+0x80>
 8009554:	2b00      	cmp	r3, #0
 8009556:	da09      	bge.n	800956c <_strtoul_l.isra.0+0xcc>
 8009558:	2322      	movs	r3, #34	; 0x22
 800955a:	f8c8 3000 	str.w	r3, [r8]
 800955e:	f04f 30ff 	mov.w	r0, #4294967295
 8009562:	f1ba 0f00 	cmp.w	sl, #0
 8009566:	d107      	bne.n	8009578 <_strtoul_l.isra.0+0xd8>
 8009568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956c:	b101      	cbz	r1, 8009570 <_strtoul_l.isra.0+0xd0>
 800956e:	4240      	negs	r0, r0
 8009570:	f1ba 0f00 	cmp.w	sl, #0
 8009574:	d0f8      	beq.n	8009568 <_strtoul_l.isra.0+0xc8>
 8009576:	b10b      	cbz	r3, 800957c <_strtoul_l.isra.0+0xdc>
 8009578:	f105 39ff 	add.w	r9, r5, #4294967295
 800957c:	f8ca 9000 	str.w	r9, [sl]
 8009580:	e7f2      	b.n	8009568 <_strtoul_l.isra.0+0xc8>
 8009582:	2430      	movs	r4, #48	; 0x30
 8009584:	2e00      	cmp	r6, #0
 8009586:	d1b0      	bne.n	80094ea <_strtoul_l.isra.0+0x4a>
 8009588:	2608      	movs	r6, #8
 800958a:	e7ae      	b.n	80094ea <_strtoul_l.isra.0+0x4a>
 800958c:	2c30      	cmp	r4, #48	; 0x30
 800958e:	d0a4      	beq.n	80094da <_strtoul_l.isra.0+0x3a>
 8009590:	260a      	movs	r6, #10
 8009592:	e7aa      	b.n	80094ea <_strtoul_l.isra.0+0x4a>

08009594 <_strtoul_r>:
 8009594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009596:	4c06      	ldr	r4, [pc, #24]	; (80095b0 <_strtoul_r+0x1c>)
 8009598:	4d06      	ldr	r5, [pc, #24]	; (80095b4 <_strtoul_r+0x20>)
 800959a:	6824      	ldr	r4, [r4, #0]
 800959c:	6a24      	ldr	r4, [r4, #32]
 800959e:	2c00      	cmp	r4, #0
 80095a0:	bf08      	it	eq
 80095a2:	462c      	moveq	r4, r5
 80095a4:	9400      	str	r4, [sp, #0]
 80095a6:	f7ff ff7b 	bl	80094a0 <_strtoul_l.isra.0>
 80095aa:	b003      	add	sp, #12
 80095ac:	bd30      	pop	{r4, r5, pc}
 80095ae:	bf00      	nop
 80095b0:	200000f8 	.word	0x200000f8
 80095b4:	2000015c 	.word	0x2000015c

080095b8 <__submore>:
 80095b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095bc:	460c      	mov	r4, r1
 80095be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80095c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095c4:	4299      	cmp	r1, r3
 80095c6:	d11d      	bne.n	8009604 <__submore+0x4c>
 80095c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80095cc:	f000 f8c4 	bl	8009758 <_malloc_r>
 80095d0:	b918      	cbnz	r0, 80095da <__submore+0x22>
 80095d2:	f04f 30ff 	mov.w	r0, #4294967295
 80095d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095de:	63a3      	str	r3, [r4, #56]	; 0x38
 80095e0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80095e4:	6360      	str	r0, [r4, #52]	; 0x34
 80095e6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80095ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80095ee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80095f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80095f6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80095fa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80095fe:	6020      	str	r0, [r4, #0]
 8009600:	2000      	movs	r0, #0
 8009602:	e7e8      	b.n	80095d6 <__submore+0x1e>
 8009604:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009606:	0077      	lsls	r7, r6, #1
 8009608:	463a      	mov	r2, r7
 800960a:	f000 f8ff 	bl	800980c <_realloc_r>
 800960e:	4605      	mov	r5, r0
 8009610:	2800      	cmp	r0, #0
 8009612:	d0de      	beq.n	80095d2 <__submore+0x1a>
 8009614:	eb00 0806 	add.w	r8, r0, r6
 8009618:	4601      	mov	r1, r0
 800961a:	4632      	mov	r2, r6
 800961c:	4640      	mov	r0, r8
 800961e:	f000 f829 	bl	8009674 <memcpy>
 8009622:	f8c4 8000 	str.w	r8, [r4]
 8009626:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800962a:	e7e9      	b.n	8009600 <__submore+0x48>

0800962c <__locale_ctype_ptr_l>:
 800962c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009630:	4770      	bx	lr
	...

08009634 <__locale_ctype_ptr>:
 8009634:	4b04      	ldr	r3, [pc, #16]	; (8009648 <__locale_ctype_ptr+0x14>)
 8009636:	4a05      	ldr	r2, [pc, #20]	; (800964c <__locale_ctype_ptr+0x18>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	6a1b      	ldr	r3, [r3, #32]
 800963c:	2b00      	cmp	r3, #0
 800963e:	bf08      	it	eq
 8009640:	4613      	moveq	r3, r2
 8009642:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009646:	4770      	bx	lr
 8009648:	200000f8 	.word	0x200000f8
 800964c:	2000015c 	.word	0x2000015c

08009650 <__ascii_mbtowc>:
 8009650:	b082      	sub	sp, #8
 8009652:	b901      	cbnz	r1, 8009656 <__ascii_mbtowc+0x6>
 8009654:	a901      	add	r1, sp, #4
 8009656:	b142      	cbz	r2, 800966a <__ascii_mbtowc+0x1a>
 8009658:	b14b      	cbz	r3, 800966e <__ascii_mbtowc+0x1e>
 800965a:	7813      	ldrb	r3, [r2, #0]
 800965c:	600b      	str	r3, [r1, #0]
 800965e:	7812      	ldrb	r2, [r2, #0]
 8009660:	1c10      	adds	r0, r2, #0
 8009662:	bf18      	it	ne
 8009664:	2001      	movne	r0, #1
 8009666:	b002      	add	sp, #8
 8009668:	4770      	bx	lr
 800966a:	4610      	mov	r0, r2
 800966c:	e7fb      	b.n	8009666 <__ascii_mbtowc+0x16>
 800966e:	f06f 0001 	mvn.w	r0, #1
 8009672:	e7f8      	b.n	8009666 <__ascii_mbtowc+0x16>

08009674 <memcpy>:
 8009674:	b510      	push	{r4, lr}
 8009676:	1e43      	subs	r3, r0, #1
 8009678:	440a      	add	r2, r1
 800967a:	4291      	cmp	r1, r2
 800967c:	d100      	bne.n	8009680 <memcpy+0xc>
 800967e:	bd10      	pop	{r4, pc}
 8009680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009688:	e7f7      	b.n	800967a <memcpy+0x6>

0800968a <memmove>:
 800968a:	4288      	cmp	r0, r1
 800968c:	b510      	push	{r4, lr}
 800968e:	eb01 0302 	add.w	r3, r1, r2
 8009692:	d807      	bhi.n	80096a4 <memmove+0x1a>
 8009694:	1e42      	subs	r2, r0, #1
 8009696:	4299      	cmp	r1, r3
 8009698:	d00a      	beq.n	80096b0 <memmove+0x26>
 800969a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800969e:	f802 4f01 	strb.w	r4, [r2, #1]!
 80096a2:	e7f8      	b.n	8009696 <memmove+0xc>
 80096a4:	4283      	cmp	r3, r0
 80096a6:	d9f5      	bls.n	8009694 <memmove+0xa>
 80096a8:	1881      	adds	r1, r0, r2
 80096aa:	1ad2      	subs	r2, r2, r3
 80096ac:	42d3      	cmn	r3, r2
 80096ae:	d100      	bne.n	80096b2 <memmove+0x28>
 80096b0:	bd10      	pop	{r4, pc}
 80096b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80096ba:	e7f7      	b.n	80096ac <memmove+0x22>

080096bc <_free_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4605      	mov	r5, r0
 80096c0:	2900      	cmp	r1, #0
 80096c2:	d045      	beq.n	8009750 <_free_r+0x94>
 80096c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c8:	1f0c      	subs	r4, r1, #4
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	bfb8      	it	lt
 80096ce:	18e4      	addlt	r4, r4, r3
 80096d0:	f000 f8df 	bl	8009892 <__malloc_lock>
 80096d4:	4a1f      	ldr	r2, [pc, #124]	; (8009754 <_free_r+0x98>)
 80096d6:	6813      	ldr	r3, [r2, #0]
 80096d8:	4610      	mov	r0, r2
 80096da:	b933      	cbnz	r3, 80096ea <_free_r+0x2e>
 80096dc:	6063      	str	r3, [r4, #4]
 80096de:	6014      	str	r4, [r2, #0]
 80096e0:	4628      	mov	r0, r5
 80096e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096e6:	f000 b8d5 	b.w	8009894 <__malloc_unlock>
 80096ea:	42a3      	cmp	r3, r4
 80096ec:	d90c      	bls.n	8009708 <_free_r+0x4c>
 80096ee:	6821      	ldr	r1, [r4, #0]
 80096f0:	1862      	adds	r2, r4, r1
 80096f2:	4293      	cmp	r3, r2
 80096f4:	bf04      	itt	eq
 80096f6:	681a      	ldreq	r2, [r3, #0]
 80096f8:	685b      	ldreq	r3, [r3, #4]
 80096fa:	6063      	str	r3, [r4, #4]
 80096fc:	bf04      	itt	eq
 80096fe:	1852      	addeq	r2, r2, r1
 8009700:	6022      	streq	r2, [r4, #0]
 8009702:	6004      	str	r4, [r0, #0]
 8009704:	e7ec      	b.n	80096e0 <_free_r+0x24>
 8009706:	4613      	mov	r3, r2
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	b10a      	cbz	r2, 8009710 <_free_r+0x54>
 800970c:	42a2      	cmp	r2, r4
 800970e:	d9fa      	bls.n	8009706 <_free_r+0x4a>
 8009710:	6819      	ldr	r1, [r3, #0]
 8009712:	1858      	adds	r0, r3, r1
 8009714:	42a0      	cmp	r0, r4
 8009716:	d10b      	bne.n	8009730 <_free_r+0x74>
 8009718:	6820      	ldr	r0, [r4, #0]
 800971a:	4401      	add	r1, r0
 800971c:	1858      	adds	r0, r3, r1
 800971e:	4282      	cmp	r2, r0
 8009720:	6019      	str	r1, [r3, #0]
 8009722:	d1dd      	bne.n	80096e0 <_free_r+0x24>
 8009724:	6810      	ldr	r0, [r2, #0]
 8009726:	6852      	ldr	r2, [r2, #4]
 8009728:	605a      	str	r2, [r3, #4]
 800972a:	4401      	add	r1, r0
 800972c:	6019      	str	r1, [r3, #0]
 800972e:	e7d7      	b.n	80096e0 <_free_r+0x24>
 8009730:	d902      	bls.n	8009738 <_free_r+0x7c>
 8009732:	230c      	movs	r3, #12
 8009734:	602b      	str	r3, [r5, #0]
 8009736:	e7d3      	b.n	80096e0 <_free_r+0x24>
 8009738:	6820      	ldr	r0, [r4, #0]
 800973a:	1821      	adds	r1, r4, r0
 800973c:	428a      	cmp	r2, r1
 800973e:	bf04      	itt	eq
 8009740:	6811      	ldreq	r1, [r2, #0]
 8009742:	6852      	ldreq	r2, [r2, #4]
 8009744:	6062      	str	r2, [r4, #4]
 8009746:	bf04      	itt	eq
 8009748:	1809      	addeq	r1, r1, r0
 800974a:	6021      	streq	r1, [r4, #0]
 800974c:	605c      	str	r4, [r3, #4]
 800974e:	e7c7      	b.n	80096e0 <_free_r+0x24>
 8009750:	bd38      	pop	{r3, r4, r5, pc}
 8009752:	bf00      	nop
 8009754:	20000330 	.word	0x20000330

08009758 <_malloc_r>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	1ccd      	adds	r5, r1, #3
 800975c:	f025 0503 	bic.w	r5, r5, #3
 8009760:	3508      	adds	r5, #8
 8009762:	2d0c      	cmp	r5, #12
 8009764:	bf38      	it	cc
 8009766:	250c      	movcc	r5, #12
 8009768:	2d00      	cmp	r5, #0
 800976a:	4606      	mov	r6, r0
 800976c:	db01      	blt.n	8009772 <_malloc_r+0x1a>
 800976e:	42a9      	cmp	r1, r5
 8009770:	d903      	bls.n	800977a <_malloc_r+0x22>
 8009772:	230c      	movs	r3, #12
 8009774:	6033      	str	r3, [r6, #0]
 8009776:	2000      	movs	r0, #0
 8009778:	bd70      	pop	{r4, r5, r6, pc}
 800977a:	f000 f88a 	bl	8009892 <__malloc_lock>
 800977e:	4a21      	ldr	r2, [pc, #132]	; (8009804 <_malloc_r+0xac>)
 8009780:	6814      	ldr	r4, [r2, #0]
 8009782:	4621      	mov	r1, r4
 8009784:	b991      	cbnz	r1, 80097ac <_malloc_r+0x54>
 8009786:	4c20      	ldr	r4, [pc, #128]	; (8009808 <_malloc_r+0xb0>)
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	b91b      	cbnz	r3, 8009794 <_malloc_r+0x3c>
 800978c:	4630      	mov	r0, r6
 800978e:	f000 f863 	bl	8009858 <_sbrk_r>
 8009792:	6020      	str	r0, [r4, #0]
 8009794:	4629      	mov	r1, r5
 8009796:	4630      	mov	r0, r6
 8009798:	f000 f85e 	bl	8009858 <_sbrk_r>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d124      	bne.n	80097ea <_malloc_r+0x92>
 80097a0:	230c      	movs	r3, #12
 80097a2:	6033      	str	r3, [r6, #0]
 80097a4:	4630      	mov	r0, r6
 80097a6:	f000 f875 	bl	8009894 <__malloc_unlock>
 80097aa:	e7e4      	b.n	8009776 <_malloc_r+0x1e>
 80097ac:	680b      	ldr	r3, [r1, #0]
 80097ae:	1b5b      	subs	r3, r3, r5
 80097b0:	d418      	bmi.n	80097e4 <_malloc_r+0x8c>
 80097b2:	2b0b      	cmp	r3, #11
 80097b4:	d90f      	bls.n	80097d6 <_malloc_r+0x7e>
 80097b6:	600b      	str	r3, [r1, #0]
 80097b8:	50cd      	str	r5, [r1, r3]
 80097ba:	18cc      	adds	r4, r1, r3
 80097bc:	4630      	mov	r0, r6
 80097be:	f000 f869 	bl	8009894 <__malloc_unlock>
 80097c2:	f104 000b 	add.w	r0, r4, #11
 80097c6:	1d23      	adds	r3, r4, #4
 80097c8:	f020 0007 	bic.w	r0, r0, #7
 80097cc:	1ac3      	subs	r3, r0, r3
 80097ce:	d0d3      	beq.n	8009778 <_malloc_r+0x20>
 80097d0:	425a      	negs	r2, r3
 80097d2:	50e2      	str	r2, [r4, r3]
 80097d4:	e7d0      	b.n	8009778 <_malloc_r+0x20>
 80097d6:	428c      	cmp	r4, r1
 80097d8:	684b      	ldr	r3, [r1, #4]
 80097da:	bf16      	itet	ne
 80097dc:	6063      	strne	r3, [r4, #4]
 80097de:	6013      	streq	r3, [r2, #0]
 80097e0:	460c      	movne	r4, r1
 80097e2:	e7eb      	b.n	80097bc <_malloc_r+0x64>
 80097e4:	460c      	mov	r4, r1
 80097e6:	6849      	ldr	r1, [r1, #4]
 80097e8:	e7cc      	b.n	8009784 <_malloc_r+0x2c>
 80097ea:	1cc4      	adds	r4, r0, #3
 80097ec:	f024 0403 	bic.w	r4, r4, #3
 80097f0:	42a0      	cmp	r0, r4
 80097f2:	d005      	beq.n	8009800 <_malloc_r+0xa8>
 80097f4:	1a21      	subs	r1, r4, r0
 80097f6:	4630      	mov	r0, r6
 80097f8:	f000 f82e 	bl	8009858 <_sbrk_r>
 80097fc:	3001      	adds	r0, #1
 80097fe:	d0cf      	beq.n	80097a0 <_malloc_r+0x48>
 8009800:	6025      	str	r5, [r4, #0]
 8009802:	e7db      	b.n	80097bc <_malloc_r+0x64>
 8009804:	20000330 	.word	0x20000330
 8009808:	20000334 	.word	0x20000334

0800980c <_realloc_r>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	4607      	mov	r7, r0
 8009810:	4614      	mov	r4, r2
 8009812:	460e      	mov	r6, r1
 8009814:	b921      	cbnz	r1, 8009820 <_realloc_r+0x14>
 8009816:	4611      	mov	r1, r2
 8009818:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800981c:	f7ff bf9c 	b.w	8009758 <_malloc_r>
 8009820:	b922      	cbnz	r2, 800982c <_realloc_r+0x20>
 8009822:	f7ff ff4b 	bl	80096bc <_free_r>
 8009826:	4625      	mov	r5, r4
 8009828:	4628      	mov	r0, r5
 800982a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800982c:	f000 f833 	bl	8009896 <_malloc_usable_size_r>
 8009830:	42a0      	cmp	r0, r4
 8009832:	d20f      	bcs.n	8009854 <_realloc_r+0x48>
 8009834:	4621      	mov	r1, r4
 8009836:	4638      	mov	r0, r7
 8009838:	f7ff ff8e 	bl	8009758 <_malloc_r>
 800983c:	4605      	mov	r5, r0
 800983e:	2800      	cmp	r0, #0
 8009840:	d0f2      	beq.n	8009828 <_realloc_r+0x1c>
 8009842:	4631      	mov	r1, r6
 8009844:	4622      	mov	r2, r4
 8009846:	f7ff ff15 	bl	8009674 <memcpy>
 800984a:	4631      	mov	r1, r6
 800984c:	4638      	mov	r0, r7
 800984e:	f7ff ff35 	bl	80096bc <_free_r>
 8009852:	e7e9      	b.n	8009828 <_realloc_r+0x1c>
 8009854:	4635      	mov	r5, r6
 8009856:	e7e7      	b.n	8009828 <_realloc_r+0x1c>

08009858 <_sbrk_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4c06      	ldr	r4, [pc, #24]	; (8009874 <_sbrk_r+0x1c>)
 800985c:	2300      	movs	r3, #0
 800985e:	4605      	mov	r5, r0
 8009860:	4608      	mov	r0, r1
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	f7f8 fd42 	bl	80022ec <_sbrk>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d102      	bne.n	8009872 <_sbrk_r+0x1a>
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	b103      	cbz	r3, 8009872 <_sbrk_r+0x1a>
 8009870:	602b      	str	r3, [r5, #0]
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	20000d1c 	.word	0x20000d1c

08009878 <__ascii_wctomb>:
 8009878:	b149      	cbz	r1, 800988e <__ascii_wctomb+0x16>
 800987a:	2aff      	cmp	r2, #255	; 0xff
 800987c:	bf85      	ittet	hi
 800987e:	238a      	movhi	r3, #138	; 0x8a
 8009880:	6003      	strhi	r3, [r0, #0]
 8009882:	700a      	strbls	r2, [r1, #0]
 8009884:	f04f 30ff 	movhi.w	r0, #4294967295
 8009888:	bf98      	it	ls
 800988a:	2001      	movls	r0, #1
 800988c:	4770      	bx	lr
 800988e:	4608      	mov	r0, r1
 8009890:	4770      	bx	lr

08009892 <__malloc_lock>:
 8009892:	4770      	bx	lr

08009894 <__malloc_unlock>:
 8009894:	4770      	bx	lr

08009896 <_malloc_usable_size_r>:
 8009896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800989a:	1f18      	subs	r0, r3, #4
 800989c:	2b00      	cmp	r3, #0
 800989e:	bfbc      	itt	lt
 80098a0:	580b      	ldrlt	r3, [r1, r0]
 80098a2:	18c0      	addlt	r0, r0, r3
 80098a4:	4770      	bx	lr
	...

080098a8 <pow>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	ed2d 8b04 	vpush	{d8-d9}
 80098b0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009b84 <pow+0x2dc>
 80098b4:	b08d      	sub	sp, #52	; 0x34
 80098b6:	ec57 6b10 	vmov	r6, r7, d0
 80098ba:	ec55 4b11 	vmov	r4, r5, d1
 80098be:	f000 f9bf 	bl	8009c40 <__ieee754_pow>
 80098c2:	f999 3000 	ldrsb.w	r3, [r9]
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	3301      	adds	r3, #1
 80098ca:	eeb0 8a40 	vmov.f32	s16, s0
 80098ce:	eef0 8a60 	vmov.f32	s17, s1
 80098d2:	46c8      	mov	r8, r9
 80098d4:	d05f      	beq.n	8009996 <pow+0xee>
 80098d6:	4622      	mov	r2, r4
 80098d8:	462b      	mov	r3, r5
 80098da:	4620      	mov	r0, r4
 80098dc:	4629      	mov	r1, r5
 80098de:	f7f7 f955 	bl	8000b8c <__aeabi_dcmpun>
 80098e2:	4683      	mov	fp, r0
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d156      	bne.n	8009996 <pow+0xee>
 80098e8:	4632      	mov	r2, r6
 80098ea:	463b      	mov	r3, r7
 80098ec:	4630      	mov	r0, r6
 80098ee:	4639      	mov	r1, r7
 80098f0:	f7f7 f94c 	bl	8000b8c <__aeabi_dcmpun>
 80098f4:	9001      	str	r0, [sp, #4]
 80098f6:	b1e8      	cbz	r0, 8009934 <pow+0x8c>
 80098f8:	2200      	movs	r2, #0
 80098fa:	2300      	movs	r3, #0
 80098fc:	4620      	mov	r0, r4
 80098fe:	4629      	mov	r1, r5
 8009900:	f7f7 f912 	bl	8000b28 <__aeabi_dcmpeq>
 8009904:	2800      	cmp	r0, #0
 8009906:	d046      	beq.n	8009996 <pow+0xee>
 8009908:	2301      	movs	r3, #1
 800990a:	9302      	str	r3, [sp, #8]
 800990c:	4b96      	ldr	r3, [pc, #600]	; (8009b68 <pow+0x2c0>)
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	4b96      	ldr	r3, [pc, #600]	; (8009b6c <pow+0x2c4>)
 8009912:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009916:	2200      	movs	r2, #0
 8009918:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800991c:	9b00      	ldr	r3, [sp, #0]
 800991e:	2b02      	cmp	r3, #2
 8009920:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009924:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009928:	d033      	beq.n	8009992 <pow+0xea>
 800992a:	a802      	add	r0, sp, #8
 800992c:	f000 ff57 	bl	800a7de <matherr>
 8009930:	bb48      	cbnz	r0, 8009986 <pow+0xde>
 8009932:	e05d      	b.n	80099f0 <pow+0x148>
 8009934:	f04f 0a00 	mov.w	sl, #0
 8009938:	f04f 0b00 	mov.w	fp, #0
 800993c:	4652      	mov	r2, sl
 800993e:	465b      	mov	r3, fp
 8009940:	4630      	mov	r0, r6
 8009942:	4639      	mov	r1, r7
 8009944:	f7f7 f8f0 	bl	8000b28 <__aeabi_dcmpeq>
 8009948:	ec4b ab19 	vmov	d9, sl, fp
 800994c:	2800      	cmp	r0, #0
 800994e:	d054      	beq.n	80099fa <pow+0x152>
 8009950:	4652      	mov	r2, sl
 8009952:	465b      	mov	r3, fp
 8009954:	4620      	mov	r0, r4
 8009956:	4629      	mov	r1, r5
 8009958:	f7f7 f8e6 	bl	8000b28 <__aeabi_dcmpeq>
 800995c:	4680      	mov	r8, r0
 800995e:	b318      	cbz	r0, 80099a8 <pow+0x100>
 8009960:	2301      	movs	r3, #1
 8009962:	9302      	str	r3, [sp, #8]
 8009964:	4b80      	ldr	r3, [pc, #512]	; (8009b68 <pow+0x2c0>)
 8009966:	9303      	str	r3, [sp, #12]
 8009968:	9b01      	ldr	r3, [sp, #4]
 800996a:	930a      	str	r3, [sp, #40]	; 0x28
 800996c:	9b00      	ldr	r3, [sp, #0]
 800996e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009972:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009976:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0d5      	beq.n	800992a <pow+0x82>
 800997e:	4b7b      	ldr	r3, [pc, #492]	; (8009b6c <pow+0x2c4>)
 8009980:	2200      	movs	r2, #0
 8009982:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009988:	b11b      	cbz	r3, 8009992 <pow+0xea>
 800998a:	f7fe fe6f 	bl	800866c <__errno>
 800998e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009990:	6003      	str	r3, [r0, #0]
 8009992:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009996:	eeb0 0a48 	vmov.f32	s0, s16
 800999a:	eef0 0a68 	vmov.f32	s1, s17
 800999e:	b00d      	add	sp, #52	; 0x34
 80099a0:	ecbd 8b04 	vpop	{d8-d9}
 80099a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a8:	ec45 4b10 	vmov	d0, r4, r5
 80099ac:	f000 ff0f 	bl	800a7ce <finite>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d0f0      	beq.n	8009996 <pow+0xee>
 80099b4:	4652      	mov	r2, sl
 80099b6:	465b      	mov	r3, fp
 80099b8:	4620      	mov	r0, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	f7f7 f8be 	bl	8000b3c <__aeabi_dcmplt>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d0e8      	beq.n	8009996 <pow+0xee>
 80099c4:	2301      	movs	r3, #1
 80099c6:	9302      	str	r3, [sp, #8]
 80099c8:	4b67      	ldr	r3, [pc, #412]	; (8009b68 <pow+0x2c0>)
 80099ca:	9303      	str	r3, [sp, #12]
 80099cc:	f999 3000 	ldrsb.w	r3, [r9]
 80099d0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80099d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80099d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80099dc:	b913      	cbnz	r3, 80099e4 <pow+0x13c>
 80099de:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80099e2:	e7a2      	b.n	800992a <pow+0x82>
 80099e4:	4962      	ldr	r1, [pc, #392]	; (8009b70 <pow+0x2c8>)
 80099e6:	2000      	movs	r0, #0
 80099e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d19c      	bne.n	800992a <pow+0x82>
 80099f0:	f7fe fe3c 	bl	800866c <__errno>
 80099f4:	2321      	movs	r3, #33	; 0x21
 80099f6:	6003      	str	r3, [r0, #0]
 80099f8:	e7c5      	b.n	8009986 <pow+0xde>
 80099fa:	eeb0 0a48 	vmov.f32	s0, s16
 80099fe:	eef0 0a68 	vmov.f32	s1, s17
 8009a02:	f000 fee4 	bl	800a7ce <finite>
 8009a06:	9000      	str	r0, [sp, #0]
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	f040 8081 	bne.w	8009b10 <pow+0x268>
 8009a0e:	ec47 6b10 	vmov	d0, r6, r7
 8009a12:	f000 fedc 	bl	800a7ce <finite>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d07a      	beq.n	8009b10 <pow+0x268>
 8009a1a:	ec45 4b10 	vmov	d0, r4, r5
 8009a1e:	f000 fed6 	bl	800a7ce <finite>
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d074      	beq.n	8009b10 <pow+0x268>
 8009a26:	ec53 2b18 	vmov	r2, r3, d8
 8009a2a:	ee18 0a10 	vmov	r0, s16
 8009a2e:	4619      	mov	r1, r3
 8009a30:	f7f7 f8ac 	bl	8000b8c <__aeabi_dcmpun>
 8009a34:	f999 9000 	ldrsb.w	r9, [r9]
 8009a38:	4b4b      	ldr	r3, [pc, #300]	; (8009b68 <pow+0x2c0>)
 8009a3a:	b1b0      	cbz	r0, 8009a6a <pow+0x1c2>
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a42:	9b00      	ldr	r3, [sp, #0]
 8009a44:	930a      	str	r3, [sp, #40]	; 0x28
 8009a46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009a4a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009a4e:	f1b9 0f00 	cmp.w	r9, #0
 8009a52:	d0c4      	beq.n	80099de <pow+0x136>
 8009a54:	4652      	mov	r2, sl
 8009a56:	465b      	mov	r3, fp
 8009a58:	4650      	mov	r0, sl
 8009a5a:	4659      	mov	r1, fp
 8009a5c:	f7f6 ff26 	bl	80008ac <__aeabi_ddiv>
 8009a60:	f1b9 0f02 	cmp.w	r9, #2
 8009a64:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a68:	e7c1      	b.n	80099ee <pow+0x146>
 8009a6a:	2203      	movs	r2, #3
 8009a6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a70:	900a      	str	r0, [sp, #40]	; 0x28
 8009a72:	4629      	mov	r1, r5
 8009a74:	4620      	mov	r0, r4
 8009a76:	2200      	movs	r2, #0
 8009a78:	4b3e      	ldr	r3, [pc, #248]	; (8009b74 <pow+0x2cc>)
 8009a7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009a7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009a82:	f7f6 fde9 	bl	8000658 <__aeabi_dmul>
 8009a86:	4604      	mov	r4, r0
 8009a88:	460d      	mov	r5, r1
 8009a8a:	f1b9 0f00 	cmp.w	r9, #0
 8009a8e:	d124      	bne.n	8009ada <pow+0x232>
 8009a90:	4b39      	ldr	r3, [pc, #228]	; (8009b78 <pow+0x2d0>)
 8009a92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009a96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	4652      	mov	r2, sl
 8009a9e:	465b      	mov	r3, fp
 8009aa0:	4639      	mov	r1, r7
 8009aa2:	f7f7 f84b 	bl	8000b3c <__aeabi_dcmplt>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	d056      	beq.n	8009b58 <pow+0x2b0>
 8009aaa:	ec45 4b10 	vmov	d0, r4, r5
 8009aae:	f000 fea3 	bl	800a7f8 <rint>
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	462b      	mov	r3, r5
 8009ab6:	ec51 0b10 	vmov	r0, r1, d0
 8009aba:	f7f7 f835 	bl	8000b28 <__aeabi_dcmpeq>
 8009abe:	b920      	cbnz	r0, 8009aca <pow+0x222>
 8009ac0:	4b2e      	ldr	r3, [pc, #184]	; (8009b7c <pow+0x2d4>)
 8009ac2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009ac6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009aca:	f998 3000 	ldrsb.w	r3, [r8]
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d142      	bne.n	8009b58 <pow+0x2b0>
 8009ad2:	f7fe fdcb 	bl	800866c <__errno>
 8009ad6:	2322      	movs	r3, #34	; 0x22
 8009ad8:	e78d      	b.n	80099f6 <pow+0x14e>
 8009ada:	4b29      	ldr	r3, [pc, #164]	; (8009b80 <pow+0x2d8>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	4652      	mov	r2, sl
 8009ae6:	465b      	mov	r3, fp
 8009ae8:	4639      	mov	r1, r7
 8009aea:	f7f7 f827 	bl	8000b3c <__aeabi_dcmplt>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d0eb      	beq.n	8009aca <pow+0x222>
 8009af2:	ec45 4b10 	vmov	d0, r4, r5
 8009af6:	f000 fe7f 	bl	800a7f8 <rint>
 8009afa:	4622      	mov	r2, r4
 8009afc:	462b      	mov	r3, r5
 8009afe:	ec51 0b10 	vmov	r0, r1, d0
 8009b02:	f7f7 f811 	bl	8000b28 <__aeabi_dcmpeq>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d1df      	bne.n	8009aca <pow+0x222>
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	4b18      	ldr	r3, [pc, #96]	; (8009b70 <pow+0x2c8>)
 8009b0e:	e7da      	b.n	8009ac6 <pow+0x21e>
 8009b10:	2200      	movs	r2, #0
 8009b12:	2300      	movs	r3, #0
 8009b14:	ec51 0b18 	vmov	r0, r1, d8
 8009b18:	f7f7 f806 	bl	8000b28 <__aeabi_dcmpeq>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f43f af3a 	beq.w	8009996 <pow+0xee>
 8009b22:	ec47 6b10 	vmov	d0, r6, r7
 8009b26:	f000 fe52 	bl	800a7ce <finite>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	f43f af33 	beq.w	8009996 <pow+0xee>
 8009b30:	ec45 4b10 	vmov	d0, r4, r5
 8009b34:	f000 fe4b 	bl	800a7ce <finite>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	f43f af2c 	beq.w	8009996 <pow+0xee>
 8009b3e:	2304      	movs	r3, #4
 8009b40:	9302      	str	r3, [sp, #8]
 8009b42:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <pow+0x2c0>)
 8009b44:	9303      	str	r3, [sp, #12]
 8009b46:	2300      	movs	r3, #0
 8009b48:	930a      	str	r3, [sp, #40]	; 0x28
 8009b4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009b4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009b52:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009b56:	e7b8      	b.n	8009aca <pow+0x222>
 8009b58:	a802      	add	r0, sp, #8
 8009b5a:	f000 fe40 	bl	800a7de <matherr>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	f47f af11 	bne.w	8009986 <pow+0xde>
 8009b64:	e7b5      	b.n	8009ad2 <pow+0x22a>
 8009b66:	bf00      	nop
 8009b68:	0800ac8f 	.word	0x0800ac8f
 8009b6c:	3ff00000 	.word	0x3ff00000
 8009b70:	fff00000 	.word	0xfff00000
 8009b74:	3fe00000 	.word	0x3fe00000
 8009b78:	47efffff 	.word	0x47efffff
 8009b7c:	c7efffff 	.word	0xc7efffff
 8009b80:	7ff00000 	.word	0x7ff00000
 8009b84:	200002c8 	.word	0x200002c8

08009b88 <sqrt>:
 8009b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b8c:	ed2d 8b02 	vpush	{d8}
 8009b90:	b08b      	sub	sp, #44	; 0x2c
 8009b92:	ec55 4b10 	vmov	r4, r5, d0
 8009b96:	f000 fd61 	bl	800a65c <__ieee754_sqrt>
 8009b9a:	4b26      	ldr	r3, [pc, #152]	; (8009c34 <sqrt+0xac>)
 8009b9c:	eeb0 8a40 	vmov.f32	s16, s0
 8009ba0:	eef0 8a60 	vmov.f32	s17, s1
 8009ba4:	f993 6000 	ldrsb.w	r6, [r3]
 8009ba8:	1c73      	adds	r3, r6, #1
 8009baa:	d02a      	beq.n	8009c02 <sqrt+0x7a>
 8009bac:	4622      	mov	r2, r4
 8009bae:	462b      	mov	r3, r5
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	f7f6 ffea 	bl	8000b8c <__aeabi_dcmpun>
 8009bb8:	4607      	mov	r7, r0
 8009bba:	bb10      	cbnz	r0, 8009c02 <sqrt+0x7a>
 8009bbc:	f04f 0800 	mov.w	r8, #0
 8009bc0:	f04f 0900 	mov.w	r9, #0
 8009bc4:	4642      	mov	r2, r8
 8009bc6:	464b      	mov	r3, r9
 8009bc8:	4620      	mov	r0, r4
 8009bca:	4629      	mov	r1, r5
 8009bcc:	f7f6 ffb6 	bl	8000b3c <__aeabi_dcmplt>
 8009bd0:	b1b8      	cbz	r0, 8009c02 <sqrt+0x7a>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	4b18      	ldr	r3, [pc, #96]	; (8009c38 <sqrt+0xb0>)
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	9708      	str	r7, [sp, #32]
 8009bdc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009be0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009be4:	b9b6      	cbnz	r6, 8009c14 <sqrt+0x8c>
 8009be6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009bea:	4668      	mov	r0, sp
 8009bec:	f000 fdf7 	bl	800a7de <matherr>
 8009bf0:	b1d0      	cbz	r0, 8009c28 <sqrt+0xa0>
 8009bf2:	9b08      	ldr	r3, [sp, #32]
 8009bf4:	b11b      	cbz	r3, 8009bfe <sqrt+0x76>
 8009bf6:	f7fe fd39 	bl	800866c <__errno>
 8009bfa:	9b08      	ldr	r3, [sp, #32]
 8009bfc:	6003      	str	r3, [r0, #0]
 8009bfe:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009c02:	eeb0 0a48 	vmov.f32	s0, s16
 8009c06:	eef0 0a68 	vmov.f32	s1, s17
 8009c0a:	b00b      	add	sp, #44	; 0x2c
 8009c0c:	ecbd 8b02 	vpop	{d8}
 8009c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c14:	4642      	mov	r2, r8
 8009c16:	464b      	mov	r3, r9
 8009c18:	4640      	mov	r0, r8
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f6 fe46 	bl	80008ac <__aeabi_ddiv>
 8009c20:	2e02      	cmp	r6, #2
 8009c22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c26:	d1e0      	bne.n	8009bea <sqrt+0x62>
 8009c28:	f7fe fd20 	bl	800866c <__errno>
 8009c2c:	2321      	movs	r3, #33	; 0x21
 8009c2e:	6003      	str	r3, [r0, #0]
 8009c30:	e7df      	b.n	8009bf2 <sqrt+0x6a>
 8009c32:	bf00      	nop
 8009c34:	200002c8 	.word	0x200002c8
 8009c38:	0800ac93 	.word	0x0800ac93
 8009c3c:	00000000 	.word	0x00000000

08009c40 <__ieee754_pow>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	b091      	sub	sp, #68	; 0x44
 8009c46:	ed8d 1b00 	vstr	d1, [sp]
 8009c4a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009c4e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009c52:	ea58 0302 	orrs.w	r3, r8, r2
 8009c56:	ec57 6b10 	vmov	r6, r7, d0
 8009c5a:	f000 84be 	beq.w	800a5da <__ieee754_pow+0x99a>
 8009c5e:	4b7a      	ldr	r3, [pc, #488]	; (8009e48 <__ieee754_pow+0x208>)
 8009c60:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009c64:	429c      	cmp	r4, r3
 8009c66:	463d      	mov	r5, r7
 8009c68:	ee10 aa10 	vmov	sl, s0
 8009c6c:	dc09      	bgt.n	8009c82 <__ieee754_pow+0x42>
 8009c6e:	d103      	bne.n	8009c78 <__ieee754_pow+0x38>
 8009c70:	b93e      	cbnz	r6, 8009c82 <__ieee754_pow+0x42>
 8009c72:	45a0      	cmp	r8, r4
 8009c74:	dc0d      	bgt.n	8009c92 <__ieee754_pow+0x52>
 8009c76:	e001      	b.n	8009c7c <__ieee754_pow+0x3c>
 8009c78:	4598      	cmp	r8, r3
 8009c7a:	dc02      	bgt.n	8009c82 <__ieee754_pow+0x42>
 8009c7c:	4598      	cmp	r8, r3
 8009c7e:	d10e      	bne.n	8009c9e <__ieee754_pow+0x5e>
 8009c80:	b16a      	cbz	r2, 8009c9e <__ieee754_pow+0x5e>
 8009c82:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c8a:	ea54 030a 	orrs.w	r3, r4, sl
 8009c8e:	f000 84a4 	beq.w	800a5da <__ieee754_pow+0x99a>
 8009c92:	486e      	ldr	r0, [pc, #440]	; (8009e4c <__ieee754_pow+0x20c>)
 8009c94:	b011      	add	sp, #68	; 0x44
 8009c96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	f000 bda5 	b.w	800a7e8 <nan>
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	da53      	bge.n	8009d4a <__ieee754_pow+0x10a>
 8009ca2:	4b6b      	ldr	r3, [pc, #428]	; (8009e50 <__ieee754_pow+0x210>)
 8009ca4:	4598      	cmp	r8, r3
 8009ca6:	dc4d      	bgt.n	8009d44 <__ieee754_pow+0x104>
 8009ca8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009cac:	4598      	cmp	r8, r3
 8009cae:	dd4c      	ble.n	8009d4a <__ieee754_pow+0x10a>
 8009cb0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009cb4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009cb8:	2b14      	cmp	r3, #20
 8009cba:	dd26      	ble.n	8009d0a <__ieee754_pow+0xca>
 8009cbc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009cc0:	fa22 f103 	lsr.w	r1, r2, r3
 8009cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d13e      	bne.n	8009d4a <__ieee754_pow+0x10a>
 8009ccc:	f001 0101 	and.w	r1, r1, #1
 8009cd0:	f1c1 0b02 	rsb	fp, r1, #2
 8009cd4:	2a00      	cmp	r2, #0
 8009cd6:	d15b      	bne.n	8009d90 <__ieee754_pow+0x150>
 8009cd8:	4b5b      	ldr	r3, [pc, #364]	; (8009e48 <__ieee754_pow+0x208>)
 8009cda:	4598      	cmp	r8, r3
 8009cdc:	d124      	bne.n	8009d28 <__ieee754_pow+0xe8>
 8009cde:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009ce2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009ce6:	ea53 030a 	orrs.w	r3, r3, sl
 8009cea:	f000 8476 	beq.w	800a5da <__ieee754_pow+0x99a>
 8009cee:	4b59      	ldr	r3, [pc, #356]	; (8009e54 <__ieee754_pow+0x214>)
 8009cf0:	429c      	cmp	r4, r3
 8009cf2:	dd2d      	ble.n	8009d50 <__ieee754_pow+0x110>
 8009cf4:	f1b9 0f00 	cmp.w	r9, #0
 8009cf8:	f280 8473 	bge.w	800a5e2 <__ieee754_pow+0x9a2>
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	2100      	movs	r1, #0
 8009d00:	ec41 0b10 	vmov	d0, r0, r1
 8009d04:	b011      	add	sp, #68	; 0x44
 8009d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0a:	2a00      	cmp	r2, #0
 8009d0c:	d13e      	bne.n	8009d8c <__ieee754_pow+0x14c>
 8009d0e:	f1c3 0314 	rsb	r3, r3, #20
 8009d12:	fa48 f103 	asr.w	r1, r8, r3
 8009d16:	fa01 f303 	lsl.w	r3, r1, r3
 8009d1a:	4543      	cmp	r3, r8
 8009d1c:	f040 8469 	bne.w	800a5f2 <__ieee754_pow+0x9b2>
 8009d20:	f001 0101 	and.w	r1, r1, #1
 8009d24:	f1c1 0b02 	rsb	fp, r1, #2
 8009d28:	4b4b      	ldr	r3, [pc, #300]	; (8009e58 <__ieee754_pow+0x218>)
 8009d2a:	4598      	cmp	r8, r3
 8009d2c:	d118      	bne.n	8009d60 <__ieee754_pow+0x120>
 8009d2e:	f1b9 0f00 	cmp.w	r9, #0
 8009d32:	f280 845a 	bge.w	800a5ea <__ieee754_pow+0x9aa>
 8009d36:	4948      	ldr	r1, [pc, #288]	; (8009e58 <__ieee754_pow+0x218>)
 8009d38:	4632      	mov	r2, r6
 8009d3a:	463b      	mov	r3, r7
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	f7f6 fdb5 	bl	80008ac <__aeabi_ddiv>
 8009d42:	e7dd      	b.n	8009d00 <__ieee754_pow+0xc0>
 8009d44:	f04f 0b02 	mov.w	fp, #2
 8009d48:	e7c4      	b.n	8009cd4 <__ieee754_pow+0x94>
 8009d4a:	f04f 0b00 	mov.w	fp, #0
 8009d4e:	e7c1      	b.n	8009cd4 <__ieee754_pow+0x94>
 8009d50:	f1b9 0f00 	cmp.w	r9, #0
 8009d54:	dad2      	bge.n	8009cfc <__ieee754_pow+0xbc>
 8009d56:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009d5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d5e:	e7cf      	b.n	8009d00 <__ieee754_pow+0xc0>
 8009d60:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009d64:	d106      	bne.n	8009d74 <__ieee754_pow+0x134>
 8009d66:	4632      	mov	r2, r6
 8009d68:	463b      	mov	r3, r7
 8009d6a:	4610      	mov	r0, r2
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	f7f6 fc73 	bl	8000658 <__aeabi_dmul>
 8009d72:	e7c5      	b.n	8009d00 <__ieee754_pow+0xc0>
 8009d74:	4b39      	ldr	r3, [pc, #228]	; (8009e5c <__ieee754_pow+0x21c>)
 8009d76:	4599      	cmp	r9, r3
 8009d78:	d10a      	bne.n	8009d90 <__ieee754_pow+0x150>
 8009d7a:	2d00      	cmp	r5, #0
 8009d7c:	db08      	blt.n	8009d90 <__ieee754_pow+0x150>
 8009d7e:	ec47 6b10 	vmov	d0, r6, r7
 8009d82:	b011      	add	sp, #68	; 0x44
 8009d84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	f000 bc68 	b.w	800a65c <__ieee754_sqrt>
 8009d8c:	f04f 0b00 	mov.w	fp, #0
 8009d90:	ec47 6b10 	vmov	d0, r6, r7
 8009d94:	f000 fd12 	bl	800a7bc <fabs>
 8009d98:	ec51 0b10 	vmov	r0, r1, d0
 8009d9c:	f1ba 0f00 	cmp.w	sl, #0
 8009da0:	d127      	bne.n	8009df2 <__ieee754_pow+0x1b2>
 8009da2:	b124      	cbz	r4, 8009dae <__ieee754_pow+0x16e>
 8009da4:	4b2c      	ldr	r3, [pc, #176]	; (8009e58 <__ieee754_pow+0x218>)
 8009da6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d121      	bne.n	8009df2 <__ieee754_pow+0x1b2>
 8009dae:	f1b9 0f00 	cmp.w	r9, #0
 8009db2:	da05      	bge.n	8009dc0 <__ieee754_pow+0x180>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	2000      	movs	r0, #0
 8009dba:	4927      	ldr	r1, [pc, #156]	; (8009e58 <__ieee754_pow+0x218>)
 8009dbc:	f7f6 fd76 	bl	80008ac <__aeabi_ddiv>
 8009dc0:	2d00      	cmp	r5, #0
 8009dc2:	da9d      	bge.n	8009d00 <__ieee754_pow+0xc0>
 8009dc4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009dc8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009dcc:	ea54 030b 	orrs.w	r3, r4, fp
 8009dd0:	d108      	bne.n	8009de4 <__ieee754_pow+0x1a4>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	4619      	mov	r1, r3
 8009dda:	f7f6 fa85 	bl	80002e8 <__aeabi_dsub>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	e7ac      	b.n	8009d3e <__ieee754_pow+0xfe>
 8009de4:	f1bb 0f01 	cmp.w	fp, #1
 8009de8:	d18a      	bne.n	8009d00 <__ieee754_pow+0xc0>
 8009dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dee:	4619      	mov	r1, r3
 8009df0:	e786      	b.n	8009d00 <__ieee754_pow+0xc0>
 8009df2:	0fed      	lsrs	r5, r5, #31
 8009df4:	1e6b      	subs	r3, r5, #1
 8009df6:	930d      	str	r3, [sp, #52]	; 0x34
 8009df8:	ea5b 0303 	orrs.w	r3, fp, r3
 8009dfc:	d102      	bne.n	8009e04 <__ieee754_pow+0x1c4>
 8009dfe:	4632      	mov	r2, r6
 8009e00:	463b      	mov	r3, r7
 8009e02:	e7e8      	b.n	8009dd6 <__ieee754_pow+0x196>
 8009e04:	4b16      	ldr	r3, [pc, #88]	; (8009e60 <__ieee754_pow+0x220>)
 8009e06:	4598      	cmp	r8, r3
 8009e08:	f340 80fe 	ble.w	800a008 <__ieee754_pow+0x3c8>
 8009e0c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009e10:	4598      	cmp	r8, r3
 8009e12:	dd0a      	ble.n	8009e2a <__ieee754_pow+0x1ea>
 8009e14:	4b0f      	ldr	r3, [pc, #60]	; (8009e54 <__ieee754_pow+0x214>)
 8009e16:	429c      	cmp	r4, r3
 8009e18:	dc0d      	bgt.n	8009e36 <__ieee754_pow+0x1f6>
 8009e1a:	f1b9 0f00 	cmp.w	r9, #0
 8009e1e:	f6bf af6d 	bge.w	8009cfc <__ieee754_pow+0xbc>
 8009e22:	a307      	add	r3, pc, #28	; (adr r3, 8009e40 <__ieee754_pow+0x200>)
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	e79f      	b.n	8009d6a <__ieee754_pow+0x12a>
 8009e2a:	4b0e      	ldr	r3, [pc, #56]	; (8009e64 <__ieee754_pow+0x224>)
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	ddf4      	ble.n	8009e1a <__ieee754_pow+0x1da>
 8009e30:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <__ieee754_pow+0x218>)
 8009e32:	429c      	cmp	r4, r3
 8009e34:	dd18      	ble.n	8009e68 <__ieee754_pow+0x228>
 8009e36:	f1b9 0f00 	cmp.w	r9, #0
 8009e3a:	dcf2      	bgt.n	8009e22 <__ieee754_pow+0x1e2>
 8009e3c:	e75e      	b.n	8009cfc <__ieee754_pow+0xbc>
 8009e3e:	bf00      	nop
 8009e40:	8800759c 	.word	0x8800759c
 8009e44:	7e37e43c 	.word	0x7e37e43c
 8009e48:	7ff00000 	.word	0x7ff00000
 8009e4c:	0800aad9 	.word	0x0800aad9
 8009e50:	433fffff 	.word	0x433fffff
 8009e54:	3fefffff 	.word	0x3fefffff
 8009e58:	3ff00000 	.word	0x3ff00000
 8009e5c:	3fe00000 	.word	0x3fe00000
 8009e60:	41e00000 	.word	0x41e00000
 8009e64:	3feffffe 	.word	0x3feffffe
 8009e68:	2200      	movs	r2, #0
 8009e6a:	4b63      	ldr	r3, [pc, #396]	; (8009ff8 <__ieee754_pow+0x3b8>)
 8009e6c:	f7f6 fa3c 	bl	80002e8 <__aeabi_dsub>
 8009e70:	a355      	add	r3, pc, #340	; (adr r3, 8009fc8 <__ieee754_pow+0x388>)
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	4604      	mov	r4, r0
 8009e78:	460d      	mov	r5, r1
 8009e7a:	f7f6 fbed 	bl	8000658 <__aeabi_dmul>
 8009e7e:	a354      	add	r3, pc, #336	; (adr r3, 8009fd0 <__ieee754_pow+0x390>)
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	4606      	mov	r6, r0
 8009e86:	460f      	mov	r7, r1
 8009e88:	4620      	mov	r0, r4
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	f7f6 fbe4 	bl	8000658 <__aeabi_dmul>
 8009e90:	2200      	movs	r2, #0
 8009e92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e96:	4b59      	ldr	r3, [pc, #356]	; (8009ffc <__ieee754_pow+0x3bc>)
 8009e98:	4620      	mov	r0, r4
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	f7f6 fbdc 	bl	8000658 <__aeabi_dmul>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	a14c      	add	r1, pc, #304	; (adr r1, 8009fd8 <__ieee754_pow+0x398>)
 8009ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eaa:	f7f6 fa1d 	bl	80002e8 <__aeabi_dsub>
 8009eae:	4622      	mov	r2, r4
 8009eb0:	462b      	mov	r3, r5
 8009eb2:	f7f6 fbd1 	bl	8000658 <__aeabi_dmul>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	460b      	mov	r3, r1
 8009eba:	2000      	movs	r0, #0
 8009ebc:	4950      	ldr	r1, [pc, #320]	; (800a000 <__ieee754_pow+0x3c0>)
 8009ebe:	f7f6 fa13 	bl	80002e8 <__aeabi_dsub>
 8009ec2:	4622      	mov	r2, r4
 8009ec4:	462b      	mov	r3, r5
 8009ec6:	4680      	mov	r8, r0
 8009ec8:	4689      	mov	r9, r1
 8009eca:	4620      	mov	r0, r4
 8009ecc:	4629      	mov	r1, r5
 8009ece:	f7f6 fbc3 	bl	8000658 <__aeabi_dmul>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	4649      	mov	r1, r9
 8009eda:	f7f6 fbbd 	bl	8000658 <__aeabi_dmul>
 8009ede:	a340      	add	r3, pc, #256	; (adr r3, 8009fe0 <__ieee754_pow+0x3a0>)
 8009ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee4:	f7f6 fbb8 	bl	8000658 <__aeabi_dmul>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ef0:	f7f6 f9fa 	bl	80002e8 <__aeabi_dsub>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4604      	mov	r4, r0
 8009efa:	460d      	mov	r5, r1
 8009efc:	4630      	mov	r0, r6
 8009efe:	4639      	mov	r1, r7
 8009f00:	f7f6 f9f4 	bl	80002ec <__adddf3>
 8009f04:	2000      	movs	r0, #0
 8009f06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f0a:	4632      	mov	r2, r6
 8009f0c:	463b      	mov	r3, r7
 8009f0e:	f7f6 f9eb 	bl	80002e8 <__aeabi_dsub>
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	4620      	mov	r0, r4
 8009f18:	4629      	mov	r1, r5
 8009f1a:	f7f6 f9e5 	bl	80002e8 <__aeabi_dsub>
 8009f1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f20:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009f24:	4313      	orrs	r3, r2
 8009f26:	4606      	mov	r6, r0
 8009f28:	460f      	mov	r7, r1
 8009f2a:	f040 81eb 	bne.w	800a304 <__ieee754_pow+0x6c4>
 8009f2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009fe8 <__ieee754_pow+0x3a8>
 8009f32:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009f36:	2400      	movs	r4, #0
 8009f38:	4622      	mov	r2, r4
 8009f3a:	462b      	mov	r3, r5
 8009f3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f44:	f7f6 f9d0 	bl	80002e8 <__aeabi_dsub>
 8009f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f4c:	f7f6 fb84 	bl	8000658 <__aeabi_dmul>
 8009f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f54:	4680      	mov	r8, r0
 8009f56:	4689      	mov	r9, r1
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 fb7c 	bl	8000658 <__aeabi_dmul>
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	4640      	mov	r0, r8
 8009f66:	4649      	mov	r1, r9
 8009f68:	f7f6 f9c0 	bl	80002ec <__adddf3>
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	462b      	mov	r3, r5
 8009f70:	4680      	mov	r8, r0
 8009f72:	4689      	mov	r9, r1
 8009f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f78:	f7f6 fb6e 	bl	8000658 <__aeabi_dmul>
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4604      	mov	r4, r0
 8009f80:	460d      	mov	r5, r1
 8009f82:	4602      	mov	r2, r0
 8009f84:	4649      	mov	r1, r9
 8009f86:	4640      	mov	r0, r8
 8009f88:	e9cd 4500 	strd	r4, r5, [sp]
 8009f8c:	f7f6 f9ae 	bl	80002ec <__adddf3>
 8009f90:	4b1c      	ldr	r3, [pc, #112]	; (800a004 <__ieee754_pow+0x3c4>)
 8009f92:	4299      	cmp	r1, r3
 8009f94:	4606      	mov	r6, r0
 8009f96:	460f      	mov	r7, r1
 8009f98:	468b      	mov	fp, r1
 8009f9a:	f340 82f7 	ble.w	800a58c <__ieee754_pow+0x94c>
 8009f9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009fa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009fa6:	4303      	orrs	r3, r0
 8009fa8:	f000 81ea 	beq.w	800a380 <__ieee754_pow+0x740>
 8009fac:	a310      	add	r3, pc, #64	; (adr r3, 8009ff0 <__ieee754_pow+0x3b0>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fb6:	f7f6 fb4f 	bl	8000658 <__aeabi_dmul>
 8009fba:	a30d      	add	r3, pc, #52	; (adr r3, 8009ff0 <__ieee754_pow+0x3b0>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	e6d5      	b.n	8009d6e <__ieee754_pow+0x12e>
 8009fc2:	bf00      	nop
 8009fc4:	f3af 8000 	nop.w
 8009fc8:	60000000 	.word	0x60000000
 8009fcc:	3ff71547 	.word	0x3ff71547
 8009fd0:	f85ddf44 	.word	0xf85ddf44
 8009fd4:	3e54ae0b 	.word	0x3e54ae0b
 8009fd8:	55555555 	.word	0x55555555
 8009fdc:	3fd55555 	.word	0x3fd55555
 8009fe0:	652b82fe 	.word	0x652b82fe
 8009fe4:	3ff71547 	.word	0x3ff71547
 8009fe8:	00000000 	.word	0x00000000
 8009fec:	bff00000 	.word	0xbff00000
 8009ff0:	8800759c 	.word	0x8800759c
 8009ff4:	7e37e43c 	.word	0x7e37e43c
 8009ff8:	3ff00000 	.word	0x3ff00000
 8009ffc:	3fd00000 	.word	0x3fd00000
 800a000:	3fe00000 	.word	0x3fe00000
 800a004:	408fffff 	.word	0x408fffff
 800a008:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a00c:	f04f 0200 	mov.w	r2, #0
 800a010:	da05      	bge.n	800a01e <__ieee754_pow+0x3de>
 800a012:	4bd3      	ldr	r3, [pc, #844]	; (800a360 <__ieee754_pow+0x720>)
 800a014:	f7f6 fb20 	bl	8000658 <__aeabi_dmul>
 800a018:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a01c:	460c      	mov	r4, r1
 800a01e:	1523      	asrs	r3, r4, #20
 800a020:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a024:	4413      	add	r3, r2
 800a026:	9309      	str	r3, [sp, #36]	; 0x24
 800a028:	4bce      	ldr	r3, [pc, #824]	; (800a364 <__ieee754_pow+0x724>)
 800a02a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a02e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a032:	429c      	cmp	r4, r3
 800a034:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a038:	dd08      	ble.n	800a04c <__ieee754_pow+0x40c>
 800a03a:	4bcb      	ldr	r3, [pc, #812]	; (800a368 <__ieee754_pow+0x728>)
 800a03c:	429c      	cmp	r4, r3
 800a03e:	f340 815e 	ble.w	800a2fe <__ieee754_pow+0x6be>
 800a042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a044:	3301      	adds	r3, #1
 800a046:	9309      	str	r3, [sp, #36]	; 0x24
 800a048:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a04c:	f04f 0a00 	mov.w	sl, #0
 800a050:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a054:	930c      	str	r3, [sp, #48]	; 0x30
 800a056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a058:	4bc4      	ldr	r3, [pc, #784]	; (800a36c <__ieee754_pow+0x72c>)
 800a05a:	4413      	add	r3, r2
 800a05c:	ed93 7b00 	vldr	d7, [r3]
 800a060:	4629      	mov	r1, r5
 800a062:	ec53 2b17 	vmov	r2, r3, d7
 800a066:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a06a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a06e:	f7f6 f93b 	bl	80002e8 <__aeabi_dsub>
 800a072:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a076:	4606      	mov	r6, r0
 800a078:	460f      	mov	r7, r1
 800a07a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a07e:	f7f6 f935 	bl	80002ec <__adddf3>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	2000      	movs	r0, #0
 800a088:	49b9      	ldr	r1, [pc, #740]	; (800a370 <__ieee754_pow+0x730>)
 800a08a:	f7f6 fc0f 	bl	80008ac <__aeabi_ddiv>
 800a08e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	4630      	mov	r0, r6
 800a098:	4639      	mov	r1, r7
 800a09a:	f7f6 fadd 	bl	8000658 <__aeabi_dmul>
 800a09e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0a2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a0a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a0b2:	106d      	asrs	r5, r5, #1
 800a0b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a0b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a0bc:	2200      	movs	r2, #0
 800a0be:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	4614      	mov	r4, r2
 800a0c8:	461d      	mov	r5, r3
 800a0ca:	f7f6 fac5 	bl	8000658 <__aeabi_dmul>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	f7f6 f907 	bl	80002e8 <__aeabi_dsub>
 800a0da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0de:	4606      	mov	r6, r0
 800a0e0:	460f      	mov	r7, r1
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	f7f6 f8ff 	bl	80002e8 <__aeabi_dsub>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0f2:	f7f6 f8f9 	bl	80002e8 <__aeabi_dsub>
 800a0f6:	4642      	mov	r2, r8
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	f7f6 faad 	bl	8000658 <__aeabi_dmul>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4630      	mov	r0, r6
 800a104:	4639      	mov	r1, r7
 800a106:	f7f6 f8ef 	bl	80002e8 <__aeabi_dsub>
 800a10a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a10e:	f7f6 faa3 	bl	8000658 <__aeabi_dmul>
 800a112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a116:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a11a:	4610      	mov	r0, r2
 800a11c:	4619      	mov	r1, r3
 800a11e:	f7f6 fa9b 	bl	8000658 <__aeabi_dmul>
 800a122:	a37b      	add	r3, pc, #492	; (adr r3, 800a310 <__ieee754_pow+0x6d0>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	4604      	mov	r4, r0
 800a12a:	460d      	mov	r5, r1
 800a12c:	f7f6 fa94 	bl	8000658 <__aeabi_dmul>
 800a130:	a379      	add	r3, pc, #484	; (adr r3, 800a318 <__ieee754_pow+0x6d8>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f7f6 f8d9 	bl	80002ec <__adddf3>
 800a13a:	4622      	mov	r2, r4
 800a13c:	462b      	mov	r3, r5
 800a13e:	f7f6 fa8b 	bl	8000658 <__aeabi_dmul>
 800a142:	a377      	add	r3, pc, #476	; (adr r3, 800a320 <__ieee754_pow+0x6e0>)
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	f7f6 f8d0 	bl	80002ec <__adddf3>
 800a14c:	4622      	mov	r2, r4
 800a14e:	462b      	mov	r3, r5
 800a150:	f7f6 fa82 	bl	8000658 <__aeabi_dmul>
 800a154:	a374      	add	r3, pc, #464	; (adr r3, 800a328 <__ieee754_pow+0x6e8>)
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	f7f6 f8c7 	bl	80002ec <__adddf3>
 800a15e:	4622      	mov	r2, r4
 800a160:	462b      	mov	r3, r5
 800a162:	f7f6 fa79 	bl	8000658 <__aeabi_dmul>
 800a166:	a372      	add	r3, pc, #456	; (adr r3, 800a330 <__ieee754_pow+0x6f0>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	f7f6 f8be 	bl	80002ec <__adddf3>
 800a170:	4622      	mov	r2, r4
 800a172:	462b      	mov	r3, r5
 800a174:	f7f6 fa70 	bl	8000658 <__aeabi_dmul>
 800a178:	a36f      	add	r3, pc, #444	; (adr r3, 800a338 <__ieee754_pow+0x6f8>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 f8b5 	bl	80002ec <__adddf3>
 800a182:	4622      	mov	r2, r4
 800a184:	4606      	mov	r6, r0
 800a186:	460f      	mov	r7, r1
 800a188:	462b      	mov	r3, r5
 800a18a:	4620      	mov	r0, r4
 800a18c:	4629      	mov	r1, r5
 800a18e:	f7f6 fa63 	bl	8000658 <__aeabi_dmul>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4630      	mov	r0, r6
 800a198:	4639      	mov	r1, r7
 800a19a:	f7f6 fa5d 	bl	8000658 <__aeabi_dmul>
 800a19e:	4642      	mov	r2, r8
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	460d      	mov	r5, r1
 800a1a4:	464b      	mov	r3, r9
 800a1a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1aa:	f7f6 f89f 	bl	80002ec <__adddf3>
 800a1ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1b2:	f7f6 fa51 	bl	8000658 <__aeabi_dmul>
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	462b      	mov	r3, r5
 800a1ba:	f7f6 f897 	bl	80002ec <__adddf3>
 800a1be:	4642      	mov	r2, r8
 800a1c0:	4606      	mov	r6, r0
 800a1c2:	460f      	mov	r7, r1
 800a1c4:	464b      	mov	r3, r9
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	f7f6 fa45 	bl	8000658 <__aeabi_dmul>
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4b68      	ldr	r3, [pc, #416]	; (800a374 <__ieee754_pow+0x734>)
 800a1d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a1d6:	f7f6 f889 	bl	80002ec <__adddf3>
 800a1da:	4632      	mov	r2, r6
 800a1dc:	463b      	mov	r3, r7
 800a1de:	f7f6 f885 	bl	80002ec <__adddf3>
 800a1e2:	9802      	ldr	r0, [sp, #8]
 800a1e4:	460d      	mov	r5, r1
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4640      	mov	r0, r8
 800a1ee:	4649      	mov	r1, r9
 800a1f0:	f7f6 fa32 	bl	8000658 <__aeabi_dmul>
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4680      	mov	r8, r0
 800a1f8:	4689      	mov	r9, r1
 800a1fa:	4b5e      	ldr	r3, [pc, #376]	; (800a374 <__ieee754_pow+0x734>)
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	4629      	mov	r1, r5
 800a200:	f7f6 f872 	bl	80002e8 <__aeabi_dsub>
 800a204:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a208:	f7f6 f86e 	bl	80002e8 <__aeabi_dsub>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4630      	mov	r0, r6
 800a212:	4639      	mov	r1, r7
 800a214:	f7f6 f868 	bl	80002e8 <__aeabi_dsub>
 800a218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a21c:	f7f6 fa1c 	bl	8000658 <__aeabi_dmul>
 800a220:	4622      	mov	r2, r4
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	462b      	mov	r3, r5
 800a228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a22c:	f7f6 fa14 	bl	8000658 <__aeabi_dmul>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	4630      	mov	r0, r6
 800a236:	4639      	mov	r1, r7
 800a238:	f7f6 f858 	bl	80002ec <__adddf3>
 800a23c:	4606      	mov	r6, r0
 800a23e:	460f      	mov	r7, r1
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4640      	mov	r0, r8
 800a246:	4649      	mov	r1, r9
 800a248:	f7f6 f850 	bl	80002ec <__adddf3>
 800a24c:	9802      	ldr	r0, [sp, #8]
 800a24e:	a33c      	add	r3, pc, #240	; (adr r3, 800a340 <__ieee754_pow+0x700>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	4604      	mov	r4, r0
 800a256:	460d      	mov	r5, r1
 800a258:	f7f6 f9fe 	bl	8000658 <__aeabi_dmul>
 800a25c:	4642      	mov	r2, r8
 800a25e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a262:	464b      	mov	r3, r9
 800a264:	4620      	mov	r0, r4
 800a266:	4629      	mov	r1, r5
 800a268:	f7f6 f83e 	bl	80002e8 <__aeabi_dsub>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	4630      	mov	r0, r6
 800a272:	4639      	mov	r1, r7
 800a274:	f7f6 f838 	bl	80002e8 <__aeabi_dsub>
 800a278:	a333      	add	r3, pc, #204	; (adr r3, 800a348 <__ieee754_pow+0x708>)
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f7f6 f9eb 	bl	8000658 <__aeabi_dmul>
 800a282:	a333      	add	r3, pc, #204	; (adr r3, 800a350 <__ieee754_pow+0x710>)
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	4606      	mov	r6, r0
 800a28a:	460f      	mov	r7, r1
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f6 f9e2 	bl	8000658 <__aeabi_dmul>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4630      	mov	r0, r6
 800a29a:	4639      	mov	r1, r7
 800a29c:	f7f6 f826 	bl	80002ec <__adddf3>
 800a2a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2a2:	4b35      	ldr	r3, [pc, #212]	; (800a378 <__ieee754_pow+0x738>)
 800a2a4:	4413      	add	r3, r2
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	f7f6 f81f 	bl	80002ec <__adddf3>
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2b2:	460d      	mov	r5, r1
 800a2b4:	f7f6 f966 	bl	8000584 <__aeabi_i2d>
 800a2b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ba:	4b30      	ldr	r3, [pc, #192]	; (800a37c <__ieee754_pow+0x73c>)
 800a2bc:	4413      	add	r3, r2
 800a2be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460f      	mov	r7, r1
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2ce:	f7f6 f80d 	bl	80002ec <__adddf3>
 800a2d2:	4642      	mov	r2, r8
 800a2d4:	464b      	mov	r3, r9
 800a2d6:	f7f6 f809 	bl	80002ec <__adddf3>
 800a2da:	4632      	mov	r2, r6
 800a2dc:	463b      	mov	r3, r7
 800a2de:	f7f6 f805 	bl	80002ec <__adddf3>
 800a2e2:	9802      	ldr	r0, [sp, #8]
 800a2e4:	4632      	mov	r2, r6
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2ec:	f7f5 fffc 	bl	80002e8 <__aeabi_dsub>
 800a2f0:	4642      	mov	r2, r8
 800a2f2:	464b      	mov	r3, r9
 800a2f4:	f7f5 fff8 	bl	80002e8 <__aeabi_dsub>
 800a2f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2fc:	e607      	b.n	8009f0e <__ieee754_pow+0x2ce>
 800a2fe:	f04f 0a01 	mov.w	sl, #1
 800a302:	e6a5      	b.n	800a050 <__ieee754_pow+0x410>
 800a304:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a358 <__ieee754_pow+0x718>
 800a308:	e613      	b.n	8009f32 <__ieee754_pow+0x2f2>
 800a30a:	bf00      	nop
 800a30c:	f3af 8000 	nop.w
 800a310:	4a454eef 	.word	0x4a454eef
 800a314:	3fca7e28 	.word	0x3fca7e28
 800a318:	93c9db65 	.word	0x93c9db65
 800a31c:	3fcd864a 	.word	0x3fcd864a
 800a320:	a91d4101 	.word	0xa91d4101
 800a324:	3fd17460 	.word	0x3fd17460
 800a328:	518f264d 	.word	0x518f264d
 800a32c:	3fd55555 	.word	0x3fd55555
 800a330:	db6fabff 	.word	0xdb6fabff
 800a334:	3fdb6db6 	.word	0x3fdb6db6
 800a338:	33333303 	.word	0x33333303
 800a33c:	3fe33333 	.word	0x3fe33333
 800a340:	e0000000 	.word	0xe0000000
 800a344:	3feec709 	.word	0x3feec709
 800a348:	dc3a03fd 	.word	0xdc3a03fd
 800a34c:	3feec709 	.word	0x3feec709
 800a350:	145b01f5 	.word	0x145b01f5
 800a354:	be3e2fe0 	.word	0xbe3e2fe0
 800a358:	00000000 	.word	0x00000000
 800a35c:	3ff00000 	.word	0x3ff00000
 800a360:	43400000 	.word	0x43400000
 800a364:	0003988e 	.word	0x0003988e
 800a368:	000bb679 	.word	0x000bb679
 800a36c:	0800ac98 	.word	0x0800ac98
 800a370:	3ff00000 	.word	0x3ff00000
 800a374:	40080000 	.word	0x40080000
 800a378:	0800acb8 	.word	0x0800acb8
 800a37c:	0800aca8 	.word	0x0800aca8
 800a380:	a3b4      	add	r3, pc, #720	; (adr r3, 800a654 <__ieee754_pow+0xa14>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	4640      	mov	r0, r8
 800a388:	4649      	mov	r1, r9
 800a38a:	f7f5 ffaf 	bl	80002ec <__adddf3>
 800a38e:	4622      	mov	r2, r4
 800a390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a394:	462b      	mov	r3, r5
 800a396:	4630      	mov	r0, r6
 800a398:	4639      	mov	r1, r7
 800a39a:	f7f5 ffa5 	bl	80002e8 <__aeabi_dsub>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3a6:	f7f6 fbe7 	bl	8000b78 <__aeabi_dcmpgt>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	f47f adfe 	bne.w	8009fac <__ieee754_pow+0x36c>
 800a3b0:	4aa3      	ldr	r2, [pc, #652]	; (800a640 <__ieee754_pow+0xa00>)
 800a3b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	f340 810a 	ble.w	800a5d0 <__ieee754_pow+0x990>
 800a3bc:	151b      	asrs	r3, r3, #20
 800a3be:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a3c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a3c6:	fa4a f303 	asr.w	r3, sl, r3
 800a3ca:	445b      	add	r3, fp
 800a3cc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a3d0:	4e9c      	ldr	r6, [pc, #624]	; (800a644 <__ieee754_pow+0xa04>)
 800a3d2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a3d6:	4116      	asrs	r6, r2
 800a3d8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a3dc:	2000      	movs	r0, #0
 800a3de:	ea23 0106 	bic.w	r1, r3, r6
 800a3e2:	f1c2 0214 	rsb	r2, r2, #20
 800a3e6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a3ea:	fa4a fa02 	asr.w	sl, sl, r2
 800a3ee:	f1bb 0f00 	cmp.w	fp, #0
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	bfb8      	it	lt
 800a3fc:	f1ca 0a00 	rsblt	sl, sl, #0
 800a400:	f7f5 ff72 	bl	80002e8 <__aeabi_dsub>
 800a404:	e9cd 0100 	strd	r0, r1, [sp]
 800a408:	4642      	mov	r2, r8
 800a40a:	464b      	mov	r3, r9
 800a40c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a410:	f7f5 ff6c 	bl	80002ec <__adddf3>
 800a414:	2000      	movs	r0, #0
 800a416:	a378      	add	r3, pc, #480	; (adr r3, 800a5f8 <__ieee754_pow+0x9b8>)
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	4604      	mov	r4, r0
 800a41e:	460d      	mov	r5, r1
 800a420:	f7f6 f91a 	bl	8000658 <__aeabi_dmul>
 800a424:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a428:	4606      	mov	r6, r0
 800a42a:	460f      	mov	r7, r1
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f5 ff5a 	bl	80002e8 <__aeabi_dsub>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4640      	mov	r0, r8
 800a43a:	4649      	mov	r1, r9
 800a43c:	f7f5 ff54 	bl	80002e8 <__aeabi_dsub>
 800a440:	a36f      	add	r3, pc, #444	; (adr r3, 800a600 <__ieee754_pow+0x9c0>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	f7f6 f907 	bl	8000658 <__aeabi_dmul>
 800a44a:	a36f      	add	r3, pc, #444	; (adr r3, 800a608 <__ieee754_pow+0x9c8>)
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	4680      	mov	r8, r0
 800a452:	4689      	mov	r9, r1
 800a454:	4620      	mov	r0, r4
 800a456:	4629      	mov	r1, r5
 800a458:	f7f6 f8fe 	bl	8000658 <__aeabi_dmul>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4640      	mov	r0, r8
 800a462:	4649      	mov	r1, r9
 800a464:	f7f5 ff42 	bl	80002ec <__adddf3>
 800a468:	4604      	mov	r4, r0
 800a46a:	460d      	mov	r5, r1
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4630      	mov	r0, r6
 800a472:	4639      	mov	r1, r7
 800a474:	f7f5 ff3a 	bl	80002ec <__adddf3>
 800a478:	4632      	mov	r2, r6
 800a47a:	463b      	mov	r3, r7
 800a47c:	4680      	mov	r8, r0
 800a47e:	4689      	mov	r9, r1
 800a480:	f7f5 ff32 	bl	80002e8 <__aeabi_dsub>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4620      	mov	r0, r4
 800a48a:	4629      	mov	r1, r5
 800a48c:	f7f5 ff2c 	bl	80002e8 <__aeabi_dsub>
 800a490:	4642      	mov	r2, r8
 800a492:	4606      	mov	r6, r0
 800a494:	460f      	mov	r7, r1
 800a496:	464b      	mov	r3, r9
 800a498:	4640      	mov	r0, r8
 800a49a:	4649      	mov	r1, r9
 800a49c:	f7f6 f8dc 	bl	8000658 <__aeabi_dmul>
 800a4a0:	a35b      	add	r3, pc, #364	; (adr r3, 800a610 <__ieee754_pow+0x9d0>)
 800a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	460d      	mov	r5, r1
 800a4aa:	f7f6 f8d5 	bl	8000658 <__aeabi_dmul>
 800a4ae:	a35a      	add	r3, pc, #360	; (adr r3, 800a618 <__ieee754_pow+0x9d8>)
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	f7f5 ff18 	bl	80002e8 <__aeabi_dsub>
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	462b      	mov	r3, r5
 800a4bc:	f7f6 f8cc 	bl	8000658 <__aeabi_dmul>
 800a4c0:	a357      	add	r3, pc, #348	; (adr r3, 800a620 <__ieee754_pow+0x9e0>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	f7f5 ff11 	bl	80002ec <__adddf3>
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	f7f6 f8c3 	bl	8000658 <__aeabi_dmul>
 800a4d2:	a355      	add	r3, pc, #340	; (adr r3, 800a628 <__ieee754_pow+0x9e8>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f7f5 ff06 	bl	80002e8 <__aeabi_dsub>
 800a4dc:	4622      	mov	r2, r4
 800a4de:	462b      	mov	r3, r5
 800a4e0:	f7f6 f8ba 	bl	8000658 <__aeabi_dmul>
 800a4e4:	a352      	add	r3, pc, #328	; (adr r3, 800a630 <__ieee754_pow+0x9f0>)
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f7f5 feff 	bl	80002ec <__adddf3>
 800a4ee:	4622      	mov	r2, r4
 800a4f0:	462b      	mov	r3, r5
 800a4f2:	f7f6 f8b1 	bl	8000658 <__aeabi_dmul>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	4649      	mov	r1, r9
 800a4fe:	f7f5 fef3 	bl	80002e8 <__aeabi_dsub>
 800a502:	4604      	mov	r4, r0
 800a504:	460d      	mov	r5, r1
 800a506:	4602      	mov	r2, r0
 800a508:	460b      	mov	r3, r1
 800a50a:	4640      	mov	r0, r8
 800a50c:	4649      	mov	r1, r9
 800a50e:	f7f6 f8a3 	bl	8000658 <__aeabi_dmul>
 800a512:	2200      	movs	r2, #0
 800a514:	e9cd 0100 	strd	r0, r1, [sp]
 800a518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a51c:	4620      	mov	r0, r4
 800a51e:	4629      	mov	r1, r5
 800a520:	f7f5 fee2 	bl	80002e8 <__aeabi_dsub>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a52c:	f7f6 f9be 	bl	80008ac <__aeabi_ddiv>
 800a530:	4632      	mov	r2, r6
 800a532:	4604      	mov	r4, r0
 800a534:	460d      	mov	r5, r1
 800a536:	463b      	mov	r3, r7
 800a538:	4640      	mov	r0, r8
 800a53a:	4649      	mov	r1, r9
 800a53c:	f7f6 f88c 	bl	8000658 <__aeabi_dmul>
 800a540:	4632      	mov	r2, r6
 800a542:	463b      	mov	r3, r7
 800a544:	f7f5 fed2 	bl	80002ec <__adddf3>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4620      	mov	r0, r4
 800a54e:	4629      	mov	r1, r5
 800a550:	f7f5 feca 	bl	80002e8 <__aeabi_dsub>
 800a554:	4642      	mov	r2, r8
 800a556:	464b      	mov	r3, r9
 800a558:	f7f5 fec6 	bl	80002e8 <__aeabi_dsub>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	2000      	movs	r0, #0
 800a562:	4939      	ldr	r1, [pc, #228]	; (800a648 <__ieee754_pow+0xa08>)
 800a564:	f7f5 fec0 	bl	80002e8 <__aeabi_dsub>
 800a568:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a56c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	da2f      	bge.n	800a5d6 <__ieee754_pow+0x996>
 800a576:	4650      	mov	r0, sl
 800a578:	ec43 2b10 	vmov	d0, r2, r3
 800a57c:	f000 f9c0 	bl	800a900 <scalbn>
 800a580:	ec51 0b10 	vmov	r0, r1, d0
 800a584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a588:	f7ff bbf1 	b.w	8009d6e <__ieee754_pow+0x12e>
 800a58c:	4b2f      	ldr	r3, [pc, #188]	; (800a64c <__ieee754_pow+0xa0c>)
 800a58e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a592:	429e      	cmp	r6, r3
 800a594:	f77f af0c 	ble.w	800a3b0 <__ieee754_pow+0x770>
 800a598:	4b2d      	ldr	r3, [pc, #180]	; (800a650 <__ieee754_pow+0xa10>)
 800a59a:	440b      	add	r3, r1
 800a59c:	4303      	orrs	r3, r0
 800a59e:	d00b      	beq.n	800a5b8 <__ieee754_pow+0x978>
 800a5a0:	a325      	add	r3, pc, #148	; (adr r3, 800a638 <__ieee754_pow+0x9f8>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5aa:	f7f6 f855 	bl	8000658 <__aeabi_dmul>
 800a5ae:	a322      	add	r3, pc, #136	; (adr r3, 800a638 <__ieee754_pow+0x9f8>)
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f7ff bbdb 	b.w	8009d6e <__ieee754_pow+0x12e>
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	462b      	mov	r3, r5
 800a5bc:	f7f5 fe94 	bl	80002e8 <__aeabi_dsub>
 800a5c0:	4642      	mov	r2, r8
 800a5c2:	464b      	mov	r3, r9
 800a5c4:	f7f6 face 	bl	8000b64 <__aeabi_dcmpge>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	f43f aef1 	beq.w	800a3b0 <__ieee754_pow+0x770>
 800a5ce:	e7e7      	b.n	800a5a0 <__ieee754_pow+0x960>
 800a5d0:	f04f 0a00 	mov.w	sl, #0
 800a5d4:	e718      	b.n	800a408 <__ieee754_pow+0x7c8>
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	e7d4      	b.n	800a584 <__ieee754_pow+0x944>
 800a5da:	2000      	movs	r0, #0
 800a5dc:	491a      	ldr	r1, [pc, #104]	; (800a648 <__ieee754_pow+0xa08>)
 800a5de:	f7ff bb8f 	b.w	8009d00 <__ieee754_pow+0xc0>
 800a5e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5e6:	f7ff bb8b 	b.w	8009d00 <__ieee754_pow+0xc0>
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	f7ff bb87 	b.w	8009d00 <__ieee754_pow+0xc0>
 800a5f2:	4693      	mov	fp, r2
 800a5f4:	f7ff bb98 	b.w	8009d28 <__ieee754_pow+0xe8>
 800a5f8:	00000000 	.word	0x00000000
 800a5fc:	3fe62e43 	.word	0x3fe62e43
 800a600:	fefa39ef 	.word	0xfefa39ef
 800a604:	3fe62e42 	.word	0x3fe62e42
 800a608:	0ca86c39 	.word	0x0ca86c39
 800a60c:	be205c61 	.word	0xbe205c61
 800a610:	72bea4d0 	.word	0x72bea4d0
 800a614:	3e663769 	.word	0x3e663769
 800a618:	c5d26bf1 	.word	0xc5d26bf1
 800a61c:	3ebbbd41 	.word	0x3ebbbd41
 800a620:	af25de2c 	.word	0xaf25de2c
 800a624:	3f11566a 	.word	0x3f11566a
 800a628:	16bebd93 	.word	0x16bebd93
 800a62c:	3f66c16c 	.word	0x3f66c16c
 800a630:	5555553e 	.word	0x5555553e
 800a634:	3fc55555 	.word	0x3fc55555
 800a638:	c2f8f359 	.word	0xc2f8f359
 800a63c:	01a56e1f 	.word	0x01a56e1f
 800a640:	3fe00000 	.word	0x3fe00000
 800a644:	000fffff 	.word	0x000fffff
 800a648:	3ff00000 	.word	0x3ff00000
 800a64c:	4090cbff 	.word	0x4090cbff
 800a650:	3f6f3400 	.word	0x3f6f3400
 800a654:	652b82fe 	.word	0x652b82fe
 800a658:	3c971547 	.word	0x3c971547

0800a65c <__ieee754_sqrt>:
 800a65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a660:	4955      	ldr	r1, [pc, #340]	; (800a7b8 <__ieee754_sqrt+0x15c>)
 800a662:	ec55 4b10 	vmov	r4, r5, d0
 800a666:	43a9      	bics	r1, r5
 800a668:	462b      	mov	r3, r5
 800a66a:	462a      	mov	r2, r5
 800a66c:	d112      	bne.n	800a694 <__ieee754_sqrt+0x38>
 800a66e:	ee10 2a10 	vmov	r2, s0
 800a672:	ee10 0a10 	vmov	r0, s0
 800a676:	4629      	mov	r1, r5
 800a678:	f7f5 ffee 	bl	8000658 <__aeabi_dmul>
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	4620      	mov	r0, r4
 800a682:	4629      	mov	r1, r5
 800a684:	f7f5 fe32 	bl	80002ec <__adddf3>
 800a688:	4604      	mov	r4, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	ec45 4b10 	vmov	d0, r4, r5
 800a690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a694:	2d00      	cmp	r5, #0
 800a696:	ee10 0a10 	vmov	r0, s0
 800a69a:	4621      	mov	r1, r4
 800a69c:	dc0f      	bgt.n	800a6be <__ieee754_sqrt+0x62>
 800a69e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a6a2:	4330      	orrs	r0, r6
 800a6a4:	d0f2      	beq.n	800a68c <__ieee754_sqrt+0x30>
 800a6a6:	b155      	cbz	r5, 800a6be <__ieee754_sqrt+0x62>
 800a6a8:	ee10 2a10 	vmov	r2, s0
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	f7f5 fe1a 	bl	80002e8 <__aeabi_dsub>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	f7f6 f8f8 	bl	80008ac <__aeabi_ddiv>
 800a6bc:	e7e4      	b.n	800a688 <__ieee754_sqrt+0x2c>
 800a6be:	151b      	asrs	r3, r3, #20
 800a6c0:	d073      	beq.n	800a7aa <__ieee754_sqrt+0x14e>
 800a6c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a6c6:	07dd      	lsls	r5, r3, #31
 800a6c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a6cc:	bf48      	it	mi
 800a6ce:	0fc8      	lsrmi	r0, r1, #31
 800a6d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a6d4:	bf44      	itt	mi
 800a6d6:	0049      	lslmi	r1, r1, #1
 800a6d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a6dc:	2500      	movs	r5, #0
 800a6de:	1058      	asrs	r0, r3, #1
 800a6e0:	0fcb      	lsrs	r3, r1, #31
 800a6e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a6e6:	0049      	lsls	r1, r1, #1
 800a6e8:	2316      	movs	r3, #22
 800a6ea:	462c      	mov	r4, r5
 800a6ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a6f0:	19a7      	adds	r7, r4, r6
 800a6f2:	4297      	cmp	r7, r2
 800a6f4:	bfde      	ittt	le
 800a6f6:	19bc      	addle	r4, r7, r6
 800a6f8:	1bd2      	suble	r2, r2, r7
 800a6fa:	19ad      	addle	r5, r5, r6
 800a6fc:	0fcf      	lsrs	r7, r1, #31
 800a6fe:	3b01      	subs	r3, #1
 800a700:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a704:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a708:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a70c:	d1f0      	bne.n	800a6f0 <__ieee754_sqrt+0x94>
 800a70e:	f04f 0c20 	mov.w	ip, #32
 800a712:	469e      	mov	lr, r3
 800a714:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a718:	42a2      	cmp	r2, r4
 800a71a:	eb06 070e 	add.w	r7, r6, lr
 800a71e:	dc02      	bgt.n	800a726 <__ieee754_sqrt+0xca>
 800a720:	d112      	bne.n	800a748 <__ieee754_sqrt+0xec>
 800a722:	428f      	cmp	r7, r1
 800a724:	d810      	bhi.n	800a748 <__ieee754_sqrt+0xec>
 800a726:	2f00      	cmp	r7, #0
 800a728:	eb07 0e06 	add.w	lr, r7, r6
 800a72c:	da42      	bge.n	800a7b4 <__ieee754_sqrt+0x158>
 800a72e:	f1be 0f00 	cmp.w	lr, #0
 800a732:	db3f      	blt.n	800a7b4 <__ieee754_sqrt+0x158>
 800a734:	f104 0801 	add.w	r8, r4, #1
 800a738:	1b12      	subs	r2, r2, r4
 800a73a:	428f      	cmp	r7, r1
 800a73c:	bf88      	it	hi
 800a73e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a742:	1bc9      	subs	r1, r1, r7
 800a744:	4433      	add	r3, r6
 800a746:	4644      	mov	r4, r8
 800a748:	0052      	lsls	r2, r2, #1
 800a74a:	f1bc 0c01 	subs.w	ip, ip, #1
 800a74e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a752:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a756:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a75a:	d1dd      	bne.n	800a718 <__ieee754_sqrt+0xbc>
 800a75c:	430a      	orrs	r2, r1
 800a75e:	d006      	beq.n	800a76e <__ieee754_sqrt+0x112>
 800a760:	1c5c      	adds	r4, r3, #1
 800a762:	bf13      	iteet	ne
 800a764:	3301      	addne	r3, #1
 800a766:	3501      	addeq	r5, #1
 800a768:	4663      	moveq	r3, ip
 800a76a:	f023 0301 	bicne.w	r3, r3, #1
 800a76e:	106a      	asrs	r2, r5, #1
 800a770:	085b      	lsrs	r3, r3, #1
 800a772:	07e9      	lsls	r1, r5, #31
 800a774:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a778:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a77c:	bf48      	it	mi
 800a77e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a782:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a786:	461c      	mov	r4, r3
 800a788:	e780      	b.n	800a68c <__ieee754_sqrt+0x30>
 800a78a:	0aca      	lsrs	r2, r1, #11
 800a78c:	3815      	subs	r0, #21
 800a78e:	0549      	lsls	r1, r1, #21
 800a790:	2a00      	cmp	r2, #0
 800a792:	d0fa      	beq.n	800a78a <__ieee754_sqrt+0x12e>
 800a794:	02d6      	lsls	r6, r2, #11
 800a796:	d50a      	bpl.n	800a7ae <__ieee754_sqrt+0x152>
 800a798:	f1c3 0420 	rsb	r4, r3, #32
 800a79c:	fa21 f404 	lsr.w	r4, r1, r4
 800a7a0:	1e5d      	subs	r5, r3, #1
 800a7a2:	4099      	lsls	r1, r3
 800a7a4:	4322      	orrs	r2, r4
 800a7a6:	1b43      	subs	r3, r0, r5
 800a7a8:	e78b      	b.n	800a6c2 <__ieee754_sqrt+0x66>
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	e7f0      	b.n	800a790 <__ieee754_sqrt+0x134>
 800a7ae:	0052      	lsls	r2, r2, #1
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	e7ef      	b.n	800a794 <__ieee754_sqrt+0x138>
 800a7b4:	46a0      	mov	r8, r4
 800a7b6:	e7bf      	b.n	800a738 <__ieee754_sqrt+0xdc>
 800a7b8:	7ff00000 	.word	0x7ff00000

0800a7bc <fabs>:
 800a7bc:	ec51 0b10 	vmov	r0, r1, d0
 800a7c0:	ee10 2a10 	vmov	r2, s0
 800a7c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7c8:	ec43 2b10 	vmov	d0, r2, r3
 800a7cc:	4770      	bx	lr

0800a7ce <finite>:
 800a7ce:	ee10 3a90 	vmov	r3, s1
 800a7d2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a7d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a7da:	0fc0      	lsrs	r0, r0, #31
 800a7dc:	4770      	bx	lr

0800a7de <matherr>:
 800a7de:	2000      	movs	r0, #0
 800a7e0:	4770      	bx	lr
 800a7e2:	0000      	movs	r0, r0
 800a7e4:	0000      	movs	r0, r0
	...

0800a7e8 <nan>:
 800a7e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a7f0 <nan+0x8>
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	00000000 	.word	0x00000000
 800a7f4:	7ff80000 	.word	0x7ff80000

0800a7f8 <rint>:
 800a7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7fa:	ec51 0b10 	vmov	r0, r1, d0
 800a7fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a802:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a806:	2e13      	cmp	r6, #19
 800a808:	460b      	mov	r3, r1
 800a80a:	ee10 4a10 	vmov	r4, s0
 800a80e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a812:	dc56      	bgt.n	800a8c2 <rint+0xca>
 800a814:	2e00      	cmp	r6, #0
 800a816:	da2b      	bge.n	800a870 <rint+0x78>
 800a818:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a81c:	4302      	orrs	r2, r0
 800a81e:	d023      	beq.n	800a868 <rint+0x70>
 800a820:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a824:	4302      	orrs	r2, r0
 800a826:	4254      	negs	r4, r2
 800a828:	4314      	orrs	r4, r2
 800a82a:	0c4b      	lsrs	r3, r1, #17
 800a82c:	0b24      	lsrs	r4, r4, #12
 800a82e:	045b      	lsls	r3, r3, #17
 800a830:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a834:	ea44 0103 	orr.w	r1, r4, r3
 800a838:	460b      	mov	r3, r1
 800a83a:	492f      	ldr	r1, [pc, #188]	; (800a8f8 <rint+0x100>)
 800a83c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a840:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a844:	4602      	mov	r2, r0
 800a846:	4639      	mov	r1, r7
 800a848:	4630      	mov	r0, r6
 800a84a:	f7f5 fd4f 	bl	80002ec <__adddf3>
 800a84e:	e9cd 0100 	strd	r0, r1, [sp]
 800a852:	463b      	mov	r3, r7
 800a854:	4632      	mov	r2, r6
 800a856:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a85a:	f7f5 fd45 	bl	80002e8 <__aeabi_dsub>
 800a85e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a862:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a866:	4639      	mov	r1, r7
 800a868:	ec41 0b10 	vmov	d0, r0, r1
 800a86c:	b003      	add	sp, #12
 800a86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a870:	4a22      	ldr	r2, [pc, #136]	; (800a8fc <rint+0x104>)
 800a872:	4132      	asrs	r2, r6
 800a874:	ea01 0702 	and.w	r7, r1, r2
 800a878:	4307      	orrs	r7, r0
 800a87a:	d0f5      	beq.n	800a868 <rint+0x70>
 800a87c:	0852      	lsrs	r2, r2, #1
 800a87e:	4011      	ands	r1, r2
 800a880:	430c      	orrs	r4, r1
 800a882:	d00b      	beq.n	800a89c <rint+0xa4>
 800a884:	ea23 0202 	bic.w	r2, r3, r2
 800a888:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a88c:	2e13      	cmp	r6, #19
 800a88e:	fa43 f306 	asr.w	r3, r3, r6
 800a892:	bf0c      	ite	eq
 800a894:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a898:	2400      	movne	r4, #0
 800a89a:	4313      	orrs	r3, r2
 800a89c:	4916      	ldr	r1, [pc, #88]	; (800a8f8 <rint+0x100>)
 800a89e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a8a2:	4622      	mov	r2, r4
 800a8a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	f7f5 fd1e 	bl	80002ec <__adddf3>
 800a8b0:	e9cd 0100 	strd	r0, r1, [sp]
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	462b      	mov	r3, r5
 800a8b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8bc:	f7f5 fd14 	bl	80002e8 <__aeabi_dsub>
 800a8c0:	e7d2      	b.n	800a868 <rint+0x70>
 800a8c2:	2e33      	cmp	r6, #51	; 0x33
 800a8c4:	dd07      	ble.n	800a8d6 <rint+0xde>
 800a8c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a8ca:	d1cd      	bne.n	800a868 <rint+0x70>
 800a8cc:	ee10 2a10 	vmov	r2, s0
 800a8d0:	f7f5 fd0c 	bl	80002ec <__adddf3>
 800a8d4:	e7c8      	b.n	800a868 <rint+0x70>
 800a8d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a8da:	f04f 32ff 	mov.w	r2, #4294967295
 800a8de:	40f2      	lsrs	r2, r6
 800a8e0:	4210      	tst	r0, r2
 800a8e2:	d0c1      	beq.n	800a868 <rint+0x70>
 800a8e4:	0852      	lsrs	r2, r2, #1
 800a8e6:	4210      	tst	r0, r2
 800a8e8:	bf1f      	itttt	ne
 800a8ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a8ee:	ea20 0202 	bicne.w	r2, r0, r2
 800a8f2:	4134      	asrne	r4, r6
 800a8f4:	4314      	orrne	r4, r2
 800a8f6:	e7d1      	b.n	800a89c <rint+0xa4>
 800a8f8:	0800acc8 	.word	0x0800acc8
 800a8fc:	000fffff 	.word	0x000fffff

0800a900 <scalbn>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	ec55 4b10 	vmov	r4, r5, d0
 800a906:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a90a:	4606      	mov	r6, r0
 800a90c:	462b      	mov	r3, r5
 800a90e:	b9aa      	cbnz	r2, 800a93c <scalbn+0x3c>
 800a910:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a914:	4323      	orrs	r3, r4
 800a916:	d03b      	beq.n	800a990 <scalbn+0x90>
 800a918:	4b31      	ldr	r3, [pc, #196]	; (800a9e0 <scalbn+0xe0>)
 800a91a:	4629      	mov	r1, r5
 800a91c:	2200      	movs	r2, #0
 800a91e:	ee10 0a10 	vmov	r0, s0
 800a922:	f7f5 fe99 	bl	8000658 <__aeabi_dmul>
 800a926:	4b2f      	ldr	r3, [pc, #188]	; (800a9e4 <scalbn+0xe4>)
 800a928:	429e      	cmp	r6, r3
 800a92a:	4604      	mov	r4, r0
 800a92c:	460d      	mov	r5, r1
 800a92e:	da12      	bge.n	800a956 <scalbn+0x56>
 800a930:	a327      	add	r3, pc, #156	; (adr r3, 800a9d0 <scalbn+0xd0>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f7f5 fe8f 	bl	8000658 <__aeabi_dmul>
 800a93a:	e009      	b.n	800a950 <scalbn+0x50>
 800a93c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a940:	428a      	cmp	r2, r1
 800a942:	d10c      	bne.n	800a95e <scalbn+0x5e>
 800a944:	ee10 2a10 	vmov	r2, s0
 800a948:	4620      	mov	r0, r4
 800a94a:	4629      	mov	r1, r5
 800a94c:	f7f5 fcce 	bl	80002ec <__adddf3>
 800a950:	4604      	mov	r4, r0
 800a952:	460d      	mov	r5, r1
 800a954:	e01c      	b.n	800a990 <scalbn+0x90>
 800a956:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a95a:	460b      	mov	r3, r1
 800a95c:	3a36      	subs	r2, #54	; 0x36
 800a95e:	4432      	add	r2, r6
 800a960:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a964:	428a      	cmp	r2, r1
 800a966:	dd0b      	ble.n	800a980 <scalbn+0x80>
 800a968:	ec45 4b11 	vmov	d1, r4, r5
 800a96c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a9d8 <scalbn+0xd8>
 800a970:	f000 f83c 	bl	800a9ec <copysign>
 800a974:	a318      	add	r3, pc, #96	; (adr r3, 800a9d8 <scalbn+0xd8>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	ec51 0b10 	vmov	r0, r1, d0
 800a97e:	e7da      	b.n	800a936 <scalbn+0x36>
 800a980:	2a00      	cmp	r2, #0
 800a982:	dd08      	ble.n	800a996 <scalbn+0x96>
 800a984:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a988:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a98c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a990:	ec45 4b10 	vmov	d0, r4, r5
 800a994:	bd70      	pop	{r4, r5, r6, pc}
 800a996:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a99a:	da0d      	bge.n	800a9b8 <scalbn+0xb8>
 800a99c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a9a0:	429e      	cmp	r6, r3
 800a9a2:	ec45 4b11 	vmov	d1, r4, r5
 800a9a6:	dce1      	bgt.n	800a96c <scalbn+0x6c>
 800a9a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a9d0 <scalbn+0xd0>
 800a9ac:	f000 f81e 	bl	800a9ec <copysign>
 800a9b0:	a307      	add	r3, pc, #28	; (adr r3, 800a9d0 <scalbn+0xd0>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	e7e0      	b.n	800a97a <scalbn+0x7a>
 800a9b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9bc:	3236      	adds	r2, #54	; 0x36
 800a9be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	4b06      	ldr	r3, [pc, #24]	; (800a9e8 <scalbn+0xe8>)
 800a9ce:	e7b2      	b.n	800a936 <scalbn+0x36>
 800a9d0:	c2f8f359 	.word	0xc2f8f359
 800a9d4:	01a56e1f 	.word	0x01a56e1f
 800a9d8:	8800759c 	.word	0x8800759c
 800a9dc:	7e37e43c 	.word	0x7e37e43c
 800a9e0:	43500000 	.word	0x43500000
 800a9e4:	ffff3cb0 	.word	0xffff3cb0
 800a9e8:	3c900000 	.word	0x3c900000

0800a9ec <copysign>:
 800a9ec:	ec51 0b10 	vmov	r0, r1, d0
 800a9f0:	ee11 0a90 	vmov	r0, s3
 800a9f4:	ee10 2a10 	vmov	r2, s0
 800a9f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a9fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800aa00:	ea41 0300 	orr.w	r3, r1, r0
 800aa04:	ec43 2b10 	vmov	d0, r2, r3
 800aa08:	4770      	bx	lr
	...

0800aa0c <_init>:
 800aa0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0e:	bf00      	nop
 800aa10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa12:	bc08      	pop	{r3}
 800aa14:	469e      	mov	lr, r3
 800aa16:	4770      	bx	lr

0800aa18 <_fini>:
 800aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1a:	bf00      	nop
 800aa1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa1e:	bc08      	pop	{r3}
 800aa20:	469e      	mov	lr, r3
 800aa22:	4770      	bx	lr
