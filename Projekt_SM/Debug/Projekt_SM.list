
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a954  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  0800ab28  0800ab28  0001ab28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad90  0800ad90  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad90  0800ad90  0001ad90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad98  0800ad98  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad98  0800ad98  0001ad98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad9c  0800ad9c  0001ad9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800ada0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a4c  200002cc  0800b06c  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d18  0800b06c  00020d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c46f  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fd3  00000000  00000000  0003c76b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001620  00000000  00000000  00040740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f8  00000000  00000000  00041d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029856  00000000  00000000  00043158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015de4  00000000  00000000  0006c9ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe6ca  00000000  00000000  00082792  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00180e5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006714  00000000  00000000  00180ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002cc 	.word	0x200002cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ab0c 	.word	0x0800ab0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002d0 	.word	0x200002d0
 800020c:	0800ab0c 	.word	0x0800ab0c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f3c:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <MX_ADC1_Init+0xa0>)
 8000f3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000f8e:	f001 ff9f 	bl	8002ed0 <HAL_ADC_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f98:	f001 f8e4 	bl	8002164 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_ADC1_Init+0x9c>)
 8000fae:	f002 f8df 	bl	8003170 <HAL_ADC_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fb8:	f001 f8d4 	bl	8002164 <Error_Handler>
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000378 	.word	0x20000378
 8000fc8:	40012000 	.word	0x40012000

08000fcc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <MX_ADC2_Init+0x9c>)
 8000fe0:	4a22      	ldr	r2, [pc, #136]	; (800106c <MX_ADC2_Init+0xa0>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_ADC2_Init+0x9c>)
 8000fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_ADC2_Init+0x9c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_ADC2_Init+0x9c>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_ADC2_Init+0x9c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_ADC2_Init+0x9c>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_ADC2_Init+0x9c>)
 8001008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800100c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_ADC2_Init+0x9c>)
 8001010:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_ADC2_Init+0x9c>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_ADC2_Init+0x9c>)
 800101e:	2201      	movs	r2, #1
 8001020:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_ADC2_Init+0x9c>)
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_ADC2_Init+0x9c>)
 800102c:	2201      	movs	r2, #1
 800102e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <MX_ADC2_Init+0x9c>)
 8001032:	f001 ff4d 	bl	8002ed0 <HAL_ADC_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800103c:	f001 f892 	bl	8002164 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001040:	2304      	movs	r3, #4
 8001042:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001044:	2301      	movs	r3, #1
 8001046:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001048:	2307      	movs	r3, #7
 800104a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_ADC2_Init+0x9c>)
 8001052:	f002 f88d 	bl	8003170 <HAL_ADC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800105c:	f001 f882 	bl	8002164 <Error_Handler>
  }

}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000330 	.word	0x20000330
 800106c:	40012100 	.word	0x40012100

08001070 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a5a      	ldr	r2, [pc, #360]	; (80011f8 <HAL_ADC_MspInit+0x188>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d154      	bne.n	800113c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001092:	4b5a      	ldr	r3, [pc, #360]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a59      	ldr	r2, [pc, #356]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b57      	ldr	r3, [pc, #348]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b54      	ldr	r3, [pc, #336]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a53      	ldr	r2, [pc, #332]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b51      	ldr	r3, [pc, #324]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010c2:	2308      	movs	r3, #8
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	484a      	ldr	r0, [pc, #296]	; (8001200 <HAL_ADC_MspInit+0x190>)
 80010d6:	f003 fd69 	bl	8004bac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010da:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <HAL_ADC_MspInit+0x194>)
 80010dc:	4a4a      	ldr	r2, [pc, #296]	; (8001208 <HAL_ADC_MspInit+0x198>)
 80010de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010e0:	4b48      	ldr	r3, [pc, #288]	; (8001204 <HAL_ADC_MspInit+0x194>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <HAL_ADC_MspInit+0x194>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ec:	4b45      	ldr	r3, [pc, #276]	; (8001204 <HAL_ADC_MspInit+0x194>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010f2:	4b44      	ldr	r3, [pc, #272]	; (8001204 <HAL_ADC_MspInit+0x194>)
 80010f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010fa:	4b42      	ldr	r3, [pc, #264]	; (8001204 <HAL_ADC_MspInit+0x194>)
 80010fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001100:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001102:	4b40      	ldr	r3, [pc, #256]	; (8001204 <HAL_ADC_MspInit+0x194>)
 8001104:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001108:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <HAL_ADC_MspInit+0x194>)
 800110c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001110:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001112:	4b3c      	ldr	r3, [pc, #240]	; (8001204 <HAL_ADC_MspInit+0x194>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001118:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <HAL_ADC_MspInit+0x194>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800111e:	4839      	ldr	r0, [pc, #228]	; (8001204 <HAL_ADC_MspInit+0x194>)
 8001120:	f002 fd40 	bl	8003ba4 <HAL_DMA_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800112a:	f001 f81b 	bl	8002164 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a34      	ldr	r2, [pc, #208]	; (8001204 <HAL_ADC_MspInit+0x194>)
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
 8001134:	4a33      	ldr	r2, [pc, #204]	; (8001204 <HAL_ADC_MspInit+0x194>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800113a:	e059      	b.n	80011f0 <HAL_ADC_MspInit+0x180>
  else if(adcHandle->Instance==ADC2)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a32      	ldr	r2, [pc, #200]	; (800120c <HAL_ADC_MspInit+0x19c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d154      	bne.n	80011f0 <HAL_ADC_MspInit+0x180>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a2c      	ldr	r2, [pc, #176]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 800114c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a26      	ldr	r2, [pc, #152]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_ADC_MspInit+0x18c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001176:	2310      	movs	r3, #16
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	481d      	ldr	r0, [pc, #116]	; (8001200 <HAL_ADC_MspInit+0x190>)
 800118a:	f003 fd0f 	bl	8004bac <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 8001190:	4a20      	ldr	r2, [pc, #128]	; (8001214 <HAL_ADC_MspInit+0x1a4>)
 8001192:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 8001196:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800119a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 80011aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ae:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 80011b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 80011ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011be:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 80011c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80011d4:	480e      	ldr	r0, [pc, #56]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 80011d6:	f002 fce5 	bl	8003ba4 <HAL_DMA_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_ADC_MspInit+0x174>
      Error_Handler();
 80011e0:	f000 ffc0 	bl	8002164 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 80011e8:	639a      	str	r2, [r3, #56]	; 0x38
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <HAL_ADC_MspInit+0x1a0>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	; 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40012000 	.word	0x40012000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000
 8001204:	200003c0 	.word	0x200003c0
 8001208:	40026410 	.word	0x40026410
 800120c:	40012100 	.word	0x40012100
 8001210:	20000420 	.word	0x20000420
 8001214:	40026440 	.word	0x40026440

08001218 <arm_pid_init_q31>:
 */

void arm_pid_init_q31(
  arm_pid_instance_q31 * S,
  int32_t resetStateFlag)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* Derived coefficient A0 */
  S->A0 = __QADD(__QADD(S->Kp, S->Ki), S->Kd);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	613a      	str	r2, [r7, #16]
 800122c:	60fb      	str	r3, [r7, #12]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	fa82 f383 	qadd	r3, r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  return(result);
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	61fa      	str	r2, [r7, #28]
 8001240:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	fa82 f383 	qadd	r3, r3, r2
 800124a:	617b      	str	r3, [r7, #20]
  return(result);
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]

  /* Derived coefficient A1 */
  S->A1 = -__QADD(__QADD(S->Kd, S->Kd), S->Kp);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1a      	ldr	r2, [r3, #32]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	62ba      	str	r2, [r7, #40]	; 0x28
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001262:	fa82 f383 	qadd	r3, r3, r2
 8001266:	623b      	str	r3, [r7, #32]
  return(result);
 8001268:	6a3a      	ldr	r2, [r7, #32]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	637a      	str	r2, [r7, #52]	; 0x34
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001276:	fa82 f383 	qadd	r3, r3, r2
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127e:	425a      	negs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	605a      	str	r2, [r3, #4]
  S->A1 = -clip_q63_to_q31((q63_t) temp + S->Kp);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1a      	ldr	r2, [r3, #32]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if(resetStateFlag)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <arm_pid_init_q31+0x88>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3u * sizeof(q31_t));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	330c      	adds	r3, #12
 8001296:	220c      	movs	r2, #12
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f007 fa92 	bl	80087c4 <memset>
  }

}
 80012a0:	bf00      	nop
 80012a2:	3738      	adds	r7, #56	; 0x38
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80012ae:	463b      	mov	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_DAC_Init+0x4c>)
 80012b8:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <MX_DAC_Init+0x50>)
 80012ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_DAC_Init+0x4c>)
 80012be:	f002 fb18 	bl	80038f2 <HAL_DAC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80012c8:	f000 ff4c 	bl	8002164 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 80012cc:	232c      	movs	r3, #44	; 0x2c
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80012d4:	463b      	mov	r3, r7
 80012d6:	2210      	movs	r2, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <MX_DAC_Init+0x4c>)
 80012dc:	f002 fbe5 	bl	8003aaa <HAL_DAC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012e6:	f000 ff3d 	bl	8002164 <Error_Handler>
  }

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000480 	.word	0x20000480
 80012f8:	40007400 	.word	0x40007400

080012fc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_DAC_MspInit+0x84>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d12b      	bne.n	8001376 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_DAC_MspInit+0x88>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <HAL_DAC_MspInit+0x88>)
 8001324:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_DAC_MspInit+0x88>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_DAC_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <HAL_DAC_MspInit+0x88>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_DAC_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800134e:	2320      	movs	r3, #32
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001352:	2303      	movs	r3, #3
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <HAL_DAC_MspInit+0x8c>)
 8001362:	f003 fc23 	bl	8004bac <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2036      	movs	r0, #54	; 0x36
 800136c:	f002 fa8b 	bl	8003886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001370:	2036      	movs	r0, #54	; 0x36
 8001372:	f002 faa4 	bl	80038be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40007400 	.word	0x40007400
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000

0800138c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_DMA_Init+0x48>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <MX_DMA_Init+0x48>)
 8001398:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <MX_DMA_Init+0x48>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	2038      	movs	r0, #56	; 0x38
 80013b0:	f002 fa69 	bl	8003886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013b4:	2038      	movs	r0, #56	; 0x38
 80013b6:	f002 fa82 	bl	80038be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	203a      	movs	r0, #58	; 0x3a
 80013c0:	f002 fa61 	bl	8003886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80013c4:	203a      	movs	r0, #58	; 0x3a
 80013c6:	f002 fa7a 	bl	80038be <HAL_NVIC_EnableIRQ>

}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800

080013d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <MX_ETH_Init+0x78>)
 80013de:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <MX_ETH_Init+0x7c>)
 80013e0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_ETH_Init+0x78>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <MX_ETH_Init+0x78>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_ETH_Init+0x78>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_ETH_Init+0x78>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <MX_ETH_Init+0x78>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	3302      	adds	r3, #2
 8001406:	22e1      	movs	r2, #225	; 0xe1
 8001408:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_ETH_Init+0x78>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	3303      	adds	r3, #3
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_ETH_Init+0x78>)
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	3304      	adds	r3, #4
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_ETH_Init+0x78>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	3305      	adds	r3, #5
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_ETH_Init+0x78>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_ETH_Init+0x78>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_ETH_Init+0x78>)
 8001436:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800143a:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_ETH_Init+0x78>)
 800143e:	f002 ff49 	bl	80042d4 <HAL_ETH_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8001448:	f000 fe8c 	bl	8002164 <Error_Handler>
  }

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000494 	.word	0x20000494
 8001454:	40028000 	.word	0x40028000

08001458 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_ETH_MspInit+0x158>)
 8001476:	4293      	cmp	r3, r2
 8001478:	f040 8096 	bne.w	80015a8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800147c:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4a4c      	ldr	r2, [pc, #304]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 8001482:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001486:	6313      	str	r3, [r2, #48]	; 0x30
 8001488:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	623b      	str	r3, [r7, #32]
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	4a46      	ldr	r2, [pc, #280]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 800149a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800149e:	6313      	str	r3, [r2, #48]	; 0x30
 80014a0:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4b41      	ldr	r3, [pc, #260]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4a40      	ldr	r2, [pc, #256]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014b6:	6313      	str	r3, [r2, #48]	; 0x30
 80014b8:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a3a      	ldr	r2, [pc, #232]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	4a34      	ldr	r2, [pc, #208]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6313      	str	r3, [r2, #48]	; 0x30
 80014e8:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a28      	ldr	r2, [pc, #160]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 8001512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_ETH_MspInit+0x15c>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001524:	2332      	movs	r3, #50	; 0x32
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001534:	230b      	movs	r3, #11
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	481e      	ldr	r0, [pc, #120]	; (80015b8 <HAL_ETH_MspInit+0x160>)
 8001540:	f003 fb34 	bl	8004bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001544:	2386      	movs	r3, #134	; 0x86
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001554:	230b      	movs	r3, #11
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	4619      	mov	r1, r3
 800155e:	4817      	ldr	r0, [pc, #92]	; (80015bc <HAL_ETH_MspInit+0x164>)
 8001560:	f003 fb24 	bl	8004bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001576:	230b      	movs	r3, #11
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	480f      	ldr	r0, [pc, #60]	; (80015c0 <HAL_ETH_MspInit+0x168>)
 8001582:	f003 fb13 	bl	8004bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001586:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001598:	230b      	movs	r3, #11
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4808      	ldr	r0, [pc, #32]	; (80015c4 <HAL_ETH_MspInit+0x16c>)
 80015a4:	f003 fb02 	bl	8004bac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80015a8:	bf00      	nop
 80015aa:	3738      	adds	r7, #56	; 0x38
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40028000 	.word	0x40028000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40021800 	.word	0x40021800

080015c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	; 0x30
 80015cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015de:	4b5f      	ldr	r3, [pc, #380]	; (800175c <MX_GPIO_Init+0x194>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a5e      	ldr	r2, [pc, #376]	; (800175c <MX_GPIO_Init+0x194>)
 80015e4:	f043 0310 	orr.w	r3, r3, #16
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b5c      	ldr	r3, [pc, #368]	; (800175c <MX_GPIO_Init+0x194>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	4b59      	ldr	r3, [pc, #356]	; (800175c <MX_GPIO_Init+0x194>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a58      	ldr	r2, [pc, #352]	; (800175c <MX_GPIO_Init+0x194>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b56      	ldr	r3, [pc, #344]	; (800175c <MX_GPIO_Init+0x194>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160e:	4b53      	ldr	r3, [pc, #332]	; (800175c <MX_GPIO_Init+0x194>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a52      	ldr	r2, [pc, #328]	; (800175c <MX_GPIO_Init+0x194>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b50      	ldr	r3, [pc, #320]	; (800175c <MX_GPIO_Init+0x194>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b4d      	ldr	r3, [pc, #308]	; (800175c <MX_GPIO_Init+0x194>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a4c      	ldr	r2, [pc, #304]	; (800175c <MX_GPIO_Init+0x194>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <MX_GPIO_Init+0x194>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <MX_GPIO_Init+0x194>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a46      	ldr	r2, [pc, #280]	; (800175c <MX_GPIO_Init+0x194>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <MX_GPIO_Init+0x194>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <MX_GPIO_Init+0x194>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a40      	ldr	r2, [pc, #256]	; (800175c <MX_GPIO_Init+0x194>)
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b3e      	ldr	r3, [pc, #248]	; (800175c <MX_GPIO_Init+0x194>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <MX_GPIO_Init+0x194>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a3a      	ldr	r2, [pc, #232]	; (800175c <MX_GPIO_Init+0x194>)
 8001674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <MX_GPIO_Init+0x194>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|Enable_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2114      	movs	r1, #20
 800168a:	4835      	ldr	r0, [pc, #212]	; (8001760 <MX_GPIO_Init+0x198>)
 800168c:	f003 fc38 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	f244 0181 	movw	r1, #16513	; 0x4081
 8001696:	4833      	ldr	r0, [pc, #204]	; (8001764 <MX_GPIO_Init+0x19c>)
 8001698:	f003 fc32 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2140      	movs	r1, #64	; 0x40
 80016a0:	4831      	ldr	r0, [pc, #196]	; (8001768 <MX_GPIO_Init+0x1a0>)
 80016a2:	f003 fc2d 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	21f0      	movs	r1, #240	; 0xf0
 80016aa:	4830      	ldr	r0, [pc, #192]	; (800176c <MX_GPIO_Init+0x1a4>)
 80016ac:	f003 fc28 	bl	8004f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = RS_Pin|Enable_Pin;
 80016b0:	2314      	movs	r3, #20
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	4826      	ldr	r0, [pc, #152]	; (8001760 <MX_GPIO_Init+0x198>)
 80016c8:	f003 fa70 	bl	8004bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <MX_GPIO_Init+0x1a8>)
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4824      	ldr	r0, [pc, #144]	; (8001774 <MX_GPIO_Init+0x1ac>)
 80016e2:	f003 fa63 	bl	8004bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80016e6:	f244 0381 	movw	r3, #16513	; 0x4081
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4819      	ldr	r0, [pc, #100]	; (8001764 <MX_GPIO_Init+0x19c>)
 8001700:	f003 fa54 	bl	8004bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001704:	2340      	movs	r3, #64	; 0x40
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4813      	ldr	r0, [pc, #76]	; (8001768 <MX_GPIO_Init+0x1a0>)
 800171c:	f003 fa46 	bl	8004bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_GPIO_Init+0x1a0>)
 8001734:	f003 fa3a 	bl	8004bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 8001738:	23f0      	movs	r3, #240	; 0xf0
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <MX_GPIO_Init+0x1a4>)
 8001750:	f003 fa2c 	bl	8004bac <HAL_GPIO_Init>

}
 8001754:	bf00      	nop
 8001756:	3730      	adds	r7, #48	; 0x30
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40023800 	.word	0x40023800
 8001760:	40021000 	.word	0x40021000
 8001764:	40020400 	.word	0x40020400
 8001768:	40021800 	.word	0x40021800
 800176c:	40020c00 	.word	0x40020c00
 8001770:	10110000 	.word	0x10110000
 8001774:	40020800 	.word	0x40020800

08001778 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8001786:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800178a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800178e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001792:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8001794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001796:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001798:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800179a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 f80e 	bl	80017ce <Lcd_init>

	return lcd;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	461d      	mov	r5, r3
 80017b6:	f107 0410 	add.w	r4, r7, #16
 80017ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017c2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bdb0      	pop	{r4, r5, r7, pc}

080017ce <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7d9b      	ldrb	r3, [r3, #22]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10c      	bne.n	80017f8 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80017de:	2133      	movs	r1, #51	; 0x33
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f86d 	bl	80018c0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80017e6:	2132      	movs	r1, #50	; 0x32
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f869 	bl	80018c0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80017ee:	2128      	movs	r1, #40	; 0x28
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f865 	bl	80018c0 <lcd_write_command>
 80017f6:	e003      	b.n	8001800 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80017f8:	2138      	movs	r1, #56	; 0x38
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f860 	bl	80018c0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001800:	2101      	movs	r1, #1
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f85c 	bl	80018c0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001808:	210c      	movs	r1, #12
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f858 	bl	80018c0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001810:	2106      	movs	r1, #6
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f854 	bl	80018c0 <lcd_write_command>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	4906      	ldr	r1, [pc, #24]	; (800184c <Lcd_int+0x2c>)
 8001832:	4618      	mov	r0, r3
 8001834:	f006 ffce 	bl	80087d4 <siprintf>

	Lcd_string(lcd, buffer);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f806 	bl	8001850 <Lcd_string>
}
 8001844:	bf00      	nop
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	0800ab28 	.word	0x0800ab28

08001850 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	e00a      	b.n	8001876 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	4413      	add	r3, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f856 	bl	800191c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	3301      	adds	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	7bfc      	ldrb	r4, [r7, #15]
 8001878:	6838      	ldr	r0, [r7, #0]
 800187a:	f7fe fcc9 	bl	8000210 <strlen>
 800187e:	4603      	mov	r3, r0
 8001880:	429c      	cmp	r4, r3
 8001882:	d3ed      	bcc.n	8001860 <Lcd_string+0x10>
	}
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}

0800188c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
 8001898:	4613      	mov	r3, r2
 800189a:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <Lcd_cursor+0x30>)
 80018a0:	5cd2      	ldrb	r2, [r2, r3]
 80018a2:	78bb      	ldrb	r3, [r7, #2]
 80018a4:	4413      	add	r3, r2
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	3b80      	subs	r3, #128	; 0x80
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4619      	mov	r1, r3
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f806 	bl	80018c0 <lcd_write_command>
	#endif
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	0800ab68 	.word	0x0800ab68

080018c0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6898      	ldr	r0, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	899b      	ldrh	r3, [r3, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	f003 fb12 	bl	8004f00 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7d9b      	ldrb	r3, [r3, #22]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d111      	bne.n	8001908 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2204      	movs	r2, #4
 80018ec:	4619      	mov	r1, r3
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f842 	bl	8001978 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2204      	movs	r2, #4
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f839 	bl	8001978 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001906:	e005      	b.n	8001914 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	2208      	movs	r2, #8
 800190c:	4619      	mov	r1, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f832 	bl	8001978 <lcd_write>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6898      	ldr	r0, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	899b      	ldrh	r3, [r3, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	4619      	mov	r1, r3
 8001934:	f003 fae4 	bl	8004f00 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7d9b      	ldrb	r3, [r3, #22]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d111      	bne.n	8001964 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2204      	movs	r2, #4
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f814 	bl	8001978 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2204      	movs	r2, #4
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f80b 	bl	8001978 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001962:	e005      	b.n	8001970 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	2208      	movs	r2, #8
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f804 	bl	8001978 <lcd_write>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	70fb      	strb	r3, [r7, #3]
 8001984:	4613      	mov	r3, r2
 8001986:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e019      	b.n	80019c2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	8819      	ldrh	r1, [r3, #0]
 80019a6:	78fa      	ldrb	r2, [r7, #3]
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	fa42 f303 	asr.w	r3, r2, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	f003 faa2 	bl	8004f00 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	3301      	adds	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	78bb      	ldrb	r3, [r7, #2]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3e1      	bcc.n	800198e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6918      	ldr	r0, [r3, #16]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	8a9b      	ldrh	r3, [r3, #20]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4619      	mov	r1, r3
 80019d6:	f003 fa93 	bl	8004f00 <HAL_GPIO_WritePin>
	DELAY(1);
 80019da:	2001      	movs	r0, #1
 80019dc:	f001 fa56 	bl	8002e8c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6918      	ldr	r0, [r3, #16]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	8a9b      	ldrh	r3, [r3, #20]
 80019e8:	2200      	movs	r2, #0
 80019ea:	4619      	mov	r1, r3
 80019ec:	f003 fa88 	bl	8004f00 <HAL_GPIO_WritePin>
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <arm_pid_q31>:
   * After all multiply-accumulates are performed, the 2.62 accumulator is truncated to 1.32 format and then saturated to 1.31 format.
   */
  static __INLINE q31_t arm_pid_q31(
  arm_pid_instance_q31 * S,
  q31_t in)
  {
 80019f8:	b4f0      	push	{r4, r5, r6, r7}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
    q63_t acc;
    q31_t out;

    /* acc = A0 * x[n]  */
    acc = (q63_t) S->A0 * in;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4619      	mov	r1, r3
 8001a08:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a12:	fb03 f502 	mul.w	r5, r3, r2
 8001a16:	fb01 f004 	mul.w	r0, r1, r4
 8001a1a:	4428      	add	r0, r5
 8001a1c:	fba1 3403 	umull	r3, r4, r1, r3
 8001a20:	1902      	adds	r2, r0, r4
 8001a22:	4614      	mov	r4, r2
 8001a24:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001a28:	e9c7 3404 	strd	r3, r4, [r7, #16]

    /* acc += A1 * x[n-1] */
    acc += (q63_t) S->A1 * S->state[0];
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4619      	mov	r1, r3
 8001a32:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a3e:	fb03 f502 	mul.w	r5, r3, r2
 8001a42:	fb01 f004 	mul.w	r0, r1, r4
 8001a46:	4428      	add	r0, r5
 8001a48:	fba1 5603 	umull	r5, r6, r1, r3
 8001a4c:	1982      	adds	r2, r0, r6
 8001a4e:	4616      	mov	r6, r2
 8001a50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a54:	186b      	adds	r3, r5, r1
 8001a56:	eb46 0402 	adc.w	r4, r6, r2
 8001a5a:	e9c7 3404 	strd	r3, r4, [r7, #16]

    /* acc += A2 * x[n-2]  */
    acc += (q63_t) S->A2 * S->state[1];
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4619      	mov	r1, r3
 8001a64:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a70:	fb03 f502 	mul.w	r5, r3, r2
 8001a74:	fb01 f004 	mul.w	r0, r1, r4
 8001a78:	4428      	add	r0, r5
 8001a7a:	fba1 5603 	umull	r5, r6, r1, r3
 8001a7e:	1982      	adds	r2, r0, r6
 8001a80:	4616      	mov	r6, r2
 8001a82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a86:	186b      	adds	r3, r5, r1
 8001a88:	eb46 0402 	adc.w	r4, r6, r2
 8001a8c:	e9c7 3404 	strd	r3, r4, [r7, #16]

    /* convert output to 1.31 format to add y[n-1] */
    out = (q31_t) (acc >> 31u);
 8001a90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	f04f 0400 	mov.w	r4, #0
 8001a9c:	0fcb      	lsrs	r3, r1, #31
 8001a9e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8001aa2:	17d4      	asrs	r4, r2, #31
 8001aa4:	60fb      	str	r3, [r7, #12]

    /* out += y[n-1] */
    out += S->state[2];
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  }
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bcf0      	pop	{r4, r5, r6, r7}
 8001ace:	4770      	bx	lr

08001ad0 <Set_Sinus_Values>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//Scale samples values to set amplitude
void Set_Sinus_Values()
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
	for(int j = 0; j < 100; j++) {
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	e032      	b.n	8001b42 <Set_Sinus_Values+0x72>
		sine[j] = (float)sine[j] * A * 2.0 / 3.3;
 8001adc:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <Set_Sinus_Values+0x88>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aec:	ee17 0a90 	vmov	r0, s15
 8001af0:	f7fe fd4a 	bl	8000588 <__aeabi_f2d>
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <Set_Sinus_Values+0x8c>)
 8001af6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4623      	mov	r3, r4
 8001afe:	f7fe fd9b 	bl	8000638 <__aeabi_dmul>
 8001b02:	4603      	mov	r3, r0
 8001b04:	460c      	mov	r4, r1
 8001b06:	4618      	mov	r0, r3
 8001b08:	4621      	mov	r1, r4
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	f7fe fbdd 	bl	80002cc <__adddf3>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	4618      	mov	r0, r3
 8001b18:	4621      	mov	r1, r4
 8001b1a:	a30d      	add	r3, pc, #52	; (adr r3, 8001b50 <Set_Sinus_Values+0x80>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe feb4 	bl	800088c <__aeabi_ddiv>
 8001b24:	4603      	mov	r3, r0
 8001b26:	460c      	mov	r4, r1
 8001b28:	4618      	mov	r0, r3
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	f7ff f85c 	bl	8000be8 <__aeabi_d2uiz>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b299      	uxth	r1, r3
 8001b34:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <Set_Sinus_Values+0x88>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j = 0; j < 100; j++) {
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b63      	cmp	r3, #99	; 0x63
 8001b46:	ddc9      	ble.n	8001adc <Set_Sinus_Values+0xc>
	}
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd90      	pop	{r4, r7, pc}
 8001b50:	66666666 	.word	0x66666666
 8001b54:	400a6666 	.word	0x400a6666
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000000 	.word	0x20000000

08001b60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) { //If interrupt comes from timer 2
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b70:	d102      	bne.n	8001b78 <HAL_TIM_PeriodElapsedCallback+0x18>
		ifDisplay = 1;
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM3) { //If interrupt comes from timer 3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a35      	ldr	r2, [pc, #212]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d102      	bne.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0x28>
		ifPID=1;
 8001b82:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM4){ //If interrupt comes from timer 4
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a33      	ldr	r2, [pc, #204]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d116      	bne.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x60>
		//HAL_GPIO_WritePin(_GPIO_Port, _Pin, GPIO_PIN_SET);
		i += 1;
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	4a31      	ldr	r2, [pc, #196]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b9a:	6013      	str	r3, [r2, #0]
		if (i >= 50) {
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b31      	cmp	r3, #49	; 0x31
 8001ba2:	dd02      	ble.n	8001baa <HAL_TIM_PeriodElapsedCallback+0x4a>
			i = 0;
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
		}
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sine[2*i]);
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4a2c      	ldr	r2, [pc, #176]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2110      	movs	r1, #16
 8001bba:	482b      	ldr	r0, [pc, #172]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bbc:	f001 ffc2 	bl	8003b44 <HAL_DAC_SetValue>
		//HAL_GPIO_WritePin(_GPIO_Port, _Pin, GPIO_PIN_RESET);
	}
	if(htim->Instance == TIM5){ //If interrupt comes from timer 5
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a29      	ldr	r2, [pc, #164]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d123      	bne.n	8001c12 <HAL_TIM_PeriodElapsedCallback+0xb2>
		int previous_pot = pot_value;
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	60fb      	str	r3, [r7, #12]
		pot_value = pot_read_from_DMA;
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001bd6:	6013      	str	r3, [r2, #0]
		if (pot_value > previous_pot + 100 || pot_value < previous_pot - 100) {
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3364      	adds	r3, #100	; 0x64
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d306      	bcc.n	8001bf4 <HAL_TIM_PeriodElapsedCallback+0x94>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3b64      	subs	r3, #100	; 0x64
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d90e      	bls.n	8001c12 <HAL_TIM_PeriodElapsedCallback+0xb2>
			sensor_setpoint = pot_value * 250 / 4095 + 100;
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	22fa      	movs	r2, #250	; 0xfa
 8001bfa:	fb02 f203 	mul.w	r2, r2, r3
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001c00:	fba3 1302 	umull	r1, r3, r3, r2
 8001c04:	1ad2      	subs	r2, r2, r3
 8001c06:	0852      	lsrs	r2, r2, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	0adb      	lsrs	r3, r3, #11
 8001c0c:	3364      	adds	r3, #100	; 0x64
 8001c0e:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001c10:	6013      	str	r3, [r2, #0]
		}
	}
	if(htim->Instance == TIM6){ //If interrupt comes from timer 6
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d114      	bne.n	8001c46 <HAL_TIM_PeriodElapsedCallback+0xe6>
		if(current_sample < BUFFER_SIZE) {
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2264      	movs	r2, #100	; 0x64
 8001c22:	4293      	cmp	r3, r2
 8001c24:	da0c      	bge.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0xe0>
			sensor_values_buffer[current_sample] = sensor_read_from_DMA;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	4917      	ldr	r1, [pc, #92]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			current_sample++;
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001c3c:	6013      	str	r3, [r2, #0]
		}
		else {
			calculateRMS = 1;
		}
	}
}
 8001c3e:	e002      	b.n	8001c46 <HAL_TIM_PeriodElapsedCallback+0xe6>
			calculateRMS = 1;
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000304 	.word	0x20000304
 8001c54:	40000400 	.word	0x40000400
 8001c58:	20000320 	.word	0x20000320
 8001c5c:	40000800 	.word	0x40000800
 8001c60:	200002e8 	.word	0x200002e8
 8001c64:	20000008 	.word	0x20000008
 8001c68:	20000480 	.word	0x20000480
 8001c6c:	40000c00 	.word	0x40000c00
 8001c70:	200002ec 	.word	0x200002ec
 8001c74:	200002f0 	.word	0x200002f0
 8001c78:	00100101 	.word	0x00100101
 8001c7c:	2000031c 	.word	0x2000031c
 8001c80:	40001000 	.word	0x40001000
 8001c84:	200002f8 	.word	0x200002f8
 8001c88:	200002fc 	.word	0x200002fc
 8001c8c:	200004dc 	.word	0x200004dc
 8001c90:	20000300 	.word	0x20000300

08001c94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	//Listening again
	UART_status = HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedMessage, 3);
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4911      	ldr	r1, [pc, #68]	; (8001ce4 <HAL_UART_RxCpltCallback+0x50>)
 8001ca0:	4811      	ldr	r0, [pc, #68]	; (8001ce8 <HAL_UART_RxCpltCallback+0x54>)
 8001ca2:	f005 fc23 	bl	80074ec <HAL_UART_Receive_IT>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_UART_RxCpltCallback+0x58>)
 8001cac:	601a      	str	r2, [r3, #0]
		savedMessage[i] = receivedMessage[i];
	}
	receivedMessage[0] = '\0';
	*/

	sscanf((char*)receivedMessage, "%d", &setpoint_read_from_UART);
 8001cae:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <HAL_UART_RxCpltCallback+0x5c>)
 8001cb0:	4910      	ldr	r1, [pc, #64]	; (8001cf4 <HAL_UART_RxCpltCallback+0x60>)
 8001cb2:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <HAL_UART_RxCpltCallback+0x50>)
 8001cb4:	f006 fdae 	bl	8008814 <siscanf>
	receivedMessage[0] = '\0';
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_UART_RxCpltCallback+0x50>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]

	if (setpoint_read_from_UART >= 100 && setpoint_read_from_UART <= 350) {
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_UART_RxCpltCallback+0x5c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b63      	cmp	r3, #99	; 0x63
 8001cc4:	dd09      	ble.n	8001cda <HAL_UART_RxCpltCallback+0x46>
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_UART_RxCpltCallback+0x5c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001cce:	dc04      	bgt.n	8001cda <HAL_UART_RxCpltCallback+0x46>
		sensor_setpoint = setpoint_read_from_UART;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_UART_RxCpltCallback+0x5c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_UART_RxCpltCallback+0x64>)
 8001cd8:	601a      	str	r2, [r3, #0]
	}
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000310 	.word	0x20000310
 8001ce8:	2000088c 	.word	0x2000088c
 8001cec:	20000314 	.word	0x20000314
 8001cf0:	20000318 	.word	0x20000318
 8001cf4:	0800ab2c 	.word	0x0800ab2c
 8001cf8:	2000031c 	.word	0x2000031c
 8001cfc:	00000000 	.word	0x00000000

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b097      	sub	sp, #92	; 0x5c
 8001d04:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d06:	f001 f864 	bl	8002dd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0a:	f000 f985 	bl	8002018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0e:	f7ff fc5b 	bl	80015c8 <MX_GPIO_Init>
  MX_ETH_Init();
 8001d12:	f7ff fb61 	bl	80013d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001d16:	f000 fec3 	bl	8002aa0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d1a:	f000 ffa7 	bl	8002c6c <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8001d1e:	f7ff fb35 	bl	800138c <MX_DMA_Init>
  MX_ADC1_Init();
 8001d22:	f7ff f901 	bl	8000f28 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001d26:	f000 fbbd 	bl	80024a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d2a:	f000 fc67 	bl	80025fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d2e:	f000 fcb3 	bl	8002698 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d32:	f000 fd01 	bl	8002738 <MX_TIM4_Init>
  MX_DAC_Init();
 8001d36:	f7ff fab7 	bl	80012a8 <MX_DAC_Init>
  MX_ADC2_Init();
 8001d3a:	f7ff f947 	bl	8000fcc <MX_ADC2_Init>
  MX_TIM5_Init();
 8001d3e:	f000 fd49 	bl	80027d4 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001d42:	f000 fedd 	bl	8002b00 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8001d46:	f000 fd95 	bl	8002874 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //Start tim2 to write data from joystick to the lcd display
  HAL_TIM_Base_Start_IT(&htim2);
 8001d4a:	4893      	ldr	r0, [pc, #588]	; (8001f98 <main+0x298>)
 8001d4c:	f004 fb0c 	bl	8006368 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001d50:	4892      	ldr	r0, [pc, #584]	; (8001f9c <main+0x29c>)
 8001d52:	f004 fb09 	bl	8006368 <HAL_TIM_Base_Start_IT>

  //Create lcd
  my_lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, Enable_GPIO_Port, Enable_Pin, LCD_4_BIT_MODE);
 8001d56:	4c92      	ldr	r4, [pc, #584]	; (8001fa0 <main+0x2a0>)
 8001d58:	4638      	mov	r0, r7
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9303      	str	r3, [sp, #12]
 8001d5e:	2310      	movs	r3, #16
 8001d60:	9302      	str	r3, [sp, #8]
 8001d62:	4b90      	ldr	r3, [pc, #576]	; (8001fa4 <main+0x2a4>)
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	2304      	movs	r3, #4
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	4b8e      	ldr	r3, [pc, #568]	; (8001fa4 <main+0x2a4>)
 8001d6c:	4a8e      	ldr	r2, [pc, #568]	; (8001fa8 <main+0x2a8>)
 8001d6e:	498f      	ldr	r1, [pc, #572]	; (8001fac <main+0x2ac>)
 8001d70:	f7ff fd02 	bl	8001778 <Lcd_create>
 8001d74:	4625      	mov	r5, r4
 8001d76:	463c      	mov	r4, r7
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d80:	e885 0003 	stmia.w	r5, {r0, r1}

  //Initialize micro servo sg90
  Servo_Init(&servo1, &htim1, TIM_CHANNEL_4);
 8001d84:	220c      	movs	r2, #12
 8001d86:	498a      	ldr	r1, [pc, #552]	; (8001fb0 <main+0x2b0>)
 8001d88:	488a      	ldr	r0, [pc, #552]	; (8001fb4 <main+0x2b4>)
 8001d8a:	f000 f9f2 	bl	8002172 <Servo_Init>

  //Sinus
  Set_Sinus_Values();
 8001d8e:	f7ff fe9f 	bl	8001ad0 <Set_Sinus_Values>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001d92:	2110      	movs	r1, #16
 8001d94:	4888      	ldr	r0, [pc, #544]	; (8001fb8 <main+0x2b8>)
 8001d96:	f001 fdce 	bl	8003936 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001d9a:	4888      	ldr	r0, [pc, #544]	; (8001fbc <main+0x2bc>)
 8001d9c:	f004 fae4 	bl	8006368 <HAL_TIM_Base_Start_IT>

  //Interrupts for DMA adc1 (potentiometer)
  HAL_TIM_Base_Start_IT(&htim5);
 8001da0:	4887      	ldr	r0, [pc, #540]	; (8001fc0 <main+0x2c0>)
 8001da2:	f004 fae1 	bl	8006368 <HAL_TIM_Base_Start_IT>

  //Interrupts for DMA adc2 (sensor)
  HAL_TIM_Base_Start_IT(&htim6);
 8001da6:	4887      	ldr	r0, [pc, #540]	; (8001fc4 <main+0x2c4>)
 8001da8:	f004 fade 	bl	8006368 <HAL_TIM_Base_Start_IT>

  //Start ADC conversion from the potentiometer and sensor
  HAL_ADC_Start_DMA(&hadc1, &pot_read_from_DMA, 1);
 8001dac:	2201      	movs	r2, #1
 8001dae:	4986      	ldr	r1, [pc, #536]	; (8001fc8 <main+0x2c8>)
 8001db0:	4886      	ldr	r0, [pc, #536]	; (8001fcc <main+0x2cc>)
 8001db2:	f001 f8d1 	bl	8002f58 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &sensor_read_from_DMA, 1);
 8001db6:	2201      	movs	r2, #1
 8001db8:	4985      	ldr	r1, [pc, #532]	; (8001fd0 <main+0x2d0>)
 8001dba:	4886      	ldr	r0, [pc, #536]	; (8001fd4 <main+0x2d4>)
 8001dbc:	f001 f8cc 	bl	8002f58 <HAL_ADC_Start_DMA>

  //UART listening
  UART_status = HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedMessage, 3);
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	4985      	ldr	r1, [pc, #532]	; (8001fd8 <main+0x2d8>)
 8001dc4:	4885      	ldr	r0, [pc, #532]	; (8001fdc <main+0x2dc>)
 8001dc6:	f005 fb91 	bl	80074ec <HAL_UART_Receive_IT>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b84      	ldr	r3, [pc, #528]	; (8001fe0 <main+0x2e0>)
 8001dd0:	601a      	str	r2, [r3, #0]
  /* ARM PID Instance */
  arm_pid_instance_q31 PID;

  /* Set PID parameters */
  /* Set this for your needs */
  PID.Kp = PID_PARAM_KP;        /* Proporcional */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
  PID.Ki = PID_PARAM_KI;        /* Integral */
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
  PID.Kd = PID_PARAM_KD;        /* Derivative */
 8001dda:	230a      	movs	r3, #10
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Initialize PID system */
  arm_pid_init_q31(&PID, 1);
 8001dde:	f107 0318 	add.w	r3, r7, #24
 8001de2:	2101      	movs	r1, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fa17 	bl	8001218 <arm_pid_init_q31>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ifDisplay == 1) {
 8001dea:	4b7e      	ldr	r3, [pc, #504]	; (8001fe4 <main+0x2e4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d132      	bne.n	8001e58 <main+0x158>
		  Lcd_cursor(&my_lcd, 0, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	486a      	ldr	r0, [pc, #424]	; (8001fa0 <main+0x2a0>)
 8001df8:	f7ff fd48 	bl	800188c <Lcd_cursor>
		  Lcd_string(&my_lcd, "                ");
 8001dfc:	497a      	ldr	r1, [pc, #488]	; (8001fe8 <main+0x2e8>)
 8001dfe:	4868      	ldr	r0, [pc, #416]	; (8001fa0 <main+0x2a0>)
 8001e00:	f7ff fd26 	bl	8001850 <Lcd_string>
		  Lcd_cursor(&my_lcd, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	4865      	ldr	r0, [pc, #404]	; (8001fa0 <main+0x2a0>)
 8001e0a:	f7ff fd3f 	bl	800188c <Lcd_cursor>
		  Lcd_string(&my_lcd, "Sensor: ");
 8001e0e:	4977      	ldr	r1, [pc, #476]	; (8001fec <main+0x2ec>)
 8001e10:	4863      	ldr	r0, [pc, #396]	; (8001fa0 <main+0x2a0>)
 8001e12:	f7ff fd1d 	bl	8001850 <Lcd_string>
		  Lcd_int(&my_lcd, sensor_RMS);
 8001e16:	4b76      	ldr	r3, [pc, #472]	; (8001ff0 <main+0x2f0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4860      	ldr	r0, [pc, #384]	; (8001fa0 <main+0x2a0>)
 8001e1e:	f7ff fcff 	bl	8001820 <Lcd_int>
		  Lcd_cursor(&my_lcd, 1, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2101      	movs	r1, #1
 8001e26:	485e      	ldr	r0, [pc, #376]	; (8001fa0 <main+0x2a0>)
 8001e28:	f7ff fd30 	bl	800188c <Lcd_cursor>
		  Lcd_string(&my_lcd, "                ");
 8001e2c:	496e      	ldr	r1, [pc, #440]	; (8001fe8 <main+0x2e8>)
 8001e2e:	485c      	ldr	r0, [pc, #368]	; (8001fa0 <main+0x2a0>)
 8001e30:	f7ff fd0e 	bl	8001850 <Lcd_string>
		  Lcd_cursor(&my_lcd, 1, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2101      	movs	r1, #1
 8001e38:	4859      	ldr	r0, [pc, #356]	; (8001fa0 <main+0x2a0>)
 8001e3a:	f7ff fd27 	bl	800188c <Lcd_cursor>
		  Lcd_string(&my_lcd, "Setpoint: ");
 8001e3e:	496d      	ldr	r1, [pc, #436]	; (8001ff4 <main+0x2f4>)
 8001e40:	4857      	ldr	r0, [pc, #348]	; (8001fa0 <main+0x2a0>)
 8001e42:	f7ff fd05 	bl	8001850 <Lcd_string>
		  Lcd_int(&my_lcd, sensor_setpoint);
 8001e46:	4b6c      	ldr	r3, [pc, #432]	; (8001ff8 <main+0x2f8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4854      	ldr	r0, [pc, #336]	; (8001fa0 <main+0x2a0>)
 8001e4e:	f7ff fce7 	bl	8001820 <Lcd_int>
		  ifDisplay = 0;
 8001e52:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <main+0x2e4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
	  }
	  if(calculateRMS) {
 8001e58:	4b68      	ldr	r3, [pc, #416]	; (8001ffc <main+0x2fc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d050      	beq.n	8001f02 <main+0x202>
			int squares_sum = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	647b      	str	r3, [r7, #68]	; 0x44
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8001e64:	2300      	movs	r3, #0
 8001e66:	643b      	str	r3, [r7, #64]	; 0x40
 8001e68:	e026      	b.n	8001eb8 <main+0x1b8>
				squares_sum += pow(sensor_values_buffer[i], 2);
 8001e6a:	4a65      	ldr	r2, [pc, #404]	; (8002000 <main+0x300>)
 8001e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb66 	bl	8000544 <__aeabi_ui2d>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8001f90 <main+0x290>
 8001e80:	ec44 3b10 	vmov	d0, r3, r4
 8001e84:	f007 fd92 	bl	80099ac <pow>
 8001e88:	ec56 5b10 	vmov	r5, r6, d0
 8001e8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001e8e:	f7fe fb69 	bl	8000564 <__aeabi_i2d>
 8001e92:	4603      	mov	r3, r0
 8001e94:	460c      	mov	r4, r1
 8001e96:	461a      	mov	r2, r3
 8001e98:	4623      	mov	r3, r4
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	4631      	mov	r1, r6
 8001e9e:	f7fe fa15 	bl	80002cc <__adddf3>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	f7fe fe75 	bl	8000b98 <__aeabi_d2iz>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
			for (int i = 0; i < BUFFER_SIZE; i++) {
 8001eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8001eb8:	2264      	movs	r2, #100	; 0x64
 8001eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	dbd4      	blt.n	8001e6a <main+0x16a>
			}
			sensor_RMS = sqrt(squares_sum / 100.0);
 8001ec0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ec2:	f7fe fb4f 	bl	8000564 <__aeabi_i2d>
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	4b4e      	ldr	r3, [pc, #312]	; (8002004 <main+0x304>)
 8001ecc:	f7fe fcde 	bl	800088c <__aeabi_ddiv>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	460c      	mov	r4, r1
 8001ed4:	ec44 3b17 	vmov	d7, r3, r4
 8001ed8:	eeb0 0a47 	vmov.f32	s0, s14
 8001edc:	eef0 0a67 	vmov.f32	s1, s15
 8001ee0:	f007 fed4 	bl	8009c8c <sqrt>
 8001ee4:	ec54 3b10 	vmov	r3, r4, d0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	4621      	mov	r1, r4
 8001eec:	f7fe fe7c 	bl	8000be8 <__aeabi_d2uiz>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <main+0x2f0>)
 8001ef4:	601a      	str	r2, [r3, #0]
			current_sample = 0;
 8001ef6:	4b44      	ldr	r3, [pc, #272]	; (8002008 <main+0x308>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
			calculateRMS = 0;
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <main+0x2fc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

		  ifUART = 0;
	  }
	  */

	  if(ifPID)
 8001f02:	4b42      	ldr	r3, [pc, #264]	; (800200c <main+0x30c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f43f af6f 	beq.w	8001dea <main+0xea>
	  {
		  //PID control
		  /* Calculate error */
		  pid_error = sensor_setpoint - sensor_RMS;
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ff8 <main+0x2f8>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <main+0x2f0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	63fb      	str	r3, [r7, #60]	; 0x3c

		  /* Calculate PID here, argument is error */
		 angle_correction = arm_pid_q31(&PID, pid_error);
 8001f18:	f107 0318 	add.w	r3, r7, #24
 8001f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fd6a 	bl	80019f8 <arm_pid_q31>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <main+0x310>)
 8001f28:	601a      	str	r2, [r3, #0]
		 if(angle_correction < -5) {
 8001f2a:	4b39      	ldr	r3, [pc, #228]	; (8002010 <main+0x310>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f113 0f05 	cmn.w	r3, #5
 8001f32:	da03      	bge.n	8001f3c <main+0x23c>
			 angle_correction = -5;
 8001f34:	4b36      	ldr	r3, [pc, #216]	; (8002010 <main+0x310>)
 8001f36:	f06f 0204 	mvn.w	r2, #4
 8001f3a:	601a      	str	r2, [r3, #0]
		 }
		 if(pid_error > 0) {
 8001f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	dd04      	ble.n	8001f4c <main+0x24c>
			 angle_correction *= -1;
 8001f42:	4b33      	ldr	r3, [pc, #204]	; (8002010 <main+0x310>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	425b      	negs	r3, r3
 8001f48:	4a31      	ldr	r2, [pc, #196]	; (8002010 <main+0x310>)
 8001f4a:	6013      	str	r3, [r2, #0]
		 }
		 angle = angle + angle_correction;
 8001f4c:	4b31      	ldr	r3, [pc, #196]	; (8002014 <main+0x314>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <main+0x310>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <main+0x314>)
 8001f58:	6013      	str	r3, [r2, #0]

		  if (angle < 5) {
 8001f5a:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <main+0x314>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	dc03      	bgt.n	8001f6a <main+0x26a>
			  angle = 5;
 8001f62:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <main+0x314>)
 8001f64:	2205      	movs	r2, #5
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e006      	b.n	8001f78 <main+0x278>
		  }
		  else if (angle > 175) {
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <main+0x314>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2baf      	cmp	r3, #175	; 0xaf
 8001f70:	dd02      	ble.n	8001f78 <main+0x278>
			  angle = 175;
 8001f72:	4b28      	ldr	r3, [pc, #160]	; (8002014 <main+0x314>)
 8001f74:	22af      	movs	r2, #175	; 0xaf
 8001f76:	601a      	str	r2, [r3, #0]
		  }

		  Servo_SetAngle(&servo1, angle);
 8001f78:	4b26      	ldr	r3, [pc, #152]	; (8002014 <main+0x314>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <main+0x2b4>)
 8001f82:	f000 f92a 	bl	80021da <Servo_SetAngle>
		  ifPID = 0;
 8001f86:	4b21      	ldr	r3, [pc, #132]	; (800200c <main+0x30c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
	  if(ifDisplay == 1) {
 8001f8c:	e72d      	b.n	8001dea <main+0xea>
 8001f8e:	bf00      	nop
 8001f90:	00000000 	.word	0x00000000
 8001f94:	40000000 	.word	0x40000000
 8001f98:	200007cc 	.word	0x200007cc
 8001f9c:	2000070c 	.word	0x2000070c
 8001fa0:	20000674 	.word	0x20000674
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	200000e4 	.word	0x200000e4
 8001fac:	200000d4 	.word	0x200000d4
 8001fb0:	2000078c 	.word	0x2000078c
 8001fb4:	2000066c 	.word	0x2000066c
 8001fb8:	20000480 	.word	0x20000480
 8001fbc:	2000068c 	.word	0x2000068c
 8001fc0:	200006cc 	.word	0x200006cc
 8001fc4:	2000074c 	.word	0x2000074c
 8001fc8:	200002f0 	.word	0x200002f0
 8001fcc:	20000378 	.word	0x20000378
 8001fd0:	200002fc 	.word	0x200002fc
 8001fd4:	20000330 	.word	0x20000330
 8001fd8:	20000310 	.word	0x20000310
 8001fdc:	2000088c 	.word	0x2000088c
 8001fe0:	20000314 	.word	0x20000314
 8001fe4:	20000304 	.word	0x20000304
 8001fe8:	0800ab30 	.word	0x0800ab30
 8001fec:	0800ab44 	.word	0x0800ab44
 8001ff0:	200002f4 	.word	0x200002f4
 8001ff4:	0800ab50 	.word	0x0800ab50
 8001ff8:	2000031c 	.word	0x2000031c
 8001ffc:	20000300 	.word	0x20000300
 8002000:	200004dc 	.word	0x200004dc
 8002004:	40590000 	.word	0x40590000
 8002008:	200002f8 	.word	0x200002f8
 800200c:	20000320 	.word	0x20000320
 8002010:	2000030c 	.word	0x2000030c
 8002014:	20000308 	.word	0x20000308

08002018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b0b4      	sub	sp, #208	; 0xd0
 800201c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800201e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002022:	2230      	movs	r2, #48	; 0x30
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f006 fbcc 	bl	80087c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800202c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	2284      	movs	r2, #132	; 0x84
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f006 fbbd 	bl	80087c4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800204a:	f003 f8af 	bl	80051ac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b42      	ldr	r3, [pc, #264]	; (8002158 <SystemClock_Config+0x140>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a41      	ldr	r2, [pc, #260]	; (8002158 <SystemClock_Config+0x140>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <SystemClock_Config+0x140>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <SystemClock_Config+0x144>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800206e:	4a3b      	ldr	r2, [pc, #236]	; (800215c <SystemClock_Config+0x144>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b39      	ldr	r3, [pc, #228]	; (800215c <SystemClock_Config+0x144>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002082:	2301      	movs	r3, #1
 8002084:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002088:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800208c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800209a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800209e:	2304      	movs	r3, #4
 80020a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 108;
 80020a4:	236c      	movs	r3, #108	; 0x6c
 80020a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80020b0:	2303      	movs	r3, #3
 80020b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 f8d6 	bl	800526c <HAL_RCC_OscConfig>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80020c6:	f000 f84d 	bl	8002164 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020ca:	f003 f87f 	bl	80051cc <HAL_PWREx_EnableOverDrive>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020d4:	f000 f846 	bl	8002164 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d8:	230f      	movs	r3, #15
 80020da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020de:	2302      	movs	r3, #2
 80020e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80020fc:	2103      	movs	r1, #3
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 fb24 	bl	800574c <HAL_RCC_ClockConfig>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800210a:	f000 f82b 	bl	8002164 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <SystemClock_Config+0x148>)
 8002110:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8002112:	2360      	movs	r3, #96	; 0x60
 8002114:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002116:	2302      	movs	r3, #2
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800211a:	2302      	movs	r3, #2
 800211c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800211e:	2301      	movs	r3, #1
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002126:	2300      	movs	r3, #0
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800212a:	2300      	movs	r3, #0
 800212c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800212e:	2300      	movs	r3, #0
 8002130:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002132:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800213a:	f107 0308 	add.w	r3, r7, #8
 800213e:	4618      	mov	r0, r3
 8002140:	f003 fcf8 	bl	8005b34 <HAL_RCCEx_PeriphCLKConfig>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <SystemClock_Config+0x136>
  {
    Error_Handler();
 800214a:	f000 f80b 	bl	8002164 <Error_Handler>
  }
}
 800214e:	bf00      	nop
 8002150:	37d0      	adds	r7, #208	; 0xd0
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40007000 	.word	0x40007000
 8002160:	00200900 	.word	0x00200900

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <Servo_Init>:

//
//	Servo innitialization
//
void Servo_Init(servo_t *servo, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
	servo->htim = _htim;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	601a      	str	r2, [r3, #0]
	servo->channel = _channel;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_Start(servo->htim, servo->channel);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	4619      	mov	r1, r3
 8002194:	4610      	mov	r0, r2
 8002196:	f004 f947 	bl	8006428 <HAL_TIM_PWM_Start>
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <map>:

//
//	map help function
//
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b085      	sub	sp, #20
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	1a8a      	subs	r2, r1, r2
 80021bc:	fb02 f203 	mul.w	r2, r2, r3
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1acb      	subs	r3, r1, r3
 80021c6:	fb92 f2f3 	sdiv	r2, r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	4413      	add	r3, r2
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <Servo_SetAngle>:

//
//	Servo set angle function
//
void Servo_SetAngle(servo_t *servo, uint16_t angle)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af02      	add	r7, sp, #8
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	807b      	strh	r3, [r7, #2]
	if(angle < 0) angle = 0;
	if(angle > 180) angle = 180;
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	2bb4      	cmp	r3, #180	; 0xb4
 80021ea:	d901      	bls.n	80021f0 <Servo_SetAngle+0x16>
 80021ec:	23b4      	movs	r3, #180	; 0xb4
 80021ee:	807b      	strh	r3, [r7, #2]

	  uint16_t tmp = map(angle, ANGLE_MIN, ANGLE_MAX, SERVO_MIN, SERVO_MAX);
 80021f0:	8878      	ldrh	r0, [r7, #2]
 80021f2:	f640 137e 	movw	r3, #2430	; 0x97e
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	f240 2326 	movw	r3, #550	; 0x226
 80021fc:	22b4      	movs	r2, #180	; 0xb4
 80021fe:	2100      	movs	r1, #0
 8002200:	f7ff ffcf 	bl	80021a2 <map>
 8002204:	4603      	mov	r3, r0
 8002206:	81fb      	strh	r3, [r7, #14]
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <Servo_SetAngle+0x42>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	89fa      	ldrh	r2, [r7, #14]
 8002218:	635a      	str	r2, [r3, #52]	; 0x34
}
 800221a:	e02c      	b.n	8002276 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d105      	bne.n	8002230 <Servo_SetAngle+0x56>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	89fa      	ldrh	r2, [r7, #14]
 800222c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800222e:	e022      	b.n	8002276 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b08      	cmp	r3, #8
 8002236:	d105      	bne.n	8002244 <Servo_SetAngle+0x6a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	89fa      	ldrh	r2, [r7, #14]
 8002240:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002242:	e018      	b.n	8002276 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b0c      	cmp	r3, #12
 800224a:	d105      	bne.n	8002258 <Servo_SetAngle+0x7e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	89fa      	ldrh	r2, [r7, #14]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002256:	e00e      	b.n	8002276 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b10      	cmp	r3, #16
 800225e:	d105      	bne.n	800226c <Servo_SetAngle+0x92>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	89fa      	ldrh	r2, [r7, #14]
 8002268:	659a      	str	r2, [r3, #88]	; 0x58
}
 800226a:	e004      	b.n	8002276 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	89fa      	ldrh	r2, [r7, #14]
 8002274:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <HAL_MspInit+0x44>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <HAL_MspInit+0x44>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <HAL_MspInit+0x44>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <HAL_MspInit+0x44>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a08      	ldr	r2, [pc, #32]	; (80022c4 <HAL_MspInit+0x44>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_MspInit+0x44>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800

080022c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022da:	e7fe      	b.n	80022da <HardFault_Handler+0x4>

080022dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <MemManage_Handler+0x4>

080022e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e6:	e7fe      	b.n	80022e6 <BusFault_Handler+0x4>

080022e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <UsageFault_Handler+0x4>

080022ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231c:	f000 fd96 	bl	8002e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}

08002324 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <TIM2_IRQHandler+0x10>)
 800232a:	f004 f8c1 	bl	80064b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200007cc 	.word	0x200007cc

08002338 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <TIM3_IRQHandler+0x10>)
 800233e:	f004 f8b7 	bl	80064b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2000070c 	.word	0x2000070c

0800234c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <TIM4_IRQHandler+0x10>)
 8002352:	f004 f8ad 	bl	80064b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	2000068c 	.word	0x2000068c

08002360 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <USART3_IRQHandler+0x10>)
 8002366:	f005 f963 	bl	8007630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000080c 	.word	0x2000080c

08002374 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <TIM5_IRQHandler+0x10>)
 800237a:	f004 f899 	bl	80064b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200006cc 	.word	0x200006cc

08002388 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <TIM6_DAC_IRQHandler+0x14>)
 800238e:	f001 fb38 	bl	8003a02 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002392:	4803      	ldr	r0, [pc, #12]	; (80023a0 <TIM6_DAC_IRQHandler+0x18>)
 8002394:	f004 f88c 	bl	80064b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000480 	.word	0x20000480
 80023a0:	2000074c 	.word	0x2000074c

080023a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <DMA2_Stream0_IRQHandler+0x10>)
 80023aa:	f001 fd2b 	bl	8003e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200003c0 	.word	0x200003c0

080023b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <DMA2_Stream2_IRQHandler+0x10>)
 80023be:	f001 fd21 	bl	8003e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000420 	.word	0x20000420

080023cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <USART6_IRQHandler+0x10>)
 80023d2:	f005 f92d 	bl	8007630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	2000088c 	.word	0x2000088c

080023e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <_sbrk+0x50>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <_sbrk+0x16>
		heap_end = &end;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <_sbrk+0x50>)
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <_sbrk+0x54>)
 80023f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <_sbrk+0x50>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <_sbrk+0x50>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	466a      	mov	r2, sp
 8002406:	4293      	cmp	r3, r2
 8002408:	d907      	bls.n	800241a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800240a:	f006 f9b1 	bl	8008770 <__errno>
 800240e:	4602      	mov	r2, r0
 8002410:	230c      	movs	r3, #12
 8002412:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
 8002418:	e006      	b.n	8002428 <_sbrk+0x48>
	}

	heap_end += incr;
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <_sbrk+0x50>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	4a03      	ldr	r2, [pc, #12]	; (8002430 <_sbrk+0x50>)
 8002424:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000324 	.word	0x20000324
 8002434:	20000d18 	.word	0x20000d18

08002438 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <SystemInit+0x5c>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	4a14      	ldr	r2, [pc, #80]	; (8002494 <SystemInit+0x5c>)
 8002444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <SystemInit+0x60>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a11      	ldr	r2, [pc, #68]	; (8002498 <SystemInit+0x60>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <SystemInit+0x60>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <SystemInit+0x60>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	490d      	ldr	r1, [pc, #52]	; (8002498 <SystemInit+0x60>)
 8002464:	4b0d      	ldr	r3, [pc, #52]	; (800249c <SystemInit+0x64>)
 8002466:	4013      	ands	r3, r2
 8002468:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <SystemInit+0x60>)
 800246c:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <SystemInit+0x68>)
 800246e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <SystemInit+0x60>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a08      	ldr	r2, [pc, #32]	; (8002498 <SystemInit+0x60>)
 8002476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <SystemInit+0x60>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <SystemInit+0x5c>)
 8002484:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002488:	609a      	str	r2, [r3, #8]
#endif
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00
 8002498:	40023800 	.word	0x40023800
 800249c:	fef6ffff 	.word	0xfef6ffff
 80024a0:	24003010 	.word	0x24003010

080024a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b09a      	sub	sp, #104	; 0x68
 80024a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
 80024d4:	615a      	str	r2, [r3, #20]
 80024d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	222c      	movs	r2, #44	; 0x2c
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f006 f970 	bl	80087c4 <memset>

  htim1.Instance = TIM1;
 80024e4:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <MX_TIM1_Init+0x150>)
 80024e6:	4a44      	ldr	r2, [pc, #272]	; (80025f8 <MX_TIM1_Init+0x154>)
 80024e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 107;
 80024ea:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <MX_TIM1_Init+0x150>)
 80024ec:	226b      	movs	r2, #107	; 0x6b
 80024ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f0:	4b40      	ldr	r3, [pc, #256]	; (80025f4 <MX_TIM1_Init+0x150>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80024f6:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <MX_TIM1_Init+0x150>)
 80024f8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80024fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <MX_TIM1_Init+0x150>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002504:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <MX_TIM1_Init+0x150>)
 8002506:	2200      	movs	r2, #0
 8002508:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250a:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <MX_TIM1_Init+0x150>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002510:	4838      	ldr	r0, [pc, #224]	; (80025f4 <MX_TIM1_Init+0x150>)
 8002512:	f003 fefd 	bl	8006310 <HAL_TIM_Base_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800251c:	f7ff fe22 	bl	8002164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002524:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002526:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800252a:	4619      	mov	r1, r3
 800252c:	4831      	ldr	r0, [pc, #196]	; (80025f4 <MX_TIM1_Init+0x150>)
 800252e:	f004 f9f7 	bl	8006920 <HAL_TIM_ConfigClockSource>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002538:	f7ff fe14 	bl	8002164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800253c:	482d      	ldr	r0, [pc, #180]	; (80025f4 <MX_TIM1_Init+0x150>)
 800253e:	f003 ff3d 	bl	80063bc <HAL_TIM_PWM_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002548:	f7ff fe0c 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002550:	2300      	movs	r3, #0
 8002552:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002558:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800255c:	4619      	mov	r1, r3
 800255e:	4825      	ldr	r0, [pc, #148]	; (80025f4 <MX_TIM1_Init+0x150>)
 8002560:	f004 fe7e 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800256a:	f7ff fdfb 	bl	8002164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256e:	2360      	movs	r3, #96	; 0x60
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8002572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002578:	2300      	movs	r3, #0
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800258c:	220c      	movs	r2, #12
 800258e:	4619      	mov	r1, r3
 8002590:	4818      	ldr	r0, [pc, #96]	; (80025f4 <MX_TIM1_Init+0x150>)
 8002592:	f004 f8ad 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800259c:	f7ff fde2 	bl	8002164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80025c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	4619      	mov	r1, r3
 80025d4:	4807      	ldr	r0, [pc, #28]	; (80025f4 <MX_TIM1_Init+0x150>)
 80025d6:	f004 fe9f 	bl	8007318 <HAL_TIMEx_ConfigBreakDeadTime>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80025e0:	f7ff fdc0 	bl	8002164 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80025e4:	4803      	ldr	r0, [pc, #12]	; (80025f4 <MX_TIM1_Init+0x150>)
 80025e6:	f000 fa23 	bl	8002a30 <HAL_TIM_MspPostInit>

}
 80025ea:	bf00      	nop
 80025ec:	3768      	adds	r7, #104	; 0x68
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000078c 	.word	0x2000078c
 80025f8:	40010000 	.word	0x40010000

080025fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <MX_TIM2_Init+0x98>)
 800261c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002620:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10799;
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <MX_TIM2_Init+0x98>)
 8002624:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002628:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <MX_TIM2_Init+0x98>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <MX_TIM2_Init+0x98>)
 8002632:	f241 3287 	movw	r2, #4999	; 0x1387
 8002636:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <MX_TIM2_Init+0x98>)
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_TIM2_Init+0x98>)
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002644:	4813      	ldr	r0, [pc, #76]	; (8002694 <MX_TIM2_Init+0x98>)
 8002646:	f003 fe63 	bl	8006310 <HAL_TIM_Base_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002650:	f7ff fd88 	bl	8002164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002658:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800265a:	f107 0310 	add.w	r3, r7, #16
 800265e:	4619      	mov	r1, r3
 8002660:	480c      	ldr	r0, [pc, #48]	; (8002694 <MX_TIM2_Init+0x98>)
 8002662:	f004 f95d 	bl	8006920 <HAL_TIM_ConfigClockSource>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800266c:	f7ff fd7a 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002670:	2320      	movs	r3, #32
 8002672:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	4619      	mov	r1, r3
 800267c:	4805      	ldr	r0, [pc, #20]	; (8002694 <MX_TIM2_Init+0x98>)
 800267e:	f004 fdef 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002688:	f7ff fd6c 	bl	8002164 <Error_Handler>
  }

}
 800268c:	bf00      	nop
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	200007cc 	.word	0x200007cc

08002698 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269e:	f107 0310 	add.w	r3, r7, #16
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <MX_TIM3_Init+0x98>)
 80026b8:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <MX_TIM3_Init+0x9c>)
 80026ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <MX_TIM3_Init+0x98>)
 80026be:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80026c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <MX_TIM3_Init+0x98>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80026ca:	4b19      	ldr	r3, [pc, #100]	; (8002730 <MX_TIM3_Init+0x98>)
 80026cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <MX_TIM3_Init+0x98>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_TIM3_Init+0x98>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026de:	4814      	ldr	r0, [pc, #80]	; (8002730 <MX_TIM3_Init+0x98>)
 80026e0:	f003 fe16 	bl	8006310 <HAL_TIM_Base_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80026ea:	f7ff fd3b 	bl	8002164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	4619      	mov	r1, r3
 80026fa:	480d      	ldr	r0, [pc, #52]	; (8002730 <MX_TIM3_Init+0x98>)
 80026fc:	f004 f910 	bl	8006920 <HAL_TIM_ConfigClockSource>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002706:	f7ff fd2d 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	4619      	mov	r1, r3
 8002716:	4806      	ldr	r0, [pc, #24]	; (8002730 <MX_TIM3_Init+0x98>)
 8002718:	f004 fda2 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002722:	f7ff fd1f 	bl	8002164 <Error_Handler>
  }

}
 8002726:	bf00      	nop
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000070c 	.word	0x2000070c
 8002734:	40000400 	.word	0x40000400

08002738 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800273e:	f107 0310 	add.w	r3, r7, #16
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <MX_TIM4_Init+0x94>)
 8002758:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <MX_TIM4_Init+0x98>)
 800275a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <MX_TIM4_Init+0x94>)
 800275e:	226b      	movs	r2, #107	; 0x6b
 8002760:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002762:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <MX_TIM4_Init+0x94>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8002768:	4b18      	ldr	r3, [pc, #96]	; (80027cc <MX_TIM4_Init+0x94>)
 800276a:	2209      	movs	r2, #9
 800276c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <MX_TIM4_Init+0x94>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <MX_TIM4_Init+0x94>)
 8002776:	2200      	movs	r2, #0
 8002778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800277a:	4814      	ldr	r0, [pc, #80]	; (80027cc <MX_TIM4_Init+0x94>)
 800277c:	f003 fdc8 	bl	8006310 <HAL_TIM_Base_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002786:	f7ff fced 	bl	8002164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800278a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	4619      	mov	r1, r3
 8002796:	480d      	ldr	r0, [pc, #52]	; (80027cc <MX_TIM4_Init+0x94>)
 8002798:	f004 f8c2 	bl	8006920 <HAL_TIM_ConfigClockSource>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80027a2:	f7ff fcdf 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027a6:	2320      	movs	r3, #32
 80027a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4806      	ldr	r0, [pc, #24]	; (80027cc <MX_TIM4_Init+0x94>)
 80027b4:	f004 fd54 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80027be:	f7ff fcd1 	bl	8002164 <Error_Handler>
  }

}
 80027c2:	bf00      	nop
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	2000068c 	.word	0x2000068c
 80027d0:	40000800 	.word	0x40000800

080027d4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80027f2:	4b1e      	ldr	r3, [pc, #120]	; (800286c <MX_TIM5_Init+0x98>)
 80027f4:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <MX_TIM5_Init+0x9c>)
 80027f6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10799;
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <MX_TIM5_Init+0x98>)
 80027fa:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80027fe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <MX_TIM5_Init+0x98>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <MX_TIM5_Init+0x98>)
 8002808:	f240 32e7 	movw	r2, #999	; 0x3e7
 800280c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <MX_TIM5_Init+0x98>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <MX_TIM5_Init+0x98>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800281a:	4814      	ldr	r0, [pc, #80]	; (800286c <MX_TIM5_Init+0x98>)
 800281c:	f003 fd78 	bl	8006310 <HAL_TIM_Base_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002826:	f7ff fc9d 	bl	8002164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800282a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	4619      	mov	r1, r3
 8002836:	480d      	ldr	r0, [pc, #52]	; (800286c <MX_TIM5_Init+0x98>)
 8002838:	f004 f872 	bl	8006920 <HAL_TIM_ConfigClockSource>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8002842:	f7ff fc8f 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002846:	2320      	movs	r3, #32
 8002848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800284e:	1d3b      	adds	r3, r7, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4806      	ldr	r0, [pc, #24]	; (800286c <MX_TIM5_Init+0x98>)
 8002854:	f004 fd04 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800285e:	f7ff fc81 	bl	8002164 <Error_Handler>
  }

}
 8002862:	bf00      	nop
 8002864:	3720      	adds	r7, #32
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200006cc 	.word	0x200006cc
 8002870:	40000c00 	.word	0x40000c00

08002874 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <MX_TIM6_Init+0x64>)
 8002886:	4a15      	ldr	r2, [pc, #84]	; (80028dc <MX_TIM6_Init+0x68>)
 8002888:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <MX_TIM6_Init+0x64>)
 800288c:	226b      	movs	r2, #107	; 0x6b
 800288e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <MX_TIM6_Init+0x64>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <MX_TIM6_Init+0x64>)
 8002898:	2263      	movs	r2, #99	; 0x63
 800289a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <MX_TIM6_Init+0x64>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028a2:	480d      	ldr	r0, [pc, #52]	; (80028d8 <MX_TIM6_Init+0x64>)
 80028a4:	f003 fd34 	bl	8006310 <HAL_TIM_Base_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80028ae:	f7ff fc59 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028b2:	2320      	movs	r3, #32
 80028b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <MX_TIM6_Init+0x64>)
 80028c0:	f004 fcce 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80028ca:	f7ff fc4b 	bl	8002164 <Error_Handler>
  }

}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000074c 	.word	0x2000074c
 80028dc:	40001000 	.word	0x40001000

080028e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a4a      	ldr	r2, [pc, #296]	; (8002a18 <HAL_TIM_Base_MspInit+0x138>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10c      	bne.n	800290c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028f2:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	4a49      	ldr	r2, [pc, #292]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800290a:	e080      	b.n	8002a0e <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d114      	bne.n	8002940 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a40      	ldr	r2, [pc, #256]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	201c      	movs	r0, #28
 8002934:	f000 ffa7 	bl	8003886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002938:	201c      	movs	r0, #28
 800293a:	f000 ffc0 	bl	80038be <HAL_NVIC_EnableIRQ>
}
 800293e:	e066      	b.n	8002a0e <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM3)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a36      	ldr	r2, [pc, #216]	; (8002a20 <HAL_TIM_Base_MspInit+0x140>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d114      	bne.n	8002974 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800294a:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a33      	ldr	r2, [pc, #204]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	201d      	movs	r0, #29
 8002968:	f000 ff8d 	bl	8003886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800296c:	201d      	movs	r0, #29
 800296e:	f000 ffa6 	bl	80038be <HAL_NVIC_EnableIRQ>
}
 8002972:	e04c      	b.n	8002a0e <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM4)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a2a      	ldr	r2, [pc, #168]	; (8002a24 <HAL_TIM_Base_MspInit+0x144>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d114      	bne.n	80029a8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800297e:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	201e      	movs	r0, #30
 800299c:	f000 ff73 	bl	8003886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029a0:	201e      	movs	r0, #30
 80029a2:	f000 ff8c 	bl	80038be <HAL_NVIC_EnableIRQ>
}
 80029a6:	e032      	b.n	8002a0e <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM5)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_TIM_Base_MspInit+0x148>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d114      	bne.n	80029dc <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029b2:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 80029b8:	f043 0308 	orr.w	r3, r3, #8
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	2032      	movs	r0, #50	; 0x32
 80029d0:	f000 ff59 	bl	8003886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029d4:	2032      	movs	r0, #50	; 0x32
 80029d6:	f000 ff72 	bl	80038be <HAL_NVIC_EnableIRQ>
}
 80029da:	e018      	b.n	8002a0e <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM6)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_TIM_Base_MspInit+0x14c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d113      	bne.n	8002a0e <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a0c      	ldr	r2, [pc, #48]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 80029ec:	f043 0310 	orr.w	r3, r3, #16
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_TIM_Base_MspInit+0x13c>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	2036      	movs	r0, #54	; 0x36
 8002a04:	f000 ff3f 	bl	8003886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a08:	2036      	movs	r0, #54	; 0x36
 8002a0a:	f000 ff58 	bl	80038be <HAL_NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40000800 	.word	0x40000800
 8002a28:	40000c00 	.word	0x40000c00
 8002a2c:	40001000 	.word	0x40001000

08002a30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <HAL_TIM_MspPostInit+0x64>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d11c      	bne.n	8002a8c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_TIM_MspPostInit+0x68>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_TIM_MspPostInit+0x68>)
 8002a58:	f043 0310 	orr.w	r3, r3, #16
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_TIM_MspPostInit+0x68>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a70:	2302      	movs	r3, #2
 8002a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	4619      	mov	r1, r3
 8002a86:	4805      	ldr	r0, [pc, #20]	; (8002a9c <HAL_TIM_MspPostInit+0x6c>)
 8002a88:	f002 f890 	bl	8004bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a8c:	bf00      	nop
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <MX_USART3_UART_Init+0x58>)
 8002aa6:	4a15      	ldr	r2, [pc, #84]	; (8002afc <MX_USART3_UART_Init+0x5c>)
 8002aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <MX_USART3_UART_Init+0x58>)
 8002aac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ab0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <MX_USART3_UART_Init+0x58>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ac6:	220c      	movs	r2, #12
 8002ac8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <MX_USART3_UART_Init+0x58>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ae4:	f004 fcb4 	bl	8007450 <HAL_UART_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002aee:	f7ff fb39 	bl	8002164 <Error_Handler>
  }

}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000080c 	.word	0x2000080c
 8002afc:	40004800 	.word	0x40004800

08002b00 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <MX_USART6_UART_Init+0x58>)
 8002b06:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <MX_USART6_UART_Init+0x5c>)
 8002b08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002b0a:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <MX_USART6_UART_Init+0x58>)
 8002b0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <MX_USART6_UART_Init+0x58>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <MX_USART6_UART_Init+0x58>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <MX_USART6_UART_Init+0x58>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <MX_USART6_UART_Init+0x58>)
 8002b26:	220c      	movs	r2, #12
 8002b28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <MX_USART6_UART_Init+0x58>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <MX_USART6_UART_Init+0x58>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <MX_USART6_UART_Init+0x58>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <MX_USART6_UART_Init+0x58>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_USART6_UART_Init+0x58>)
 8002b44:	f004 fc84 	bl	8007450 <HAL_UART_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002b4e:	f7ff fb09 	bl	8002164 <Error_Handler>
  }

}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000088c 	.word	0x2000088c
 8002b5c:	40011400 	.word	0x40011400

08002b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a36      	ldr	r2, [pc, #216]	; (8002c58 <HAL_UART_MspInit+0xf8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d131      	bne.n	8002be6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b82:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a35      	ldr	r2, [pc, #212]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b9a:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a2f      	ldr	r2, [pc, #188]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002ba0:	f043 0308 	orr.w	r3, r3, #8
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bc4:	2307      	movs	r3, #7
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4824      	ldr	r0, [pc, #144]	; (8002c60 <HAL_UART_MspInit+0x100>)
 8002bd0:	f001 ffec 	bl	8004bac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	2027      	movs	r0, #39	; 0x27
 8002bda:	f000 fe54 	bl	8003886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002bde:	2027      	movs	r0, #39	; 0x27
 8002be0:	f000 fe6d 	bl	80038be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002be4:	e034      	b.n	8002c50 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <HAL_UART_MspInit+0x104>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d12f      	bne.n	8002c50 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002bf6:	f043 0320 	orr.w	r3, r3, #32
 8002bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfc:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002c0e:	f043 0304 	orr.w	r3, r3, #4
 8002c12:	6313      	str	r3, [r2, #48]	; 0x30
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_UART_MspInit+0xfc>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c20:	23c0      	movs	r3, #192	; 0xc0
 8002c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c30:	2308      	movs	r3, #8
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480b      	ldr	r0, [pc, #44]	; (8002c68 <HAL_UART_MspInit+0x108>)
 8002c3c:	f001 ffb6 	bl	8004bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002c40:	2200      	movs	r2, #0
 8002c42:	2100      	movs	r1, #0
 8002c44:	2047      	movs	r0, #71	; 0x47
 8002c46:	f000 fe1e 	bl	8003886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c4a:	2047      	movs	r0, #71	; 0x47
 8002c4c:	f000 fe37 	bl	80038be <HAL_NVIC_EnableIRQ>
}
 8002c50:	bf00      	nop
 8002c52:	3730      	adds	r7, #48	; 0x30
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40004800 	.word	0x40004800
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020c00 	.word	0x40020c00
 8002c64:	40011400 	.word	0x40011400
 8002c68:	40020800 	.word	0x40020800

08002c6c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c70:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002c76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002c78:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c7a:	2206      	movs	r2, #6
 8002c7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c80:	2202      	movs	r2, #2
 8002c82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cb0:	f002 f93f 	bl	8004f32 <HAL_PCD_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002cba:	f7ff fa53 	bl	8002164 <Error_Handler>
  }

}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	2000090c 	.word	0x2000090c

08002cc8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	; 0x28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce8:	d141      	bne.n	8002d6e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <HAL_PCD_MspInit+0xb0>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <HAL_PCD_MspInit+0xb0>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_PCD_MspInit+0xb0>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d02:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d14:	230a      	movs	r3, #10
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4817      	ldr	r0, [pc, #92]	; (8002d7c <HAL_PCD_MspInit+0xb4>)
 8002d20:	f001 ff44 	bl	8004bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4619      	mov	r1, r3
 8002d38:	4810      	ldr	r0, [pc, #64]	; (8002d7c <HAL_PCD_MspInit+0xb4>)
 8002d3a:	f001 ff37 	bl	8004bac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_PCD_MspInit+0xb0>)
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <HAL_PCD_MspInit+0xb0>)
 8002d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d48:	6353      	str	r3, [r2, #52]	; 0x34
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_PCD_MspInit+0xb0>)
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <HAL_PCD_MspInit+0xb0>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <HAL_PCD_MspInit+0xb0>)
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_PCD_MspInit+0xb0>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3728      	adds	r7, #40	; 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40020000 	.word	0x40020000

08002d80 <Reset_Handler>:
 8002d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db8 <LoopFillZerobss+0x14>
 8002d84:	2100      	movs	r1, #0
 8002d86:	e003      	b.n	8002d90 <LoopCopyDataInit>

08002d88 <CopyDataInit>:
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <LoopFillZerobss+0x18>)
 8002d8a:	585b      	ldr	r3, [r3, r1]
 8002d8c:	5043      	str	r3, [r0, r1]
 8002d8e:	3104      	adds	r1, #4

08002d90 <LoopCopyDataInit>:
 8002d90:	480b      	ldr	r0, [pc, #44]	; (8002dc0 <LoopFillZerobss+0x1c>)
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <LoopFillZerobss+0x20>)
 8002d94:	1842      	adds	r2, r0, r1
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d3f6      	bcc.n	8002d88 <CopyDataInit>
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <LoopFillZerobss+0x24>)
 8002d9c:	e002      	b.n	8002da4 <LoopFillZerobss>

08002d9e <FillZerobss>:
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f842 3b04 	str.w	r3, [r2], #4

08002da4 <LoopFillZerobss>:
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <LoopFillZerobss+0x28>)
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d3f9      	bcc.n	8002d9e <FillZerobss>
 8002daa:	f7ff fb45 	bl	8002438 <SystemInit>
 8002dae:	f005 fce5 	bl	800877c <__libc_init_array>
 8002db2:	f7fe ffa5 	bl	8001d00 <main>
 8002db6:	4770      	bx	lr
 8002db8:	20050000 	.word	0x20050000
 8002dbc:	0800ada0 	.word	0x0800ada0
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	200002cc 	.word	0x200002cc
 8002dc8:	200002cc 	.word	0x200002cc
 8002dcc:	20000d18 	.word	0x20000d18

08002dd0 <ADC_IRQHandler>:
 8002dd0:	e7fe      	b.n	8002dd0 <ADC_IRQHandler>

08002dd2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd6:	2003      	movs	r0, #3
 8002dd8:	f000 fd4a 	bl	8003870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f000 f805 	bl	8002dec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002de2:	f7ff fa4d 	bl	8002280 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_InitTick+0x54>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_InitTick+0x58>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fd65 	bl	80038da <HAL_SYSTICK_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00e      	b.n	8002e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b0f      	cmp	r3, #15
 8002e1e:	d80a      	bhi.n	8002e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e20:	2200      	movs	r2, #0
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	f000 fd2d 	bl	8003886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e2c:	4a06      	ldr	r2, [pc, #24]	; (8002e48 <HAL_InitTick+0x5c>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	200000ec 	.word	0x200000ec
 8002e44:	200000f4 	.word	0x200000f4
 8002e48:	200000f0 	.word	0x200000f0

08002e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_IncTick+0x20>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_IncTick+0x24>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_IncTick+0x24>)
 8002e5e:	6013      	str	r3, [r2, #0]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	200000f4 	.word	0x200000f4
 8002e70:	20000d10 	.word	0x20000d10

08002e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return uwTick;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_GetTick+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000d10 	.word	0x20000d10

08002e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e94:	f7ff ffee 	bl	8002e74 <HAL_GetTick>
 8002e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d005      	beq.n	8002eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_Delay+0x40>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eb2:	bf00      	nop
 8002eb4:	f7ff ffde 	bl	8002e74 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d8f7      	bhi.n	8002eb4 <HAL_Delay+0x28>
  {
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200000f4 	.word	0x200000f4

08002ed0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e031      	b.n	8002f4a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe f8be 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d116      	bne.n	8002f3c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_ADC_Init+0x84>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	f043 0202 	orr.w	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa5a 	bl	80033d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	f043 0201 	orr.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
 8002f3a:	e001      	b.n	8002f40 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	ffffeefd 	.word	0xffffeefd

08002f58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_ADC_Start_DMA+0x1e>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e0c7      	b.n	8003106 <HAL_ADC_Start_DMA+0x1ae>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d018      	beq.n	8002fbe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f9c:	4b5c      	ldr	r3, [pc, #368]	; (8003110 <HAL_ADC_Start_DMA+0x1b8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5c      	ldr	r2, [pc, #368]	; (8003114 <HAL_ADC_Start_DMA+0x1bc>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	0c9a      	lsrs	r2, r3, #18
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002fb0:	e002      	b.n	8002fb8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f9      	bne.n	8002fb2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	f040 809b 	bne.w	8003104 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd2:	4b51      	ldr	r3, [pc, #324]	; (8003118 <HAL_ADC_Start_DMA+0x1c0>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ff4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003008:	d106      	bne.n	8003018 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f023 0206 	bic.w	r2, r3, #6
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
 8003016:	e002      	b.n	800301e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	4a3c      	ldr	r2, [pc, #240]	; (800311c <HAL_ADC_Start_DMA+0x1c4>)
 800302c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	4a3b      	ldr	r2, [pc, #236]	; (8003120 <HAL_ADC_Start_DMA+0x1c8>)
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	4a3a      	ldr	r2, [pc, #232]	; (8003124 <HAL_ADC_Start_DMA+0x1cc>)
 800303c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003046:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003056:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003066:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	334c      	adds	r3, #76	; 0x4c
 8003072:	4619      	mov	r1, r3
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f000 fe42 	bl	8003d00 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <HAL_ADC_Start_DMA+0x1d0>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10f      	bne.n	80030a8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d136      	bne.n	8003104 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	e02d      	b.n	8003104 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1f      	ldr	r2, [pc, #124]	; (800312c <HAL_ADC_Start_DMA+0x1d4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10e      	bne.n	80030d0 <HAL_ADC_Start_DMA+0x178>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030ce:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80030d0:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_ADC_Start_DMA+0x1d0>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d113      	bne.n	8003104 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a13      	ldr	r2, [pc, #76]	; (8003130 <HAL_ADC_Start_DMA+0x1d8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10e      	bne.n	8003104 <HAL_ADC_Start_DMA+0x1ac>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d107      	bne.n	8003104 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003102:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200000ec 	.word	0x200000ec
 8003114:	431bde83 	.word	0x431bde83
 8003118:	fffff8fe 	.word	0xfffff8fe
 800311c:	080035cd 	.word	0x080035cd
 8003120:	08003687 	.word	0x08003687
 8003124:	080036a3 	.word	0x080036a3
 8003128:	40012300 	.word	0x40012300
 800312c:	40012000 	.word	0x40012000
 8003130:	40012200 	.word	0x40012200

08003134 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1c>
 8003188:	2302      	movs	r3, #2
 800318a:	e115      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x248>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b09      	cmp	r3, #9
 800319a:	d935      	bls.n	8003208 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68d9      	ldr	r1, [r3, #12]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	3b1e      	subs	r3, #30
 80031b2:	2207      	movs	r2, #7
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43da      	mvns	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	400a      	ands	r2, r1
 80031c0:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7f      	ldr	r2, [pc, #508]	; (80033c4 <HAL_ADC_ConfigChannel+0x254>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d10a      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68d9      	ldr	r1, [r3, #12]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	061a      	lsls	r2, r3, #24
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	e035      	b.n	800324e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68d9      	ldr	r1, [r3, #12]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	4603      	mov	r3, r0
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4403      	add	r3, r0
 80031fa:	3b1e      	subs	r3, #30
 80031fc:	409a      	lsls	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	e022      	b.n	800324e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6919      	ldr	r1, [r3, #16]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	2207      	movs	r2, #7
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	400a      	ands	r2, r1
 800322a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6919      	ldr	r1, [r3, #16]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	4618      	mov	r0, r3
 800323e:	4603      	mov	r3, r0
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4403      	add	r3, r0
 8003244:	409a      	lsls	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b06      	cmp	r3, #6
 8003254:	d824      	bhi.n	80032a0 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	3b05      	subs	r3, #5
 8003268:	221f      	movs	r2, #31
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	400a      	ands	r2, r1
 8003276:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	4618      	mov	r0, r3
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	3b05      	subs	r3, #5
 8003292:	fa00 f203 	lsl.w	r2, r0, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	635a      	str	r2, [r3, #52]	; 0x34
 800329e:	e04c      	b.n	800333a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	d824      	bhi.n	80032f2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	3b23      	subs	r3, #35	; 0x23
 80032ba:	221f      	movs	r2, #31
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43da      	mvns	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	400a      	ands	r2, r1
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	4618      	mov	r0, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	3b23      	subs	r3, #35	; 0x23
 80032e4:	fa00 f203 	lsl.w	r2, r0, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
 80032f0:	e023      	b.n	800333a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	3b41      	subs	r3, #65	; 0x41
 8003304:	221f      	movs	r2, #31
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43da      	mvns	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	400a      	ands	r2, r1
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	4618      	mov	r0, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	3b41      	subs	r3, #65	; 0x41
 800332e:	fa00 f203 	lsl.w	r2, r0, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <HAL_ADC_ConfigChannel+0x258>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d109      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x1e8>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b12      	cmp	r3, #18
 800334a:	d105      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <HAL_ADC_ConfigChannel+0x25c>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a1e      	ldr	r2, [pc, #120]	; (80033cc <HAL_ADC_ConfigChannel+0x25c>)
 8003352:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003356:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1a      	ldr	r2, [pc, #104]	; (80033c8 <HAL_ADC_ConfigChannel+0x258>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d125      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23e>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <HAL_ADC_ConfigChannel+0x254>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <HAL_ADC_ConfigChannel+0x204>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b11      	cmp	r3, #17
 8003372:	d11c      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003374:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_ADC_ConfigChannel+0x25c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4a14      	ldr	r2, [pc, #80]	; (80033cc <HAL_ADC_ConfigChannel+0x25c>)
 800337a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800337e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <HAL_ADC_ConfigChannel+0x254>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d111      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_ADC_ConfigChannel+0x260>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <HAL_ADC_ConfigChannel+0x264>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	0c9a      	lsrs	r2, r3, #18
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033a0:	e002      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f9      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	10000012 	.word	0x10000012
 80033c8:	40012000 	.word	0x40012000
 80033cc:	40012300 	.word	0x40012300
 80033d0:	200000ec 	.word	0x200000ec
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80033e0:	4b78      	ldr	r3, [pc, #480]	; (80035c4 <ADC_Init+0x1ec>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a77      	ldr	r2, [pc, #476]	; (80035c4 <ADC_Init+0x1ec>)
 80033e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80033ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80033ec:	4b75      	ldr	r3, [pc, #468]	; (80035c4 <ADC_Init+0x1ec>)
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4973      	ldr	r1, [pc, #460]	; (80035c4 <ADC_Init+0x1ec>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	021a      	lsls	r2, r3, #8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800342c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6859      	ldr	r1, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800344e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	4a58      	ldr	r2, [pc, #352]	; (80035c8 <ADC_Init+0x1f0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d022      	beq.n	80034b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800347a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6899      	ldr	r1, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800349c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6899      	ldr	r1, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	e00f      	b.n	80034d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0202 	bic.w	r2, r2, #2
 80034e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	005a      	lsls	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01b      	beq.n	8003538 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800350e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800351e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6859      	ldr	r1, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	3b01      	subs	r3, #1
 800352c:	035a      	lsls	r2, r3, #13
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	e007      	b.n	8003548 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003546:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	3b01      	subs	r3, #1
 8003564:	051a      	lsls	r2, r3, #20
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800357c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6899      	ldr	r1, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800358a:	025a      	lsls	r2, r3, #9
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6899      	ldr	r1, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	029a      	lsls	r2, r3, #10
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	609a      	str	r2, [r3, #8]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40012300 	.word	0x40012300
 80035c8:	0f000001 	.word	0x0f000001

080035cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d13c      	bne.n	8003660 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d12b      	bne.n	8003658 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003604:	2b00      	cmp	r3, #0
 8003606:	d127      	bne.n	8003658 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003620:	2b00      	cmp	r3, #0
 8003622:	d119      	bne.n	8003658 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0220 	bic.w	r2, r2, #32
 8003632:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d105      	bne.n	8003658 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f043 0201 	orr.w	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff fd6b 	bl	8003134 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800365e:	e00e      	b.n	800367e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f7ff fd75 	bl	800315c <HAL_ADC_ErrorCallback>
}
 8003672:	e004      	b.n	800367e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff fd57 	bl	8003148 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f043 0204 	orr.w	r2, r3, #4
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7ff fd4a 	bl	800315c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <__NVIC_SetPriorityGrouping+0x40>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036ec:	4013      	ands	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <__NVIC_SetPriorityGrouping+0x44>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036fe:	4a04      	ldr	r2, [pc, #16]	; (8003710 <__NVIC_SetPriorityGrouping+0x40>)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	60d3      	str	r3, [r2, #12]
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00
 8003714:	05fa0000 	.word	0x05fa0000

08003718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <__NVIC_GetPriorityGrouping+0x18>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	f003 0307 	and.w	r3, r3, #7
}
 8003726:	4618      	mov	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	2b00      	cmp	r3, #0
 8003744:	db0b      	blt.n	800375e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	f003 021f 	and.w	r2, r3, #31
 800374c:	4907      	ldr	r1, [pc, #28]	; (800376c <__NVIC_EnableIRQ+0x38>)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	2001      	movs	r0, #1
 8003756:	fa00 f202 	lsl.w	r2, r0, r2
 800375a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000e100 	.word	0xe000e100

08003770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	6039      	str	r1, [r7, #0]
 800377a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003780:	2b00      	cmp	r3, #0
 8003782:	db0a      	blt.n	800379a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	490c      	ldr	r1, [pc, #48]	; (80037bc <__NVIC_SetPriority+0x4c>)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	0112      	lsls	r2, r2, #4
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	440b      	add	r3, r1
 8003794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003798:	e00a      	b.n	80037b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4908      	ldr	r1, [pc, #32]	; (80037c0 <__NVIC_SetPriority+0x50>)
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	3b04      	subs	r3, #4
 80037a8:	0112      	lsls	r2, r2, #4
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	440b      	add	r3, r1
 80037ae:	761a      	strb	r2, [r3, #24]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000e100 	.word	0xe000e100
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	; 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f1c3 0307 	rsb	r3, r3, #7
 80037de:	2b04      	cmp	r3, #4
 80037e0:	bf28      	it	cs
 80037e2:	2304      	movcs	r3, #4
 80037e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3304      	adds	r3, #4
 80037ea:	2b06      	cmp	r3, #6
 80037ec:	d902      	bls.n	80037f4 <NVIC_EncodePriority+0x30>
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3b03      	subs	r3, #3
 80037f2:	e000      	b.n	80037f6 <NVIC_EncodePriority+0x32>
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f8:	f04f 32ff 	mov.w	r2, #4294967295
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43da      	mvns	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	401a      	ands	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800380c:	f04f 31ff 	mov.w	r1, #4294967295
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	43d9      	mvns	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	4313      	orrs	r3, r2
         );
}
 800381e:	4618      	mov	r0, r3
 8003820:	3724      	adds	r7, #36	; 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3b01      	subs	r3, #1
 8003838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800383c:	d301      	bcc.n	8003842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800383e:	2301      	movs	r3, #1
 8003840:	e00f      	b.n	8003862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003842:	4a0a      	ldr	r2, [pc, #40]	; (800386c <SysTick_Config+0x40>)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3b01      	subs	r3, #1
 8003848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800384a:	210f      	movs	r1, #15
 800384c:	f04f 30ff 	mov.w	r0, #4294967295
 8003850:	f7ff ff8e 	bl	8003770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <SysTick_Config+0x40>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800385a:	4b04      	ldr	r3, [pc, #16]	; (800386c <SysTick_Config+0x40>)
 800385c:	2207      	movs	r2, #7
 800385e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	e000e010 	.word	0xe000e010

08003870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff29 	bl	80036d0 <__NVIC_SetPriorityGrouping>
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003886:	b580      	push	{r7, lr}
 8003888:	b086      	sub	sp, #24
 800388a:	af00      	add	r7, sp, #0
 800388c:	4603      	mov	r3, r0
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003898:	f7ff ff3e 	bl	8003718 <__NVIC_GetPriorityGrouping>
 800389c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	6978      	ldr	r0, [r7, #20]
 80038a4:	f7ff ff8e 	bl	80037c4 <NVIC_EncodePriority>
 80038a8:	4602      	mov	r2, r0
 80038aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ff5d 	bl	8003770 <__NVIC_SetPriority>
}
 80038b6:	bf00      	nop
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff31 	bl	8003734 <__NVIC_EnableIRQ>
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff ffa2 	bl	800382c <SysTick_Config>
 80038e8:	4603      	mov	r3, r0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e014      	b.n	800392e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	791b      	ldrb	r3, [r3, #4]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fd fcf1 	bl	80012fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	795b      	ldrb	r3, [r3, #5]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_DAC_Start+0x1e>
 8003950:	2302      	movs	r3, #2
 8003952:	e050      	b.n	80039f6 <HAL_DAC_Start+0xc0>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	409a      	lsls	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11a      	bne.n	80039b0 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003990:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b04      	cmp	r3, #4
 8003996:	d127      	bne.n	80039e8 <HAL_DAC_Start+0xb2>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b38      	cmp	r3, #56	; 0x38
 800399c:	d124      	bne.n	80039e8 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	e01b      	b.n	80039e8 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ba:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80039c6:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ce:	d10b      	bne.n	80039e8 <HAL_DAC_Start+0xb2>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80039d6:	d107      	bne.n	80039e8 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0202 	orr.w	r2, r2, #2
 80039e6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a18:	d118      	bne.n	8003a4c <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f043 0201 	orr.w	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a34:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a44:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f825 	bl	8003a96 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5a:	d118      	bne.n	8003a8e <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2204      	movs	r2, #4
 8003a60:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f043 0202 	orr.w	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003a76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003a86:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f880 	bl	8003b8e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	795b      	ldrb	r3, [r3, #5]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_DAC_ConfigChannel+0x20>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e036      	b.n	8003b38 <HAL_DAC_ConfigChannel+0x8e>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003ade:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4013      	ands	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6819      	ldr	r1, [r3, #0]
 8003b18:	22c0      	movs	r2, #192	; 0xc0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43da      	mvns	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	400a      	ands	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	371c      	adds	r7, #28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d105      	bne.n	8003b6e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4413      	add	r3, r2
 8003b68:	3308      	adds	r3, #8
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e004      	b.n	8003b78 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	3314      	adds	r3, #20
 8003b76:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7ff f960 	bl	8002e74 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e099      	b.n	8003cf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003be0:	e00f      	b.n	8003c02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003be2:	f7ff f947 	bl	8002e74 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d908      	bls.n	8003c02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e078      	b.n	8003cf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e8      	bne.n	8003be2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <HAL_DMA_Init+0x158>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d107      	bne.n	8003c6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	4313      	orrs	r3, r2
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 0307 	bic.w	r3, r3, #7
 8003c82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d117      	bne.n	8003cc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fa99 	bl	80041e0 <DMA_CheckFifoParam>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2240      	movs	r2, #64	; 0x40
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e016      	b.n	8003cf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa50 	bl	8004174 <DMA_CalcBaseAndBitshift>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	223f      	movs	r2, #63	; 0x3f
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	f010803f 	.word	0xf010803f

08003d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_DMA_Start_IT+0x26>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e048      	b.n	8003db8 <HAL_DMA_Start_IT+0xb8>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d137      	bne.n	8003daa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f9e2 	bl	8004118 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	223f      	movs	r2, #63	; 0x3f
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0216 	orr.w	r2, r2, #22
 8003d6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d7e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0208 	orr.w	r2, r2, #8
 8003d96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e005      	b.n	8003db6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003db2:	2302      	movs	r3, #2
 8003db4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d004      	beq.n	8003dde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e00c      	b.n	8003df8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2205      	movs	r2, #5
 8003de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003e10:	4b92      	ldr	r3, [pc, #584]	; (800405c <HAL_DMA_IRQHandler+0x258>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a92      	ldr	r2, [pc, #584]	; (8004060 <HAL_DMA_IRQHandler+0x25c>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0a9b      	lsrs	r3, r3, #10
 8003e1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	2208      	movs	r2, #8
 8003e30:	409a      	lsls	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01a      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d013      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	f043 0201 	orr.w	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	2201      	movs	r2, #1
 8003e76:	409a      	lsls	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	2201      	movs	r2, #1
 8003e94:	409a      	lsls	r2, r3
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	f043 0202 	orr.w	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	2204      	movs	r2, #4
 8003eac:	409a      	lsls	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d012      	beq.n	8003edc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00b      	beq.n	8003edc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	2204      	movs	r2, #4
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	f043 0204 	orr.w	r2, r3, #4
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d043      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d03c      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	2210      	movs	r2, #16
 8003f00:	409a      	lsls	r2, r3
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d018      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d108      	bne.n	8003f34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d024      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
 8003f32:	e01f      	b.n	8003f74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01b      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4798      	blx	r3
 8003f44:	e016      	b.n	8003f74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d107      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0208 	bic.w	r2, r2, #8
 8003f62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	2220      	movs	r2, #32
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 808e 	beq.w	80040a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8086 	beq.w	80040a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b05      	cmp	r3, #5
 8003fac:	d136      	bne.n	800401c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0216 	bic.w	r2, r2, #22
 8003fbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <HAL_DMA_IRQHandler+0x1da>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0208 	bic.w	r2, r2, #8
 8003fec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	223f      	movs	r2, #63	; 0x3f
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400e:	2b00      	cmp	r3, #0
 8004010:	d07d      	beq.n	800410e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	4798      	blx	r3
        }
        return;
 800401a:	e078      	b.n	800410e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01c      	beq.n	8004064 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d108      	bne.n	800404a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403c:	2b00      	cmp	r3, #0
 800403e:	d030      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
 8004048:	e02b      	b.n	80040a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d027      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
 800405a:	e022      	b.n	80040a2 <HAL_DMA_IRQHandler+0x29e>
 800405c:	200000ec 	.word	0x200000ec
 8004060:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10f      	bne.n	8004092 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0210 	bic.w	r2, r2, #16
 8004080:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d032      	beq.n	8004110 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d022      	beq.n	80040fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2205      	movs	r2, #5
 80040ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	3301      	adds	r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d307      	bcc.n	80040ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f2      	bne.n	80040ce <HAL_DMA_IRQHandler+0x2ca>
 80040e8:	e000      	b.n	80040ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80040ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
 800410c:	e000      	b.n	8004110 <HAL_DMA_IRQHandler+0x30c>
        return;
 800410e:	bf00      	nop
    }
  }
}
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop

08004118 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004134:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	d108      	bne.n	8004158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004156:	e007      	b.n	8004168 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	3b10      	subs	r3, #16
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <DMA_CalcBaseAndBitshift+0x60>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800418e:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <DMA_CalcBaseAndBitshift+0x64>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d908      	bls.n	80041b4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <DMA_CalcBaseAndBitshift+0x68>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	1d1a      	adds	r2, r3, #4
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	659a      	str	r2, [r3, #88]	; 0x58
 80041b2:	e006      	b.n	80041c2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <DMA_CalcBaseAndBitshift+0x68>)
 80041bc:	4013      	ands	r3, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	aaaaaaab 	.word	0xaaaaaaab
 80041d8:	0800ab84 	.word	0x0800ab84
 80041dc:	fffffc00 	.word	0xfffffc00

080041e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d11f      	bne.n	800423a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d855      	bhi.n	80042ac <DMA_CheckFifoParam+0xcc>
 8004200:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <DMA_CheckFifoParam+0x28>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	08004219 	.word	0x08004219
 800420c:	0800422b 	.word	0x0800422b
 8004210:	08004219 	.word	0x08004219
 8004214:	080042ad 	.word	0x080042ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d045      	beq.n	80042b0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004228:	e042      	b.n	80042b0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004232:	d13f      	bne.n	80042b4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004238:	e03c      	b.n	80042b4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004242:	d121      	bne.n	8004288 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b03      	cmp	r3, #3
 8004248:	d836      	bhi.n	80042b8 <DMA_CheckFifoParam+0xd8>
 800424a:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <DMA_CheckFifoParam+0x70>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	08004261 	.word	0x08004261
 8004254:	08004267 	.word	0x08004267
 8004258:	08004261 	.word	0x08004261
 800425c:	08004279 	.word	0x08004279
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      break;
 8004264:	e02f      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d024      	beq.n	80042bc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004276:	e021      	b.n	80042bc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004280:	d11e      	bne.n	80042c0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004286:	e01b      	b.n	80042c0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d902      	bls.n	8004294 <DMA_CheckFifoParam+0xb4>
 800428e:	2b03      	cmp	r3, #3
 8004290:	d003      	beq.n	800429a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004292:	e018      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      break;
 8004298:	e015      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00e      	beq.n	80042c4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
      break;
 80042aa:	e00b      	b.n	80042c4 <DMA_CheckFifoParam+0xe4>
      break;
 80042ac:	bf00      	nop
 80042ae:	e00a      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042b0:	bf00      	nop
 80042b2:	e008      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042b4:	bf00      	nop
 80042b6:	e006      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042b8:	bf00      	nop
 80042ba:	e004      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042bc:	bf00      	nop
 80042be:	e002      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;   
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042c4:	bf00      	nop
    }
  } 
  
  return status; 
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80042e4:	4ba9      	ldr	r3, [pc, #676]	; (800458c <HAL_ETH_Init+0x2b8>)
 80042e6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80042ec:	2300      	movs	r3, #0
 80042ee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e183      	b.n	8004602 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fd f8a2 	bl	8001458 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004314:	4b9e      	ldr	r3, [pc, #632]	; (8004590 <HAL_ETH_Init+0x2bc>)
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	4a9d      	ldr	r2, [pc, #628]	; (8004590 <HAL_ETH_Init+0x2bc>)
 800431a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800431e:	6453      	str	r3, [r2, #68]	; 0x44
 8004320:	4b9b      	ldr	r3, [pc, #620]	; (8004590 <HAL_ETH_Init+0x2bc>)
 8004322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800432c:	4b99      	ldr	r3, [pc, #612]	; (8004594 <HAL_ETH_Init+0x2c0>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a98      	ldr	r2, [pc, #608]	; (8004594 <HAL_ETH_Init+0x2c0>)
 8004332:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004336:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004338:	4b96      	ldr	r3, [pc, #600]	; (8004594 <HAL_ETH_Init+0x2c0>)
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	4994      	ldr	r1, [pc, #592]	; (8004594 <HAL_ETH_Init+0x2c0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800435e:	f7fe fd89 	bl	8002e74 <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004364:	e011      	b.n	800438a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004366:	f7fe fd85 	bl	8002e74 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004374:	d909      	bls.n	800438a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2203      	movs	r2, #3
 800437a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e13b      	b.n	8004602 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e4      	bne.n	8004366 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f023 031c 	bic.w	r3, r3, #28
 80043aa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80043ac:	f001 fb8e 	bl	8005acc <HAL_RCC_GetHCLKFreq>
 80043b0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	4a78      	ldr	r2, [pc, #480]	; (8004598 <HAL_ETH_Init+0x2c4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d908      	bls.n	80043cc <HAL_ETH_Init+0xf8>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4a77      	ldr	r2, [pc, #476]	; (800459c <HAL_ETH_Init+0x2c8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d804      	bhi.n	80043cc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f043 0308 	orr.w	r3, r3, #8
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	e027      	b.n	800441c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	4a73      	ldr	r2, [pc, #460]	; (800459c <HAL_ETH_Init+0x2c8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d908      	bls.n	80043e6 <HAL_ETH_Init+0x112>
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	4a72      	ldr	r2, [pc, #456]	; (80045a0 <HAL_ETH_Init+0x2cc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d804      	bhi.n	80043e6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f043 030c 	orr.w	r3, r3, #12
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	e01a      	b.n	800441c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	4a6d      	ldr	r2, [pc, #436]	; (80045a0 <HAL_ETH_Init+0x2cc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d903      	bls.n	80043f6 <HAL_ETH_Init+0x122>
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	4a6c      	ldr	r2, [pc, #432]	; (80045a4 <HAL_ETH_Init+0x2d0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d911      	bls.n	800441a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4a6a      	ldr	r2, [pc, #424]	; (80045a4 <HAL_ETH_Init+0x2d0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d908      	bls.n	8004410 <HAL_ETH_Init+0x13c>
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	4a69      	ldr	r2, [pc, #420]	; (80045a8 <HAL_ETH_Init+0x2d4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d804      	bhi.n	8004410 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f043 0304 	orr.w	r3, r3, #4
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	e005      	b.n	800441c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f043 0310 	orr.w	r3, r3, #16
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	e000      	b.n	800441c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800441a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004424:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004428:	2100      	movs	r1, #0
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f956 	bl	80046dc <HAL_ETH_WritePHYRegister>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800443a:	6939      	ldr	r1, [r7, #16]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f9b3 	bl	80047a8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e0d9      	b.n	8004602 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800444e:	20ff      	movs	r0, #255	; 0xff
 8004450:	f7fe fd1c 	bl	8002e8c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80a7 	beq.w	80045ac <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800445e:	f7fe fd09 	bl	8002e74 <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004464:	f107 030c 	add.w	r3, r7, #12
 8004468:	461a      	mov	r2, r3
 800446a:	2101      	movs	r1, #1
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8cd 	bl	800460c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004472:	f7fe fcff 	bl	8002e74 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d90f      	bls.n	80044a4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004488:	6939      	ldr	r1, [r7, #16]
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f98c 	bl	80047a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e0ae      	b.n	8004602 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0da      	beq.n	8004464 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80044ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044b2:	2100      	movs	r1, #0
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f911 	bl	80046dc <HAL_ETH_WritePHYRegister>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80044c4:	6939      	ldr	r1, [r7, #16]
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f96e 	bl	80047a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80044d4:	2301      	movs	r3, #1
 80044d6:	e094      	b.n	8004602 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80044d8:	f7fe fccc 	bl	8002e74 <HAL_GetTick>
 80044dc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80044de:	f107 030c 	add.w	r3, r7, #12
 80044e2:	461a      	mov	r2, r3
 80044e4:	2101      	movs	r1, #1
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f890 	bl	800460c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80044ec:	f7fe fcc2 	bl	8002e74 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d90f      	bls.n	800451e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004502:	6939      	ldr	r1, [r7, #16]
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f94f 	bl	80047a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e071      	b.n	8004602 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0da      	beq.n	80044de <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004528:	f107 030c 	add.w	r3, r7, #12
 800452c:	461a      	mov	r2, r3
 800452e:	211f      	movs	r1, #31
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f86b 	bl	800460c <HAL_ETH_ReadPHYRegister>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004540:	6939      	ldr	r1, [r7, #16]
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f930 	bl	80047a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004550:	2301      	movs	r3, #1
 8004552:	e056      	b.n	8004602 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b00      	cmp	r3, #0
 800455c:	d004      	beq.n	8004568 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	e002      	b.n	800456e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	609a      	str	r2, [r3, #8]
 800457e:	e037      	b.n	80045f0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	e032      	b.n	80045f0 <HAL_ETH_Init+0x31c>
 800458a:	bf00      	nop
 800458c:	03938700 	.word	0x03938700
 8004590:	40023800 	.word	0x40023800
 8004594:	40013800 	.word	0x40013800
 8004598:	01312cff 	.word	0x01312cff
 800459c:	02160ebf 	.word	0x02160ebf
 80045a0:	039386ff 	.word	0x039386ff
 80045a4:	05f5e0ff 	.word	0x05f5e0ff
 80045a8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	08db      	lsrs	r3, r3, #3
 80045b2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80045bc:	4313      	orrs	r3, r2
 80045be:	b29b      	uxth	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	2100      	movs	r1, #0
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f889 	bl	80046dc <HAL_ETH_WritePHYRegister>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80045d4:	6939      	ldr	r1, [r7, #16]
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8e6 	bl	80047a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e00c      	b.n	8004602 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80045e8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80045ec:	f7fe fc4e 	bl	8002e8c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80045f0:	6939      	ldr	r1, [r7, #16]
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8d8 	bl	80047a8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop

0800460c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	460b      	mov	r3, r1
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b82      	cmp	r3, #130	; 0x82
 800462c:	d101      	bne.n	8004632 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800462e:	2302      	movs	r3, #2
 8004630:	e050      	b.n	80046d4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2282      	movs	r2, #130	; 0x82
 8004636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 031c 	and.w	r3, r3, #28
 8004648:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8a1b      	ldrh	r3, [r3, #16]
 800464e:	02db      	lsls	r3, r3, #11
 8004650:	b29b      	uxth	r3, r3
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004658:	897b      	ldrh	r3, [r7, #10]
 800465a:	019b      	lsls	r3, r3, #6
 800465c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 0302 	bic.w	r3, r3, #2
 800466c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800467e:	f7fe fbf9 	bl	8002e74 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004684:	e015      	b.n	80046b2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004686:	f7fe fbf5 	bl	8002e74 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004694:	d309      	bcc.n	80046aa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e014      	b.n	80046d4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e4      	bne.n	8004686 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	460b      	mov	r3, r1
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b42      	cmp	r3, #66	; 0x42
 80046fc:	d101      	bne.n	8004702 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80046fe:	2302      	movs	r3, #2
 8004700:	e04e      	b.n	80047a0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2242      	movs	r2, #66	; 0x42
 8004706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 031c 	and.w	r3, r3, #28
 8004718:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8a1b      	ldrh	r3, [r3, #16]
 800471e:	02db      	lsls	r3, r3, #11
 8004720:	b29b      	uxth	r3, r3
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004728:	897b      	ldrh	r3, [r7, #10]
 800472a:	019b      	lsls	r3, r3, #6
 800472c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f043 0302 	orr.w	r3, r3, #2
 800473c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004758:	f7fe fb8c 	bl	8002e74 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800475e:	e015      	b.n	800478c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004760:	f7fe fb88 	bl	8002e74 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476e:	d309      	bcc.n	8004784 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e00d      	b.n	80047a0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e4      	bne.n	8004760 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b0b0      	sub	sp, #192	; 0xc0
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047c4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80047d6:	2300      	movs	r3, #0
 80047d8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80047da:	2300      	movs	r3, #0
 80047dc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80047de:	2300      	movs	r3, #0
 80047e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80047ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f2:	663b      	str	r3, [r7, #96]	; 0x60
 80047f4:	e001      	b.n	80047fa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80047fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047fe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004800:	2300      	movs	r3, #0
 8004802:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004804:	2300      	movs	r3, #0
 8004806:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004808:	2300      	movs	r3, #0
 800480a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800480c:	2300      	movs	r3, #0
 800480e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004810:	2300      	movs	r3, #0
 8004812:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004814:	2340      	movs	r3, #64	; 0x40
 8004816:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004818:	2300      	movs	r3, #0
 800481a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800481e:	2300      	movs	r3, #0
 8004820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004824:	2300      	movs	r3, #0
 8004826:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800482a:	2300      	movs	r3, #0
 800482c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004830:	2300      	movs	r3, #0
 8004832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004836:	2300      	movs	r3, #0
 8004838:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800483c:	2300      	movs	r3, #0
 800483e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004842:	2300      	movs	r3, #0
 8004844:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800484e:	2300      	movs	r3, #0
 8004850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004854:	2300      	movs	r3, #0
 8004856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800485a:	2300      	movs	r3, #0
 800485c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004860:	2300      	movs	r3, #0
 8004862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004866:	2300      	movs	r3, #0
 8004868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800486c:	2300      	movs	r3, #0
 800486e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800487c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004880:	4bab      	ldr	r3, [pc, #684]	; (8004b30 <ETH_MACDMAConfig+0x388>)
 8004882:	4013      	ands	r3, r2
 8004884:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004888:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800488a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800488c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800488e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004890:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004894:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800489a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800489c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800489e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80048a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80048a2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80048a8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80048aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80048ac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80048ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80048b0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80048b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80048b4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80048b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80048b8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80048ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80048bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80048be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048dc:	2001      	movs	r0, #1
 80048de:	f7fe fad5 	bl	8002e8c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048ea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80048ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80048ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80048f0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80048f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80048f4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80048f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80048fa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80048fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004900:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004902:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004906:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004908:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800490c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004910:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004918:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800491a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004926:	2001      	movs	r0, #1
 8004928:	f7fe fab0 	bl	8002e8c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004934:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800493e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004948:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004954:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004958:	f64f 7341 	movw	r3, #65345	; 0xff41
 800495c:	4013      	ands	r3, r2
 800495e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004962:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004966:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004968:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800496c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800496e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004972:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004978:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800497a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800497e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004984:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004986:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004998:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80049a4:	2001      	movs	r0, #1
 80049a6:	f7fe fa71 	bl	8002e8c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80049b2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80049b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80049b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80049ce:	2001      	movs	r0, #1
 80049d0:	f7fe fa5c 	bl	8002e8c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80049dc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80049e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049e6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80049ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049f0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004a02:	2304      	movs	r3, #4
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a10:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004a12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a16:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a1c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004a26:	2300      	movs	r3, #0
 8004a28:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004a32:	4413      	add	r3, r2
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8004a3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a3e:	4b3d      	ldr	r3, [pc, #244]	; (8004b34 <ETH_MACDMAConfig+0x38c>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004a46:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004a48:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004a4a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004a4c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004a4e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004a50:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004a52:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004a54:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004a56:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004a58:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004a5a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004a5e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004a62:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004a66:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004a68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	f241 0318 	movw	r3, #4120	; 0x1018
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a80:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	f241 0318 	movw	r3, #4120	; 0x1018
 8004a8a:	4413      	add	r3, r2
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a92:	2001      	movs	r0, #1
 8004a94:	f7fe f9fa 	bl	8002e8c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004aa6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004aac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004ab0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004ab4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004ab8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004abc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004abe:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8004ac2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f7fe f9d3 	bl	8002e8c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004af2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d10d      	bne.n	8004b18 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	f241 031c 	movw	r3, #4124	; 0x101c
 8004b04:	4413      	add	r3, r2
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6811      	ldr	r1, [r2, #0]
 8004b0c:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <ETH_MACDMAConfig+0x390>)
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	f241 031c 	movw	r3, #4124	; 0x101c
 8004b14:	440b      	add	r3, r1
 8004b16:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2100      	movs	r1, #0
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f80b 	bl	8004b3c <ETH_MACAddressConfig>
}
 8004b26:	bf00      	nop
 8004b28:	37c0      	adds	r7, #192	; 0xc0
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	ff20810f 	.word	0xff20810f
 8004b34:	f8de3f23 	.word	0xf8de3f23
 8004b38:	00010040 	.word	0x00010040

08004b3c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3305      	adds	r3, #5
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	3204      	adds	r2, #4
 8004b54:	7812      	ldrb	r2, [r2, #0]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <ETH_MACAddressConfig+0x68>)
 8004b5e:	4413      	add	r3, r2
 8004b60:	461a      	mov	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3303      	adds	r3, #3
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	061a      	lsls	r2, r3, #24
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3302      	adds	r3, #2
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	4313      	orrs	r3, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	7812      	ldrb	r2, [r2, #0]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <ETH_MACAddressConfig+0x6c>)
 8004b8e:	4413      	add	r3, r2
 8004b90:	461a      	mov	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	6013      	str	r3, [r2, #0]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	40028040 	.word	0x40028040
 8004ba8:	40028044 	.word	0x40028044

08004bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b089      	sub	sp, #36	; 0x24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	e175      	b.n	8004eb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004bcc:	2201      	movs	r2, #1
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	f040 8164 	bne.w	8004eb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_Init+0x4e>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b12      	cmp	r3, #18
 8004bf8:	d123      	bne.n	8004c42 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	08da      	lsrs	r2, r3, #3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3208      	adds	r2, #8
 8004c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	220f      	movs	r2, #15
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	08da      	lsrs	r2, r3, #3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3208      	adds	r2, #8
 8004c3c:	69b9      	ldr	r1, [r7, #24]
 8004c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 0203 	and.w	r2, r3, #3
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d00b      	beq.n	8004c96 <HAL_GPIO_Init+0xea>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d007      	beq.n	8004c96 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c8a:	2b11      	cmp	r3, #17
 8004c8c:	d003      	beq.n	8004c96 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b12      	cmp	r3, #18
 8004c94:	d130      	bne.n	8004cf8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ccc:	2201      	movs	r2, #1
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	091b      	lsrs	r3, r3, #4
 8004ce2:	f003 0201 	and.w	r2, r3, #1
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	2203      	movs	r2, #3
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80be 	beq.w	8004eb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d36:	4b65      	ldr	r3, [pc, #404]	; (8004ecc <HAL_GPIO_Init+0x320>)
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	4a64      	ldr	r2, [pc, #400]	; (8004ecc <HAL_GPIO_Init+0x320>)
 8004d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d40:	6453      	str	r3, [r2, #68]	; 0x44
 8004d42:	4b62      	ldr	r3, [pc, #392]	; (8004ecc <HAL_GPIO_Init+0x320>)
 8004d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004d4e:	4a60      	ldr	r2, [pc, #384]	; (8004ed0 <HAL_GPIO_Init+0x324>)
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	3302      	adds	r3, #2
 8004d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	220f      	movs	r2, #15
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a57      	ldr	r2, [pc, #348]	; (8004ed4 <HAL_GPIO_Init+0x328>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d037      	beq.n	8004dea <HAL_GPIO_Init+0x23e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a56      	ldr	r2, [pc, #344]	; (8004ed8 <HAL_GPIO_Init+0x32c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d031      	beq.n	8004de6 <HAL_GPIO_Init+0x23a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a55      	ldr	r2, [pc, #340]	; (8004edc <HAL_GPIO_Init+0x330>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d02b      	beq.n	8004de2 <HAL_GPIO_Init+0x236>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a54      	ldr	r2, [pc, #336]	; (8004ee0 <HAL_GPIO_Init+0x334>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d025      	beq.n	8004dde <HAL_GPIO_Init+0x232>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a53      	ldr	r2, [pc, #332]	; (8004ee4 <HAL_GPIO_Init+0x338>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01f      	beq.n	8004dda <HAL_GPIO_Init+0x22e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a52      	ldr	r2, [pc, #328]	; (8004ee8 <HAL_GPIO_Init+0x33c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d019      	beq.n	8004dd6 <HAL_GPIO_Init+0x22a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a51      	ldr	r2, [pc, #324]	; (8004eec <HAL_GPIO_Init+0x340>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <HAL_GPIO_Init+0x226>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a50      	ldr	r2, [pc, #320]	; (8004ef0 <HAL_GPIO_Init+0x344>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00d      	beq.n	8004dce <HAL_GPIO_Init+0x222>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a4f      	ldr	r2, [pc, #316]	; (8004ef4 <HAL_GPIO_Init+0x348>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <HAL_GPIO_Init+0x21e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a4e      	ldr	r2, [pc, #312]	; (8004ef8 <HAL_GPIO_Init+0x34c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d101      	bne.n	8004dc6 <HAL_GPIO_Init+0x21a>
 8004dc2:	2309      	movs	r3, #9
 8004dc4:	e012      	b.n	8004dec <HAL_GPIO_Init+0x240>
 8004dc6:	230a      	movs	r3, #10
 8004dc8:	e010      	b.n	8004dec <HAL_GPIO_Init+0x240>
 8004dca:	2308      	movs	r3, #8
 8004dcc:	e00e      	b.n	8004dec <HAL_GPIO_Init+0x240>
 8004dce:	2307      	movs	r3, #7
 8004dd0:	e00c      	b.n	8004dec <HAL_GPIO_Init+0x240>
 8004dd2:	2306      	movs	r3, #6
 8004dd4:	e00a      	b.n	8004dec <HAL_GPIO_Init+0x240>
 8004dd6:	2305      	movs	r3, #5
 8004dd8:	e008      	b.n	8004dec <HAL_GPIO_Init+0x240>
 8004dda:	2304      	movs	r3, #4
 8004ddc:	e006      	b.n	8004dec <HAL_GPIO_Init+0x240>
 8004dde:	2303      	movs	r3, #3
 8004de0:	e004      	b.n	8004dec <HAL_GPIO_Init+0x240>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e002      	b.n	8004dec <HAL_GPIO_Init+0x240>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <HAL_GPIO_Init+0x240>
 8004dea:	2300      	movs	r3, #0
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	f002 0203 	and.w	r2, r2, #3
 8004df2:	0092      	lsls	r2, r2, #2
 8004df4:	4093      	lsls	r3, r2
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004dfc:	4934      	ldr	r1, [pc, #208]	; (8004ed0 <HAL_GPIO_Init+0x324>)
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	089b      	lsrs	r3, r3, #2
 8004e02:	3302      	adds	r3, #2
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e0a:	4b3c      	ldr	r3, [pc, #240]	; (8004efc <HAL_GPIO_Init+0x350>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	43db      	mvns	r3, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4013      	ands	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e2e:	4a33      	ldr	r2, [pc, #204]	; (8004efc <HAL_GPIO_Init+0x350>)
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e34:	4b31      	ldr	r3, [pc, #196]	; (8004efc <HAL_GPIO_Init+0x350>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	4013      	ands	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e58:	4a28      	ldr	r2, [pc, #160]	; (8004efc <HAL_GPIO_Init+0x350>)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e5e:	4b27      	ldr	r3, [pc, #156]	; (8004efc <HAL_GPIO_Init+0x350>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	43db      	mvns	r3, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e82:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <HAL_GPIO_Init+0x350>)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e88:	4b1c      	ldr	r3, [pc, #112]	; (8004efc <HAL_GPIO_Init+0x350>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4013      	ands	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004eac:	4a13      	ldr	r2, [pc, #76]	; (8004efc <HAL_GPIO_Init+0x350>)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	2b0f      	cmp	r3, #15
 8004ebc:	f67f ae86 	bls.w	8004bcc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004ec0:	bf00      	nop
 8004ec2:	3724      	adds	r7, #36	; 0x24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40013800 	.word	0x40013800
 8004ed4:	40020000 	.word	0x40020000
 8004ed8:	40020400 	.word	0x40020400
 8004edc:	40020800 	.word	0x40020800
 8004ee0:	40020c00 	.word	0x40020c00
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40021400 	.word	0x40021400
 8004eec:	40021800 	.word	0x40021800
 8004ef0:	40021c00 	.word	0x40021c00
 8004ef4:	40022000 	.word	0x40022000
 8004ef8:	40022400 	.word	0x40022400
 8004efc:	40013c00 	.word	0x40013c00

08004f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	807b      	strh	r3, [r7, #2]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f10:	787b      	ldrb	r3, [r7, #1]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f16:	887a      	ldrh	r2, [r7, #2]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004f1c:	e003      	b.n	8004f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004f1e:	887b      	ldrh	r3, [r7, #2]
 8004f20:	041a      	lsls	r2, r3, #16
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	619a      	str	r2, [r3, #24]
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f34:	b08f      	sub	sp, #60	; 0x3c
 8004f36:	af0a      	add	r7, sp, #40	; 0x28
 8004f38:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e10a      	b.n	800515a <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7fd feb5 	bl	8002cc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2203      	movs	r2, #3
 8004f62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f003 f99a 	bl	80082a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	603b      	str	r3, [r7, #0]
 8004f76:	687e      	ldr	r6, [r7, #4]
 8004f78:	466d      	mov	r5, sp
 8004f7a:	f106 0410 	add.w	r4, r6, #16
 8004f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f8e:	1d33      	adds	r3, r6, #4
 8004f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f92:	6838      	ldr	r0, [r7, #0]
 8004f94:	f003 f92e 	bl	80081f4 <USB_CoreInit>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e0d7      	b.n	800515a <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2100      	movs	r1, #0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f003 f988 	bl	80082c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	73fb      	strb	r3, [r7, #15]
 8004fba:	e04a      	b.n	8005052 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fbc:	7bfa      	ldrb	r2, [r7, #15]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	333d      	adds	r3, #61	; 0x3d
 8004fcc:	2201      	movs	r2, #1
 8004fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fd0:	7bfa      	ldrb	r2, [r7, #15]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	333c      	adds	r3, #60	; 0x3c
 8004fe0:	7bfa      	ldrb	r2, [r7, #15]
 8004fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fe4:	7bfa      	ldrb	r2, [r7, #15]
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	b298      	uxth	r0, r3
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	1a9b      	subs	r3, r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	3342      	adds	r3, #66	; 0x42
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ffc:	7bfa      	ldrb	r2, [r7, #15]
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	333f      	adds	r3, #63	; 0x3f
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	3344      	adds	r3, #68	; 0x44
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005024:	7bfa      	ldrb	r2, [r7, #15]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	3348      	adds	r3, #72	; 0x48
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	3350      	adds	r3, #80	; 0x50
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	3301      	adds	r3, #1
 8005050:	73fb      	strb	r3, [r7, #15]
 8005052:	7bfa      	ldrb	r2, [r7, #15]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d3af      	bcc.n	8004fbc <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800505c:	2300      	movs	r3, #0
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e044      	b.n	80050ec <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005062:	7bfa      	ldrb	r2, [r7, #15]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005078:	7bfa      	ldrb	r2, [r7, #15]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800508a:	7bfa      	ldrb	r2, [r7, #15]
 800508c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800508e:	7bfa      	ldrb	r2, [r7, #15]
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050a4:	7bfa      	ldrb	r2, [r7, #15]
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050ba:	7bfa      	ldrb	r2, [r7, #15]
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050d0:	7bfa      	ldrb	r2, [r7, #15]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	3301      	adds	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
 80050ec:	7bfa      	ldrb	r2, [r7, #15]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d3b5      	bcc.n	8005062 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	687e      	ldr	r6, [r7, #4]
 80050fe:	466d      	mov	r5, sp
 8005100:	f106 0410 	add.w	r4, r6, #16
 8005104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800510a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800510c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005110:	e885 0003 	stmia.w	r5, {r0, r1}
 8005114:	1d33      	adds	r3, r6, #4
 8005116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005118:	6838      	ldr	r0, [r7, #0]
 800511a:	f003 f8ff 	bl	800831c <USB_DevInit>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e014      	b.n	800515a <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	2b01      	cmp	r3, #1
 8005146:	d102      	bne.n	800514e <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f80b 	bl	8005164 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f003 fabf 	bl	80086d6 <USB_DevDisconnect>

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005164 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005192:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005194:	4313      	orrs	r3, r2
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	10000003 	.word	0x10000003

080051ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a04      	ldr	r2, [pc, #16]	; (80051c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ba:	6013      	str	r3, [r2, #0]
}
 80051bc:	bf00      	nop
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40007000 	.word	0x40007000

080051cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80051d6:	4b23      	ldr	r3, [pc, #140]	; (8005264 <HAL_PWREx_EnableOverDrive+0x98>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	4a22      	ldr	r2, [pc, #136]	; (8005264 <HAL_PWREx_EnableOverDrive+0x98>)
 80051dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6413      	str	r3, [r2, #64]	; 0x40
 80051e2:	4b20      	ldr	r3, [pc, #128]	; (8005264 <HAL_PWREx_EnableOverDrive+0x98>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80051ee:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051fa:	f7fd fe3b 	bl	8002e74 <HAL_GetTick>
 80051fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005200:	e009      	b.n	8005216 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005202:	f7fd fe37 	bl	8002e74 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005210:	d901      	bls.n	8005216 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e022      	b.n	800525c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005216:	4b14      	ldr	r3, [pc, #80]	; (8005268 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005222:	d1ee      	bne.n	8005202 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005224:	4b10      	ldr	r3, [pc, #64]	; (8005268 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a0f      	ldr	r2, [pc, #60]	; (8005268 <HAL_PWREx_EnableOverDrive+0x9c>)
 800522a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800522e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005230:	f7fd fe20 	bl	8002e74 <HAL_GetTick>
 8005234:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005236:	e009      	b.n	800524c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005238:	f7fd fe1c 	bl	8002e74 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005246:	d901      	bls.n	800524c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e007      	b.n	800525c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <HAL_PWREx_EnableOverDrive+0x9c>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005258:	d1ee      	bne.n	8005238 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40023800 	.word	0x40023800
 8005268:	40007000 	.word	0x40007000

0800526c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005274:	2300      	movs	r3, #0
 8005276:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e25c      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 8087 	beq.w	800539e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005290:	4b96      	ldr	r3, [pc, #600]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 030c 	and.w	r3, r3, #12
 8005298:	2b04      	cmp	r3, #4
 800529a:	d00c      	beq.n	80052b6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529c:	4b93      	ldr	r3, [pc, #588]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 030c 	and.w	r3, r3, #12
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d112      	bne.n	80052ce <HAL_RCC_OscConfig+0x62>
 80052a8:	4b90      	ldr	r3, [pc, #576]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b4:	d10b      	bne.n	80052ce <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b6:	4b8d      	ldr	r3, [pc, #564]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d06c      	beq.n	800539c <HAL_RCC_OscConfig+0x130>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d168      	bne.n	800539c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e236      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d6:	d106      	bne.n	80052e6 <HAL_RCC_OscConfig+0x7a>
 80052d8:	4b84      	ldr	r3, [pc, #528]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a83      	ldr	r2, [pc, #524]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80052de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	e02e      	b.n	8005344 <HAL_RCC_OscConfig+0xd8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0x9c>
 80052ee:	4b7f      	ldr	r3, [pc, #508]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a7e      	ldr	r2, [pc, #504]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80052f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	4b7c      	ldr	r3, [pc, #496]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a7b      	ldr	r2, [pc, #492]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e01d      	b.n	8005344 <HAL_RCC_OscConfig+0xd8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005310:	d10c      	bne.n	800532c <HAL_RCC_OscConfig+0xc0>
 8005312:	4b76      	ldr	r3, [pc, #472]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a75      	ldr	r2, [pc, #468]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	4b73      	ldr	r3, [pc, #460]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a72      	ldr	r2, [pc, #456]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e00b      	b.n	8005344 <HAL_RCC_OscConfig+0xd8>
 800532c:	4b6f      	ldr	r3, [pc, #444]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a6e      	ldr	r2, [pc, #440]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	4b6c      	ldr	r3, [pc, #432]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6b      	ldr	r2, [pc, #428]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 800533e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d013      	beq.n	8005374 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fd fd92 	bl	8002e74 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005354:	f7fd fd8e 	bl	8002e74 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b64      	cmp	r3, #100	; 0x64
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e1ea      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005366:	4b61      	ldr	r3, [pc, #388]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0f0      	beq.n	8005354 <HAL_RCC_OscConfig+0xe8>
 8005372:	e014      	b.n	800539e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fd fd7e 	bl	8002e74 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800537c:	f7fd fd7a 	bl	8002e74 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b64      	cmp	r3, #100	; 0x64
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e1d6      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800538e:	4b57      	ldr	r3, [pc, #348]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x110>
 800539a:	e000      	b.n	800539e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d069      	beq.n	800547e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053aa:	4b50      	ldr	r3, [pc, #320]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053b6:	4b4d      	ldr	r3, [pc, #308]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d11c      	bne.n	80053fc <HAL_RCC_OscConfig+0x190>
 80053c2:	4b4a      	ldr	r3, [pc, #296]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d116      	bne.n	80053fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ce:	4b47      	ldr	r3, [pc, #284]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <HAL_RCC_OscConfig+0x17a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d001      	beq.n	80053e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e1aa      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e6:	4b41      	ldr	r3, [pc, #260]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	493d      	ldr	r1, [pc, #244]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053fa:	e040      	b.n	800547e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d023      	beq.n	800544c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005404:	4b39      	ldr	r3, [pc, #228]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a38      	ldr	r2, [pc, #224]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 800540a:	f043 0301 	orr.w	r3, r3, #1
 800540e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fd fd30 	bl	8002e74 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005418:	f7fd fd2c 	bl	8002e74 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e188      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800542a:	4b30      	ldr	r3, [pc, #192]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005436:	4b2d      	ldr	r3, [pc, #180]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4929      	ldr	r1, [pc, #164]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]
 800544a:	e018      	b.n	800547e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800544c:	4b27      	ldr	r3, [pc, #156]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a26      	ldr	r2, [pc, #152]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005452:	f023 0301 	bic.w	r3, r3, #1
 8005456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005458:	f7fd fd0c 	bl	8002e74 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005460:	f7fd fd08 	bl	8002e74 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e164      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005472:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d038      	beq.n	80054fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d019      	beq.n	80054c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005492:	4b16      	ldr	r3, [pc, #88]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005496:	4a15      	ldr	r2, [pc, #84]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549e:	f7fd fce9 	bl	8002e74 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054a6:	f7fd fce5 	bl	8002e74 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e141      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80054ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x23a>
 80054c4:	e01a      	b.n	80054fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054c6:	4b09      	ldr	r3, [pc, #36]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80054c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ca:	4a08      	ldr	r2, [pc, #32]	; (80054ec <HAL_RCC_OscConfig+0x280>)
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d2:	f7fd fccf 	bl	8002e74 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d8:	e00a      	b.n	80054f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054da:	f7fd fccb 	bl	8002e74 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d903      	bls.n	80054f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e127      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
 80054ec:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f0:	4b94      	ldr	r3, [pc, #592]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80054f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1ee      	bne.n	80054da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80a4 	beq.w	8005652 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800550a:	4b8e      	ldr	r3, [pc, #568]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10d      	bne.n	8005532 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005516:	4b8b      	ldr	r3, [pc, #556]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	4a8a      	ldr	r2, [pc, #552]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800551c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005520:	6413      	str	r3, [r2, #64]	; 0x40
 8005522:	4b88      	ldr	r3, [pc, #544]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800552e:	2301      	movs	r3, #1
 8005530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005532:	4b85      	ldr	r3, [pc, #532]	; (8005748 <HAL_RCC_OscConfig+0x4dc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553a:	2b00      	cmp	r3, #0
 800553c:	d118      	bne.n	8005570 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800553e:	4b82      	ldr	r3, [pc, #520]	; (8005748 <HAL_RCC_OscConfig+0x4dc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a81      	ldr	r2, [pc, #516]	; (8005748 <HAL_RCC_OscConfig+0x4dc>)
 8005544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800554a:	f7fd fc93 	bl	8002e74 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005552:	f7fd fc8f 	bl	8002e74 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b64      	cmp	r3, #100	; 0x64
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e0eb      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005564:	4b78      	ldr	r3, [pc, #480]	; (8005748 <HAL_RCC_OscConfig+0x4dc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0f0      	beq.n	8005552 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d106      	bne.n	8005586 <HAL_RCC_OscConfig+0x31a>
 8005578:	4b72      	ldr	r3, [pc, #456]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557c:	4a71      	ldr	r2, [pc, #452]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	6713      	str	r3, [r2, #112]	; 0x70
 8005584:	e02d      	b.n	80055e2 <HAL_RCC_OscConfig+0x376>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10c      	bne.n	80055a8 <HAL_RCC_OscConfig+0x33c>
 800558e:	4b6d      	ldr	r3, [pc, #436]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	4a6c      	ldr	r2, [pc, #432]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005594:	f023 0301 	bic.w	r3, r3, #1
 8005598:	6713      	str	r3, [r2, #112]	; 0x70
 800559a:	4b6a      	ldr	r3, [pc, #424]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559e:	4a69      	ldr	r2, [pc, #420]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055a0:	f023 0304 	bic.w	r3, r3, #4
 80055a4:	6713      	str	r3, [r2, #112]	; 0x70
 80055a6:	e01c      	b.n	80055e2 <HAL_RCC_OscConfig+0x376>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b05      	cmp	r3, #5
 80055ae:	d10c      	bne.n	80055ca <HAL_RCC_OscConfig+0x35e>
 80055b0:	4b64      	ldr	r3, [pc, #400]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b4:	4a63      	ldr	r2, [pc, #396]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055b6:	f043 0304 	orr.w	r3, r3, #4
 80055ba:	6713      	str	r3, [r2, #112]	; 0x70
 80055bc:	4b61      	ldr	r3, [pc, #388]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	4a60      	ldr	r2, [pc, #384]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	6713      	str	r3, [r2, #112]	; 0x70
 80055c8:	e00b      	b.n	80055e2 <HAL_RCC_OscConfig+0x376>
 80055ca:	4b5e      	ldr	r3, [pc, #376]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ce:	4a5d      	ldr	r2, [pc, #372]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055d0:	f023 0301 	bic.w	r3, r3, #1
 80055d4:	6713      	str	r3, [r2, #112]	; 0x70
 80055d6:	4b5b      	ldr	r3, [pc, #364]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055da:	4a5a      	ldr	r2, [pc, #360]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80055dc:	f023 0304 	bic.w	r3, r3, #4
 80055e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d015      	beq.n	8005616 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ea:	f7fd fc43 	bl	8002e74 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f0:	e00a      	b.n	8005608 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f2:	f7fd fc3f 	bl	8002e74 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005600:	4293      	cmp	r3, r2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e099      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005608:	4b4e      	ldr	r3, [pc, #312]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800560a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ee      	beq.n	80055f2 <HAL_RCC_OscConfig+0x386>
 8005614:	e014      	b.n	8005640 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fd fc2d 	bl	8002e74 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800561c:	e00a      	b.n	8005634 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561e:	f7fd fc29 	bl	8002e74 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	; 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e083      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005634:	4b43      	ldr	r3, [pc, #268]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1ee      	bne.n	800561e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005640:	7dfb      	ldrb	r3, [r7, #23]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005646:	4b3f      	ldr	r3, [pc, #252]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	4a3e      	ldr	r2, [pc, #248]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800564c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005650:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d06f      	beq.n	800573a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800565a:	4b3a      	ldr	r3, [pc, #232]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b08      	cmp	r3, #8
 8005664:	d067      	beq.n	8005736 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d149      	bne.n	8005702 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566e:	4b35      	ldr	r3, [pc, #212]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a34      	ldr	r2, [pc, #208]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005674:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567a:	f7fd fbfb 	bl	8002e74 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005682:	f7fd fbf7 	bl	8002e74 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e053      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005694:	4b2b      	ldr	r3, [pc, #172]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1f0      	bne.n	8005682 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	019b      	lsls	r3, r3, #6
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	085b      	lsrs	r3, r3, #1
 80056b8:	3b01      	subs	r3, #1
 80056ba:	041b      	lsls	r3, r3, #16
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	061b      	lsls	r3, r3, #24
 80056c4:	4313      	orrs	r3, r2
 80056c6:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80056c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056cc:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056ce:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80056d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056da:	f7fd fbcb 	bl	8002e74 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e2:	f7fd fbc7 	bl	8002e74 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e023      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056f4:	4b13      	ldr	r3, [pc, #76]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0f0      	beq.n	80056e2 <HAL_RCC_OscConfig+0x476>
 8005700:	e01b      	b.n	800573a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005702:	4b10      	ldr	r3, [pc, #64]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 8005708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800570c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570e:	f7fd fbb1 	bl	8002e74 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005716:	f7fd fbad 	bl	8002e74 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e009      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <HAL_RCC_OscConfig+0x4d8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1f0      	bne.n	8005716 <HAL_RCC_OscConfig+0x4aa>
 8005734:	e001      	b.n	800573a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40023800 	.word	0x40023800
 8005748:	40007000 	.word	0x40007000

0800574c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0ce      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005764:	4b69      	ldr	r3, [pc, #420]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 030f 	and.w	r3, r3, #15
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d910      	bls.n	8005794 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005772:	4b66      	ldr	r3, [pc, #408]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 020f 	bic.w	r2, r3, #15
 800577a:	4964      	ldr	r1, [pc, #400]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	4313      	orrs	r3, r2
 8005780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005782:	4b62      	ldr	r3, [pc, #392]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d001      	beq.n	8005794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e0b6      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d020      	beq.n	80057e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057ac:	4b58      	ldr	r3, [pc, #352]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4a57      	ldr	r2, [pc, #348]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c4:	4b52      	ldr	r3, [pc, #328]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4a51      	ldr	r2, [pc, #324]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d0:	4b4f      	ldr	r3, [pc, #316]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	494c      	ldr	r1, [pc, #304]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d040      	beq.n	8005870 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d107      	bne.n	8005806 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f6:	4b46      	ldr	r3, [pc, #280]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d115      	bne.n	800582e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e07d      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d107      	bne.n	800581e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580e:	4b40      	ldr	r3, [pc, #256]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e071      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581e:	4b3c      	ldr	r3, [pc, #240]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e069      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582e:	4b38      	ldr	r3, [pc, #224]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f023 0203 	bic.w	r2, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4935      	ldr	r1, [pc, #212]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 800583c:	4313      	orrs	r3, r2
 800583e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005840:	f7fd fb18 	bl	8002e74 <HAL_GetTick>
 8005844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005846:	e00a      	b.n	800585e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005848:	f7fd fb14 	bl	8002e74 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f241 3288 	movw	r2, #5000	; 0x1388
 8005856:	4293      	cmp	r3, r2
 8005858:	d901      	bls.n	800585e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e051      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585e:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 020c 	and.w	r2, r3, #12
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	429a      	cmp	r2, r3
 800586e:	d1eb      	bne.n	8005848 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005870:	4b26      	ldr	r3, [pc, #152]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d210      	bcs.n	80058a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587e:	4b23      	ldr	r3, [pc, #140]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 020f 	bic.w	r2, r3, #15
 8005886:	4921      	ldr	r1, [pc, #132]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588e:	4b1f      	ldr	r3, [pc, #124]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e030      	b.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058ac:	4b18      	ldr	r3, [pc, #96]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	4915      	ldr	r1, [pc, #84]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058ca:	4b11      	ldr	r3, [pc, #68]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	490d      	ldr	r1, [pc, #52]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058de:	f000 f81d 	bl	800591c <HAL_RCC_GetSysClockFreq>
 80058e2:	4601      	mov	r1, r0
 80058e4:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <HAL_RCC_ClockConfig+0x1c8>)
 80058f0:	5cd3      	ldrb	r3, [r2, r3]
 80058f2:	fa21 f303 	lsr.w	r3, r1, r3
 80058f6:	4a08      	ldr	r2, [pc, #32]	; (8005918 <HAL_RCC_ClockConfig+0x1cc>)
 80058f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80058fa:	2000      	movs	r0, #0
 80058fc:	f7fd fa76 	bl	8002dec <HAL_InitTick>

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40023c00 	.word	0x40023c00
 8005910:	40023800 	.word	0x40023800
 8005914:	0800ab6c 	.word	0x0800ab6c
 8005918:	200000ec 	.word	0x200000ec

0800591c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800591c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	607b      	str	r3, [r7, #4]
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	2300      	movs	r3, #0
 800592c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005932:	4b63      	ldr	r3, [pc, #396]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b04      	cmp	r3, #4
 800593c:	d007      	beq.n	800594e <HAL_RCC_GetSysClockFreq+0x32>
 800593e:	2b08      	cmp	r3, #8
 8005940:	d008      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0x38>
 8005942:	2b00      	cmp	r3, #0
 8005944:	f040 80b4 	bne.w	8005ab0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005948:	4b5e      	ldr	r3, [pc, #376]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800594a:	60bb      	str	r3, [r7, #8]
       break;
 800594c:	e0b3      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800594e:	4b5e      	ldr	r3, [pc, #376]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005950:	60bb      	str	r3, [r7, #8]
      break;
 8005952:	e0b0      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005954:	4b5a      	ldr	r3, [pc, #360]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800595c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800595e:	4b58      	ldr	r3, [pc, #352]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d04a      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800596a:	4b55      	ldr	r3, [pc, #340]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	099b      	lsrs	r3, r3, #6
 8005970:	f04f 0400 	mov.w	r4, #0
 8005974:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	ea03 0501 	and.w	r5, r3, r1
 8005980:	ea04 0602 	and.w	r6, r4, r2
 8005984:	4629      	mov	r1, r5
 8005986:	4632      	mov	r2, r6
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	f04f 0400 	mov.w	r4, #0
 8005990:	0154      	lsls	r4, r2, #5
 8005992:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005996:	014b      	lsls	r3, r1, #5
 8005998:	4619      	mov	r1, r3
 800599a:	4622      	mov	r2, r4
 800599c:	1b49      	subs	r1, r1, r5
 800599e:	eb62 0206 	sbc.w	r2, r2, r6
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	f04f 0400 	mov.w	r4, #0
 80059aa:	0194      	lsls	r4, r2, #6
 80059ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80059b0:	018b      	lsls	r3, r1, #6
 80059b2:	1a5b      	subs	r3, r3, r1
 80059b4:	eb64 0402 	sbc.w	r4, r4, r2
 80059b8:	f04f 0100 	mov.w	r1, #0
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	00e2      	lsls	r2, r4, #3
 80059c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80059c6:	00d9      	lsls	r1, r3, #3
 80059c8:	460b      	mov	r3, r1
 80059ca:	4614      	mov	r4, r2
 80059cc:	195b      	adds	r3, r3, r5
 80059ce:	eb44 0406 	adc.w	r4, r4, r6
 80059d2:	f04f 0100 	mov.w	r1, #0
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	0262      	lsls	r2, r4, #9
 80059dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80059e0:	0259      	lsls	r1, r3, #9
 80059e2:	460b      	mov	r3, r1
 80059e4:	4614      	mov	r4, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	4621      	mov	r1, r4
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f04f 0400 	mov.w	r4, #0
 80059f0:	461a      	mov	r2, r3
 80059f2:	4623      	mov	r3, r4
 80059f4:	f7fb f918 	bl	8000c28 <__aeabi_uldivmod>
 80059f8:	4603      	mov	r3, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e049      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a00:	4b2f      	ldr	r3, [pc, #188]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	099b      	lsrs	r3, r3, #6
 8005a06:	f04f 0400 	mov.w	r4, #0
 8005a0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	ea03 0501 	and.w	r5, r3, r1
 8005a16:	ea04 0602 	and.w	r6, r4, r2
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	4632      	mov	r2, r6
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	f04f 0400 	mov.w	r4, #0
 8005a26:	0154      	lsls	r4, r2, #5
 8005a28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a2c:	014b      	lsls	r3, r1, #5
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4622      	mov	r2, r4
 8005a32:	1b49      	subs	r1, r1, r5
 8005a34:	eb62 0206 	sbc.w	r2, r2, r6
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	f04f 0400 	mov.w	r4, #0
 8005a40:	0194      	lsls	r4, r2, #6
 8005a42:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a46:	018b      	lsls	r3, r1, #6
 8005a48:	1a5b      	subs	r3, r3, r1
 8005a4a:	eb64 0402 	sbc.w	r4, r4, r2
 8005a4e:	f04f 0100 	mov.w	r1, #0
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	00e2      	lsls	r2, r4, #3
 8005a58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a5c:	00d9      	lsls	r1, r3, #3
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4614      	mov	r4, r2
 8005a62:	195b      	adds	r3, r3, r5
 8005a64:	eb44 0406 	adc.w	r4, r4, r6
 8005a68:	f04f 0100 	mov.w	r1, #0
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	02a2      	lsls	r2, r4, #10
 8005a72:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005a76:	0299      	lsls	r1, r3, #10
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	4621      	mov	r1, r4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f04f 0400 	mov.w	r4, #0
 8005a86:	461a      	mov	r2, r3
 8005a88:	4623      	mov	r3, r4
 8005a8a:	f7fb f8cd 	bl	8000c28 <__aeabi_uldivmod>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	0c1b      	lsrs	r3, r3, #16
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aac:	60bb      	str	r3, [r7, #8]
      break;
 8005aae:	e002      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ab0:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005ab2:	60bb      	str	r3, [r7, #8]
      break;
 8005ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	00f42400 	.word	0x00f42400
 8005ac8:	007a1200 	.word	0x007a1200

08005acc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad0:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	200000ec 	.word	0x200000ec

08005ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ae8:	f7ff fff0 	bl	8005acc <HAL_RCC_GetHCLKFreq>
 8005aec:	4601      	mov	r1, r0
 8005aee:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	0a9b      	lsrs	r3, r3, #10
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	4a03      	ldr	r2, [pc, #12]	; (8005b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005afa:	5cd3      	ldrb	r3, [r2, r3]
 8005afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40023800 	.word	0x40023800
 8005b08:	0800ab7c 	.word	0x0800ab7c

08005b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b10:	f7ff ffdc 	bl	8005acc <HAL_RCC_GetHCLKFreq>
 8005b14:	4601      	mov	r1, r0
 8005b16:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	0b5b      	lsrs	r3, r3, #13
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	4a03      	ldr	r2, [pc, #12]	; (8005b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b22:	5cd3      	ldrb	r3, [r2, r3]
 8005b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	0800ab7c 	.word	0x0800ab7c

08005b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d012      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b5c:	4b69      	ldr	r3, [pc, #420]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4a68      	ldr	r2, [pc, #416]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b66:	6093      	str	r3, [r2, #8]
 8005b68:	4b66      	ldr	r3, [pc, #408]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b70:	4964      	ldr	r1, [pc, #400]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d017      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b8e:	4b5d      	ldr	r3, [pc, #372]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	4959      	ldr	r1, [pc, #356]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bac:	d101      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d017      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bca:	4b4e      	ldr	r3, [pc, #312]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	494a      	ldr	r1, [pc, #296]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005be8:	d101      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005bea:	2301      	movs	r3, #1
 8005bec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005c06:	2301      	movs	r3, #1
 8005c08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 808b 	beq.w	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c18:	4b3a      	ldr	r3, [pc, #232]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	4a39      	ldr	r2, [pc, #228]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c22:	6413      	str	r3, [r2, #64]	; 0x40
 8005c24:	4b37      	ldr	r3, [pc, #220]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2c:	60bb      	str	r3, [r7, #8]
 8005c2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c30:	4b35      	ldr	r3, [pc, #212]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a34      	ldr	r2, [pc, #208]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c3c:	f7fd f91a 	bl	8002e74 <HAL_GetTick>
 8005c40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c42:	e008      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c44:	f7fd f916 	bl	8002e74 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b64      	cmp	r3, #100	; 0x64
 8005c50:	d901      	bls.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e355      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c56:	4b2c      	ldr	r3, [pc, #176]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0f0      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c62:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d035      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d02e      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c80:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c96:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	4a1a      	ldr	r2, [pc, #104]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005ca2:	4a18      	ldr	r2, [pc, #96]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ca8:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d114      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb4:	f7fd f8de 	bl	8002e74 <HAL_GetTick>
 8005cb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cba:	e00a      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cbc:	f7fd f8da 	bl	8002e74 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e317      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0ee      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cea:	d111      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005cf8:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cfa:	400b      	ands	r3, r1
 8005cfc:	4901      	ldr	r1, [pc, #4]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	608b      	str	r3, [r1, #8]
 8005d02:	e00b      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005d04:	40023800 	.word	0x40023800
 8005d08:	40007000 	.word	0x40007000
 8005d0c:	0ffffcff 	.word	0x0ffffcff
 8005d10:	4bb0      	ldr	r3, [pc, #704]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4aaf      	ldr	r2, [pc, #700]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d1a:	6093      	str	r3, [r2, #8]
 8005d1c:	4bad      	ldr	r3, [pc, #692]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d28:	49aa      	ldr	r1, [pc, #680]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d010      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d3a:	4ba6      	ldr	r3, [pc, #664]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d40:	4aa4      	ldr	r2, [pc, #656]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005d4a:	4ba2      	ldr	r3, [pc, #648]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	499f      	ldr	r1, [pc, #636]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d68:	4b9a      	ldr	r3, [pc, #616]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d76:	4997      	ldr	r1, [pc, #604]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d8a:	4b92      	ldr	r3, [pc, #584]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d98:	498e      	ldr	r1, [pc, #568]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dac:	4b89      	ldr	r3, [pc, #548]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dba:	4986      	ldr	r1, [pc, #536]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dce:	4b81      	ldr	r3, [pc, #516]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	497d      	ldr	r1, [pc, #500]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005df0:	4b78      	ldr	r3, [pc, #480]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df6:	f023 0203 	bic.w	r2, r3, #3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	4975      	ldr	r1, [pc, #468]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e12:	4b70      	ldr	r3, [pc, #448]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e18:	f023 020c 	bic.w	r2, r3, #12
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e20:	496c      	ldr	r1, [pc, #432]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e34:	4b67      	ldr	r3, [pc, #412]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e42:	4964      	ldr	r1, [pc, #400]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e56:	4b5f      	ldr	r3, [pc, #380]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e64:	495b      	ldr	r1, [pc, #364]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e78:	4b56      	ldr	r3, [pc, #344]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	4953      	ldr	r1, [pc, #332]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005e9a:	4b4e      	ldr	r3, [pc, #312]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea8:	494a      	ldr	r1, [pc, #296]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ebc:	4b45      	ldr	r3, [pc, #276]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eca:	4942      	ldr	r1, [pc, #264]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005ede:	4b3d      	ldr	r3, [pc, #244]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eec:	4939      	ldr	r1, [pc, #228]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f00:	4b34      	ldr	r3, [pc, #208]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f0e:	4931      	ldr	r1, [pc, #196]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d011      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005f22:	4b2c      	ldr	r3, [pc, #176]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f30:	4928      	ldr	r1, [pc, #160]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f40:	d101      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005f42:	2301      	movs	r3, #1
 8005f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005f52:	2301      	movs	r3, #1
 8005f54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f62:	4b1c      	ldr	r3, [pc, #112]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f70:	4918      	ldr	r1, [pc, #96]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f84:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f94:	490f      	ldr	r1, [pc, #60]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d005      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005faa:	f040 80d8 	bne.w	800615e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fae:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a08      	ldr	r2, [pc, #32]	; (8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005fb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fba:	f7fc ff5b 	bl	8002e74 <HAL_GetTick>
 8005fbe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fc0:	e00a      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fc2:	f7fc ff57 	bl	8002e74 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b64      	cmp	r3, #100	; 0x64
 8005fce:	d903      	bls.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e196      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005fd4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fd8:	4b6c      	ldr	r3, [pc, #432]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1ee      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d021      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d11d      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ff8:	4b64      	ldr	r3, [pc, #400]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006006:	4b61      	ldr	r3, [pc, #388]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600c:	0e1b      	lsrs	r3, r3, #24
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	019a      	lsls	r2, r3, #6
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	431a      	orrs	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	061b      	lsls	r3, r3, #24
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	071b      	lsls	r3, r3, #28
 800602c:	4957      	ldr	r1, [pc, #348]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006048:	d00a      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006052:	2b00      	cmp	r3, #0
 8006054:	d02e      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800605e:	d129      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006060:	4b4a      	ldr	r3, [pc, #296]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006066:	0c1b      	lsrs	r3, r3, #16
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800606e:	4b47      	ldr	r3, [pc, #284]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006074:	0f1b      	lsrs	r3, r3, #28
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	019a      	lsls	r2, r3, #6
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	041b      	lsls	r3, r3, #16
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	061b      	lsls	r3, r3, #24
 800608e:	431a      	orrs	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	071b      	lsls	r3, r3, #28
 8006094:	493d      	ldr	r1, [pc, #244]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800609c:	4b3b      	ldr	r3, [pc, #236]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800609e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a2:	f023 021f 	bic.w	r2, r3, #31
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	3b01      	subs	r3, #1
 80060ac:	4937      	ldr	r1, [pc, #220]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01d      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060c0:	4b32      	ldr	r3, [pc, #200]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80060c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060c6:	0e1b      	lsrs	r3, r3, #24
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060ce:	4b2f      	ldr	r3, [pc, #188]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80060d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d4:	0f1b      	lsrs	r3, r3, #28
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	019a      	lsls	r2, r3, #6
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	041b      	lsls	r3, r3, #16
 80060e8:	431a      	orrs	r2, r3
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	061b      	lsls	r3, r3, #24
 80060ee:	431a      	orrs	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	071b      	lsls	r3, r3, #28
 80060f4:	4925      	ldr	r1, [pc, #148]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d011      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	019a      	lsls	r2, r3, #6
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	041b      	lsls	r3, r3, #16
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	061b      	lsls	r3, r3, #24
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	071b      	lsls	r3, r3, #28
 8006124:	4919      	ldr	r1, [pc, #100]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800612c:	4b17      	ldr	r3, [pc, #92]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a16      	ldr	r2, [pc, #88]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006138:	f7fc fe9c 	bl	8002e74 <HAL_GetTick>
 800613c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006140:	f7fc fe98 	bl	8002e74 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b64      	cmp	r3, #100	; 0x64
 800614c:	d901      	bls.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e0d7      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006152:	4b0e      	ldr	r3, [pc, #56]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b01      	cmp	r3, #1
 8006162:	f040 80cd 	bne.w	8006300 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006166:	4b09      	ldr	r3, [pc, #36]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a08      	ldr	r2, [pc, #32]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800616c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006172:	f7fc fe7f 	bl	8002e74 <HAL_GetTick>
 8006176:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006178:	e00a      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800617a:	f7fc fe7b 	bl	8002e74 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b64      	cmp	r3, #100	; 0x64
 8006186:	d903      	bls.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e0ba      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800618c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006190:	4b5e      	ldr	r3, [pc, #376]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619c:	d0ed      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d02e      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d12a      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061c6:	4b51      	ldr	r3, [pc, #324]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061cc:	0c1b      	lsrs	r3, r3, #16
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061d4:	4b4d      	ldr	r3, [pc, #308]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	0f1b      	lsrs	r3, r3, #28
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	019a      	lsls	r2, r3, #6
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	041b      	lsls	r3, r3, #16
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	061b      	lsls	r3, r3, #24
 80061f4:	431a      	orrs	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	071b      	lsls	r3, r3, #28
 80061fa:	4944      	ldr	r1, [pc, #272]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006202:	4b42      	ldr	r3, [pc, #264]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006208:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	3b01      	subs	r3, #1
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	493d      	ldr	r1, [pc, #244]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d022      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800622c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006230:	d11d      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006232:	4b36      	ldr	r3, [pc, #216]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	0e1b      	lsrs	r3, r3, #24
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006240:	4b32      	ldr	r3, [pc, #200]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	0f1b      	lsrs	r3, r3, #28
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	019a      	lsls	r2, r3, #6
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	041b      	lsls	r3, r3, #16
 800625a:	431a      	orrs	r2, r3
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	061b      	lsls	r3, r3, #24
 8006260:	431a      	orrs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	071b      	lsls	r3, r3, #28
 8006266:	4929      	ldr	r1, [pc, #164]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d028      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800627a:	4b24      	ldr	r3, [pc, #144]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	0e1b      	lsrs	r3, r3, #24
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006288:	4b20      	ldr	r3, [pc, #128]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628e:	0c1b      	lsrs	r3, r3, #16
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	019a      	lsls	r2, r3, #6
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	041b      	lsls	r3, r3, #16
 80062a0:	431a      	orrs	r2, r3
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	061b      	lsls	r3, r3, #24
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	071b      	lsls	r3, r3, #28
 80062ae:	4917      	ldr	r1, [pc, #92]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80062b6:	4b15      	ldr	r3, [pc, #84]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80062b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	4911      	ldr	r1, [pc, #68]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a0e      	ldr	r2, [pc, #56]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80062d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d8:	f7fc fdcc 	bl	8002e74 <HAL_GetTick>
 80062dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062de:	e008      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062e0:	f7fc fdc8 	bl	8002e74 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b64      	cmp	r3, #100	; 0x64
 80062ec:	d901      	bls.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e007      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062f2:	4b06      	ldr	r3, [pc, #24]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062fe:	d1ef      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3720      	adds	r7, #32
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40023800 	.word	0x40023800

08006310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e01d      	b.n	800635e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fc fad2 	bl	80028e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3304      	adds	r3, #4
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	f000 fbc8 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0201 	orr.w	r2, r2, #1
 800637e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <HAL_TIM_Base_Start_IT+0x50>)
 8006388:	4013      	ands	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d00b      	beq.n	80063aa <HAL_TIM_Base_Start_IT+0x42>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006398:	d007      	beq.n	80063aa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0201 	orr.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	00010007 	.word	0x00010007

080063bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e01d      	b.n	800640a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f815 	bl	8006412 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f000 fb72 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2201      	movs	r2, #1
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f000 feea 	bl	8007214 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a17      	ldr	r2, [pc, #92]	; (80064a4 <HAL_TIM_PWM_Start+0x7c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d004      	beq.n	8006454 <HAL_TIM_PWM_Start+0x2c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a16      	ldr	r2, [pc, #88]	; (80064a8 <HAL_TIM_PWM_Start+0x80>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d101      	bne.n	8006458 <HAL_TIM_PWM_Start+0x30>
 8006454:	2301      	movs	r3, #1
 8006456:	e000      	b.n	800645a <HAL_TIM_PWM_Start+0x32>
 8006458:	2300      	movs	r3, #0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800646c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <HAL_TIM_PWM_Start+0x84>)
 8006476:	4013      	ands	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b06      	cmp	r3, #6
 800647e:	d00b      	beq.n	8006498 <HAL_TIM_PWM_Start+0x70>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006486:	d007      	beq.n	8006498 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40010400 	.word	0x40010400
 80064ac:	00010007 	.word	0x00010007

080064b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d122      	bne.n	800650c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d11b      	bne.n	800650c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0202 	mvn.w	r2, #2
 80064dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fad8 	bl	8006aa8 <HAL_TIM_IC_CaptureCallback>
 80064f8:	e005      	b.n	8006506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 faca 	bl	8006a94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fadb 	bl	8006abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b04      	cmp	r3, #4
 8006518:	d122      	bne.n	8006560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b04      	cmp	r3, #4
 8006526:	d11b      	bne.n	8006560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0204 	mvn.w	r2, #4
 8006530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 faae 	bl	8006aa8 <HAL_TIM_IC_CaptureCallback>
 800654c:	e005      	b.n	800655a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 faa0 	bl	8006a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fab1 	bl	8006abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */

  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b08      	cmp	r3, #8
 800656c:	d122      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b08      	cmp	r3, #8
 800657a:	d11b      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0208 	mvn.w	r2, #8
 8006584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2204      	movs	r2, #4
 800658a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa84 	bl	8006aa8 <HAL_TIM_IC_CaptureCallback>
 80065a0:	e005      	b.n	80065ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa76 	bl	8006a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa87 	bl	8006abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0310 	and.w	r3, r3, #16
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d122      	bne.n	8006608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b10      	cmp	r3, #16
 80065ce:	d11b      	bne.n	8006608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0210 	mvn.w	r2, #16
 80065d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2208      	movs	r2, #8
 80065de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa5a 	bl	8006aa8 <HAL_TIM_IC_CaptureCallback>
 80065f4:	e005      	b.n	8006602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa4c 	bl	8006a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fa5d 	bl	8006abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b01      	cmp	r3, #1
 8006614:	d10e      	bne.n	8006634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b01      	cmp	r3, #1
 8006622:	d107      	bne.n	8006634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0201 	mvn.w	r2, #1
 800662c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fb fa96 	bl	8001b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663e:	2b80      	cmp	r3, #128	; 0x80
 8006640:	d10e      	bne.n	8006660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664c:	2b80      	cmp	r3, #128	; 0x80
 800664e:	d107      	bne.n	8006660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fee4 	bl	8007428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666e:	d10e      	bne.n	800668e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667a:	2b80      	cmp	r3, #128	; 0x80
 800667c:	d107      	bne.n	800668e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fed7 	bl	800743c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b40      	cmp	r3, #64	; 0x40
 800669a:	d10e      	bne.n	80066ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d107      	bne.n	80066ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fa0b 	bl	8006ad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d10e      	bne.n	80066e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	d107      	bne.n	80066e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f06f 0220 	mvn.w	r2, #32
 80066de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fe97 	bl	8007414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006706:	2302      	movs	r3, #2
 8006708:	e105      	b.n	8006916 <HAL_TIM_PWM_ConfigChannel+0x226>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b14      	cmp	r3, #20
 800671e:	f200 80f0 	bhi.w	8006902 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800677d 	.word	0x0800677d
 800672c:	08006903 	.word	0x08006903
 8006730:	08006903 	.word	0x08006903
 8006734:	08006903 	.word	0x08006903
 8006738:	080067bd 	.word	0x080067bd
 800673c:	08006903 	.word	0x08006903
 8006740:	08006903 	.word	0x08006903
 8006744:	08006903 	.word	0x08006903
 8006748:	080067ff 	.word	0x080067ff
 800674c:	08006903 	.word	0x08006903
 8006750:	08006903 	.word	0x08006903
 8006754:	08006903 	.word	0x08006903
 8006758:	0800683f 	.word	0x0800683f
 800675c:	08006903 	.word	0x08006903
 8006760:	08006903 	.word	0x08006903
 8006764:	08006903 	.word	0x08006903
 8006768:	08006881 	.word	0x08006881
 800676c:	08006903 	.word	0x08006903
 8006770:	08006903 	.word	0x08006903
 8006774:	08006903 	.word	0x08006903
 8006778:	080068c1 	.word	0x080068c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fa4e 	bl	8006c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0208 	orr.w	r2, r2, #8
 8006796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0204 	bic.w	r2, r2, #4
 80067a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6999      	ldr	r1, [r3, #24]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	619a      	str	r2, [r3, #24]
      break;
 80067ba:	e0a3      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 faa0 	bl	8006d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699a      	ldr	r2, [r3, #24]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6999      	ldr	r1, [r3, #24]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	021a      	lsls	r2, r3, #8
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	619a      	str	r2, [r3, #24]
      break;
 80067fc:	e082      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 faf7 	bl	8006df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0208 	orr.w	r2, r2, #8
 8006818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0204 	bic.w	r2, r2, #4
 8006828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69d9      	ldr	r1, [r3, #28]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	691a      	ldr	r2, [r3, #16]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	61da      	str	r2, [r3, #28]
      break;
 800683c:	e062      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fb4d 	bl	8006ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69d9      	ldr	r1, [r3, #28]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	021a      	lsls	r2, r3, #8
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	61da      	str	r2, [r3, #28]
      break;
 800687e:	e041      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fb84 	bl	8006f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0208 	orr.w	r2, r2, #8
 800689a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0204 	bic.w	r2, r2, #4
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068be:	e021      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fbb6 	bl	8007038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	021a      	lsls	r2, r3, #8
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006900:	e000      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006902:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop

08006920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIM_ConfigClockSource+0x18>
 8006934:	2302      	movs	r3, #2
 8006936:	e0a6      	b.n	8006a86 <HAL_TIM_ConfigClockSource+0x166>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4b4f      	ldr	r3, [pc, #316]	; (8006a90 <HAL_TIM_ConfigClockSource+0x170>)
 8006954:	4013      	ands	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b40      	cmp	r3, #64	; 0x40
 800696e:	d067      	beq.n	8006a40 <HAL_TIM_ConfigClockSource+0x120>
 8006970:	2b40      	cmp	r3, #64	; 0x40
 8006972:	d80b      	bhi.n	800698c <HAL_TIM_ConfigClockSource+0x6c>
 8006974:	2b10      	cmp	r3, #16
 8006976:	d073      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x140>
 8006978:	2b10      	cmp	r3, #16
 800697a:	d802      	bhi.n	8006982 <HAL_TIM_ConfigClockSource+0x62>
 800697c:	2b00      	cmp	r3, #0
 800697e:	d06f      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006980:	e078      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006982:	2b20      	cmp	r3, #32
 8006984:	d06c      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x140>
 8006986:	2b30      	cmp	r3, #48	; 0x30
 8006988:	d06a      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800698a:	e073      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800698c:	2b70      	cmp	r3, #112	; 0x70
 800698e:	d00d      	beq.n	80069ac <HAL_TIM_ConfigClockSource+0x8c>
 8006990:	2b70      	cmp	r3, #112	; 0x70
 8006992:	d804      	bhi.n	800699e <HAL_TIM_ConfigClockSource+0x7e>
 8006994:	2b50      	cmp	r3, #80	; 0x50
 8006996:	d033      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0xe0>
 8006998:	2b60      	cmp	r3, #96	; 0x60
 800699a:	d041      	beq.n	8006a20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800699c:	e06a      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800699e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a2:	d066      	beq.n	8006a72 <HAL_TIM_ConfigClockSource+0x152>
 80069a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a8:	d017      	beq.n	80069da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80069aa:	e063      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	6899      	ldr	r1, [r3, #8]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f000 fc0a 	bl	80071d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	609a      	str	r2, [r3, #8]
      break;
 80069d8:	e04c      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6899      	ldr	r1, [r3, #8]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f000 fbf3 	bl	80071d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069fc:	609a      	str	r2, [r3, #8]
      break;
 80069fe:	e039      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	6859      	ldr	r1, [r3, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	f000 fb67 	bl	80070e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2150      	movs	r1, #80	; 0x50
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fbc0 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006a1e:	e029      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	6859      	ldr	r1, [r3, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	f000 fb86 	bl	800713e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2160      	movs	r1, #96	; 0x60
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fbb0 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006a3e:	e019      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6859      	ldr	r1, [r3, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f000 fb47 	bl	80070e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2140      	movs	r1, #64	; 0x40
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fba0 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006a5e:	e009      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f000 fb97 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006a70:	e000      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	fffeff88 	.word	0xfffeff88

08006a94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a40      	ldr	r2, [pc, #256]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b02:	d00f      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a3d      	ldr	r2, [pc, #244]	; (8006bfc <TIM_Base_SetConfig+0x118>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a3c      	ldr	r2, [pc, #240]	; (8006c00 <TIM_Base_SetConfig+0x11c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a3b      	ldr	r2, [pc, #236]	; (8006c04 <TIM_Base_SetConfig+0x120>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a3a      	ldr	r2, [pc, #232]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d108      	bne.n	8006b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2f      	ldr	r2, [pc, #188]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d02b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b44:	d027      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2c      	ldr	r2, [pc, #176]	; (8006bfc <TIM_Base_SetConfig+0x118>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d023      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2b      	ldr	r2, [pc, #172]	; (8006c00 <TIM_Base_SetConfig+0x11c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d01f      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2a      	ldr	r2, [pc, #168]	; (8006c04 <TIM_Base_SetConfig+0x120>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a29      	ldr	r2, [pc, #164]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d017      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a28      	ldr	r2, [pc, #160]	; (8006c0c <TIM_Base_SetConfig+0x128>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a27      	ldr	r2, [pc, #156]	; (8006c10 <TIM_Base_SetConfig+0x12c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <TIM_Base_SetConfig+0x130>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a25      	ldr	r2, [pc, #148]	; (8006c18 <TIM_Base_SetConfig+0x134>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a24      	ldr	r2, [pc, #144]	; (8006c1c <TIM_Base_SetConfig+0x138>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_Base_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a23      	ldr	r2, [pc, #140]	; (8006c20 <TIM_Base_SetConfig+0x13c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a0a      	ldr	r2, [pc, #40]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a0c      	ldr	r2, [pc, #48]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d103      	bne.n	8006be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	615a      	str	r2, [r3, #20]
}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40010000 	.word	0x40010000
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40000c00 	.word	0x40000c00
 8006c08:	40010400 	.word	0x40010400
 8006c0c:	40014000 	.word	0x40014000
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40014800 	.word	0x40014800
 8006c18:	40001800 	.word	0x40001800
 8006c1c:	40001c00 	.word	0x40001c00
 8006c20:	40002000 	.word	0x40002000

08006c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f023 0201 	bic.w	r2, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4b2b      	ldr	r3, [pc, #172]	; (8006cfc <TIM_OC1_SetConfig+0xd8>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f023 0302 	bic.w	r3, r3, #2
 8006c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a21      	ldr	r2, [pc, #132]	; (8006d00 <TIM_OC1_SetConfig+0xdc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC1_SetConfig+0x64>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a20      	ldr	r2, [pc, #128]	; (8006d04 <TIM_OC1_SetConfig+0xe0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d10c      	bne.n	8006ca2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0308 	bic.w	r3, r3, #8
 8006c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f023 0304 	bic.w	r3, r3, #4
 8006ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a16      	ldr	r2, [pc, #88]	; (8006d00 <TIM_OC1_SetConfig+0xdc>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d003      	beq.n	8006cb2 <TIM_OC1_SetConfig+0x8e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a15      	ldr	r2, [pc, #84]	; (8006d04 <TIM_OC1_SetConfig+0xe0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d111      	bne.n	8006cd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	621a      	str	r2, [r3, #32]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	fffeff8f 	.word	0xfffeff8f
 8006d00:	40010000 	.word	0x40010000
 8006d04:	40010400 	.word	0x40010400

08006d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f023 0210 	bic.w	r2, r3, #16
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4b2e      	ldr	r3, [pc, #184]	; (8006dec <TIM_OC2_SetConfig+0xe4>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0320 	bic.w	r3, r3, #32
 8006d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a23      	ldr	r2, [pc, #140]	; (8006df0 <TIM_OC2_SetConfig+0xe8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_OC2_SetConfig+0x68>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a22      	ldr	r2, [pc, #136]	; (8006df4 <TIM_OC2_SetConfig+0xec>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d10d      	bne.n	8006d8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <TIM_OC2_SetConfig+0xe8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d003      	beq.n	8006d9c <TIM_OC2_SetConfig+0x94>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a17      	ldr	r2, [pc, #92]	; (8006df4 <TIM_OC2_SetConfig+0xec>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d113      	bne.n	8006dc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	621a      	str	r2, [r3, #32]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	feff8fff 	.word	0xfeff8fff
 8006df0:	40010000 	.word	0x40010000
 8006df4:	40010400 	.word	0x40010400

08006df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4b2d      	ldr	r3, [pc, #180]	; (8006ed8 <TIM_OC3_SetConfig+0xe0>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0303 	bic.w	r3, r3, #3
 8006e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a22      	ldr	r2, [pc, #136]	; (8006edc <TIM_OC3_SetConfig+0xe4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d003      	beq.n	8006e5e <TIM_OC3_SetConfig+0x66>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a21      	ldr	r2, [pc, #132]	; (8006ee0 <TIM_OC3_SetConfig+0xe8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d10d      	bne.n	8006e7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a17      	ldr	r2, [pc, #92]	; (8006edc <TIM_OC3_SetConfig+0xe4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_OC3_SetConfig+0x92>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a16      	ldr	r2, [pc, #88]	; (8006ee0 <TIM_OC3_SetConfig+0xe8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d113      	bne.n	8006eb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	621a      	str	r2, [r3, #32]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	fffeff8f 	.word	0xfffeff8f
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	40010400 	.word	0x40010400

08006ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4b1e      	ldr	r3, [pc, #120]	; (8006f88 <TIM_OC4_SetConfig+0xa4>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	031b      	lsls	r3, r3, #12
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a13      	ldr	r2, [pc, #76]	; (8006f8c <TIM_OC4_SetConfig+0xa8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_OC4_SetConfig+0x68>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a12      	ldr	r2, [pc, #72]	; (8006f90 <TIM_OC4_SetConfig+0xac>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d109      	bne.n	8006f60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	019b      	lsls	r3, r3, #6
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	621a      	str	r2, [r3, #32]
}
 8006f7a:	bf00      	nop
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	feff8fff 	.word	0xfeff8fff
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40010400 	.word	0x40010400

08006f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4b1b      	ldr	r3, [pc, #108]	; (800702c <TIM_OC5_SetConfig+0x98>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	041b      	lsls	r3, r3, #16
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a12      	ldr	r2, [pc, #72]	; (8007030 <TIM_OC5_SetConfig+0x9c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d003      	beq.n	8006ff2 <TIM_OC5_SetConfig+0x5e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a11      	ldr	r2, [pc, #68]	; (8007034 <TIM_OC5_SetConfig+0xa0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d109      	bne.n	8007006 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	621a      	str	r2, [r3, #32]
}
 8007020:	bf00      	nop
 8007022:	371c      	adds	r7, #28
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	fffeff8f 	.word	0xfffeff8f
 8007030:	40010000 	.word	0x40010000
 8007034:	40010400 	.word	0x40010400

08007038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <TIM_OC6_SetConfig+0x9c>)
 8007064:	4013      	ands	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4313      	orrs	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800707a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	051b      	lsls	r3, r3, #20
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a13      	ldr	r2, [pc, #76]	; (80070d8 <TIM_OC6_SetConfig+0xa0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_OC6_SetConfig+0x60>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a12      	ldr	r2, [pc, #72]	; (80070dc <TIM_OC6_SetConfig+0xa4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d109      	bne.n	80070ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800709e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	621a      	str	r2, [r3, #32]
}
 80070c6:	bf00      	nop
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	feff8fff 	.word	0xfeff8fff
 80070d8:	40010000 	.word	0x40010000
 80070dc:	40010400 	.word	0x40010400

080070e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f023 0201 	bic.w	r2, r3, #1
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800710a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f023 030a 	bic.w	r3, r3, #10
 800711c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800713e:	b480      	push	{r7}
 8007140:	b087      	sub	sp, #28
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f023 0210 	bic.w	r2, r3, #16
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	031b      	lsls	r3, r3, #12
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800717a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f043 0307 	orr.w	r3, r3, #7
 80071c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	609a      	str	r2, [r3, #8]
}
 80071c8:	bf00      	nop
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	021a      	lsls	r2, r3, #8
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	609a      	str	r2, [r3, #8]
}
 8007208:	bf00      	nop
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f003 031f 	and.w	r3, r3, #31
 8007226:	2201      	movs	r2, #1
 8007228:	fa02 f303 	lsl.w	r3, r2, r3
 800722c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6a1a      	ldr	r2, [r3, #32]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	43db      	mvns	r3, r3
 8007236:	401a      	ands	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a1a      	ldr	r2, [r3, #32]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	fa01 f303 	lsl.w	r3, r1, r3
 800724c:	431a      	orrs	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	621a      	str	r2, [r3, #32]
}
 8007252:	bf00      	nop
 8007254:	371c      	adds	r7, #28
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007274:	2302      	movs	r3, #2
 8007276:	e045      	b.n	8007304 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1c      	ldr	r2, [pc, #112]	; (8007310 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d004      	beq.n	80072ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a1b      	ldr	r2, [pc, #108]	; (8007314 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d108      	bne.n	80072be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072d6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	40010000 	.word	0x40010000
 8007314:	40010400 	.word	0x40010400

08007318 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007330:	2302      	movs	r3, #2
 8007332:	e065      	b.n	8007400 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	4313      	orrs	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	041b      	lsls	r3, r3, #16
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a16      	ldr	r2, [pc, #88]	; (800740c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d004      	beq.n	80073c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a14      	ldr	r2, [pc, #80]	; (8007410 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d115      	bne.n	80073ee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	051b      	lsls	r3, r3, #20
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	40010000 	.word	0x40010000
 8007410:	40010400 	.word	0x40010400

08007414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e040      	b.n	80074e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fb fb74 	bl	8002b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2224      	movs	r2, #36	; 0x24
 800747c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0201 	bic.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f9fe 	bl	8007890 <UART_SetConfig>
 8007494:	4603      	mov	r3, r0
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e022      	b.n	80074e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fc96 	bl	8007dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074ca:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fd1d 	bl	8007f1c <UART_CheckIdleState>
 80074e2:	4603      	mov	r3, r0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074fe:	2b20      	cmp	r3, #32
 8007500:	f040 808a 	bne.w	8007618 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <HAL_UART_Receive_IT+0x24>
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e082      	b.n	800761a <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <HAL_UART_Receive_IT+0x36>
 800751e:	2302      	movs	r3, #2
 8007520:	e07b      	b.n	800761a <HAL_UART_Receive_IT+0x12e>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800754e:	d10e      	bne.n	800756e <HAL_UART_Receive_IT+0x82>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d105      	bne.n	8007564 <HAL_UART_Receive_IT+0x78>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800755e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007562:	e02d      	b.n	80075c0 <HAL_UART_Receive_IT+0xd4>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	22ff      	movs	r2, #255	; 0xff
 8007568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800756c:	e028      	b.n	80075c0 <HAL_UART_Receive_IT+0xd4>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10d      	bne.n	8007592 <HAL_UART_Receive_IT+0xa6>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <HAL_UART_Receive_IT+0x9c>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	22ff      	movs	r2, #255	; 0xff
 8007582:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007586:	e01b      	b.n	80075c0 <HAL_UART_Receive_IT+0xd4>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	227f      	movs	r2, #127	; 0x7f
 800758c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007590:	e016      	b.n	80075c0 <HAL_UART_Receive_IT+0xd4>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800759a:	d10d      	bne.n	80075b8 <HAL_UART_Receive_IT+0xcc>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d104      	bne.n	80075ae <HAL_UART_Receive_IT+0xc2>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	227f      	movs	r2, #127	; 0x7f
 80075a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075ac:	e008      	b.n	80075c0 <HAL_UART_Receive_IT+0xd4>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	223f      	movs	r2, #63	; 0x3f
 80075b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075b6:	e003      	b.n	80075c0 <HAL_UART_Receive_IT+0xd4>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2222      	movs	r2, #34	; 0x22
 80075ca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0201 	orr.w	r2, r2, #1
 80075da:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e4:	d107      	bne.n	80075f6 <HAL_UART_Receive_IT+0x10a>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d103      	bne.n	80075f6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4a0d      	ldr	r2, [pc, #52]	; (8007628 <HAL_UART_Receive_IT+0x13c>)
 80075f2:	661a      	str	r2, [r3, #96]	; 0x60
 80075f4:	e002      	b.n	80075fc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4a0c      	ldr	r2, [pc, #48]	; (800762c <HAL_UART_Receive_IT+0x140>)
 80075fa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007612:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	e000      	b.n	800761a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007618:	2302      	movs	r3, #2
  }
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	0800814f 	.word	0x0800814f
 800762c:	080080a9 	.word	0x080080a9

08007630 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d113      	bne.n	8007686 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	f003 0320 	and.w	r3, r3, #32
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00e      	beq.n	8007686 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 80eb 	beq.w	8007852 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
      }
      return;
 8007684:	e0e5      	b.n	8007852 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80c0 	beq.w	800780e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d105      	bne.n	80076a4 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 80b5 	beq.w	800780e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <HAL_UART_IRQHandler+0x9c>
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d009      	beq.n	80076cc <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2201      	movs	r2, #1
 80076be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076c4:	f043 0201 	orr.w	r2, r3, #1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00e      	beq.n	80076f4 <HAL_UART_IRQHandler+0xc4>
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d009      	beq.n	80076f4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2202      	movs	r2, #2
 80076e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ec:	f043 0204 	orr.w	r2, r3, #4
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00e      	beq.n	800771c <HAL_UART_IRQHandler+0xec>
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d009      	beq.n	800771c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2204      	movs	r2, #4
 800770e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007714:	f043 0202 	orr.w	r2, r3, #2
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d013      	beq.n	800774e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d104      	bne.n	800773a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007736:	2b00      	cmp	r3, #0
 8007738:	d009      	beq.n	800774e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2208      	movs	r2, #8
 8007740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007746:	f043 0208 	orr.w	r2, r3, #8
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d07f      	beq.n	8007856 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00c      	beq.n	800777a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800777e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d004      	beq.n	8007798 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007794:	2b00      	cmp	r3, #0
 8007796:	d031      	beq.n	80077fc <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc36 	bl	800800a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d123      	bne.n	80077f4 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ba:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d013      	beq.n	80077ec <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c8:	4a26      	ldr	r2, [pc, #152]	; (8007864 <HAL_UART_IRQHandler+0x234>)
 80077ca:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fc faf5 	bl	8003dc0 <HAL_DMA_Abort_IT>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d016      	beq.n	800780a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80077e6:	4610      	mov	r0, r2
 80077e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ea:	e00e      	b.n	800780a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f845 	bl	800787c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f2:	e00a      	b.n	800780a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f841 	bl	800787c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077fa:	e006      	b.n	800780a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f83d 	bl	800787c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007808:	e025      	b.n	8007856 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780a:	bf00      	nop
    return;
 800780c:	e023      	b.n	8007856 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00d      	beq.n	8007834 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781e:	2b00      	cmp	r3, #0
 8007820:	d008      	beq.n	8007834 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007826:	2b00      	cmp	r3, #0
 8007828:	d017      	beq.n	800785a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
    }
    return;
 8007832:	e012      	b.n	800785a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00e      	beq.n	800785c <HAL_UART_IRQHandler+0x22c>
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fc14 	bl	8008076 <UART_EndTransmit_IT>
    return;
 800784e:	bf00      	nop
 8007850:	e004      	b.n	800785c <HAL_UART_IRQHandler+0x22c>
      return;
 8007852:	bf00      	nop
 8007854:	e002      	b.n	800785c <HAL_UART_IRQHandler+0x22c>
    return;
 8007856:	bf00      	nop
 8007858:	e000      	b.n	800785c <HAL_UART_IRQHandler+0x22c>
    return;
 800785a:	bf00      	nop
  }

}
 800785c:	3720      	adds	r7, #32
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	0800804b 	.word	0x0800804b

08007868 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007898:	2300      	movs	r3, #0
 800789a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4bb1      	ldr	r3, [pc, #708]	; (8007b84 <UART_SetConfig+0x2f4>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6812      	ldr	r2, [r2, #0]
 80078c6:	6939      	ldr	r1, [r7, #16]
 80078c8:	430b      	orrs	r3, r1
 80078ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	430a      	orrs	r2, r1
 8007904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a9f      	ldr	r2, [pc, #636]	; (8007b88 <UART_SetConfig+0x2f8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d121      	bne.n	8007954 <UART_SetConfig+0xc4>
 8007910:	4b9e      	ldr	r3, [pc, #632]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b03      	cmp	r3, #3
 800791c:	d816      	bhi.n	800794c <UART_SetConfig+0xbc>
 800791e:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <UART_SetConfig+0x94>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	08007935 	.word	0x08007935
 8007928:	08007941 	.word	0x08007941
 800792c:	0800793b 	.word	0x0800793b
 8007930:	08007947 	.word	0x08007947
 8007934:	2301      	movs	r3, #1
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e151      	b.n	8007bde <UART_SetConfig+0x34e>
 800793a:	2302      	movs	r3, #2
 800793c:	77fb      	strb	r3, [r7, #31]
 800793e:	e14e      	b.n	8007bde <UART_SetConfig+0x34e>
 8007940:	2304      	movs	r3, #4
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	e14b      	b.n	8007bde <UART_SetConfig+0x34e>
 8007946:	2308      	movs	r3, #8
 8007948:	77fb      	strb	r3, [r7, #31]
 800794a:	e148      	b.n	8007bde <UART_SetConfig+0x34e>
 800794c:	2310      	movs	r3, #16
 800794e:	77fb      	strb	r3, [r7, #31]
 8007950:	bf00      	nop
 8007952:	e144      	b.n	8007bde <UART_SetConfig+0x34e>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a8d      	ldr	r2, [pc, #564]	; (8007b90 <UART_SetConfig+0x300>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d134      	bne.n	80079c8 <UART_SetConfig+0x138>
 800795e:	4b8b      	ldr	r3, [pc, #556]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007964:	f003 030c 	and.w	r3, r3, #12
 8007968:	2b0c      	cmp	r3, #12
 800796a:	d829      	bhi.n	80079c0 <UART_SetConfig+0x130>
 800796c:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <UART_SetConfig+0xe4>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	080079a9 	.word	0x080079a9
 8007978:	080079c1 	.word	0x080079c1
 800797c:	080079c1 	.word	0x080079c1
 8007980:	080079c1 	.word	0x080079c1
 8007984:	080079b5 	.word	0x080079b5
 8007988:	080079c1 	.word	0x080079c1
 800798c:	080079c1 	.word	0x080079c1
 8007990:	080079c1 	.word	0x080079c1
 8007994:	080079af 	.word	0x080079af
 8007998:	080079c1 	.word	0x080079c1
 800799c:	080079c1 	.word	0x080079c1
 80079a0:	080079c1 	.word	0x080079c1
 80079a4:	080079bb 	.word	0x080079bb
 80079a8:	2300      	movs	r3, #0
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	e117      	b.n	8007bde <UART_SetConfig+0x34e>
 80079ae:	2302      	movs	r3, #2
 80079b0:	77fb      	strb	r3, [r7, #31]
 80079b2:	e114      	b.n	8007bde <UART_SetConfig+0x34e>
 80079b4:	2304      	movs	r3, #4
 80079b6:	77fb      	strb	r3, [r7, #31]
 80079b8:	e111      	b.n	8007bde <UART_SetConfig+0x34e>
 80079ba:	2308      	movs	r3, #8
 80079bc:	77fb      	strb	r3, [r7, #31]
 80079be:	e10e      	b.n	8007bde <UART_SetConfig+0x34e>
 80079c0:	2310      	movs	r3, #16
 80079c2:	77fb      	strb	r3, [r7, #31]
 80079c4:	bf00      	nop
 80079c6:	e10a      	b.n	8007bde <UART_SetConfig+0x34e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a71      	ldr	r2, [pc, #452]	; (8007b94 <UART_SetConfig+0x304>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d120      	bne.n	8007a14 <UART_SetConfig+0x184>
 80079d2:	4b6e      	ldr	r3, [pc, #440]	; (8007b8c <UART_SetConfig+0x2fc>)
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079dc:	2b10      	cmp	r3, #16
 80079de:	d00f      	beq.n	8007a00 <UART_SetConfig+0x170>
 80079e0:	2b10      	cmp	r3, #16
 80079e2:	d802      	bhi.n	80079ea <UART_SetConfig+0x15a>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <UART_SetConfig+0x164>
 80079e8:	e010      	b.n	8007a0c <UART_SetConfig+0x17c>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d005      	beq.n	80079fa <UART_SetConfig+0x16a>
 80079ee:	2b30      	cmp	r3, #48	; 0x30
 80079f0:	d009      	beq.n	8007a06 <UART_SetConfig+0x176>
 80079f2:	e00b      	b.n	8007a0c <UART_SetConfig+0x17c>
 80079f4:	2300      	movs	r3, #0
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	e0f1      	b.n	8007bde <UART_SetConfig+0x34e>
 80079fa:	2302      	movs	r3, #2
 80079fc:	77fb      	strb	r3, [r7, #31]
 80079fe:	e0ee      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a00:	2304      	movs	r3, #4
 8007a02:	77fb      	strb	r3, [r7, #31]
 8007a04:	e0eb      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a06:	2308      	movs	r3, #8
 8007a08:	77fb      	strb	r3, [r7, #31]
 8007a0a:	e0e8      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	77fb      	strb	r3, [r7, #31]
 8007a10:	bf00      	nop
 8007a12:	e0e4      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a5f      	ldr	r2, [pc, #380]	; (8007b98 <UART_SetConfig+0x308>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d120      	bne.n	8007a60 <UART_SetConfig+0x1d0>
 8007a1e:	4b5b      	ldr	r3, [pc, #364]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a28:	2b40      	cmp	r3, #64	; 0x40
 8007a2a:	d00f      	beq.n	8007a4c <UART_SetConfig+0x1bc>
 8007a2c:	2b40      	cmp	r3, #64	; 0x40
 8007a2e:	d802      	bhi.n	8007a36 <UART_SetConfig+0x1a6>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <UART_SetConfig+0x1b0>
 8007a34:	e010      	b.n	8007a58 <UART_SetConfig+0x1c8>
 8007a36:	2b80      	cmp	r3, #128	; 0x80
 8007a38:	d005      	beq.n	8007a46 <UART_SetConfig+0x1b6>
 8007a3a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a3c:	d009      	beq.n	8007a52 <UART_SetConfig+0x1c2>
 8007a3e:	e00b      	b.n	8007a58 <UART_SetConfig+0x1c8>
 8007a40:	2300      	movs	r3, #0
 8007a42:	77fb      	strb	r3, [r7, #31]
 8007a44:	e0cb      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a46:	2302      	movs	r3, #2
 8007a48:	77fb      	strb	r3, [r7, #31]
 8007a4a:	e0c8      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a4c:	2304      	movs	r3, #4
 8007a4e:	77fb      	strb	r3, [r7, #31]
 8007a50:	e0c5      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a52:	2308      	movs	r3, #8
 8007a54:	77fb      	strb	r3, [r7, #31]
 8007a56:	e0c2      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a58:	2310      	movs	r3, #16
 8007a5a:	77fb      	strb	r3, [r7, #31]
 8007a5c:	bf00      	nop
 8007a5e:	e0be      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a4d      	ldr	r2, [pc, #308]	; (8007b9c <UART_SetConfig+0x30c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d124      	bne.n	8007ab4 <UART_SetConfig+0x224>
 8007a6a:	4b48      	ldr	r3, [pc, #288]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a78:	d012      	beq.n	8007aa0 <UART_SetConfig+0x210>
 8007a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7e:	d802      	bhi.n	8007a86 <UART_SetConfig+0x1f6>
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <UART_SetConfig+0x204>
 8007a84:	e012      	b.n	8007aac <UART_SetConfig+0x21c>
 8007a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a8a:	d006      	beq.n	8007a9a <UART_SetConfig+0x20a>
 8007a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a90:	d009      	beq.n	8007aa6 <UART_SetConfig+0x216>
 8007a92:	e00b      	b.n	8007aac <UART_SetConfig+0x21c>
 8007a94:	2300      	movs	r3, #0
 8007a96:	77fb      	strb	r3, [r7, #31]
 8007a98:	e0a1      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	77fb      	strb	r3, [r7, #31]
 8007a9e:	e09e      	b.n	8007bde <UART_SetConfig+0x34e>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	77fb      	strb	r3, [r7, #31]
 8007aa4:	e09b      	b.n	8007bde <UART_SetConfig+0x34e>
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	77fb      	strb	r3, [r7, #31]
 8007aaa:	e098      	b.n	8007bde <UART_SetConfig+0x34e>
 8007aac:	2310      	movs	r3, #16
 8007aae:	77fb      	strb	r3, [r7, #31]
 8007ab0:	bf00      	nop
 8007ab2:	e094      	b.n	8007bde <UART_SetConfig+0x34e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a39      	ldr	r2, [pc, #228]	; (8007ba0 <UART_SetConfig+0x310>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d124      	bne.n	8007b08 <UART_SetConfig+0x278>
 8007abe:	4b33      	ldr	r3, [pc, #204]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007acc:	d012      	beq.n	8007af4 <UART_SetConfig+0x264>
 8007ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad2:	d802      	bhi.n	8007ada <UART_SetConfig+0x24a>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <UART_SetConfig+0x258>
 8007ad8:	e012      	b.n	8007b00 <UART_SetConfig+0x270>
 8007ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ade:	d006      	beq.n	8007aee <UART_SetConfig+0x25e>
 8007ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ae4:	d009      	beq.n	8007afa <UART_SetConfig+0x26a>
 8007ae6:	e00b      	b.n	8007b00 <UART_SetConfig+0x270>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e077      	b.n	8007bde <UART_SetConfig+0x34e>
 8007aee:	2302      	movs	r3, #2
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e074      	b.n	8007bde <UART_SetConfig+0x34e>
 8007af4:	2304      	movs	r3, #4
 8007af6:	77fb      	strb	r3, [r7, #31]
 8007af8:	e071      	b.n	8007bde <UART_SetConfig+0x34e>
 8007afa:	2308      	movs	r3, #8
 8007afc:	77fb      	strb	r3, [r7, #31]
 8007afe:	e06e      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b00:	2310      	movs	r3, #16
 8007b02:	77fb      	strb	r3, [r7, #31]
 8007b04:	bf00      	nop
 8007b06:	e06a      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a25      	ldr	r2, [pc, #148]	; (8007ba4 <UART_SetConfig+0x314>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d124      	bne.n	8007b5c <UART_SetConfig+0x2cc>
 8007b12:	4b1e      	ldr	r3, [pc, #120]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b20:	d012      	beq.n	8007b48 <UART_SetConfig+0x2b8>
 8007b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b26:	d802      	bhi.n	8007b2e <UART_SetConfig+0x29e>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d007      	beq.n	8007b3c <UART_SetConfig+0x2ac>
 8007b2c:	e012      	b.n	8007b54 <UART_SetConfig+0x2c4>
 8007b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b32:	d006      	beq.n	8007b42 <UART_SetConfig+0x2b2>
 8007b34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b38:	d009      	beq.n	8007b4e <UART_SetConfig+0x2be>
 8007b3a:	e00b      	b.n	8007b54 <UART_SetConfig+0x2c4>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e04d      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b42:	2302      	movs	r3, #2
 8007b44:	77fb      	strb	r3, [r7, #31]
 8007b46:	e04a      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	77fb      	strb	r3, [r7, #31]
 8007b4c:	e047      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b4e:	2308      	movs	r3, #8
 8007b50:	77fb      	strb	r3, [r7, #31]
 8007b52:	e044      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b54:	2310      	movs	r3, #16
 8007b56:	77fb      	strb	r3, [r7, #31]
 8007b58:	bf00      	nop
 8007b5a:	e040      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a11      	ldr	r2, [pc, #68]	; (8007ba8 <UART_SetConfig+0x318>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d139      	bne.n	8007bda <UART_SetConfig+0x34a>
 8007b66:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b74:	d027      	beq.n	8007bc6 <UART_SetConfig+0x336>
 8007b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b7a:	d817      	bhi.n	8007bac <UART_SetConfig+0x31c>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01c      	beq.n	8007bba <UART_SetConfig+0x32a>
 8007b80:	e027      	b.n	8007bd2 <UART_SetConfig+0x342>
 8007b82:	bf00      	nop
 8007b84:	efff69f3 	.word	0xefff69f3
 8007b88:	40011000 	.word	0x40011000
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	40004400 	.word	0x40004400
 8007b94:	40004800 	.word	0x40004800
 8007b98:	40004c00 	.word	0x40004c00
 8007b9c:	40005000 	.word	0x40005000
 8007ba0:	40011400 	.word	0x40011400
 8007ba4:	40007800 	.word	0x40007800
 8007ba8:	40007c00 	.word	0x40007c00
 8007bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb0:	d006      	beq.n	8007bc0 <UART_SetConfig+0x330>
 8007bb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bb6:	d009      	beq.n	8007bcc <UART_SetConfig+0x33c>
 8007bb8:	e00b      	b.n	8007bd2 <UART_SetConfig+0x342>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	77fb      	strb	r3, [r7, #31]
 8007bbe:	e00e      	b.n	8007bde <UART_SetConfig+0x34e>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	e00b      	b.n	8007bde <UART_SetConfig+0x34e>
 8007bc6:	2304      	movs	r3, #4
 8007bc8:	77fb      	strb	r3, [r7, #31]
 8007bca:	e008      	b.n	8007bde <UART_SetConfig+0x34e>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	77fb      	strb	r3, [r7, #31]
 8007bd0:	e005      	b.n	8007bde <UART_SetConfig+0x34e>
 8007bd2:	2310      	movs	r3, #16
 8007bd4:	77fb      	strb	r3, [r7, #31]
 8007bd6:	bf00      	nop
 8007bd8:	e001      	b.n	8007bde <UART_SetConfig+0x34e>
 8007bda:	2310      	movs	r3, #16
 8007bdc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be6:	d17c      	bne.n	8007ce2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8007be8:	7ffb      	ldrb	r3, [r7, #31]
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	d859      	bhi.n	8007ca2 <UART_SetConfig+0x412>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <UART_SetConfig+0x364>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c19 	.word	0x08007c19
 8007bf8:	08007c37 	.word	0x08007c37
 8007bfc:	08007c55 	.word	0x08007c55
 8007c00:	08007ca3 	.word	0x08007ca3
 8007c04:	08007c6d 	.word	0x08007c6d
 8007c08:	08007ca3 	.word	0x08007ca3
 8007c0c:	08007ca3 	.word	0x08007ca3
 8007c10:	08007ca3 	.word	0x08007ca3
 8007c14:	08007c8b 	.word	0x08007c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007c18:	f7fd ff64 	bl	8005ae4 <HAL_RCC_GetPCLK1Freq>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	005a      	lsls	r2, r3, #1
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	085b      	lsrs	r3, r3, #1
 8007c26:	441a      	add	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	61bb      	str	r3, [r7, #24]
        break;
 8007c34:	e038      	b.n	8007ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007c36:	f7fd ff69 	bl	8005b0c <HAL_RCC_GetPCLK2Freq>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	005a      	lsls	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	61bb      	str	r3, [r7, #24]
        break;
 8007c52:	e029      	b.n	8007ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	085a      	lsrs	r2, r3, #1
 8007c5a:	4b5d      	ldr	r3, [pc, #372]	; (8007dd0 <UART_SetConfig+0x540>)
 8007c5c:	4413      	add	r3, r2
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6852      	ldr	r2, [r2, #4]
 8007c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	61bb      	str	r3, [r7, #24]
        break;
 8007c6a:	e01d      	b.n	8007ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007c6c:	f7fd fe56 	bl	800591c <HAL_RCC_GetSysClockFreq>
 8007c70:	4603      	mov	r3, r0
 8007c72:	005a      	lsls	r2, r3, #1
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	085b      	lsrs	r3, r3, #1
 8007c7a:	441a      	add	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	61bb      	str	r3, [r7, #24]
        break;
 8007c88:	e00e      	b.n	8007ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	085b      	lsrs	r3, r3, #1
 8007c90:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	61bb      	str	r3, [r7, #24]
        break;
 8007ca0:	e002      	b.n	8007ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	75fb      	strb	r3, [r7, #23]
        break;
 8007ca6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	2b0f      	cmp	r3, #15
 8007cac:	d916      	bls.n	8007cdc <UART_SetConfig+0x44c>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb4:	d212      	bcs.n	8007cdc <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f023 030f 	bic.w	r3, r3, #15
 8007cbe:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	085b      	lsrs	r3, r3, #1
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	89fb      	ldrh	r3, [r7, #14]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	89fa      	ldrh	r2, [r7, #14]
 8007cd8:	60da      	str	r2, [r3, #12]
 8007cda:	e06e      	b.n	8007dba <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	75fb      	strb	r3, [r7, #23]
 8007ce0:	e06b      	b.n	8007dba <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8007ce2:	7ffb      	ldrb	r3, [r7, #31]
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d857      	bhi.n	8007d98 <UART_SetConfig+0x508>
 8007ce8:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <UART_SetConfig+0x460>)
 8007cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cee:	bf00      	nop
 8007cf0:	08007d15 	.word	0x08007d15
 8007cf4:	08007d31 	.word	0x08007d31
 8007cf8:	08007d4d 	.word	0x08007d4d
 8007cfc:	08007d99 	.word	0x08007d99
 8007d00:	08007d65 	.word	0x08007d65
 8007d04:	08007d99 	.word	0x08007d99
 8007d08:	08007d99 	.word	0x08007d99
 8007d0c:	08007d99 	.word	0x08007d99
 8007d10:	08007d81 	.word	0x08007d81
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007d14:	f7fd fee6 	bl	8005ae4 <HAL_RCC_GetPCLK1Freq>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	441a      	add	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	61bb      	str	r3, [r7, #24]
        break;
 8007d2e:	e036      	b.n	8007d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007d30:	f7fd feec 	bl	8005b0c <HAL_RCC_GetPCLK2Freq>
 8007d34:	4602      	mov	r2, r0
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	441a      	add	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	61bb      	str	r3, [r7, #24]
        break;
 8007d4a:	e028      	b.n	8007d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	085a      	lsrs	r2, r3, #1
 8007d52:	4b20      	ldr	r3, [pc, #128]	; (8007dd4 <UART_SetConfig+0x544>)
 8007d54:	4413      	add	r3, r2
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6852      	ldr	r2, [r2, #4]
 8007d5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	61bb      	str	r3, [r7, #24]
        break;
 8007d62:	e01c      	b.n	8007d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007d64:	f7fd fdda 	bl	800591c <HAL_RCC_GetSysClockFreq>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	085b      	lsrs	r3, r3, #1
 8007d70:	441a      	add	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	61bb      	str	r3, [r7, #24]
        break;
 8007d7e:	e00e      	b.n	8007d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	61bb      	str	r3, [r7, #24]
        break;
 8007d96:	e002      	b.n	8007d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	75fb      	strb	r3, [r7, #23]
        break;
 8007d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2b0f      	cmp	r3, #15
 8007da2:	d908      	bls.n	8007db6 <UART_SetConfig+0x526>
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007daa:	d204      	bcs.n	8007db6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	60da      	str	r2, [r3, #12]
 8007db4:	e001      	b.n	8007dba <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3720      	adds	r7, #32
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	01e84800 	.word	0x01e84800
 8007dd4:	00f42400 	.word	0x00f42400

08007dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	f003 0308 	and.w	r3, r3, #8
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00a      	beq.n	8007e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	f003 0320 	and.w	r3, r3, #32
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01a      	beq.n	8007eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed6:	d10a      	bne.n	8007eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	605a      	str	r2, [r3, #4]
  }
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f2a:	f7fa ffa3 	bl	8002e74 <HAL_GetTick>
 8007f2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0308 	and.w	r3, r3, #8
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d10e      	bne.n	8007f5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f814 	bl	8007f7a <UART_WaitOnFlagUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e00a      	b.n	8007f72 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2220      	movs	r2, #32
 8007f66:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	603b      	str	r3, [r7, #0]
 8007f86:	4613      	mov	r3, r2
 8007f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f8a:	e02a      	b.n	8007fe2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f92:	d026      	beq.n	8007fe2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f94:	f7fa ff6e 	bl	8002e74 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d302      	bcc.n	8007faa <UART_WaitOnFlagUntilTimeout+0x30>
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d11b      	bne.n	8007fe2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0201 	bic.w	r2, r2, #1
 8007fc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e00f      	b.n	8008002 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69da      	ldr	r2, [r3, #28]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	4013      	ands	r3, r2
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	bf0c      	ite	eq
 8007ff2:	2301      	moveq	r3, #1
 8007ff4:	2300      	movne	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d0c5      	beq.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008020:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0201 	bic.w	r2, r2, #1
 8008030:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2220      	movs	r2, #32
 8008036:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f7ff fc07 	bl	800787c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800808c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2220      	movs	r2, #32
 8008092:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff fbe4 	bl	8007868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080b6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080bc:	2b22      	cmp	r3, #34	; 0x22
 80080be:	d13a      	bne.n	8008136 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080c8:	89bb      	ldrh	r3, [r7, #12]
 80080ca:	b2d9      	uxtb	r1, r3
 80080cc:	89fb      	ldrh	r3, [r7, #14]
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d4:	400a      	ands	r2, r1
 80080d6:	b2d2      	uxtb	r2, r2
 80080d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	3b01      	subs	r3, #1
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d121      	bne.n	8008146 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008110:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0201 	bic.w	r2, r2, #1
 8008120:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7f9 fdb0 	bl	8001c94 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008134:	e007      	b.n	8008146 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	699a      	ldr	r2, [r3, #24]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f042 0208 	orr.w	r2, r2, #8
 8008144:	619a      	str	r2, [r3, #24]
}
 8008146:	bf00      	nop
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800815c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008162:	2b22      	cmp	r3, #34	; 0x22
 8008164:	d13a      	bne.n	80081dc <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008172:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008174:	89ba      	ldrh	r2, [r7, #12]
 8008176:	89fb      	ldrh	r3, [r7, #14]
 8008178:	4013      	ands	r3, r2
 800817a:	b29a      	uxth	r2, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008184:	1c9a      	adds	r2, r3, #2
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008190:	b29b      	uxth	r3, r3
 8008192:	3b01      	subs	r3, #1
 8008194:	b29a      	uxth	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d121      	bne.n	80081ec <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081b6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689a      	ldr	r2, [r3, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0201 	bic.w	r2, r2, #1
 80081c6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2220      	movs	r2, #32
 80081cc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7f9 fd5d 	bl	8001c94 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081da:	e007      	b.n	80081ec <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0208 	orr.w	r2, r2, #8
 80081ea:	619a      	str	r2, [r3, #24]
}
 80081ec:	bf00      	nop
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081f4:	b084      	sub	sp, #16
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	f107 001c 	add.w	r0, r7, #28
 8008202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	2b01      	cmp	r3, #1
 800820a:	d120      	bne.n	800824e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	4b20      	ldr	r3, [pc, #128]	; (80082a0 <USB_CoreInit+0xac>)
 800821e:	4013      	ands	r3, r2
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008232:	2b01      	cmp	r3, #1
 8008234:	d105      	bne.n	8008242 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fa60 	bl	8008708 <USB_CoreReset>
 8008248:	4603      	mov	r3, r0
 800824a:	73fb      	strb	r3, [r7, #15]
 800824c:	e010      	b.n	8008270 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fa54 	bl	8008708 <USB_CoreReset>
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	2b01      	cmp	r3, #1
 8008274:	d10b      	bne.n	800828e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f043 0206 	orr.w	r2, r3, #6
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f043 0220 	orr.w	r2, r3, #32
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800829a:	b004      	add	sp, #16
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	ffbdffbf 	.word	0xffbdffbf

080082a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f023 0201 	bic.w	r2, r3, #1
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d106      	bne.n	80082f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	60da      	str	r2, [r3, #12]
 80082f0:	e00b      	b.n	800830a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d106      	bne.n	8008306 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]
 8008304:	e001      	b.n	800830a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e003      	b.n	8008312 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800830a:	2032      	movs	r0, #50	; 0x32
 800830c:	f7fa fdbe 	bl	8002e8c <HAL_Delay>

  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800831c:	b084      	sub	sp, #16
 800831e:	b580      	push	{r7, lr}
 8008320:	b086      	sub	sp, #24
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800832a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008336:	2300      	movs	r3, #0
 8008338:	613b      	str	r3, [r7, #16]
 800833a:	e009      	b.n	8008350 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	3340      	adds	r3, #64	; 0x40
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	2200      	movs	r2, #0
 8008348:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	3301      	adds	r3, #1
 800834e:	613b      	str	r3, [r7, #16]
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2b0e      	cmp	r3, #14
 8008354:	d9f2      	bls.n	800833c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008358:	2b00      	cmp	r3, #0
 800835a:	d112      	bne.n	8008382 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	e005      	b.n	800838e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008394:	461a      	mov	r2, r3
 8008396:	2300      	movs	r3, #0
 8008398:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a0:	4619      	mov	r1, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a8:	461a      	mov	r2, r3
 80083aa:	680b      	ldr	r3, [r1, #0]
 80083ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d10c      	bne.n	80083ce <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80083b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d104      	bne.n	80083c4 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083ba:	2100      	movs	r1, #0
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f971 	bl	80086a4 <USB_SetDevSpeed>
 80083c2:	e018      	b.n	80083f6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083c4:	2101      	movs	r1, #1
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f96c 	bl	80086a4 <USB_SetDevSpeed>
 80083cc:	e013      	b.n	80083f6 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d10c      	bne.n	80083ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d104      	bne.n	80083e4 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083da:	2100      	movs	r1, #0
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f961 	bl	80086a4 <USB_SetDevSpeed>
 80083e2:	e008      	b.n	80083f6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80083e4:	2101      	movs	r1, #1
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f95c 	bl	80086a4 <USB_SetDevSpeed>
 80083ec:	e003      	b.n	80083f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083ee:	2103      	movs	r1, #3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f957 	bl	80086a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083f6:	2110      	movs	r1, #16
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f90b 	bl	8008614 <USB_FlushTxFifo>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f929 	bl	8008660 <USB_FlushRxFifo>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841e:	461a      	mov	r2, r3
 8008420:	2300      	movs	r3, #0
 8008422:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842a:	461a      	mov	r2, r3
 800842c:	2300      	movs	r3, #0
 800842e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008436:	461a      	mov	r2, r3
 8008438:	2300      	movs	r3, #0
 800843a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800843c:	2300      	movs	r3, #0
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	e043      	b.n	80084ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008454:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008458:	d118      	bne.n	800848c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4413      	add	r3, r2
 8008468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846c:	461a      	mov	r2, r3
 800846e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	e013      	b.n	800849e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	015a      	lsls	r2, r3, #5
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008482:	461a      	mov	r2, r3
 8008484:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008488:	6013      	str	r3, [r2, #0]
 800848a:	e008      	b.n	800849e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008498:	461a      	mov	r2, r3
 800849a:	2300      	movs	r3, #0
 800849c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084aa:	461a      	mov	r2, r3
 80084ac:	2300      	movs	r3, #0
 80084ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084bc:	461a      	mov	r2, r3
 80084be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	3301      	adds	r3, #1
 80084c8:	613b      	str	r3, [r7, #16]
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d3b7      	bcc.n	8008442 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084d2:	2300      	movs	r3, #0
 80084d4:	613b      	str	r3, [r7, #16]
 80084d6:	e043      	b.n	8008560 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084ee:	d118      	bne.n	8008522 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10a      	bne.n	800850c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008502:	461a      	mov	r2, r3
 8008504:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008508:	6013      	str	r3, [r2, #0]
 800850a:	e013      	b.n	8008534 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008518:	461a      	mov	r2, r3
 800851a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	e008      	b.n	8008534 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852e:	461a      	mov	r2, r3
 8008530:	2300      	movs	r3, #0
 8008532:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008540:	461a      	mov	r2, r3
 8008542:	2300      	movs	r3, #0
 8008544:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008552:	461a      	mov	r2, r3
 8008554:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008558:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	3301      	adds	r3, #1
 800855e:	613b      	str	r3, [r7, #16]
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	429a      	cmp	r2, r3
 8008566:	d3b7      	bcc.n	80084d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800857a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	2b01      	cmp	r3, #1
 8008580:	d110      	bne.n	80085a4 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008588:	461a      	mov	r2, r3
 800858a:	4b1e      	ldr	r3, [pc, #120]	; (8008604 <USB_DevInit+0x2e8>)
 800858c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859c:	4619      	mov	r1, r3
 800859e:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <USB_DevInit+0x2ec>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d105      	bne.n	80085c4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f043 0210 	orr.w	r2, r3, #16
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	4b10      	ldr	r3, [pc, #64]	; (800860c <USB_DevInit+0x2f0>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	f043 0208 	orr.w	r2, r3, #8
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d105      	bne.n	80085f4 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699a      	ldr	r2, [r3, #24]
 80085ec:	4b08      	ldr	r3, [pc, #32]	; (8008610 <USB_DevInit+0x2f4>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008600:	b004      	add	sp, #16
 8008602:	4770      	bx	lr
 8008604:	00800100 	.word	0x00800100
 8008608:	00010003 	.word	0x00010003
 800860c:	803c3800 	.word	0x803c3800
 8008610:	40000004 	.word	0x40000004

08008614 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	019b      	lsls	r3, r3, #6
 8008626:	f043 0220 	orr.w	r2, r3, #32
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3301      	adds	r3, #1
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4a09      	ldr	r2, [pc, #36]	; (800865c <USB_FlushTxFifo+0x48>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d901      	bls.n	8008640 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e006      	b.n	800864e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	f003 0320 	and.w	r3, r3, #32
 8008648:	2b20      	cmp	r3, #32
 800864a:	d0f0      	beq.n	800862e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	00030d40 	.word	0x00030d40

08008660 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2210      	movs	r2, #16
 8008670:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3301      	adds	r3, #1
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4a09      	ldr	r2, [pc, #36]	; (80086a0 <USB_FlushRxFifo+0x40>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d901      	bls.n	8008684 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e006      	b.n	8008692 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	f003 0310 	and.w	r3, r3, #16
 800868c:	2b10      	cmp	r3, #16
 800868e:	d0f0      	beq.n	8008672 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	00030d40 	.word	0x00030d40

080086a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086c4:	4313      	orrs	r3, r2
 80086c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086f0:	f043 0302 	orr.w	r3, r3, #2
 80086f4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80086f6:	2003      	movs	r0, #3
 80086f8:	f7fa fbc8 	bl	8002e8c <HAL_Delay>

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	4a13      	ldr	r2, [pc, #76]	; (800876c <USB_CoreReset+0x64>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d901      	bls.n	8008726 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e01b      	b.n	800875e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	daf2      	bge.n	8008714 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f043 0201 	orr.w	r2, r3, #1
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	3301      	adds	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	4a09      	ldr	r2, [pc, #36]	; (800876c <USB_CoreReset+0x64>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d901      	bls.n	8008750 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e006      	b.n	800875e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	2b01      	cmp	r3, #1
 800875a:	d0f0      	beq.n	800873e <USB_CoreReset+0x36>

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	00030d40 	.word	0x00030d40

08008770 <__errno>:
 8008770:	4b01      	ldr	r3, [pc, #4]	; (8008778 <__errno+0x8>)
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	200000f8 	.word	0x200000f8

0800877c <__libc_init_array>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	4e0d      	ldr	r6, [pc, #52]	; (80087b4 <__libc_init_array+0x38>)
 8008780:	4c0d      	ldr	r4, [pc, #52]	; (80087b8 <__libc_init_array+0x3c>)
 8008782:	1ba4      	subs	r4, r4, r6
 8008784:	10a4      	asrs	r4, r4, #2
 8008786:	2500      	movs	r5, #0
 8008788:	42a5      	cmp	r5, r4
 800878a:	d109      	bne.n	80087a0 <__libc_init_array+0x24>
 800878c:	4e0b      	ldr	r6, [pc, #44]	; (80087bc <__libc_init_array+0x40>)
 800878e:	4c0c      	ldr	r4, [pc, #48]	; (80087c0 <__libc_init_array+0x44>)
 8008790:	f002 f9bc 	bl	800ab0c <_init>
 8008794:	1ba4      	subs	r4, r4, r6
 8008796:	10a4      	asrs	r4, r4, #2
 8008798:	2500      	movs	r5, #0
 800879a:	42a5      	cmp	r5, r4
 800879c:	d105      	bne.n	80087aa <__libc_init_array+0x2e>
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087a4:	4798      	blx	r3
 80087a6:	3501      	adds	r5, #1
 80087a8:	e7ee      	b.n	8008788 <__libc_init_array+0xc>
 80087aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087ae:	4798      	blx	r3
 80087b0:	3501      	adds	r5, #1
 80087b2:	e7f2      	b.n	800879a <__libc_init_array+0x1e>
 80087b4:	0800ad98 	.word	0x0800ad98
 80087b8:	0800ad98 	.word	0x0800ad98
 80087bc:	0800ad98 	.word	0x0800ad98
 80087c0:	0800ad9c 	.word	0x0800ad9c

080087c4 <memset>:
 80087c4:	4402      	add	r2, r0
 80087c6:	4603      	mov	r3, r0
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d100      	bne.n	80087ce <memset+0xa>
 80087cc:	4770      	bx	lr
 80087ce:	f803 1b01 	strb.w	r1, [r3], #1
 80087d2:	e7f9      	b.n	80087c8 <memset+0x4>

080087d4 <siprintf>:
 80087d4:	b40e      	push	{r1, r2, r3}
 80087d6:	b500      	push	{lr}
 80087d8:	b09c      	sub	sp, #112	; 0x70
 80087da:	ab1d      	add	r3, sp, #116	; 0x74
 80087dc:	9002      	str	r0, [sp, #8]
 80087de:	9006      	str	r0, [sp, #24]
 80087e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087e4:	4809      	ldr	r0, [pc, #36]	; (800880c <siprintf+0x38>)
 80087e6:	9107      	str	r1, [sp, #28]
 80087e8:	9104      	str	r1, [sp, #16]
 80087ea:	4909      	ldr	r1, [pc, #36]	; (8008810 <siprintf+0x3c>)
 80087ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f0:	9105      	str	r1, [sp, #20]
 80087f2:	6800      	ldr	r0, [r0, #0]
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	a902      	add	r1, sp, #8
 80087f8:	f000 f892 	bl	8008920 <_svfiprintf_r>
 80087fc:	9b02      	ldr	r3, [sp, #8]
 80087fe:	2200      	movs	r2, #0
 8008800:	701a      	strb	r2, [r3, #0]
 8008802:	b01c      	add	sp, #112	; 0x70
 8008804:	f85d eb04 	ldr.w	lr, [sp], #4
 8008808:	b003      	add	sp, #12
 800880a:	4770      	bx	lr
 800880c:	200000f8 	.word	0x200000f8
 8008810:	ffff0208 	.word	0xffff0208

08008814 <siscanf>:
 8008814:	b40e      	push	{r1, r2, r3}
 8008816:	b530      	push	{r4, r5, lr}
 8008818:	b09c      	sub	sp, #112	; 0x70
 800881a:	ac1f      	add	r4, sp, #124	; 0x7c
 800881c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008820:	f854 5b04 	ldr.w	r5, [r4], #4
 8008824:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008828:	9002      	str	r0, [sp, #8]
 800882a:	9006      	str	r0, [sp, #24]
 800882c:	f7f7 fcf0 	bl	8000210 <strlen>
 8008830:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <siscanf+0x4c>)
 8008832:	9003      	str	r0, [sp, #12]
 8008834:	9007      	str	r0, [sp, #28]
 8008836:	930b      	str	r3, [sp, #44]	; 0x2c
 8008838:	480a      	ldr	r0, [pc, #40]	; (8008864 <siscanf+0x50>)
 800883a:	9401      	str	r4, [sp, #4]
 800883c:	2300      	movs	r3, #0
 800883e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008840:	9314      	str	r3, [sp, #80]	; 0x50
 8008842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008846:	f8ad 3016 	strh.w	r3, [sp, #22]
 800884a:	462a      	mov	r2, r5
 800884c:	4623      	mov	r3, r4
 800884e:	a902      	add	r1, sp, #8
 8008850:	6800      	ldr	r0, [r0, #0]
 8008852:	f000 f9b7 	bl	8008bc4 <__ssvfiscanf_r>
 8008856:	b01c      	add	sp, #112	; 0x70
 8008858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800885c:	b003      	add	sp, #12
 800885e:	4770      	bx	lr
 8008860:	08008869 	.word	0x08008869
 8008864:	200000f8 	.word	0x200000f8

08008868 <__seofread>:
 8008868:	2000      	movs	r0, #0
 800886a:	4770      	bx	lr

0800886c <__ssputs_r>:
 800886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	688e      	ldr	r6, [r1, #8]
 8008872:	429e      	cmp	r6, r3
 8008874:	4682      	mov	sl, r0
 8008876:	460c      	mov	r4, r1
 8008878:	4690      	mov	r8, r2
 800887a:	4699      	mov	r9, r3
 800887c:	d837      	bhi.n	80088ee <__ssputs_r+0x82>
 800887e:	898a      	ldrh	r2, [r1, #12]
 8008880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008884:	d031      	beq.n	80088ea <__ssputs_r+0x7e>
 8008886:	6825      	ldr	r5, [r4, #0]
 8008888:	6909      	ldr	r1, [r1, #16]
 800888a:	1a6f      	subs	r7, r5, r1
 800888c:	6965      	ldr	r5, [r4, #20]
 800888e:	2302      	movs	r3, #2
 8008890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008894:	fb95 f5f3 	sdiv	r5, r5, r3
 8008898:	f109 0301 	add.w	r3, r9, #1
 800889c:	443b      	add	r3, r7
 800889e:	429d      	cmp	r5, r3
 80088a0:	bf38      	it	cc
 80088a2:	461d      	movcc	r5, r3
 80088a4:	0553      	lsls	r3, r2, #21
 80088a6:	d530      	bpl.n	800890a <__ssputs_r+0x9e>
 80088a8:	4629      	mov	r1, r5
 80088aa:	f000 ffd7 	bl	800985c <_malloc_r>
 80088ae:	4606      	mov	r6, r0
 80088b0:	b950      	cbnz	r0, 80088c8 <__ssputs_r+0x5c>
 80088b2:	230c      	movs	r3, #12
 80088b4:	f8ca 3000 	str.w	r3, [sl]
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088be:	81a3      	strh	r3, [r4, #12]
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295
 80088c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c8:	463a      	mov	r2, r7
 80088ca:	6921      	ldr	r1, [r4, #16]
 80088cc:	f000 ff54 	bl	8009778 <memcpy>
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088da:	81a3      	strh	r3, [r4, #12]
 80088dc:	6126      	str	r6, [r4, #16]
 80088de:	6165      	str	r5, [r4, #20]
 80088e0:	443e      	add	r6, r7
 80088e2:	1bed      	subs	r5, r5, r7
 80088e4:	6026      	str	r6, [r4, #0]
 80088e6:	60a5      	str	r5, [r4, #8]
 80088e8:	464e      	mov	r6, r9
 80088ea:	454e      	cmp	r6, r9
 80088ec:	d900      	bls.n	80088f0 <__ssputs_r+0x84>
 80088ee:	464e      	mov	r6, r9
 80088f0:	4632      	mov	r2, r6
 80088f2:	4641      	mov	r1, r8
 80088f4:	6820      	ldr	r0, [r4, #0]
 80088f6:	f000 ff4a 	bl	800978e <memmove>
 80088fa:	68a3      	ldr	r3, [r4, #8]
 80088fc:	1b9b      	subs	r3, r3, r6
 80088fe:	60a3      	str	r3, [r4, #8]
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	441e      	add	r6, r3
 8008904:	6026      	str	r6, [r4, #0]
 8008906:	2000      	movs	r0, #0
 8008908:	e7dc      	b.n	80088c4 <__ssputs_r+0x58>
 800890a:	462a      	mov	r2, r5
 800890c:	f001 f800 	bl	8009910 <_realloc_r>
 8008910:	4606      	mov	r6, r0
 8008912:	2800      	cmp	r0, #0
 8008914:	d1e2      	bne.n	80088dc <__ssputs_r+0x70>
 8008916:	6921      	ldr	r1, [r4, #16]
 8008918:	4650      	mov	r0, sl
 800891a:	f000 ff51 	bl	80097c0 <_free_r>
 800891e:	e7c8      	b.n	80088b2 <__ssputs_r+0x46>

08008920 <_svfiprintf_r>:
 8008920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	461d      	mov	r5, r3
 8008926:	898b      	ldrh	r3, [r1, #12]
 8008928:	061f      	lsls	r7, r3, #24
 800892a:	b09d      	sub	sp, #116	; 0x74
 800892c:	4680      	mov	r8, r0
 800892e:	460c      	mov	r4, r1
 8008930:	4616      	mov	r6, r2
 8008932:	d50f      	bpl.n	8008954 <_svfiprintf_r+0x34>
 8008934:	690b      	ldr	r3, [r1, #16]
 8008936:	b96b      	cbnz	r3, 8008954 <_svfiprintf_r+0x34>
 8008938:	2140      	movs	r1, #64	; 0x40
 800893a:	f000 ff8f 	bl	800985c <_malloc_r>
 800893e:	6020      	str	r0, [r4, #0]
 8008940:	6120      	str	r0, [r4, #16]
 8008942:	b928      	cbnz	r0, 8008950 <_svfiprintf_r+0x30>
 8008944:	230c      	movs	r3, #12
 8008946:	f8c8 3000 	str.w	r3, [r8]
 800894a:	f04f 30ff 	mov.w	r0, #4294967295
 800894e:	e0c8      	b.n	8008ae2 <_svfiprintf_r+0x1c2>
 8008950:	2340      	movs	r3, #64	; 0x40
 8008952:	6163      	str	r3, [r4, #20]
 8008954:	2300      	movs	r3, #0
 8008956:	9309      	str	r3, [sp, #36]	; 0x24
 8008958:	2320      	movs	r3, #32
 800895a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800895e:	2330      	movs	r3, #48	; 0x30
 8008960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008964:	9503      	str	r5, [sp, #12]
 8008966:	f04f 0b01 	mov.w	fp, #1
 800896a:	4637      	mov	r7, r6
 800896c:	463d      	mov	r5, r7
 800896e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008972:	b10b      	cbz	r3, 8008978 <_svfiprintf_r+0x58>
 8008974:	2b25      	cmp	r3, #37	; 0x25
 8008976:	d13e      	bne.n	80089f6 <_svfiprintf_r+0xd6>
 8008978:	ebb7 0a06 	subs.w	sl, r7, r6
 800897c:	d00b      	beq.n	8008996 <_svfiprintf_r+0x76>
 800897e:	4653      	mov	r3, sl
 8008980:	4632      	mov	r2, r6
 8008982:	4621      	mov	r1, r4
 8008984:	4640      	mov	r0, r8
 8008986:	f7ff ff71 	bl	800886c <__ssputs_r>
 800898a:	3001      	adds	r0, #1
 800898c:	f000 80a4 	beq.w	8008ad8 <_svfiprintf_r+0x1b8>
 8008990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008992:	4453      	add	r3, sl
 8008994:	9309      	str	r3, [sp, #36]	; 0x24
 8008996:	783b      	ldrb	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 809d 	beq.w	8008ad8 <_svfiprintf_r+0x1b8>
 800899e:	2300      	movs	r3, #0
 80089a0:	f04f 32ff 	mov.w	r2, #4294967295
 80089a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089a8:	9304      	str	r3, [sp, #16]
 80089aa:	9307      	str	r3, [sp, #28]
 80089ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b0:	931a      	str	r3, [sp, #104]	; 0x68
 80089b2:	462f      	mov	r7, r5
 80089b4:	2205      	movs	r2, #5
 80089b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80089ba:	4850      	ldr	r0, [pc, #320]	; (8008afc <_svfiprintf_r+0x1dc>)
 80089bc:	f7f7 fc30 	bl	8000220 <memchr>
 80089c0:	9b04      	ldr	r3, [sp, #16]
 80089c2:	b9d0      	cbnz	r0, 80089fa <_svfiprintf_r+0xda>
 80089c4:	06d9      	lsls	r1, r3, #27
 80089c6:	bf44      	itt	mi
 80089c8:	2220      	movmi	r2, #32
 80089ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089ce:	071a      	lsls	r2, r3, #28
 80089d0:	bf44      	itt	mi
 80089d2:	222b      	movmi	r2, #43	; 0x2b
 80089d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089d8:	782a      	ldrb	r2, [r5, #0]
 80089da:	2a2a      	cmp	r2, #42	; 0x2a
 80089dc:	d015      	beq.n	8008a0a <_svfiprintf_r+0xea>
 80089de:	9a07      	ldr	r2, [sp, #28]
 80089e0:	462f      	mov	r7, r5
 80089e2:	2000      	movs	r0, #0
 80089e4:	250a      	movs	r5, #10
 80089e6:	4639      	mov	r1, r7
 80089e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ec:	3b30      	subs	r3, #48	; 0x30
 80089ee:	2b09      	cmp	r3, #9
 80089f0:	d94d      	bls.n	8008a8e <_svfiprintf_r+0x16e>
 80089f2:	b1b8      	cbz	r0, 8008a24 <_svfiprintf_r+0x104>
 80089f4:	e00f      	b.n	8008a16 <_svfiprintf_r+0xf6>
 80089f6:	462f      	mov	r7, r5
 80089f8:	e7b8      	b.n	800896c <_svfiprintf_r+0x4c>
 80089fa:	4a40      	ldr	r2, [pc, #256]	; (8008afc <_svfiprintf_r+0x1dc>)
 80089fc:	1a80      	subs	r0, r0, r2
 80089fe:	fa0b f000 	lsl.w	r0, fp, r0
 8008a02:	4318      	orrs	r0, r3
 8008a04:	9004      	str	r0, [sp, #16]
 8008a06:	463d      	mov	r5, r7
 8008a08:	e7d3      	b.n	80089b2 <_svfiprintf_r+0x92>
 8008a0a:	9a03      	ldr	r2, [sp, #12]
 8008a0c:	1d11      	adds	r1, r2, #4
 8008a0e:	6812      	ldr	r2, [r2, #0]
 8008a10:	9103      	str	r1, [sp, #12]
 8008a12:	2a00      	cmp	r2, #0
 8008a14:	db01      	blt.n	8008a1a <_svfiprintf_r+0xfa>
 8008a16:	9207      	str	r2, [sp, #28]
 8008a18:	e004      	b.n	8008a24 <_svfiprintf_r+0x104>
 8008a1a:	4252      	negs	r2, r2
 8008a1c:	f043 0302 	orr.w	r3, r3, #2
 8008a20:	9207      	str	r2, [sp, #28]
 8008a22:	9304      	str	r3, [sp, #16]
 8008a24:	783b      	ldrb	r3, [r7, #0]
 8008a26:	2b2e      	cmp	r3, #46	; 0x2e
 8008a28:	d10c      	bne.n	8008a44 <_svfiprintf_r+0x124>
 8008a2a:	787b      	ldrb	r3, [r7, #1]
 8008a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a2e:	d133      	bne.n	8008a98 <_svfiprintf_r+0x178>
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	1d1a      	adds	r2, r3, #4
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	9203      	str	r2, [sp, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	bfb8      	it	lt
 8008a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a40:	3702      	adds	r7, #2
 8008a42:	9305      	str	r3, [sp, #20]
 8008a44:	4d2e      	ldr	r5, [pc, #184]	; (8008b00 <_svfiprintf_r+0x1e0>)
 8008a46:	7839      	ldrb	r1, [r7, #0]
 8008a48:	2203      	movs	r2, #3
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f7f7 fbe8 	bl	8000220 <memchr>
 8008a50:	b138      	cbz	r0, 8008a62 <_svfiprintf_r+0x142>
 8008a52:	2340      	movs	r3, #64	; 0x40
 8008a54:	1b40      	subs	r0, r0, r5
 8008a56:	fa03 f000 	lsl.w	r0, r3, r0
 8008a5a:	9b04      	ldr	r3, [sp, #16]
 8008a5c:	4303      	orrs	r3, r0
 8008a5e:	3701      	adds	r7, #1
 8008a60:	9304      	str	r3, [sp, #16]
 8008a62:	7839      	ldrb	r1, [r7, #0]
 8008a64:	4827      	ldr	r0, [pc, #156]	; (8008b04 <_svfiprintf_r+0x1e4>)
 8008a66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a6a:	2206      	movs	r2, #6
 8008a6c:	1c7e      	adds	r6, r7, #1
 8008a6e:	f7f7 fbd7 	bl	8000220 <memchr>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d038      	beq.n	8008ae8 <_svfiprintf_r+0x1c8>
 8008a76:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <_svfiprintf_r+0x1e8>)
 8008a78:	bb13      	cbnz	r3, 8008ac0 <_svfiprintf_r+0x1a0>
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	3307      	adds	r3, #7
 8008a7e:	f023 0307 	bic.w	r3, r3, #7
 8008a82:	3308      	adds	r3, #8
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a88:	444b      	add	r3, r9
 8008a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8c:	e76d      	b.n	800896a <_svfiprintf_r+0x4a>
 8008a8e:	fb05 3202 	mla	r2, r5, r2, r3
 8008a92:	2001      	movs	r0, #1
 8008a94:	460f      	mov	r7, r1
 8008a96:	e7a6      	b.n	80089e6 <_svfiprintf_r+0xc6>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	3701      	adds	r7, #1
 8008a9c:	9305      	str	r3, [sp, #20]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	250a      	movs	r5, #10
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aa8:	3a30      	subs	r2, #48	; 0x30
 8008aaa:	2a09      	cmp	r2, #9
 8008aac:	d903      	bls.n	8008ab6 <_svfiprintf_r+0x196>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0c8      	beq.n	8008a44 <_svfiprintf_r+0x124>
 8008ab2:	9105      	str	r1, [sp, #20]
 8008ab4:	e7c6      	b.n	8008a44 <_svfiprintf_r+0x124>
 8008ab6:	fb05 2101 	mla	r1, r5, r1, r2
 8008aba:	2301      	movs	r3, #1
 8008abc:	4607      	mov	r7, r0
 8008abe:	e7f0      	b.n	8008aa2 <_svfiprintf_r+0x182>
 8008ac0:	ab03      	add	r3, sp, #12
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4b11      	ldr	r3, [pc, #68]	; (8008b0c <_svfiprintf_r+0x1ec>)
 8008ac8:	a904      	add	r1, sp, #16
 8008aca:	4640      	mov	r0, r8
 8008acc:	f3af 8000 	nop.w
 8008ad0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ad4:	4681      	mov	r9, r0
 8008ad6:	d1d6      	bne.n	8008a86 <_svfiprintf_r+0x166>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	065b      	lsls	r3, r3, #25
 8008adc:	f53f af35 	bmi.w	800894a <_svfiprintf_r+0x2a>
 8008ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ae2:	b01d      	add	sp, #116	; 0x74
 8008ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae8:	ab03      	add	r3, sp, #12
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	4622      	mov	r2, r4
 8008aee:	4b07      	ldr	r3, [pc, #28]	; (8008b0c <_svfiprintf_r+0x1ec>)
 8008af0:	a904      	add	r1, sp, #16
 8008af2:	4640      	mov	r0, r8
 8008af4:	f000 fa2c 	bl	8008f50 <_printf_i>
 8008af8:	e7ea      	b.n	8008ad0 <_svfiprintf_r+0x1b0>
 8008afa:	bf00      	nop
 8008afc:	0800ab8c 	.word	0x0800ab8c
 8008b00:	0800ab92 	.word	0x0800ab92
 8008b04:	0800ab96 	.word	0x0800ab96
 8008b08:	00000000 	.word	0x00000000
 8008b0c:	0800886d 	.word	0x0800886d

08008b10 <_sungetc_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	1c4b      	adds	r3, r1, #1
 8008b14:	4614      	mov	r4, r2
 8008b16:	d103      	bne.n	8008b20 <_sungetc_r+0x10>
 8008b18:	f04f 35ff 	mov.w	r5, #4294967295
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	8993      	ldrh	r3, [r2, #12]
 8008b22:	f023 0320 	bic.w	r3, r3, #32
 8008b26:	8193      	strh	r3, [r2, #12]
 8008b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b2a:	6852      	ldr	r2, [r2, #4]
 8008b2c:	b2cd      	uxtb	r5, r1
 8008b2e:	b18b      	cbz	r3, 8008b54 <_sungetc_r+0x44>
 8008b30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b32:	4293      	cmp	r3, r2
 8008b34:	dd08      	ble.n	8008b48 <_sungetc_r+0x38>
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	1e5a      	subs	r2, r3, #1
 8008b3a:	6022      	str	r2, [r4, #0]
 8008b3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008b40:	6863      	ldr	r3, [r4, #4]
 8008b42:	3301      	adds	r3, #1
 8008b44:	6063      	str	r3, [r4, #4]
 8008b46:	e7e9      	b.n	8008b1c <_sungetc_r+0xc>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	f000 fdb7 	bl	80096bc <__submore>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d0f1      	beq.n	8008b36 <_sungetc_r+0x26>
 8008b52:	e7e1      	b.n	8008b18 <_sungetc_r+0x8>
 8008b54:	6921      	ldr	r1, [r4, #16]
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	b151      	cbz	r1, 8008b70 <_sungetc_r+0x60>
 8008b5a:	4299      	cmp	r1, r3
 8008b5c:	d208      	bcs.n	8008b70 <_sungetc_r+0x60>
 8008b5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008b62:	42a9      	cmp	r1, r5
 8008b64:	d104      	bne.n	8008b70 <_sungetc_r+0x60>
 8008b66:	3b01      	subs	r3, #1
 8008b68:	3201      	adds	r2, #1
 8008b6a:	6023      	str	r3, [r4, #0]
 8008b6c:	6062      	str	r2, [r4, #4]
 8008b6e:	e7d5      	b.n	8008b1c <_sungetc_r+0xc>
 8008b70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b78:	6363      	str	r3, [r4, #52]	; 0x34
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8008b7e:	4623      	mov	r3, r4
 8008b80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	2301      	movs	r3, #1
 8008b88:	e7dc      	b.n	8008b44 <_sungetc_r+0x34>

08008b8a <__ssrefill_r>:
 8008b8a:	b510      	push	{r4, lr}
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008b90:	b169      	cbz	r1, 8008bae <__ssrefill_r+0x24>
 8008b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b96:	4299      	cmp	r1, r3
 8008b98:	d001      	beq.n	8008b9e <__ssrefill_r+0x14>
 8008b9a:	f000 fe11 	bl	80097c0 <_free_r>
 8008b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ba0:	6063      	str	r3, [r4, #4]
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	6360      	str	r0, [r4, #52]	; 0x34
 8008ba6:	b113      	cbz	r3, 8008bae <__ssrefill_r+0x24>
 8008ba8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	bd10      	pop	{r4, pc}
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	6063      	str	r3, [r4, #4]
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	f043 0320 	orr.w	r3, r3, #32
 8008bbc:	81a3      	strh	r3, [r4, #12]
 8008bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc2:	e7f3      	b.n	8008bac <__ssrefill_r+0x22>

08008bc4 <__ssvfiscanf_r>:
 8008bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008bcc:	460c      	mov	r4, r1
 8008bce:	2100      	movs	r1, #0
 8008bd0:	9144      	str	r1, [sp, #272]	; 0x110
 8008bd2:	9145      	str	r1, [sp, #276]	; 0x114
 8008bd4:	499f      	ldr	r1, [pc, #636]	; (8008e54 <__ssvfiscanf_r+0x290>)
 8008bd6:	91a0      	str	r1, [sp, #640]	; 0x280
 8008bd8:	f10d 0804 	add.w	r8, sp, #4
 8008bdc:	499e      	ldr	r1, [pc, #632]	; (8008e58 <__ssvfiscanf_r+0x294>)
 8008bde:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008e5c <__ssvfiscanf_r+0x298>
 8008be2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008be6:	4606      	mov	r6, r0
 8008be8:	4692      	mov	sl, r2
 8008bea:	91a1      	str	r1, [sp, #644]	; 0x284
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	270a      	movs	r7, #10
 8008bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 812a 	beq.w	8008e4e <__ssvfiscanf_r+0x28a>
 8008bfa:	4655      	mov	r5, sl
 8008bfc:	f000 fd9c 	bl	8009738 <__locale_ctype_ptr>
 8008c00:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008c04:	4458      	add	r0, fp
 8008c06:	7843      	ldrb	r3, [r0, #1]
 8008c08:	f013 0308 	ands.w	r3, r3, #8
 8008c0c:	d01c      	beq.n	8008c48 <__ssvfiscanf_r+0x84>
 8008c0e:	6863      	ldr	r3, [r4, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dd12      	ble.n	8008c3a <__ssvfiscanf_r+0x76>
 8008c14:	f000 fd90 	bl	8009738 <__locale_ctype_ptr>
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	781a      	ldrb	r2, [r3, #0]
 8008c1c:	4410      	add	r0, r2
 8008c1e:	7842      	ldrb	r2, [r0, #1]
 8008c20:	0712      	lsls	r2, r2, #28
 8008c22:	d401      	bmi.n	8008c28 <__ssvfiscanf_r+0x64>
 8008c24:	46aa      	mov	sl, r5
 8008c26:	e7e3      	b.n	8008bf0 <__ssvfiscanf_r+0x2c>
 8008c28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c2a:	3201      	adds	r2, #1
 8008c2c:	9245      	str	r2, [sp, #276]	; 0x114
 8008c2e:	6862      	ldr	r2, [r4, #4]
 8008c30:	3301      	adds	r3, #1
 8008c32:	3a01      	subs	r2, #1
 8008c34:	6062      	str	r2, [r4, #4]
 8008c36:	6023      	str	r3, [r4, #0]
 8008c38:	e7e9      	b.n	8008c0e <__ssvfiscanf_r+0x4a>
 8008c3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4798      	blx	r3
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d0e6      	beq.n	8008c14 <__ssvfiscanf_r+0x50>
 8008c46:	e7ed      	b.n	8008c24 <__ssvfiscanf_r+0x60>
 8008c48:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008c4c:	f040 8082 	bne.w	8008d54 <__ssvfiscanf_r+0x190>
 8008c50:	9343      	str	r3, [sp, #268]	; 0x10c
 8008c52:	9341      	str	r3, [sp, #260]	; 0x104
 8008c54:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008c58:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5a:	d103      	bne.n	8008c64 <__ssvfiscanf_r+0xa0>
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	9341      	str	r3, [sp, #260]	; 0x104
 8008c60:	f10a 0502 	add.w	r5, sl, #2
 8008c64:	46aa      	mov	sl, r5
 8008c66:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008c6a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008c6e:	2a09      	cmp	r2, #9
 8008c70:	d922      	bls.n	8008cb8 <__ssvfiscanf_r+0xf4>
 8008c72:	2203      	movs	r2, #3
 8008c74:	4879      	ldr	r0, [pc, #484]	; (8008e5c <__ssvfiscanf_r+0x298>)
 8008c76:	f7f7 fad3 	bl	8000220 <memchr>
 8008c7a:	b138      	cbz	r0, 8008c8c <__ssvfiscanf_r+0xc8>
 8008c7c:	eba0 0309 	sub.w	r3, r0, r9
 8008c80:	2001      	movs	r0, #1
 8008c82:	4098      	lsls	r0, r3
 8008c84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c86:	4318      	orrs	r0, r3
 8008c88:	9041      	str	r0, [sp, #260]	; 0x104
 8008c8a:	46aa      	mov	sl, r5
 8008c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c90:	2b67      	cmp	r3, #103	; 0x67
 8008c92:	f10a 0501 	add.w	r5, sl, #1
 8008c96:	d82b      	bhi.n	8008cf0 <__ssvfiscanf_r+0x12c>
 8008c98:	2b65      	cmp	r3, #101	; 0x65
 8008c9a:	f080 809f 	bcs.w	8008ddc <__ssvfiscanf_r+0x218>
 8008c9e:	2b47      	cmp	r3, #71	; 0x47
 8008ca0:	d810      	bhi.n	8008cc4 <__ssvfiscanf_r+0x100>
 8008ca2:	2b45      	cmp	r3, #69	; 0x45
 8008ca4:	f080 809a 	bcs.w	8008ddc <__ssvfiscanf_r+0x218>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d06c      	beq.n	8008d86 <__ssvfiscanf_r+0x1c2>
 8008cac:	2b25      	cmp	r3, #37	; 0x25
 8008cae:	d051      	beq.n	8008d54 <__ssvfiscanf_r+0x190>
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	9347      	str	r3, [sp, #284]	; 0x11c
 8008cb4:	9742      	str	r7, [sp, #264]	; 0x108
 8008cb6:	e027      	b.n	8008d08 <__ssvfiscanf_r+0x144>
 8008cb8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008cba:	fb07 1303 	mla	r3, r7, r3, r1
 8008cbe:	3b30      	subs	r3, #48	; 0x30
 8008cc0:	9343      	str	r3, [sp, #268]	; 0x10c
 8008cc2:	e7cf      	b.n	8008c64 <__ssvfiscanf_r+0xa0>
 8008cc4:	2b5b      	cmp	r3, #91	; 0x5b
 8008cc6:	d06a      	beq.n	8008d9e <__ssvfiscanf_r+0x1da>
 8008cc8:	d80c      	bhi.n	8008ce4 <__ssvfiscanf_r+0x120>
 8008cca:	2b58      	cmp	r3, #88	; 0x58
 8008ccc:	d1f0      	bne.n	8008cb0 <__ssvfiscanf_r+0xec>
 8008cce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cd4:	9241      	str	r2, [sp, #260]	; 0x104
 8008cd6:	2210      	movs	r2, #16
 8008cd8:	9242      	str	r2, [sp, #264]	; 0x108
 8008cda:	2b6e      	cmp	r3, #110	; 0x6e
 8008cdc:	bf8c      	ite	hi
 8008cde:	2304      	movhi	r3, #4
 8008ce0:	2303      	movls	r3, #3
 8008ce2:	e010      	b.n	8008d06 <__ssvfiscanf_r+0x142>
 8008ce4:	2b63      	cmp	r3, #99	; 0x63
 8008ce6:	d065      	beq.n	8008db4 <__ssvfiscanf_r+0x1f0>
 8008ce8:	2b64      	cmp	r3, #100	; 0x64
 8008cea:	d1e1      	bne.n	8008cb0 <__ssvfiscanf_r+0xec>
 8008cec:	9742      	str	r7, [sp, #264]	; 0x108
 8008cee:	e7f4      	b.n	8008cda <__ssvfiscanf_r+0x116>
 8008cf0:	2b70      	cmp	r3, #112	; 0x70
 8008cf2:	d04b      	beq.n	8008d8c <__ssvfiscanf_r+0x1c8>
 8008cf4:	d826      	bhi.n	8008d44 <__ssvfiscanf_r+0x180>
 8008cf6:	2b6e      	cmp	r3, #110	; 0x6e
 8008cf8:	d062      	beq.n	8008dc0 <__ssvfiscanf_r+0x1fc>
 8008cfa:	d84c      	bhi.n	8008d96 <__ssvfiscanf_r+0x1d2>
 8008cfc:	2b69      	cmp	r3, #105	; 0x69
 8008cfe:	d1d7      	bne.n	8008cb0 <__ssvfiscanf_r+0xec>
 8008d00:	2300      	movs	r3, #0
 8008d02:	9342      	str	r3, [sp, #264]	; 0x108
 8008d04:	2303      	movs	r3, #3
 8008d06:	9347      	str	r3, [sp, #284]	; 0x11c
 8008d08:	6863      	ldr	r3, [r4, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dd68      	ble.n	8008de0 <__ssvfiscanf_r+0x21c>
 8008d0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008d10:	0659      	lsls	r1, r3, #25
 8008d12:	d407      	bmi.n	8008d24 <__ssvfiscanf_r+0x160>
 8008d14:	f000 fd10 	bl	8009738 <__locale_ctype_ptr>
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	781a      	ldrb	r2, [r3, #0]
 8008d1c:	4410      	add	r0, r2
 8008d1e:	7842      	ldrb	r2, [r0, #1]
 8008d20:	0712      	lsls	r2, r2, #28
 8008d22:	d464      	bmi.n	8008dee <__ssvfiscanf_r+0x22a>
 8008d24:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	dc73      	bgt.n	8008e12 <__ssvfiscanf_r+0x24e>
 8008d2a:	466b      	mov	r3, sp
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	a941      	add	r1, sp, #260	; 0x104
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 fa1f 	bl	8009174 <_scanf_chars>
 8008d36:	2801      	cmp	r0, #1
 8008d38:	f000 8089 	beq.w	8008e4e <__ssvfiscanf_r+0x28a>
 8008d3c:	2802      	cmp	r0, #2
 8008d3e:	f47f af71 	bne.w	8008c24 <__ssvfiscanf_r+0x60>
 8008d42:	e01d      	b.n	8008d80 <__ssvfiscanf_r+0x1bc>
 8008d44:	2b75      	cmp	r3, #117	; 0x75
 8008d46:	d0d1      	beq.n	8008cec <__ssvfiscanf_r+0x128>
 8008d48:	2b78      	cmp	r3, #120	; 0x78
 8008d4a:	d0c0      	beq.n	8008cce <__ssvfiscanf_r+0x10a>
 8008d4c:	2b73      	cmp	r3, #115	; 0x73
 8008d4e:	d1af      	bne.n	8008cb0 <__ssvfiscanf_r+0xec>
 8008d50:	2302      	movs	r3, #2
 8008d52:	e7d8      	b.n	8008d06 <__ssvfiscanf_r+0x142>
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	dd0c      	ble.n	8008d74 <__ssvfiscanf_r+0x1b0>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	781a      	ldrb	r2, [r3, #0]
 8008d5e:	455a      	cmp	r2, fp
 8008d60:	d175      	bne.n	8008e4e <__ssvfiscanf_r+0x28a>
 8008d62:	3301      	adds	r3, #1
 8008d64:	6862      	ldr	r2, [r4, #4]
 8008d66:	6023      	str	r3, [r4, #0]
 8008d68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008d6a:	3a01      	subs	r2, #1
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	6062      	str	r2, [r4, #4]
 8008d70:	9345      	str	r3, [sp, #276]	; 0x114
 8008d72:	e757      	b.n	8008c24 <__ssvfiscanf_r+0x60>
 8008d74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d76:	4621      	mov	r1, r4
 8008d78:	4630      	mov	r0, r6
 8008d7a:	4798      	blx	r3
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d0ec      	beq.n	8008d5a <__ssvfiscanf_r+0x196>
 8008d80:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d159      	bne.n	8008e3a <__ssvfiscanf_r+0x276>
 8008d86:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8a:	e05c      	b.n	8008e46 <__ssvfiscanf_r+0x282>
 8008d8c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008d8e:	f042 0220 	orr.w	r2, r2, #32
 8008d92:	9241      	str	r2, [sp, #260]	; 0x104
 8008d94:	e79b      	b.n	8008cce <__ssvfiscanf_r+0x10a>
 8008d96:	2308      	movs	r3, #8
 8008d98:	9342      	str	r3, [sp, #264]	; 0x108
 8008d9a:	2304      	movs	r3, #4
 8008d9c:	e7b3      	b.n	8008d06 <__ssvfiscanf_r+0x142>
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4640      	mov	r0, r8
 8008da2:	f000 fb3f 	bl	8009424 <__sccl>
 8008da6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dac:	9341      	str	r3, [sp, #260]	; 0x104
 8008dae:	4605      	mov	r5, r0
 8008db0:	2301      	movs	r3, #1
 8008db2:	e7a8      	b.n	8008d06 <__ssvfiscanf_r+0x142>
 8008db4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dba:	9341      	str	r3, [sp, #260]	; 0x104
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e7a2      	b.n	8008d06 <__ssvfiscanf_r+0x142>
 8008dc0:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008dc2:	06c3      	lsls	r3, r0, #27
 8008dc4:	f53f af2e 	bmi.w	8008c24 <__ssvfiscanf_r+0x60>
 8008dc8:	9b00      	ldr	r3, [sp, #0]
 8008dca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008dcc:	1d19      	adds	r1, r3, #4
 8008dce:	9100      	str	r1, [sp, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	07c0      	lsls	r0, r0, #31
 8008dd4:	bf4c      	ite	mi
 8008dd6:	801a      	strhmi	r2, [r3, #0]
 8008dd8:	601a      	strpl	r2, [r3, #0]
 8008dda:	e723      	b.n	8008c24 <__ssvfiscanf_r+0x60>
 8008ddc:	2305      	movs	r3, #5
 8008dde:	e792      	b.n	8008d06 <__ssvfiscanf_r+0x142>
 8008de0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008de2:	4621      	mov	r1, r4
 8008de4:	4630      	mov	r0, r6
 8008de6:	4798      	blx	r3
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d090      	beq.n	8008d0e <__ssvfiscanf_r+0x14a>
 8008dec:	e7c8      	b.n	8008d80 <__ssvfiscanf_r+0x1bc>
 8008dee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008df0:	3201      	adds	r2, #1
 8008df2:	9245      	str	r2, [sp, #276]	; 0x114
 8008df4:	6862      	ldr	r2, [r4, #4]
 8008df6:	3a01      	subs	r2, #1
 8008df8:	2a00      	cmp	r2, #0
 8008dfa:	6062      	str	r2, [r4, #4]
 8008dfc:	dd02      	ble.n	8008e04 <__ssvfiscanf_r+0x240>
 8008dfe:	3301      	adds	r3, #1
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	e787      	b.n	8008d14 <__ssvfiscanf_r+0x150>
 8008e04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e06:	4621      	mov	r1, r4
 8008e08:	4630      	mov	r0, r6
 8008e0a:	4798      	blx	r3
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d081      	beq.n	8008d14 <__ssvfiscanf_r+0x150>
 8008e10:	e7b6      	b.n	8008d80 <__ssvfiscanf_r+0x1bc>
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	dc06      	bgt.n	8008e24 <__ssvfiscanf_r+0x260>
 8008e16:	466b      	mov	r3, sp
 8008e18:	4622      	mov	r2, r4
 8008e1a:	a941      	add	r1, sp, #260	; 0x104
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f000 fa0d 	bl	800923c <_scanf_i>
 8008e22:	e788      	b.n	8008d36 <__ssvfiscanf_r+0x172>
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <__ssvfiscanf_r+0x29c>)
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f43f aefc 	beq.w	8008c24 <__ssvfiscanf_r+0x60>
 8008e2c:	466b      	mov	r3, sp
 8008e2e:	4622      	mov	r2, r4
 8008e30:	a941      	add	r1, sp, #260	; 0x104
 8008e32:	4630      	mov	r0, r6
 8008e34:	f3af 8000 	nop.w
 8008e38:	e77d      	b.n	8008d36 <__ssvfiscanf_r+0x172>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008e40:	bf18      	it	ne
 8008e42:	f04f 30ff 	movne.w	r0, #4294967295
 8008e46:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008e50:	e7f9      	b.n	8008e46 <__ssvfiscanf_r+0x282>
 8008e52:	bf00      	nop
 8008e54:	08008b11 	.word	0x08008b11
 8008e58:	08008b8b 	.word	0x08008b8b
 8008e5c:	0800ab92 	.word	0x0800ab92
 8008e60:	00000000 	.word	0x00000000

08008e64 <_printf_common>:
 8008e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	4691      	mov	r9, r2
 8008e6a:	461f      	mov	r7, r3
 8008e6c:	688a      	ldr	r2, [r1, #8]
 8008e6e:	690b      	ldr	r3, [r1, #16]
 8008e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e74:	4293      	cmp	r3, r2
 8008e76:	bfb8      	it	lt
 8008e78:	4613      	movlt	r3, r2
 8008e7a:	f8c9 3000 	str.w	r3, [r9]
 8008e7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e82:	4606      	mov	r6, r0
 8008e84:	460c      	mov	r4, r1
 8008e86:	b112      	cbz	r2, 8008e8e <_printf_common+0x2a>
 8008e88:	3301      	adds	r3, #1
 8008e8a:	f8c9 3000 	str.w	r3, [r9]
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	0699      	lsls	r1, r3, #26
 8008e92:	bf42      	ittt	mi
 8008e94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008e98:	3302      	addmi	r3, #2
 8008e9a:	f8c9 3000 	strmi.w	r3, [r9]
 8008e9e:	6825      	ldr	r5, [r4, #0]
 8008ea0:	f015 0506 	ands.w	r5, r5, #6
 8008ea4:	d107      	bne.n	8008eb6 <_printf_common+0x52>
 8008ea6:	f104 0a19 	add.w	sl, r4, #25
 8008eaa:	68e3      	ldr	r3, [r4, #12]
 8008eac:	f8d9 2000 	ldr.w	r2, [r9]
 8008eb0:	1a9b      	subs	r3, r3, r2
 8008eb2:	42ab      	cmp	r3, r5
 8008eb4:	dc28      	bgt.n	8008f08 <_printf_common+0xa4>
 8008eb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008eba:	6822      	ldr	r2, [r4, #0]
 8008ebc:	3300      	adds	r3, #0
 8008ebe:	bf18      	it	ne
 8008ec0:	2301      	movne	r3, #1
 8008ec2:	0692      	lsls	r2, r2, #26
 8008ec4:	d42d      	bmi.n	8008f22 <_printf_common+0xbe>
 8008ec6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008eca:	4639      	mov	r1, r7
 8008ecc:	4630      	mov	r0, r6
 8008ece:	47c0      	blx	r8
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d020      	beq.n	8008f16 <_printf_common+0xb2>
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	68e5      	ldr	r5, [r4, #12]
 8008ed8:	f8d9 2000 	ldr.w	r2, [r9]
 8008edc:	f003 0306 	and.w	r3, r3, #6
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	bf08      	it	eq
 8008ee4:	1aad      	subeq	r5, r5, r2
 8008ee6:	68a3      	ldr	r3, [r4, #8]
 8008ee8:	6922      	ldr	r2, [r4, #16]
 8008eea:	bf0c      	ite	eq
 8008eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ef0:	2500      	movne	r5, #0
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	bfc4      	itt	gt
 8008ef6:	1a9b      	subgt	r3, r3, r2
 8008ef8:	18ed      	addgt	r5, r5, r3
 8008efa:	f04f 0900 	mov.w	r9, #0
 8008efe:	341a      	adds	r4, #26
 8008f00:	454d      	cmp	r5, r9
 8008f02:	d11a      	bne.n	8008f3a <_printf_common+0xd6>
 8008f04:	2000      	movs	r0, #0
 8008f06:	e008      	b.n	8008f1a <_printf_common+0xb6>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	4652      	mov	r2, sl
 8008f0c:	4639      	mov	r1, r7
 8008f0e:	4630      	mov	r0, r6
 8008f10:	47c0      	blx	r8
 8008f12:	3001      	adds	r0, #1
 8008f14:	d103      	bne.n	8008f1e <_printf_common+0xba>
 8008f16:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f1e:	3501      	adds	r5, #1
 8008f20:	e7c3      	b.n	8008eaa <_printf_common+0x46>
 8008f22:	18e1      	adds	r1, r4, r3
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	2030      	movs	r0, #48	; 0x30
 8008f28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f2c:	4422      	add	r2, r4
 8008f2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f36:	3302      	adds	r3, #2
 8008f38:	e7c5      	b.n	8008ec6 <_printf_common+0x62>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	4639      	mov	r1, r7
 8008f40:	4630      	mov	r0, r6
 8008f42:	47c0      	blx	r8
 8008f44:	3001      	adds	r0, #1
 8008f46:	d0e6      	beq.n	8008f16 <_printf_common+0xb2>
 8008f48:	f109 0901 	add.w	r9, r9, #1
 8008f4c:	e7d8      	b.n	8008f00 <_printf_common+0x9c>
	...

08008f50 <_printf_i>:
 8008f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008f58:	460c      	mov	r4, r1
 8008f5a:	7e09      	ldrb	r1, [r1, #24]
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	296e      	cmp	r1, #110	; 0x6e
 8008f60:	4617      	mov	r7, r2
 8008f62:	4606      	mov	r6, r0
 8008f64:	4698      	mov	r8, r3
 8008f66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f68:	f000 80b3 	beq.w	80090d2 <_printf_i+0x182>
 8008f6c:	d822      	bhi.n	8008fb4 <_printf_i+0x64>
 8008f6e:	2963      	cmp	r1, #99	; 0x63
 8008f70:	d036      	beq.n	8008fe0 <_printf_i+0x90>
 8008f72:	d80a      	bhi.n	8008f8a <_printf_i+0x3a>
 8008f74:	2900      	cmp	r1, #0
 8008f76:	f000 80b9 	beq.w	80090ec <_printf_i+0x19c>
 8008f7a:	2958      	cmp	r1, #88	; 0x58
 8008f7c:	f000 8083 	beq.w	8009086 <_printf_i+0x136>
 8008f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008f88:	e032      	b.n	8008ff0 <_printf_i+0xa0>
 8008f8a:	2964      	cmp	r1, #100	; 0x64
 8008f8c:	d001      	beq.n	8008f92 <_printf_i+0x42>
 8008f8e:	2969      	cmp	r1, #105	; 0x69
 8008f90:	d1f6      	bne.n	8008f80 <_printf_i+0x30>
 8008f92:	6820      	ldr	r0, [r4, #0]
 8008f94:	6813      	ldr	r3, [r2, #0]
 8008f96:	0605      	lsls	r5, r0, #24
 8008f98:	f103 0104 	add.w	r1, r3, #4
 8008f9c:	d52a      	bpl.n	8008ff4 <_printf_i+0xa4>
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6011      	str	r1, [r2, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da03      	bge.n	8008fae <_printf_i+0x5e>
 8008fa6:	222d      	movs	r2, #45	; 0x2d
 8008fa8:	425b      	negs	r3, r3
 8008faa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008fae:	486f      	ldr	r0, [pc, #444]	; (800916c <_printf_i+0x21c>)
 8008fb0:	220a      	movs	r2, #10
 8008fb2:	e039      	b.n	8009028 <_printf_i+0xd8>
 8008fb4:	2973      	cmp	r1, #115	; 0x73
 8008fb6:	f000 809d 	beq.w	80090f4 <_printf_i+0x1a4>
 8008fba:	d808      	bhi.n	8008fce <_printf_i+0x7e>
 8008fbc:	296f      	cmp	r1, #111	; 0x6f
 8008fbe:	d020      	beq.n	8009002 <_printf_i+0xb2>
 8008fc0:	2970      	cmp	r1, #112	; 0x70
 8008fc2:	d1dd      	bne.n	8008f80 <_printf_i+0x30>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	f043 0320 	orr.w	r3, r3, #32
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	e003      	b.n	8008fd6 <_printf_i+0x86>
 8008fce:	2975      	cmp	r1, #117	; 0x75
 8008fd0:	d017      	beq.n	8009002 <_printf_i+0xb2>
 8008fd2:	2978      	cmp	r1, #120	; 0x78
 8008fd4:	d1d4      	bne.n	8008f80 <_printf_i+0x30>
 8008fd6:	2378      	movs	r3, #120	; 0x78
 8008fd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fdc:	4864      	ldr	r0, [pc, #400]	; (8009170 <_printf_i+0x220>)
 8008fde:	e055      	b.n	800908c <_printf_i+0x13c>
 8008fe0:	6813      	ldr	r3, [r2, #0]
 8008fe2:	1d19      	adds	r1, r3, #4
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6011      	str	r1, [r2, #0]
 8008fe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e08c      	b.n	800910e <_printf_i+0x1be>
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6011      	str	r1, [r2, #0]
 8008ff8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ffc:	bf18      	it	ne
 8008ffe:	b21b      	sxthne	r3, r3
 8009000:	e7cf      	b.n	8008fa2 <_printf_i+0x52>
 8009002:	6813      	ldr	r3, [r2, #0]
 8009004:	6825      	ldr	r5, [r4, #0]
 8009006:	1d18      	adds	r0, r3, #4
 8009008:	6010      	str	r0, [r2, #0]
 800900a:	0628      	lsls	r0, r5, #24
 800900c:	d501      	bpl.n	8009012 <_printf_i+0xc2>
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	e002      	b.n	8009018 <_printf_i+0xc8>
 8009012:	0668      	lsls	r0, r5, #25
 8009014:	d5fb      	bpl.n	800900e <_printf_i+0xbe>
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	4854      	ldr	r0, [pc, #336]	; (800916c <_printf_i+0x21c>)
 800901a:	296f      	cmp	r1, #111	; 0x6f
 800901c:	bf14      	ite	ne
 800901e:	220a      	movne	r2, #10
 8009020:	2208      	moveq	r2, #8
 8009022:	2100      	movs	r1, #0
 8009024:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009028:	6865      	ldr	r5, [r4, #4]
 800902a:	60a5      	str	r5, [r4, #8]
 800902c:	2d00      	cmp	r5, #0
 800902e:	f2c0 8095 	blt.w	800915c <_printf_i+0x20c>
 8009032:	6821      	ldr	r1, [r4, #0]
 8009034:	f021 0104 	bic.w	r1, r1, #4
 8009038:	6021      	str	r1, [r4, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d13d      	bne.n	80090ba <_printf_i+0x16a>
 800903e:	2d00      	cmp	r5, #0
 8009040:	f040 808e 	bne.w	8009160 <_printf_i+0x210>
 8009044:	4665      	mov	r5, ip
 8009046:	2a08      	cmp	r2, #8
 8009048:	d10b      	bne.n	8009062 <_printf_i+0x112>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	07db      	lsls	r3, r3, #31
 800904e:	d508      	bpl.n	8009062 <_printf_i+0x112>
 8009050:	6923      	ldr	r3, [r4, #16]
 8009052:	6862      	ldr	r2, [r4, #4]
 8009054:	429a      	cmp	r2, r3
 8009056:	bfde      	ittt	le
 8009058:	2330      	movle	r3, #48	; 0x30
 800905a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800905e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009062:	ebac 0305 	sub.w	r3, ip, r5
 8009066:	6123      	str	r3, [r4, #16]
 8009068:	f8cd 8000 	str.w	r8, [sp]
 800906c:	463b      	mov	r3, r7
 800906e:	aa03      	add	r2, sp, #12
 8009070:	4621      	mov	r1, r4
 8009072:	4630      	mov	r0, r6
 8009074:	f7ff fef6 	bl	8008e64 <_printf_common>
 8009078:	3001      	adds	r0, #1
 800907a:	d14d      	bne.n	8009118 <_printf_i+0x1c8>
 800907c:	f04f 30ff 	mov.w	r0, #4294967295
 8009080:	b005      	add	sp, #20
 8009082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009086:	4839      	ldr	r0, [pc, #228]	; (800916c <_printf_i+0x21c>)
 8009088:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800908c:	6813      	ldr	r3, [r2, #0]
 800908e:	6821      	ldr	r1, [r4, #0]
 8009090:	1d1d      	adds	r5, r3, #4
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6015      	str	r5, [r2, #0]
 8009096:	060a      	lsls	r2, r1, #24
 8009098:	d50b      	bpl.n	80090b2 <_printf_i+0x162>
 800909a:	07ca      	lsls	r2, r1, #31
 800909c:	bf44      	itt	mi
 800909e:	f041 0120 	orrmi.w	r1, r1, #32
 80090a2:	6021      	strmi	r1, [r4, #0]
 80090a4:	b91b      	cbnz	r3, 80090ae <_printf_i+0x15e>
 80090a6:	6822      	ldr	r2, [r4, #0]
 80090a8:	f022 0220 	bic.w	r2, r2, #32
 80090ac:	6022      	str	r2, [r4, #0]
 80090ae:	2210      	movs	r2, #16
 80090b0:	e7b7      	b.n	8009022 <_printf_i+0xd2>
 80090b2:	064d      	lsls	r5, r1, #25
 80090b4:	bf48      	it	mi
 80090b6:	b29b      	uxthmi	r3, r3
 80090b8:	e7ef      	b.n	800909a <_printf_i+0x14a>
 80090ba:	4665      	mov	r5, ip
 80090bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80090c0:	fb02 3311 	mls	r3, r2, r1, r3
 80090c4:	5cc3      	ldrb	r3, [r0, r3]
 80090c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80090ca:	460b      	mov	r3, r1
 80090cc:	2900      	cmp	r1, #0
 80090ce:	d1f5      	bne.n	80090bc <_printf_i+0x16c>
 80090d0:	e7b9      	b.n	8009046 <_printf_i+0xf6>
 80090d2:	6813      	ldr	r3, [r2, #0]
 80090d4:	6825      	ldr	r5, [r4, #0]
 80090d6:	6961      	ldr	r1, [r4, #20]
 80090d8:	1d18      	adds	r0, r3, #4
 80090da:	6010      	str	r0, [r2, #0]
 80090dc:	0628      	lsls	r0, r5, #24
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	d501      	bpl.n	80090e6 <_printf_i+0x196>
 80090e2:	6019      	str	r1, [r3, #0]
 80090e4:	e002      	b.n	80090ec <_printf_i+0x19c>
 80090e6:	066a      	lsls	r2, r5, #25
 80090e8:	d5fb      	bpl.n	80090e2 <_printf_i+0x192>
 80090ea:	8019      	strh	r1, [r3, #0]
 80090ec:	2300      	movs	r3, #0
 80090ee:	6123      	str	r3, [r4, #16]
 80090f0:	4665      	mov	r5, ip
 80090f2:	e7b9      	b.n	8009068 <_printf_i+0x118>
 80090f4:	6813      	ldr	r3, [r2, #0]
 80090f6:	1d19      	adds	r1, r3, #4
 80090f8:	6011      	str	r1, [r2, #0]
 80090fa:	681d      	ldr	r5, [r3, #0]
 80090fc:	6862      	ldr	r2, [r4, #4]
 80090fe:	2100      	movs	r1, #0
 8009100:	4628      	mov	r0, r5
 8009102:	f7f7 f88d 	bl	8000220 <memchr>
 8009106:	b108      	cbz	r0, 800910c <_printf_i+0x1bc>
 8009108:	1b40      	subs	r0, r0, r5
 800910a:	6060      	str	r0, [r4, #4]
 800910c:	6863      	ldr	r3, [r4, #4]
 800910e:	6123      	str	r3, [r4, #16]
 8009110:	2300      	movs	r3, #0
 8009112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009116:	e7a7      	b.n	8009068 <_printf_i+0x118>
 8009118:	6923      	ldr	r3, [r4, #16]
 800911a:	462a      	mov	r2, r5
 800911c:	4639      	mov	r1, r7
 800911e:	4630      	mov	r0, r6
 8009120:	47c0      	blx	r8
 8009122:	3001      	adds	r0, #1
 8009124:	d0aa      	beq.n	800907c <_printf_i+0x12c>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	079b      	lsls	r3, r3, #30
 800912a:	d413      	bmi.n	8009154 <_printf_i+0x204>
 800912c:	68e0      	ldr	r0, [r4, #12]
 800912e:	9b03      	ldr	r3, [sp, #12]
 8009130:	4298      	cmp	r0, r3
 8009132:	bfb8      	it	lt
 8009134:	4618      	movlt	r0, r3
 8009136:	e7a3      	b.n	8009080 <_printf_i+0x130>
 8009138:	2301      	movs	r3, #1
 800913a:	464a      	mov	r2, r9
 800913c:	4639      	mov	r1, r7
 800913e:	4630      	mov	r0, r6
 8009140:	47c0      	blx	r8
 8009142:	3001      	adds	r0, #1
 8009144:	d09a      	beq.n	800907c <_printf_i+0x12c>
 8009146:	3501      	adds	r5, #1
 8009148:	68e3      	ldr	r3, [r4, #12]
 800914a:	9a03      	ldr	r2, [sp, #12]
 800914c:	1a9b      	subs	r3, r3, r2
 800914e:	42ab      	cmp	r3, r5
 8009150:	dcf2      	bgt.n	8009138 <_printf_i+0x1e8>
 8009152:	e7eb      	b.n	800912c <_printf_i+0x1dc>
 8009154:	2500      	movs	r5, #0
 8009156:	f104 0919 	add.w	r9, r4, #25
 800915a:	e7f5      	b.n	8009148 <_printf_i+0x1f8>
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1ac      	bne.n	80090ba <_printf_i+0x16a>
 8009160:	7803      	ldrb	r3, [r0, #0]
 8009162:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009166:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800916a:	e76c      	b.n	8009046 <_printf_i+0xf6>
 800916c:	0800ab9d 	.word	0x0800ab9d
 8009170:	0800abae 	.word	0x0800abae

08009174 <_scanf_chars>:
 8009174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009178:	4615      	mov	r5, r2
 800917a:	688a      	ldr	r2, [r1, #8]
 800917c:	4680      	mov	r8, r0
 800917e:	460c      	mov	r4, r1
 8009180:	b932      	cbnz	r2, 8009190 <_scanf_chars+0x1c>
 8009182:	698a      	ldr	r2, [r1, #24]
 8009184:	2a00      	cmp	r2, #0
 8009186:	bf14      	ite	ne
 8009188:	f04f 32ff 	movne.w	r2, #4294967295
 800918c:	2201      	moveq	r2, #1
 800918e:	608a      	str	r2, [r1, #8]
 8009190:	6822      	ldr	r2, [r4, #0]
 8009192:	06d1      	lsls	r1, r2, #27
 8009194:	bf5f      	itttt	pl
 8009196:	681a      	ldrpl	r2, [r3, #0]
 8009198:	1d11      	addpl	r1, r2, #4
 800919a:	6019      	strpl	r1, [r3, #0]
 800919c:	6817      	ldrpl	r7, [r2, #0]
 800919e:	2600      	movs	r6, #0
 80091a0:	69a3      	ldr	r3, [r4, #24]
 80091a2:	b1db      	cbz	r3, 80091dc <_scanf_chars+0x68>
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d107      	bne.n	80091b8 <_scanf_chars+0x44>
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	6962      	ldr	r2, [r4, #20]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	5cd3      	ldrb	r3, [r2, r3]
 80091b0:	b9a3      	cbnz	r3, 80091dc <_scanf_chars+0x68>
 80091b2:	2e00      	cmp	r6, #0
 80091b4:	d132      	bne.n	800921c <_scanf_chars+0xa8>
 80091b6:	e006      	b.n	80091c6 <_scanf_chars+0x52>
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d007      	beq.n	80091cc <_scanf_chars+0x58>
 80091bc:	2e00      	cmp	r6, #0
 80091be:	d12d      	bne.n	800921c <_scanf_chars+0xa8>
 80091c0:	69a3      	ldr	r3, [r4, #24]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d12a      	bne.n	800921c <_scanf_chars+0xa8>
 80091c6:	2001      	movs	r0, #1
 80091c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091cc:	f000 fab4 	bl	8009738 <__locale_ctype_ptr>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	4418      	add	r0, r3
 80091d6:	7843      	ldrb	r3, [r0, #1]
 80091d8:	071b      	lsls	r3, r3, #28
 80091da:	d4ef      	bmi.n	80091bc <_scanf_chars+0x48>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	06da      	lsls	r2, r3, #27
 80091e0:	bf5e      	ittt	pl
 80091e2:	682b      	ldrpl	r3, [r5, #0]
 80091e4:	781b      	ldrbpl	r3, [r3, #0]
 80091e6:	703b      	strbpl	r3, [r7, #0]
 80091e8:	682a      	ldr	r2, [r5, #0]
 80091ea:	686b      	ldr	r3, [r5, #4]
 80091ec:	f102 0201 	add.w	r2, r2, #1
 80091f0:	602a      	str	r2, [r5, #0]
 80091f2:	68a2      	ldr	r2, [r4, #8]
 80091f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80091f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80091fc:	606b      	str	r3, [r5, #4]
 80091fe:	f106 0601 	add.w	r6, r6, #1
 8009202:	bf58      	it	pl
 8009204:	3701      	addpl	r7, #1
 8009206:	60a2      	str	r2, [r4, #8]
 8009208:	b142      	cbz	r2, 800921c <_scanf_chars+0xa8>
 800920a:	2b00      	cmp	r3, #0
 800920c:	dcc8      	bgt.n	80091a0 <_scanf_chars+0x2c>
 800920e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009212:	4629      	mov	r1, r5
 8009214:	4640      	mov	r0, r8
 8009216:	4798      	blx	r3
 8009218:	2800      	cmp	r0, #0
 800921a:	d0c1      	beq.n	80091a0 <_scanf_chars+0x2c>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	f013 0310 	ands.w	r3, r3, #16
 8009222:	d105      	bne.n	8009230 <_scanf_chars+0xbc>
 8009224:	68e2      	ldr	r2, [r4, #12]
 8009226:	3201      	adds	r2, #1
 8009228:	60e2      	str	r2, [r4, #12]
 800922a:	69a2      	ldr	r2, [r4, #24]
 800922c:	b102      	cbz	r2, 8009230 <_scanf_chars+0xbc>
 800922e:	703b      	strb	r3, [r7, #0]
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	441e      	add	r6, r3
 8009234:	6126      	str	r6, [r4, #16]
 8009236:	2000      	movs	r0, #0
 8009238:	e7c6      	b.n	80091c8 <_scanf_chars+0x54>
	...

0800923c <_scanf_i>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	469a      	mov	sl, r3
 8009242:	4b74      	ldr	r3, [pc, #464]	; (8009414 <_scanf_i+0x1d8>)
 8009244:	460c      	mov	r4, r1
 8009246:	4683      	mov	fp, r0
 8009248:	4616      	mov	r6, r2
 800924a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800924e:	b087      	sub	sp, #28
 8009250:	ab03      	add	r3, sp, #12
 8009252:	68a7      	ldr	r7, [r4, #8]
 8009254:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009258:	4b6f      	ldr	r3, [pc, #444]	; (8009418 <_scanf_i+0x1dc>)
 800925a:	69a1      	ldr	r1, [r4, #24]
 800925c:	4a6f      	ldr	r2, [pc, #444]	; (800941c <_scanf_i+0x1e0>)
 800925e:	2903      	cmp	r1, #3
 8009260:	bf08      	it	eq
 8009262:	461a      	moveq	r2, r3
 8009264:	1e7b      	subs	r3, r7, #1
 8009266:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800926a:	bf84      	itt	hi
 800926c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009270:	60a3      	strhi	r3, [r4, #8]
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	9200      	str	r2, [sp, #0]
 8009276:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800927a:	bf88      	it	hi
 800927c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009280:	f104 091c 	add.w	r9, r4, #28
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bf8c      	ite	hi
 8009288:	197f      	addhi	r7, r7, r5
 800928a:	2700      	movls	r7, #0
 800928c:	464b      	mov	r3, r9
 800928e:	f04f 0800 	mov.w	r8, #0
 8009292:	9301      	str	r3, [sp, #4]
 8009294:	6831      	ldr	r1, [r6, #0]
 8009296:	ab03      	add	r3, sp, #12
 8009298:	2202      	movs	r2, #2
 800929a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800929e:	7809      	ldrb	r1, [r1, #0]
 80092a0:	f7f6 ffbe 	bl	8000220 <memchr>
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	b330      	cbz	r0, 80092f6 <_scanf_i+0xba>
 80092a8:	f1b8 0f01 	cmp.w	r8, #1
 80092ac:	d15a      	bne.n	8009364 <_scanf_i+0x128>
 80092ae:	6862      	ldr	r2, [r4, #4]
 80092b0:	b92a      	cbnz	r2, 80092be <_scanf_i+0x82>
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	2108      	movs	r1, #8
 80092b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092ba:	6061      	str	r1, [r4, #4]
 80092bc:	6022      	str	r2, [r4, #0]
 80092be:	6822      	ldr	r2, [r4, #0]
 80092c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80092c4:	6022      	str	r2, [r4, #0]
 80092c6:	68a2      	ldr	r2, [r4, #8]
 80092c8:	1e51      	subs	r1, r2, #1
 80092ca:	60a1      	str	r1, [r4, #8]
 80092cc:	b19a      	cbz	r2, 80092f6 <_scanf_i+0xba>
 80092ce:	6832      	ldr	r2, [r6, #0]
 80092d0:	1c51      	adds	r1, r2, #1
 80092d2:	6031      	str	r1, [r6, #0]
 80092d4:	7812      	ldrb	r2, [r2, #0]
 80092d6:	701a      	strb	r2, [r3, #0]
 80092d8:	1c5d      	adds	r5, r3, #1
 80092da:	6873      	ldr	r3, [r6, #4]
 80092dc:	3b01      	subs	r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	6073      	str	r3, [r6, #4]
 80092e2:	dc07      	bgt.n	80092f4 <_scanf_i+0xb8>
 80092e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80092e8:	4631      	mov	r1, r6
 80092ea:	4658      	mov	r0, fp
 80092ec:	4798      	blx	r3
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f040 8086 	bne.w	8009400 <_scanf_i+0x1c4>
 80092f4:	462b      	mov	r3, r5
 80092f6:	f108 0801 	add.w	r8, r8, #1
 80092fa:	f1b8 0f03 	cmp.w	r8, #3
 80092fe:	d1c8      	bne.n	8009292 <_scanf_i+0x56>
 8009300:	6862      	ldr	r2, [r4, #4]
 8009302:	b90a      	cbnz	r2, 8009308 <_scanf_i+0xcc>
 8009304:	220a      	movs	r2, #10
 8009306:	6062      	str	r2, [r4, #4]
 8009308:	6862      	ldr	r2, [r4, #4]
 800930a:	4945      	ldr	r1, [pc, #276]	; (8009420 <_scanf_i+0x1e4>)
 800930c:	6960      	ldr	r0, [r4, #20]
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	1a89      	subs	r1, r1, r2
 8009312:	f000 f887 	bl	8009424 <__sccl>
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	f04f 0800 	mov.w	r8, #0
 800931c:	461d      	mov	r5, r3
 800931e:	68a3      	ldr	r3, [r4, #8]
 8009320:	6822      	ldr	r2, [r4, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d03a      	beq.n	800939c <_scanf_i+0x160>
 8009326:	6831      	ldr	r1, [r6, #0]
 8009328:	6960      	ldr	r0, [r4, #20]
 800932a:	f891 c000 	ldrb.w	ip, [r1]
 800932e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009332:	2800      	cmp	r0, #0
 8009334:	d032      	beq.n	800939c <_scanf_i+0x160>
 8009336:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800933a:	d121      	bne.n	8009380 <_scanf_i+0x144>
 800933c:	0510      	lsls	r0, r2, #20
 800933e:	d51f      	bpl.n	8009380 <_scanf_i+0x144>
 8009340:	f108 0801 	add.w	r8, r8, #1
 8009344:	b117      	cbz	r7, 800934c <_scanf_i+0x110>
 8009346:	3301      	adds	r3, #1
 8009348:	3f01      	subs	r7, #1
 800934a:	60a3      	str	r3, [r4, #8]
 800934c:	6873      	ldr	r3, [r6, #4]
 800934e:	3b01      	subs	r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	6073      	str	r3, [r6, #4]
 8009354:	dd1b      	ble.n	800938e <_scanf_i+0x152>
 8009356:	6833      	ldr	r3, [r6, #0]
 8009358:	3301      	adds	r3, #1
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	68a3      	ldr	r3, [r4, #8]
 800935e:	3b01      	subs	r3, #1
 8009360:	60a3      	str	r3, [r4, #8]
 8009362:	e7dc      	b.n	800931e <_scanf_i+0xe2>
 8009364:	f1b8 0f02 	cmp.w	r8, #2
 8009368:	d1ad      	bne.n	80092c6 <_scanf_i+0x8a>
 800936a:	6822      	ldr	r2, [r4, #0]
 800936c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009370:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009374:	d1bf      	bne.n	80092f6 <_scanf_i+0xba>
 8009376:	2110      	movs	r1, #16
 8009378:	6061      	str	r1, [r4, #4]
 800937a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800937e:	e7a1      	b.n	80092c4 <_scanf_i+0x88>
 8009380:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009384:	6022      	str	r2, [r4, #0]
 8009386:	780b      	ldrb	r3, [r1, #0]
 8009388:	702b      	strb	r3, [r5, #0]
 800938a:	3501      	adds	r5, #1
 800938c:	e7de      	b.n	800934c <_scanf_i+0x110>
 800938e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009392:	4631      	mov	r1, r6
 8009394:	4658      	mov	r0, fp
 8009396:	4798      	blx	r3
 8009398:	2800      	cmp	r0, #0
 800939a:	d0df      	beq.n	800935c <_scanf_i+0x120>
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	05d9      	lsls	r1, r3, #23
 80093a0:	d50c      	bpl.n	80093bc <_scanf_i+0x180>
 80093a2:	454d      	cmp	r5, r9
 80093a4:	d908      	bls.n	80093b8 <_scanf_i+0x17c>
 80093a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80093aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093ae:	4632      	mov	r2, r6
 80093b0:	4658      	mov	r0, fp
 80093b2:	4798      	blx	r3
 80093b4:	1e6f      	subs	r7, r5, #1
 80093b6:	463d      	mov	r5, r7
 80093b8:	454d      	cmp	r5, r9
 80093ba:	d029      	beq.n	8009410 <_scanf_i+0x1d4>
 80093bc:	6822      	ldr	r2, [r4, #0]
 80093be:	f012 0210 	ands.w	r2, r2, #16
 80093c2:	d113      	bne.n	80093ec <_scanf_i+0x1b0>
 80093c4:	702a      	strb	r2, [r5, #0]
 80093c6:	6863      	ldr	r3, [r4, #4]
 80093c8:	9e00      	ldr	r6, [sp, #0]
 80093ca:	4649      	mov	r1, r9
 80093cc:	4658      	mov	r0, fp
 80093ce:	47b0      	blx	r6
 80093d0:	f8da 3000 	ldr.w	r3, [sl]
 80093d4:	6821      	ldr	r1, [r4, #0]
 80093d6:	1d1a      	adds	r2, r3, #4
 80093d8:	f8ca 2000 	str.w	r2, [sl]
 80093dc:	f011 0f20 	tst.w	r1, #32
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	d010      	beq.n	8009406 <_scanf_i+0x1ca>
 80093e4:	6018      	str	r0, [r3, #0]
 80093e6:	68e3      	ldr	r3, [r4, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60e3      	str	r3, [r4, #12]
 80093ec:	eba5 0509 	sub.w	r5, r5, r9
 80093f0:	44a8      	add	r8, r5
 80093f2:	6925      	ldr	r5, [r4, #16]
 80093f4:	4445      	add	r5, r8
 80093f6:	6125      	str	r5, [r4, #16]
 80093f8:	2000      	movs	r0, #0
 80093fa:	b007      	add	sp, #28
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	f04f 0800 	mov.w	r8, #0
 8009404:	e7ca      	b.n	800939c <_scanf_i+0x160>
 8009406:	07ca      	lsls	r2, r1, #31
 8009408:	bf4c      	ite	mi
 800940a:	8018      	strhmi	r0, [r3, #0]
 800940c:	6018      	strpl	r0, [r3, #0]
 800940e:	e7ea      	b.n	80093e6 <_scanf_i+0x1aa>
 8009410:	2001      	movs	r0, #1
 8009412:	e7f2      	b.n	80093fa <_scanf_i+0x1be>
 8009414:	0800ab5c 	.word	0x0800ab5c
 8009418:	08009581 	.word	0x08009581
 800941c:	08009699 	.word	0x08009699
 8009420:	0800abcf 	.word	0x0800abcf

08009424 <__sccl>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	780b      	ldrb	r3, [r1, #0]
 8009428:	2b5e      	cmp	r3, #94	; 0x5e
 800942a:	bf13      	iteet	ne
 800942c:	1c4a      	addne	r2, r1, #1
 800942e:	1c8a      	addeq	r2, r1, #2
 8009430:	784b      	ldrbeq	r3, [r1, #1]
 8009432:	2100      	movne	r1, #0
 8009434:	bf08      	it	eq
 8009436:	2101      	moveq	r1, #1
 8009438:	1e44      	subs	r4, r0, #1
 800943a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800943e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009442:	42ac      	cmp	r4, r5
 8009444:	d1fb      	bne.n	800943e <__sccl+0x1a>
 8009446:	b913      	cbnz	r3, 800944e <__sccl+0x2a>
 8009448:	3a01      	subs	r2, #1
 800944a:	4610      	mov	r0, r2
 800944c:	bd70      	pop	{r4, r5, r6, pc}
 800944e:	f081 0401 	eor.w	r4, r1, #1
 8009452:	54c4      	strb	r4, [r0, r3]
 8009454:	1c51      	adds	r1, r2, #1
 8009456:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800945a:	2d2d      	cmp	r5, #45	; 0x2d
 800945c:	f101 36ff 	add.w	r6, r1, #4294967295
 8009460:	460a      	mov	r2, r1
 8009462:	d006      	beq.n	8009472 <__sccl+0x4e>
 8009464:	2d5d      	cmp	r5, #93	; 0x5d
 8009466:	d0f0      	beq.n	800944a <__sccl+0x26>
 8009468:	b90d      	cbnz	r5, 800946e <__sccl+0x4a>
 800946a:	4632      	mov	r2, r6
 800946c:	e7ed      	b.n	800944a <__sccl+0x26>
 800946e:	462b      	mov	r3, r5
 8009470:	e7ef      	b.n	8009452 <__sccl+0x2e>
 8009472:	780e      	ldrb	r6, [r1, #0]
 8009474:	2e5d      	cmp	r6, #93	; 0x5d
 8009476:	d0fa      	beq.n	800946e <__sccl+0x4a>
 8009478:	42b3      	cmp	r3, r6
 800947a:	dcf8      	bgt.n	800946e <__sccl+0x4a>
 800947c:	3301      	adds	r3, #1
 800947e:	429e      	cmp	r6, r3
 8009480:	54c4      	strb	r4, [r0, r3]
 8009482:	dcfb      	bgt.n	800947c <__sccl+0x58>
 8009484:	3102      	adds	r1, #2
 8009486:	e7e6      	b.n	8009456 <__sccl+0x32>

08009488 <_strtol_l.isra.0>:
 8009488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	4680      	mov	r8, r0
 800948e:	4689      	mov	r9, r1
 8009490:	4692      	mov	sl, r2
 8009492:	461e      	mov	r6, r3
 8009494:	460f      	mov	r7, r1
 8009496:	463d      	mov	r5, r7
 8009498:	9808      	ldr	r0, [sp, #32]
 800949a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800949e:	f000 f947 	bl	8009730 <__locale_ctype_ptr_l>
 80094a2:	4420      	add	r0, r4
 80094a4:	7843      	ldrb	r3, [r0, #1]
 80094a6:	f013 0308 	ands.w	r3, r3, #8
 80094aa:	d132      	bne.n	8009512 <_strtol_l.isra.0+0x8a>
 80094ac:	2c2d      	cmp	r4, #45	; 0x2d
 80094ae:	d132      	bne.n	8009516 <_strtol_l.isra.0+0x8e>
 80094b0:	787c      	ldrb	r4, [r7, #1]
 80094b2:	1cbd      	adds	r5, r7, #2
 80094b4:	2201      	movs	r2, #1
 80094b6:	2e00      	cmp	r6, #0
 80094b8:	d05d      	beq.n	8009576 <_strtol_l.isra.0+0xee>
 80094ba:	2e10      	cmp	r6, #16
 80094bc:	d109      	bne.n	80094d2 <_strtol_l.isra.0+0x4a>
 80094be:	2c30      	cmp	r4, #48	; 0x30
 80094c0:	d107      	bne.n	80094d2 <_strtol_l.isra.0+0x4a>
 80094c2:	782b      	ldrb	r3, [r5, #0]
 80094c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094c8:	2b58      	cmp	r3, #88	; 0x58
 80094ca:	d14f      	bne.n	800956c <_strtol_l.isra.0+0xe4>
 80094cc:	786c      	ldrb	r4, [r5, #1]
 80094ce:	2610      	movs	r6, #16
 80094d0:	3502      	adds	r5, #2
 80094d2:	2a00      	cmp	r2, #0
 80094d4:	bf14      	ite	ne
 80094d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80094da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80094de:	2700      	movs	r7, #0
 80094e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80094e4:	4638      	mov	r0, r7
 80094e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80094ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80094ee:	2b09      	cmp	r3, #9
 80094f0:	d817      	bhi.n	8009522 <_strtol_l.isra.0+0x9a>
 80094f2:	461c      	mov	r4, r3
 80094f4:	42a6      	cmp	r6, r4
 80094f6:	dd23      	ble.n	8009540 <_strtol_l.isra.0+0xb8>
 80094f8:	1c7b      	adds	r3, r7, #1
 80094fa:	d007      	beq.n	800950c <_strtol_l.isra.0+0x84>
 80094fc:	4584      	cmp	ip, r0
 80094fe:	d31c      	bcc.n	800953a <_strtol_l.isra.0+0xb2>
 8009500:	d101      	bne.n	8009506 <_strtol_l.isra.0+0x7e>
 8009502:	45a6      	cmp	lr, r4
 8009504:	db19      	blt.n	800953a <_strtol_l.isra.0+0xb2>
 8009506:	fb00 4006 	mla	r0, r0, r6, r4
 800950a:	2701      	movs	r7, #1
 800950c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009510:	e7eb      	b.n	80094ea <_strtol_l.isra.0+0x62>
 8009512:	462f      	mov	r7, r5
 8009514:	e7bf      	b.n	8009496 <_strtol_l.isra.0+0xe>
 8009516:	2c2b      	cmp	r4, #43	; 0x2b
 8009518:	bf04      	itt	eq
 800951a:	1cbd      	addeq	r5, r7, #2
 800951c:	787c      	ldrbeq	r4, [r7, #1]
 800951e:	461a      	mov	r2, r3
 8009520:	e7c9      	b.n	80094b6 <_strtol_l.isra.0+0x2e>
 8009522:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009526:	2b19      	cmp	r3, #25
 8009528:	d801      	bhi.n	800952e <_strtol_l.isra.0+0xa6>
 800952a:	3c37      	subs	r4, #55	; 0x37
 800952c:	e7e2      	b.n	80094f4 <_strtol_l.isra.0+0x6c>
 800952e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009532:	2b19      	cmp	r3, #25
 8009534:	d804      	bhi.n	8009540 <_strtol_l.isra.0+0xb8>
 8009536:	3c57      	subs	r4, #87	; 0x57
 8009538:	e7dc      	b.n	80094f4 <_strtol_l.isra.0+0x6c>
 800953a:	f04f 37ff 	mov.w	r7, #4294967295
 800953e:	e7e5      	b.n	800950c <_strtol_l.isra.0+0x84>
 8009540:	1c7b      	adds	r3, r7, #1
 8009542:	d108      	bne.n	8009556 <_strtol_l.isra.0+0xce>
 8009544:	2322      	movs	r3, #34	; 0x22
 8009546:	f8c8 3000 	str.w	r3, [r8]
 800954a:	4608      	mov	r0, r1
 800954c:	f1ba 0f00 	cmp.w	sl, #0
 8009550:	d107      	bne.n	8009562 <_strtol_l.isra.0+0xda>
 8009552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009556:	b102      	cbz	r2, 800955a <_strtol_l.isra.0+0xd2>
 8009558:	4240      	negs	r0, r0
 800955a:	f1ba 0f00 	cmp.w	sl, #0
 800955e:	d0f8      	beq.n	8009552 <_strtol_l.isra.0+0xca>
 8009560:	b10f      	cbz	r7, 8009566 <_strtol_l.isra.0+0xde>
 8009562:	f105 39ff 	add.w	r9, r5, #4294967295
 8009566:	f8ca 9000 	str.w	r9, [sl]
 800956a:	e7f2      	b.n	8009552 <_strtol_l.isra.0+0xca>
 800956c:	2430      	movs	r4, #48	; 0x30
 800956e:	2e00      	cmp	r6, #0
 8009570:	d1af      	bne.n	80094d2 <_strtol_l.isra.0+0x4a>
 8009572:	2608      	movs	r6, #8
 8009574:	e7ad      	b.n	80094d2 <_strtol_l.isra.0+0x4a>
 8009576:	2c30      	cmp	r4, #48	; 0x30
 8009578:	d0a3      	beq.n	80094c2 <_strtol_l.isra.0+0x3a>
 800957a:	260a      	movs	r6, #10
 800957c:	e7a9      	b.n	80094d2 <_strtol_l.isra.0+0x4a>
	...

08009580 <_strtol_r>:
 8009580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009582:	4c06      	ldr	r4, [pc, #24]	; (800959c <_strtol_r+0x1c>)
 8009584:	4d06      	ldr	r5, [pc, #24]	; (80095a0 <_strtol_r+0x20>)
 8009586:	6824      	ldr	r4, [r4, #0]
 8009588:	6a24      	ldr	r4, [r4, #32]
 800958a:	2c00      	cmp	r4, #0
 800958c:	bf08      	it	eq
 800958e:	462c      	moveq	r4, r5
 8009590:	9400      	str	r4, [sp, #0]
 8009592:	f7ff ff79 	bl	8009488 <_strtol_l.isra.0>
 8009596:	b003      	add	sp, #12
 8009598:	bd30      	pop	{r4, r5, pc}
 800959a:	bf00      	nop
 800959c:	200000f8 	.word	0x200000f8
 80095a0:	2000015c 	.word	0x2000015c

080095a4 <_strtoul_l.isra.0>:
 80095a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a8:	4680      	mov	r8, r0
 80095aa:	4689      	mov	r9, r1
 80095ac:	4692      	mov	sl, r2
 80095ae:	461e      	mov	r6, r3
 80095b0:	460f      	mov	r7, r1
 80095b2:	463d      	mov	r5, r7
 80095b4:	9808      	ldr	r0, [sp, #32]
 80095b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095ba:	f000 f8b9 	bl	8009730 <__locale_ctype_ptr_l>
 80095be:	4420      	add	r0, r4
 80095c0:	7843      	ldrb	r3, [r0, #1]
 80095c2:	f013 0308 	ands.w	r3, r3, #8
 80095c6:	d130      	bne.n	800962a <_strtoul_l.isra.0+0x86>
 80095c8:	2c2d      	cmp	r4, #45	; 0x2d
 80095ca:	d130      	bne.n	800962e <_strtoul_l.isra.0+0x8a>
 80095cc:	787c      	ldrb	r4, [r7, #1]
 80095ce:	1cbd      	adds	r5, r7, #2
 80095d0:	2101      	movs	r1, #1
 80095d2:	2e00      	cmp	r6, #0
 80095d4:	d05c      	beq.n	8009690 <_strtoul_l.isra.0+0xec>
 80095d6:	2e10      	cmp	r6, #16
 80095d8:	d109      	bne.n	80095ee <_strtoul_l.isra.0+0x4a>
 80095da:	2c30      	cmp	r4, #48	; 0x30
 80095dc:	d107      	bne.n	80095ee <_strtoul_l.isra.0+0x4a>
 80095de:	782b      	ldrb	r3, [r5, #0]
 80095e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095e4:	2b58      	cmp	r3, #88	; 0x58
 80095e6:	d14e      	bne.n	8009686 <_strtoul_l.isra.0+0xe2>
 80095e8:	786c      	ldrb	r4, [r5, #1]
 80095ea:	2610      	movs	r6, #16
 80095ec:	3502      	adds	r5, #2
 80095ee:	f04f 32ff 	mov.w	r2, #4294967295
 80095f2:	2300      	movs	r3, #0
 80095f4:	fbb2 f2f6 	udiv	r2, r2, r6
 80095f8:	fb06 fc02 	mul.w	ip, r6, r2
 80095fc:	ea6f 0c0c 	mvn.w	ip, ip
 8009600:	4618      	mov	r0, r3
 8009602:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009606:	2f09      	cmp	r7, #9
 8009608:	d817      	bhi.n	800963a <_strtoul_l.isra.0+0x96>
 800960a:	463c      	mov	r4, r7
 800960c:	42a6      	cmp	r6, r4
 800960e:	dd23      	ble.n	8009658 <_strtoul_l.isra.0+0xb4>
 8009610:	2b00      	cmp	r3, #0
 8009612:	db1e      	blt.n	8009652 <_strtoul_l.isra.0+0xae>
 8009614:	4282      	cmp	r2, r0
 8009616:	d31c      	bcc.n	8009652 <_strtoul_l.isra.0+0xae>
 8009618:	d101      	bne.n	800961e <_strtoul_l.isra.0+0x7a>
 800961a:	45a4      	cmp	ip, r4
 800961c:	db19      	blt.n	8009652 <_strtoul_l.isra.0+0xae>
 800961e:	fb00 4006 	mla	r0, r0, r6, r4
 8009622:	2301      	movs	r3, #1
 8009624:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009628:	e7eb      	b.n	8009602 <_strtoul_l.isra.0+0x5e>
 800962a:	462f      	mov	r7, r5
 800962c:	e7c1      	b.n	80095b2 <_strtoul_l.isra.0+0xe>
 800962e:	2c2b      	cmp	r4, #43	; 0x2b
 8009630:	bf04      	itt	eq
 8009632:	1cbd      	addeq	r5, r7, #2
 8009634:	787c      	ldrbeq	r4, [r7, #1]
 8009636:	4619      	mov	r1, r3
 8009638:	e7cb      	b.n	80095d2 <_strtoul_l.isra.0+0x2e>
 800963a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800963e:	2f19      	cmp	r7, #25
 8009640:	d801      	bhi.n	8009646 <_strtoul_l.isra.0+0xa2>
 8009642:	3c37      	subs	r4, #55	; 0x37
 8009644:	e7e2      	b.n	800960c <_strtoul_l.isra.0+0x68>
 8009646:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800964a:	2f19      	cmp	r7, #25
 800964c:	d804      	bhi.n	8009658 <_strtoul_l.isra.0+0xb4>
 800964e:	3c57      	subs	r4, #87	; 0x57
 8009650:	e7dc      	b.n	800960c <_strtoul_l.isra.0+0x68>
 8009652:	f04f 33ff 	mov.w	r3, #4294967295
 8009656:	e7e5      	b.n	8009624 <_strtoul_l.isra.0+0x80>
 8009658:	2b00      	cmp	r3, #0
 800965a:	da09      	bge.n	8009670 <_strtoul_l.isra.0+0xcc>
 800965c:	2322      	movs	r3, #34	; 0x22
 800965e:	f8c8 3000 	str.w	r3, [r8]
 8009662:	f04f 30ff 	mov.w	r0, #4294967295
 8009666:	f1ba 0f00 	cmp.w	sl, #0
 800966a:	d107      	bne.n	800967c <_strtoul_l.isra.0+0xd8>
 800966c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009670:	b101      	cbz	r1, 8009674 <_strtoul_l.isra.0+0xd0>
 8009672:	4240      	negs	r0, r0
 8009674:	f1ba 0f00 	cmp.w	sl, #0
 8009678:	d0f8      	beq.n	800966c <_strtoul_l.isra.0+0xc8>
 800967a:	b10b      	cbz	r3, 8009680 <_strtoul_l.isra.0+0xdc>
 800967c:	f105 39ff 	add.w	r9, r5, #4294967295
 8009680:	f8ca 9000 	str.w	r9, [sl]
 8009684:	e7f2      	b.n	800966c <_strtoul_l.isra.0+0xc8>
 8009686:	2430      	movs	r4, #48	; 0x30
 8009688:	2e00      	cmp	r6, #0
 800968a:	d1b0      	bne.n	80095ee <_strtoul_l.isra.0+0x4a>
 800968c:	2608      	movs	r6, #8
 800968e:	e7ae      	b.n	80095ee <_strtoul_l.isra.0+0x4a>
 8009690:	2c30      	cmp	r4, #48	; 0x30
 8009692:	d0a4      	beq.n	80095de <_strtoul_l.isra.0+0x3a>
 8009694:	260a      	movs	r6, #10
 8009696:	e7aa      	b.n	80095ee <_strtoul_l.isra.0+0x4a>

08009698 <_strtoul_r>:
 8009698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800969a:	4c06      	ldr	r4, [pc, #24]	; (80096b4 <_strtoul_r+0x1c>)
 800969c:	4d06      	ldr	r5, [pc, #24]	; (80096b8 <_strtoul_r+0x20>)
 800969e:	6824      	ldr	r4, [r4, #0]
 80096a0:	6a24      	ldr	r4, [r4, #32]
 80096a2:	2c00      	cmp	r4, #0
 80096a4:	bf08      	it	eq
 80096a6:	462c      	moveq	r4, r5
 80096a8:	9400      	str	r4, [sp, #0]
 80096aa:	f7ff ff7b 	bl	80095a4 <_strtoul_l.isra.0>
 80096ae:	b003      	add	sp, #12
 80096b0:	bd30      	pop	{r4, r5, pc}
 80096b2:	bf00      	nop
 80096b4:	200000f8 	.word	0x200000f8
 80096b8:	2000015c 	.word	0x2000015c

080096bc <__submore>:
 80096bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c0:	460c      	mov	r4, r1
 80096c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80096c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096c8:	4299      	cmp	r1, r3
 80096ca:	d11d      	bne.n	8009708 <__submore+0x4c>
 80096cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80096d0:	f000 f8c4 	bl	800985c <_malloc_r>
 80096d4:	b918      	cbnz	r0, 80096de <__submore+0x22>
 80096d6:	f04f 30ff 	mov.w	r0, #4294967295
 80096da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80096e4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80096e8:	6360      	str	r0, [r4, #52]	; 0x34
 80096ea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80096ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80096f2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80096f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80096fa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80096fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009702:	6020      	str	r0, [r4, #0]
 8009704:	2000      	movs	r0, #0
 8009706:	e7e8      	b.n	80096da <__submore+0x1e>
 8009708:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800970a:	0077      	lsls	r7, r6, #1
 800970c:	463a      	mov	r2, r7
 800970e:	f000 f8ff 	bl	8009910 <_realloc_r>
 8009712:	4605      	mov	r5, r0
 8009714:	2800      	cmp	r0, #0
 8009716:	d0de      	beq.n	80096d6 <__submore+0x1a>
 8009718:	eb00 0806 	add.w	r8, r0, r6
 800971c:	4601      	mov	r1, r0
 800971e:	4632      	mov	r2, r6
 8009720:	4640      	mov	r0, r8
 8009722:	f000 f829 	bl	8009778 <memcpy>
 8009726:	f8c4 8000 	str.w	r8, [r4]
 800972a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800972e:	e7e9      	b.n	8009704 <__submore+0x48>

08009730 <__locale_ctype_ptr_l>:
 8009730:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009734:	4770      	bx	lr
	...

08009738 <__locale_ctype_ptr>:
 8009738:	4b04      	ldr	r3, [pc, #16]	; (800974c <__locale_ctype_ptr+0x14>)
 800973a:	4a05      	ldr	r2, [pc, #20]	; (8009750 <__locale_ctype_ptr+0x18>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6a1b      	ldr	r3, [r3, #32]
 8009740:	2b00      	cmp	r3, #0
 8009742:	bf08      	it	eq
 8009744:	4613      	moveq	r3, r2
 8009746:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800974a:	4770      	bx	lr
 800974c:	200000f8 	.word	0x200000f8
 8009750:	2000015c 	.word	0x2000015c

08009754 <__ascii_mbtowc>:
 8009754:	b082      	sub	sp, #8
 8009756:	b901      	cbnz	r1, 800975a <__ascii_mbtowc+0x6>
 8009758:	a901      	add	r1, sp, #4
 800975a:	b142      	cbz	r2, 800976e <__ascii_mbtowc+0x1a>
 800975c:	b14b      	cbz	r3, 8009772 <__ascii_mbtowc+0x1e>
 800975e:	7813      	ldrb	r3, [r2, #0]
 8009760:	600b      	str	r3, [r1, #0]
 8009762:	7812      	ldrb	r2, [r2, #0]
 8009764:	1c10      	adds	r0, r2, #0
 8009766:	bf18      	it	ne
 8009768:	2001      	movne	r0, #1
 800976a:	b002      	add	sp, #8
 800976c:	4770      	bx	lr
 800976e:	4610      	mov	r0, r2
 8009770:	e7fb      	b.n	800976a <__ascii_mbtowc+0x16>
 8009772:	f06f 0001 	mvn.w	r0, #1
 8009776:	e7f8      	b.n	800976a <__ascii_mbtowc+0x16>

08009778 <memcpy>:
 8009778:	b510      	push	{r4, lr}
 800977a:	1e43      	subs	r3, r0, #1
 800977c:	440a      	add	r2, r1
 800977e:	4291      	cmp	r1, r2
 8009780:	d100      	bne.n	8009784 <memcpy+0xc>
 8009782:	bd10      	pop	{r4, pc}
 8009784:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009788:	f803 4f01 	strb.w	r4, [r3, #1]!
 800978c:	e7f7      	b.n	800977e <memcpy+0x6>

0800978e <memmove>:
 800978e:	4288      	cmp	r0, r1
 8009790:	b510      	push	{r4, lr}
 8009792:	eb01 0302 	add.w	r3, r1, r2
 8009796:	d807      	bhi.n	80097a8 <memmove+0x1a>
 8009798:	1e42      	subs	r2, r0, #1
 800979a:	4299      	cmp	r1, r3
 800979c:	d00a      	beq.n	80097b4 <memmove+0x26>
 800979e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80097a6:	e7f8      	b.n	800979a <memmove+0xc>
 80097a8:	4283      	cmp	r3, r0
 80097aa:	d9f5      	bls.n	8009798 <memmove+0xa>
 80097ac:	1881      	adds	r1, r0, r2
 80097ae:	1ad2      	subs	r2, r2, r3
 80097b0:	42d3      	cmn	r3, r2
 80097b2:	d100      	bne.n	80097b6 <memmove+0x28>
 80097b4:	bd10      	pop	{r4, pc}
 80097b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80097be:	e7f7      	b.n	80097b0 <memmove+0x22>

080097c0 <_free_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4605      	mov	r5, r0
 80097c4:	2900      	cmp	r1, #0
 80097c6:	d045      	beq.n	8009854 <_free_r+0x94>
 80097c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097cc:	1f0c      	subs	r4, r1, #4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	bfb8      	it	lt
 80097d2:	18e4      	addlt	r4, r4, r3
 80097d4:	f000 f8df 	bl	8009996 <__malloc_lock>
 80097d8:	4a1f      	ldr	r2, [pc, #124]	; (8009858 <_free_r+0x98>)
 80097da:	6813      	ldr	r3, [r2, #0]
 80097dc:	4610      	mov	r0, r2
 80097de:	b933      	cbnz	r3, 80097ee <_free_r+0x2e>
 80097e0:	6063      	str	r3, [r4, #4]
 80097e2:	6014      	str	r4, [r2, #0]
 80097e4:	4628      	mov	r0, r5
 80097e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ea:	f000 b8d5 	b.w	8009998 <__malloc_unlock>
 80097ee:	42a3      	cmp	r3, r4
 80097f0:	d90c      	bls.n	800980c <_free_r+0x4c>
 80097f2:	6821      	ldr	r1, [r4, #0]
 80097f4:	1862      	adds	r2, r4, r1
 80097f6:	4293      	cmp	r3, r2
 80097f8:	bf04      	itt	eq
 80097fa:	681a      	ldreq	r2, [r3, #0]
 80097fc:	685b      	ldreq	r3, [r3, #4]
 80097fe:	6063      	str	r3, [r4, #4]
 8009800:	bf04      	itt	eq
 8009802:	1852      	addeq	r2, r2, r1
 8009804:	6022      	streq	r2, [r4, #0]
 8009806:	6004      	str	r4, [r0, #0]
 8009808:	e7ec      	b.n	80097e4 <_free_r+0x24>
 800980a:	4613      	mov	r3, r2
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	b10a      	cbz	r2, 8009814 <_free_r+0x54>
 8009810:	42a2      	cmp	r2, r4
 8009812:	d9fa      	bls.n	800980a <_free_r+0x4a>
 8009814:	6819      	ldr	r1, [r3, #0]
 8009816:	1858      	adds	r0, r3, r1
 8009818:	42a0      	cmp	r0, r4
 800981a:	d10b      	bne.n	8009834 <_free_r+0x74>
 800981c:	6820      	ldr	r0, [r4, #0]
 800981e:	4401      	add	r1, r0
 8009820:	1858      	adds	r0, r3, r1
 8009822:	4282      	cmp	r2, r0
 8009824:	6019      	str	r1, [r3, #0]
 8009826:	d1dd      	bne.n	80097e4 <_free_r+0x24>
 8009828:	6810      	ldr	r0, [r2, #0]
 800982a:	6852      	ldr	r2, [r2, #4]
 800982c:	605a      	str	r2, [r3, #4]
 800982e:	4401      	add	r1, r0
 8009830:	6019      	str	r1, [r3, #0]
 8009832:	e7d7      	b.n	80097e4 <_free_r+0x24>
 8009834:	d902      	bls.n	800983c <_free_r+0x7c>
 8009836:	230c      	movs	r3, #12
 8009838:	602b      	str	r3, [r5, #0]
 800983a:	e7d3      	b.n	80097e4 <_free_r+0x24>
 800983c:	6820      	ldr	r0, [r4, #0]
 800983e:	1821      	adds	r1, r4, r0
 8009840:	428a      	cmp	r2, r1
 8009842:	bf04      	itt	eq
 8009844:	6811      	ldreq	r1, [r2, #0]
 8009846:	6852      	ldreq	r2, [r2, #4]
 8009848:	6062      	str	r2, [r4, #4]
 800984a:	bf04      	itt	eq
 800984c:	1809      	addeq	r1, r1, r0
 800984e:	6021      	streq	r1, [r4, #0]
 8009850:	605c      	str	r4, [r3, #4]
 8009852:	e7c7      	b.n	80097e4 <_free_r+0x24>
 8009854:	bd38      	pop	{r3, r4, r5, pc}
 8009856:	bf00      	nop
 8009858:	20000328 	.word	0x20000328

0800985c <_malloc_r>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	1ccd      	adds	r5, r1, #3
 8009860:	f025 0503 	bic.w	r5, r5, #3
 8009864:	3508      	adds	r5, #8
 8009866:	2d0c      	cmp	r5, #12
 8009868:	bf38      	it	cc
 800986a:	250c      	movcc	r5, #12
 800986c:	2d00      	cmp	r5, #0
 800986e:	4606      	mov	r6, r0
 8009870:	db01      	blt.n	8009876 <_malloc_r+0x1a>
 8009872:	42a9      	cmp	r1, r5
 8009874:	d903      	bls.n	800987e <_malloc_r+0x22>
 8009876:	230c      	movs	r3, #12
 8009878:	6033      	str	r3, [r6, #0]
 800987a:	2000      	movs	r0, #0
 800987c:	bd70      	pop	{r4, r5, r6, pc}
 800987e:	f000 f88a 	bl	8009996 <__malloc_lock>
 8009882:	4a21      	ldr	r2, [pc, #132]	; (8009908 <_malloc_r+0xac>)
 8009884:	6814      	ldr	r4, [r2, #0]
 8009886:	4621      	mov	r1, r4
 8009888:	b991      	cbnz	r1, 80098b0 <_malloc_r+0x54>
 800988a:	4c20      	ldr	r4, [pc, #128]	; (800990c <_malloc_r+0xb0>)
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	b91b      	cbnz	r3, 8009898 <_malloc_r+0x3c>
 8009890:	4630      	mov	r0, r6
 8009892:	f000 f863 	bl	800995c <_sbrk_r>
 8009896:	6020      	str	r0, [r4, #0]
 8009898:	4629      	mov	r1, r5
 800989a:	4630      	mov	r0, r6
 800989c:	f000 f85e 	bl	800995c <_sbrk_r>
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	d124      	bne.n	80098ee <_malloc_r+0x92>
 80098a4:	230c      	movs	r3, #12
 80098a6:	6033      	str	r3, [r6, #0]
 80098a8:	4630      	mov	r0, r6
 80098aa:	f000 f875 	bl	8009998 <__malloc_unlock>
 80098ae:	e7e4      	b.n	800987a <_malloc_r+0x1e>
 80098b0:	680b      	ldr	r3, [r1, #0]
 80098b2:	1b5b      	subs	r3, r3, r5
 80098b4:	d418      	bmi.n	80098e8 <_malloc_r+0x8c>
 80098b6:	2b0b      	cmp	r3, #11
 80098b8:	d90f      	bls.n	80098da <_malloc_r+0x7e>
 80098ba:	600b      	str	r3, [r1, #0]
 80098bc:	50cd      	str	r5, [r1, r3]
 80098be:	18cc      	adds	r4, r1, r3
 80098c0:	4630      	mov	r0, r6
 80098c2:	f000 f869 	bl	8009998 <__malloc_unlock>
 80098c6:	f104 000b 	add.w	r0, r4, #11
 80098ca:	1d23      	adds	r3, r4, #4
 80098cc:	f020 0007 	bic.w	r0, r0, #7
 80098d0:	1ac3      	subs	r3, r0, r3
 80098d2:	d0d3      	beq.n	800987c <_malloc_r+0x20>
 80098d4:	425a      	negs	r2, r3
 80098d6:	50e2      	str	r2, [r4, r3]
 80098d8:	e7d0      	b.n	800987c <_malloc_r+0x20>
 80098da:	428c      	cmp	r4, r1
 80098dc:	684b      	ldr	r3, [r1, #4]
 80098de:	bf16      	itet	ne
 80098e0:	6063      	strne	r3, [r4, #4]
 80098e2:	6013      	streq	r3, [r2, #0]
 80098e4:	460c      	movne	r4, r1
 80098e6:	e7eb      	b.n	80098c0 <_malloc_r+0x64>
 80098e8:	460c      	mov	r4, r1
 80098ea:	6849      	ldr	r1, [r1, #4]
 80098ec:	e7cc      	b.n	8009888 <_malloc_r+0x2c>
 80098ee:	1cc4      	adds	r4, r0, #3
 80098f0:	f024 0403 	bic.w	r4, r4, #3
 80098f4:	42a0      	cmp	r0, r4
 80098f6:	d005      	beq.n	8009904 <_malloc_r+0xa8>
 80098f8:	1a21      	subs	r1, r4, r0
 80098fa:	4630      	mov	r0, r6
 80098fc:	f000 f82e 	bl	800995c <_sbrk_r>
 8009900:	3001      	adds	r0, #1
 8009902:	d0cf      	beq.n	80098a4 <_malloc_r+0x48>
 8009904:	6025      	str	r5, [r4, #0]
 8009906:	e7db      	b.n	80098c0 <_malloc_r+0x64>
 8009908:	20000328 	.word	0x20000328
 800990c:	2000032c 	.word	0x2000032c

08009910 <_realloc_r>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	4607      	mov	r7, r0
 8009914:	4614      	mov	r4, r2
 8009916:	460e      	mov	r6, r1
 8009918:	b921      	cbnz	r1, 8009924 <_realloc_r+0x14>
 800991a:	4611      	mov	r1, r2
 800991c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009920:	f7ff bf9c 	b.w	800985c <_malloc_r>
 8009924:	b922      	cbnz	r2, 8009930 <_realloc_r+0x20>
 8009926:	f7ff ff4b 	bl	80097c0 <_free_r>
 800992a:	4625      	mov	r5, r4
 800992c:	4628      	mov	r0, r5
 800992e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009930:	f000 f833 	bl	800999a <_malloc_usable_size_r>
 8009934:	42a0      	cmp	r0, r4
 8009936:	d20f      	bcs.n	8009958 <_realloc_r+0x48>
 8009938:	4621      	mov	r1, r4
 800993a:	4638      	mov	r0, r7
 800993c:	f7ff ff8e 	bl	800985c <_malloc_r>
 8009940:	4605      	mov	r5, r0
 8009942:	2800      	cmp	r0, #0
 8009944:	d0f2      	beq.n	800992c <_realloc_r+0x1c>
 8009946:	4631      	mov	r1, r6
 8009948:	4622      	mov	r2, r4
 800994a:	f7ff ff15 	bl	8009778 <memcpy>
 800994e:	4631      	mov	r1, r6
 8009950:	4638      	mov	r0, r7
 8009952:	f7ff ff35 	bl	80097c0 <_free_r>
 8009956:	e7e9      	b.n	800992c <_realloc_r+0x1c>
 8009958:	4635      	mov	r5, r6
 800995a:	e7e7      	b.n	800992c <_realloc_r+0x1c>

0800995c <_sbrk_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4c06      	ldr	r4, [pc, #24]	; (8009978 <_sbrk_r+0x1c>)
 8009960:	2300      	movs	r3, #0
 8009962:	4605      	mov	r5, r0
 8009964:	4608      	mov	r0, r1
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	f7f8 fd3a 	bl	80023e0 <_sbrk>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d102      	bne.n	8009976 <_sbrk_r+0x1a>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	b103      	cbz	r3, 8009976 <_sbrk_r+0x1a>
 8009974:	602b      	str	r3, [r5, #0]
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	20000d14 	.word	0x20000d14

0800997c <__ascii_wctomb>:
 800997c:	b149      	cbz	r1, 8009992 <__ascii_wctomb+0x16>
 800997e:	2aff      	cmp	r2, #255	; 0xff
 8009980:	bf85      	ittet	hi
 8009982:	238a      	movhi	r3, #138	; 0x8a
 8009984:	6003      	strhi	r3, [r0, #0]
 8009986:	700a      	strbls	r2, [r1, #0]
 8009988:	f04f 30ff 	movhi.w	r0, #4294967295
 800998c:	bf98      	it	ls
 800998e:	2001      	movls	r0, #1
 8009990:	4770      	bx	lr
 8009992:	4608      	mov	r0, r1
 8009994:	4770      	bx	lr

08009996 <__malloc_lock>:
 8009996:	4770      	bx	lr

08009998 <__malloc_unlock>:
 8009998:	4770      	bx	lr

0800999a <_malloc_usable_size_r>:
 800999a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800999e:	1f18      	subs	r0, r3, #4
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	bfbc      	itt	lt
 80099a4:	580b      	ldrlt	r3, [r1, r0]
 80099a6:	18c0      	addlt	r0, r0, r3
 80099a8:	4770      	bx	lr
	...

080099ac <pow>:
 80099ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b0:	ed2d 8b04 	vpush	{d8-d9}
 80099b4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009c88 <pow+0x2dc>
 80099b8:	b08d      	sub	sp, #52	; 0x34
 80099ba:	ec57 6b10 	vmov	r6, r7, d0
 80099be:	ec55 4b11 	vmov	r4, r5, d1
 80099c2:	f000 f9bd 	bl	8009d40 <__ieee754_pow>
 80099c6:	f999 3000 	ldrsb.w	r3, [r9]
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	3301      	adds	r3, #1
 80099ce:	eeb0 8a40 	vmov.f32	s16, s0
 80099d2:	eef0 8a60 	vmov.f32	s17, s1
 80099d6:	46c8      	mov	r8, r9
 80099d8:	d05f      	beq.n	8009a9a <pow+0xee>
 80099da:	4622      	mov	r2, r4
 80099dc:	462b      	mov	r3, r5
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7f7 f8c3 	bl	8000b6c <__aeabi_dcmpun>
 80099e6:	4683      	mov	fp, r0
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d156      	bne.n	8009a9a <pow+0xee>
 80099ec:	4632      	mov	r2, r6
 80099ee:	463b      	mov	r3, r7
 80099f0:	4630      	mov	r0, r6
 80099f2:	4639      	mov	r1, r7
 80099f4:	f7f7 f8ba 	bl	8000b6c <__aeabi_dcmpun>
 80099f8:	9001      	str	r0, [sp, #4]
 80099fa:	b1e8      	cbz	r0, 8009a38 <pow+0x8c>
 80099fc:	2200      	movs	r2, #0
 80099fe:	2300      	movs	r3, #0
 8009a00:	4620      	mov	r0, r4
 8009a02:	4629      	mov	r1, r5
 8009a04:	f7f7 f880 	bl	8000b08 <__aeabi_dcmpeq>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d046      	beq.n	8009a9a <pow+0xee>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	9302      	str	r3, [sp, #8]
 8009a10:	4b96      	ldr	r3, [pc, #600]	; (8009c6c <pow+0x2c0>)
 8009a12:	9303      	str	r3, [sp, #12]
 8009a14:	4b96      	ldr	r3, [pc, #600]	; (8009c70 <pow+0x2c4>)
 8009a16:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a20:	9b00      	ldr	r3, [sp, #0]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009a28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009a2c:	d033      	beq.n	8009a96 <pow+0xea>
 8009a2e:	a802      	add	r0, sp, #8
 8009a30:	f000 ff55 	bl	800a8de <matherr>
 8009a34:	bb48      	cbnz	r0, 8009a8a <pow+0xde>
 8009a36:	e05d      	b.n	8009af4 <pow+0x148>
 8009a38:	f04f 0a00 	mov.w	sl, #0
 8009a3c:	f04f 0b00 	mov.w	fp, #0
 8009a40:	4652      	mov	r2, sl
 8009a42:	465b      	mov	r3, fp
 8009a44:	4630      	mov	r0, r6
 8009a46:	4639      	mov	r1, r7
 8009a48:	f7f7 f85e 	bl	8000b08 <__aeabi_dcmpeq>
 8009a4c:	ec4b ab19 	vmov	d9, sl, fp
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d054      	beq.n	8009afe <pow+0x152>
 8009a54:	4652      	mov	r2, sl
 8009a56:	465b      	mov	r3, fp
 8009a58:	4620      	mov	r0, r4
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	f7f7 f854 	bl	8000b08 <__aeabi_dcmpeq>
 8009a60:	4680      	mov	r8, r0
 8009a62:	b318      	cbz	r0, 8009aac <pow+0x100>
 8009a64:	2301      	movs	r3, #1
 8009a66:	9302      	str	r3, [sp, #8]
 8009a68:	4b80      	ldr	r3, [pc, #512]	; (8009c6c <pow+0x2c0>)
 8009a6a:	9303      	str	r3, [sp, #12]
 8009a6c:	9b01      	ldr	r3, [sp, #4]
 8009a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009a70:	9b00      	ldr	r3, [sp, #0]
 8009a72:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009a76:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009a7a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0d5      	beq.n	8009a2e <pow+0x82>
 8009a82:	4b7b      	ldr	r3, [pc, #492]	; (8009c70 <pow+0x2c4>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a8c:	b11b      	cbz	r3, 8009a96 <pow+0xea>
 8009a8e:	f7fe fe6f 	bl	8008770 <__errno>
 8009a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a94:	6003      	str	r3, [r0, #0]
 8009a96:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009a9a:	eeb0 0a48 	vmov.f32	s0, s16
 8009a9e:	eef0 0a68 	vmov.f32	s1, s17
 8009aa2:	b00d      	add	sp, #52	; 0x34
 8009aa4:	ecbd 8b04 	vpop	{d8-d9}
 8009aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aac:	ec45 4b10 	vmov	d0, r4, r5
 8009ab0:	f000 ff0d 	bl	800a8ce <finite>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d0f0      	beq.n	8009a9a <pow+0xee>
 8009ab8:	4652      	mov	r2, sl
 8009aba:	465b      	mov	r3, fp
 8009abc:	4620      	mov	r0, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	f7f7 f82c 	bl	8000b1c <__aeabi_dcmplt>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d0e8      	beq.n	8009a9a <pow+0xee>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	9302      	str	r3, [sp, #8]
 8009acc:	4b67      	ldr	r3, [pc, #412]	; (8009c6c <pow+0x2c0>)
 8009ace:	9303      	str	r3, [sp, #12]
 8009ad0:	f999 3000 	ldrsb.w	r3, [r9]
 8009ad4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009ad8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009adc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009ae0:	b913      	cbnz	r3, 8009ae8 <pow+0x13c>
 8009ae2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009ae6:	e7a2      	b.n	8009a2e <pow+0x82>
 8009ae8:	4962      	ldr	r1, [pc, #392]	; (8009c74 <pow+0x2c8>)
 8009aea:	2000      	movs	r0, #0
 8009aec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d19c      	bne.n	8009a2e <pow+0x82>
 8009af4:	f7fe fe3c 	bl	8008770 <__errno>
 8009af8:	2321      	movs	r3, #33	; 0x21
 8009afa:	6003      	str	r3, [r0, #0]
 8009afc:	e7c5      	b.n	8009a8a <pow+0xde>
 8009afe:	eeb0 0a48 	vmov.f32	s0, s16
 8009b02:	eef0 0a68 	vmov.f32	s1, s17
 8009b06:	f000 fee2 	bl	800a8ce <finite>
 8009b0a:	9000      	str	r0, [sp, #0]
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	f040 8081 	bne.w	8009c14 <pow+0x268>
 8009b12:	ec47 6b10 	vmov	d0, r6, r7
 8009b16:	f000 feda 	bl	800a8ce <finite>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d07a      	beq.n	8009c14 <pow+0x268>
 8009b1e:	ec45 4b10 	vmov	d0, r4, r5
 8009b22:	f000 fed4 	bl	800a8ce <finite>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d074      	beq.n	8009c14 <pow+0x268>
 8009b2a:	ec53 2b18 	vmov	r2, r3, d8
 8009b2e:	ee18 0a10 	vmov	r0, s16
 8009b32:	4619      	mov	r1, r3
 8009b34:	f7f7 f81a 	bl	8000b6c <__aeabi_dcmpun>
 8009b38:	f999 9000 	ldrsb.w	r9, [r9]
 8009b3c:	4b4b      	ldr	r3, [pc, #300]	; (8009c6c <pow+0x2c0>)
 8009b3e:	b1b0      	cbz	r0, 8009b6e <pow+0x1c2>
 8009b40:	2201      	movs	r2, #1
 8009b42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b46:	9b00      	ldr	r3, [sp, #0]
 8009b48:	930a      	str	r3, [sp, #40]	; 0x28
 8009b4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009b4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009b52:	f1b9 0f00 	cmp.w	r9, #0
 8009b56:	d0c4      	beq.n	8009ae2 <pow+0x136>
 8009b58:	4652      	mov	r2, sl
 8009b5a:	465b      	mov	r3, fp
 8009b5c:	4650      	mov	r0, sl
 8009b5e:	4659      	mov	r1, fp
 8009b60:	f7f6 fe94 	bl	800088c <__aeabi_ddiv>
 8009b64:	f1b9 0f02 	cmp.w	r9, #2
 8009b68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b6c:	e7c1      	b.n	8009af2 <pow+0x146>
 8009b6e:	2203      	movs	r2, #3
 8009b70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b74:	900a      	str	r0, [sp, #40]	; 0x28
 8009b76:	4629      	mov	r1, r5
 8009b78:	4620      	mov	r0, r4
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	4b3e      	ldr	r3, [pc, #248]	; (8009c78 <pow+0x2cc>)
 8009b7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009b82:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009b86:	f7f6 fd57 	bl	8000638 <__aeabi_dmul>
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	460d      	mov	r5, r1
 8009b8e:	f1b9 0f00 	cmp.w	r9, #0
 8009b92:	d124      	bne.n	8009bde <pow+0x232>
 8009b94:	4b39      	ldr	r3, [pc, #228]	; (8009c7c <pow+0x2d0>)
 8009b96:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009b9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	4652      	mov	r2, sl
 8009ba2:	465b      	mov	r3, fp
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	f7f6 ffb9 	bl	8000b1c <__aeabi_dcmplt>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d056      	beq.n	8009c5c <pow+0x2b0>
 8009bae:	ec45 4b10 	vmov	d0, r4, r5
 8009bb2:	f000 fea1 	bl	800a8f8 <rint>
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	462b      	mov	r3, r5
 8009bba:	ec51 0b10 	vmov	r0, r1, d0
 8009bbe:	f7f6 ffa3 	bl	8000b08 <__aeabi_dcmpeq>
 8009bc2:	b920      	cbnz	r0, 8009bce <pow+0x222>
 8009bc4:	4b2e      	ldr	r3, [pc, #184]	; (8009c80 <pow+0x2d4>)
 8009bc6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009bca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009bce:	f998 3000 	ldrsb.w	r3, [r8]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d142      	bne.n	8009c5c <pow+0x2b0>
 8009bd6:	f7fe fdcb 	bl	8008770 <__errno>
 8009bda:	2322      	movs	r3, #34	; 0x22
 8009bdc:	e78d      	b.n	8009afa <pow+0x14e>
 8009bde:	4b29      	ldr	r3, [pc, #164]	; (8009c84 <pow+0x2d8>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009be6:	4630      	mov	r0, r6
 8009be8:	4652      	mov	r2, sl
 8009bea:	465b      	mov	r3, fp
 8009bec:	4639      	mov	r1, r7
 8009bee:	f7f6 ff95 	bl	8000b1c <__aeabi_dcmplt>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d0eb      	beq.n	8009bce <pow+0x222>
 8009bf6:	ec45 4b10 	vmov	d0, r4, r5
 8009bfa:	f000 fe7d 	bl	800a8f8 <rint>
 8009bfe:	4622      	mov	r2, r4
 8009c00:	462b      	mov	r3, r5
 8009c02:	ec51 0b10 	vmov	r0, r1, d0
 8009c06:	f7f6 ff7f 	bl	8000b08 <__aeabi_dcmpeq>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d1df      	bne.n	8009bce <pow+0x222>
 8009c0e:	2200      	movs	r2, #0
 8009c10:	4b18      	ldr	r3, [pc, #96]	; (8009c74 <pow+0x2c8>)
 8009c12:	e7da      	b.n	8009bca <pow+0x21e>
 8009c14:	2200      	movs	r2, #0
 8009c16:	2300      	movs	r3, #0
 8009c18:	ec51 0b18 	vmov	r0, r1, d8
 8009c1c:	f7f6 ff74 	bl	8000b08 <__aeabi_dcmpeq>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	f43f af3a 	beq.w	8009a9a <pow+0xee>
 8009c26:	ec47 6b10 	vmov	d0, r6, r7
 8009c2a:	f000 fe50 	bl	800a8ce <finite>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f43f af33 	beq.w	8009a9a <pow+0xee>
 8009c34:	ec45 4b10 	vmov	d0, r4, r5
 8009c38:	f000 fe49 	bl	800a8ce <finite>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	f43f af2c 	beq.w	8009a9a <pow+0xee>
 8009c42:	2304      	movs	r3, #4
 8009c44:	9302      	str	r3, [sp, #8]
 8009c46:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <pow+0x2c0>)
 8009c48:	9303      	str	r3, [sp, #12]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	930a      	str	r3, [sp, #40]	; 0x28
 8009c4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009c52:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009c56:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009c5a:	e7b8      	b.n	8009bce <pow+0x222>
 8009c5c:	a802      	add	r0, sp, #8
 8009c5e:	f000 fe3e 	bl	800a8de <matherr>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	f47f af11 	bne.w	8009a8a <pow+0xde>
 8009c68:	e7b5      	b.n	8009bd6 <pow+0x22a>
 8009c6a:	bf00      	nop
 8009c6c:	0800ad47 	.word	0x0800ad47
 8009c70:	3ff00000 	.word	0x3ff00000
 8009c74:	fff00000 	.word	0xfff00000
 8009c78:	3fe00000 	.word	0x3fe00000
 8009c7c:	47efffff 	.word	0x47efffff
 8009c80:	c7efffff 	.word	0xc7efffff
 8009c84:	7ff00000 	.word	0x7ff00000
 8009c88:	200002c8 	.word	0x200002c8

08009c8c <sqrt>:
 8009c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c90:	ed2d 8b02 	vpush	{d8}
 8009c94:	b08b      	sub	sp, #44	; 0x2c
 8009c96:	ec55 4b10 	vmov	r4, r5, d0
 8009c9a:	f000 fd5f 	bl	800a75c <__ieee754_sqrt>
 8009c9e:	4b26      	ldr	r3, [pc, #152]	; (8009d38 <sqrt+0xac>)
 8009ca0:	eeb0 8a40 	vmov.f32	s16, s0
 8009ca4:	eef0 8a60 	vmov.f32	s17, s1
 8009ca8:	f993 6000 	ldrsb.w	r6, [r3]
 8009cac:	1c73      	adds	r3, r6, #1
 8009cae:	d02a      	beq.n	8009d06 <sqrt+0x7a>
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	462b      	mov	r3, r5
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	f7f6 ff58 	bl	8000b6c <__aeabi_dcmpun>
 8009cbc:	4607      	mov	r7, r0
 8009cbe:	bb10      	cbnz	r0, 8009d06 <sqrt+0x7a>
 8009cc0:	f04f 0800 	mov.w	r8, #0
 8009cc4:	f04f 0900 	mov.w	r9, #0
 8009cc8:	4642      	mov	r2, r8
 8009cca:	464b      	mov	r3, r9
 8009ccc:	4620      	mov	r0, r4
 8009cce:	4629      	mov	r1, r5
 8009cd0:	f7f6 ff24 	bl	8000b1c <__aeabi_dcmplt>
 8009cd4:	b1b8      	cbz	r0, 8009d06 <sqrt+0x7a>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	4b18      	ldr	r3, [pc, #96]	; (8009d3c <sqrt+0xb0>)
 8009cdc:	9301      	str	r3, [sp, #4]
 8009cde:	9708      	str	r7, [sp, #32]
 8009ce0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009ce4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009ce8:	b9b6      	cbnz	r6, 8009d18 <sqrt+0x8c>
 8009cea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009cee:	4668      	mov	r0, sp
 8009cf0:	f000 fdf5 	bl	800a8de <matherr>
 8009cf4:	b1d0      	cbz	r0, 8009d2c <sqrt+0xa0>
 8009cf6:	9b08      	ldr	r3, [sp, #32]
 8009cf8:	b11b      	cbz	r3, 8009d02 <sqrt+0x76>
 8009cfa:	f7fe fd39 	bl	8008770 <__errno>
 8009cfe:	9b08      	ldr	r3, [sp, #32]
 8009d00:	6003      	str	r3, [r0, #0]
 8009d02:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009d06:	eeb0 0a48 	vmov.f32	s0, s16
 8009d0a:	eef0 0a68 	vmov.f32	s1, s17
 8009d0e:	b00b      	add	sp, #44	; 0x2c
 8009d10:	ecbd 8b02 	vpop	{d8}
 8009d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d18:	4642      	mov	r2, r8
 8009d1a:	464b      	mov	r3, r9
 8009d1c:	4640      	mov	r0, r8
 8009d1e:	4649      	mov	r1, r9
 8009d20:	f7f6 fdb4 	bl	800088c <__aeabi_ddiv>
 8009d24:	2e02      	cmp	r6, #2
 8009d26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d2a:	d1e0      	bne.n	8009cee <sqrt+0x62>
 8009d2c:	f7fe fd20 	bl	8008770 <__errno>
 8009d30:	2321      	movs	r3, #33	; 0x21
 8009d32:	6003      	str	r3, [r0, #0]
 8009d34:	e7df      	b.n	8009cf6 <sqrt+0x6a>
 8009d36:	bf00      	nop
 8009d38:	200002c8 	.word	0x200002c8
 8009d3c:	0800ad4b 	.word	0x0800ad4b

08009d40 <__ieee754_pow>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	b091      	sub	sp, #68	; 0x44
 8009d46:	ed8d 1b00 	vstr	d1, [sp]
 8009d4a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009d4e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009d52:	ea58 0302 	orrs.w	r3, r8, r2
 8009d56:	ec57 6b10 	vmov	r6, r7, d0
 8009d5a:	f000 84be 	beq.w	800a6da <__ieee754_pow+0x99a>
 8009d5e:	4b7a      	ldr	r3, [pc, #488]	; (8009f48 <__ieee754_pow+0x208>)
 8009d60:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009d64:	429c      	cmp	r4, r3
 8009d66:	463d      	mov	r5, r7
 8009d68:	ee10 aa10 	vmov	sl, s0
 8009d6c:	dc09      	bgt.n	8009d82 <__ieee754_pow+0x42>
 8009d6e:	d103      	bne.n	8009d78 <__ieee754_pow+0x38>
 8009d70:	b93e      	cbnz	r6, 8009d82 <__ieee754_pow+0x42>
 8009d72:	45a0      	cmp	r8, r4
 8009d74:	dc0d      	bgt.n	8009d92 <__ieee754_pow+0x52>
 8009d76:	e001      	b.n	8009d7c <__ieee754_pow+0x3c>
 8009d78:	4598      	cmp	r8, r3
 8009d7a:	dc02      	bgt.n	8009d82 <__ieee754_pow+0x42>
 8009d7c:	4598      	cmp	r8, r3
 8009d7e:	d10e      	bne.n	8009d9e <__ieee754_pow+0x5e>
 8009d80:	b16a      	cbz	r2, 8009d9e <__ieee754_pow+0x5e>
 8009d82:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009d86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009d8a:	ea54 030a 	orrs.w	r3, r4, sl
 8009d8e:	f000 84a4 	beq.w	800a6da <__ieee754_pow+0x99a>
 8009d92:	486e      	ldr	r0, [pc, #440]	; (8009f4c <__ieee754_pow+0x20c>)
 8009d94:	b011      	add	sp, #68	; 0x44
 8009d96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9a:	f000 bda5 	b.w	800a8e8 <nan>
 8009d9e:	2d00      	cmp	r5, #0
 8009da0:	da53      	bge.n	8009e4a <__ieee754_pow+0x10a>
 8009da2:	4b6b      	ldr	r3, [pc, #428]	; (8009f50 <__ieee754_pow+0x210>)
 8009da4:	4598      	cmp	r8, r3
 8009da6:	dc4d      	bgt.n	8009e44 <__ieee754_pow+0x104>
 8009da8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009dac:	4598      	cmp	r8, r3
 8009dae:	dd4c      	ble.n	8009e4a <__ieee754_pow+0x10a>
 8009db0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009db4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009db8:	2b14      	cmp	r3, #20
 8009dba:	dd26      	ble.n	8009e0a <__ieee754_pow+0xca>
 8009dbc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009dc0:	fa22 f103 	lsr.w	r1, r2, r3
 8009dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d13e      	bne.n	8009e4a <__ieee754_pow+0x10a>
 8009dcc:	f001 0101 	and.w	r1, r1, #1
 8009dd0:	f1c1 0b02 	rsb	fp, r1, #2
 8009dd4:	2a00      	cmp	r2, #0
 8009dd6:	d15b      	bne.n	8009e90 <__ieee754_pow+0x150>
 8009dd8:	4b5b      	ldr	r3, [pc, #364]	; (8009f48 <__ieee754_pow+0x208>)
 8009dda:	4598      	cmp	r8, r3
 8009ddc:	d124      	bne.n	8009e28 <__ieee754_pow+0xe8>
 8009dde:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009de2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009de6:	ea53 030a 	orrs.w	r3, r3, sl
 8009dea:	f000 8476 	beq.w	800a6da <__ieee754_pow+0x99a>
 8009dee:	4b59      	ldr	r3, [pc, #356]	; (8009f54 <__ieee754_pow+0x214>)
 8009df0:	429c      	cmp	r4, r3
 8009df2:	dd2d      	ble.n	8009e50 <__ieee754_pow+0x110>
 8009df4:	f1b9 0f00 	cmp.w	r9, #0
 8009df8:	f280 8473 	bge.w	800a6e2 <__ieee754_pow+0x9a2>
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	2100      	movs	r1, #0
 8009e00:	ec41 0b10 	vmov	d0, r0, r1
 8009e04:	b011      	add	sp, #68	; 0x44
 8009e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0a:	2a00      	cmp	r2, #0
 8009e0c:	d13e      	bne.n	8009e8c <__ieee754_pow+0x14c>
 8009e0e:	f1c3 0314 	rsb	r3, r3, #20
 8009e12:	fa48 f103 	asr.w	r1, r8, r3
 8009e16:	fa01 f303 	lsl.w	r3, r1, r3
 8009e1a:	4543      	cmp	r3, r8
 8009e1c:	f040 8469 	bne.w	800a6f2 <__ieee754_pow+0x9b2>
 8009e20:	f001 0101 	and.w	r1, r1, #1
 8009e24:	f1c1 0b02 	rsb	fp, r1, #2
 8009e28:	4b4b      	ldr	r3, [pc, #300]	; (8009f58 <__ieee754_pow+0x218>)
 8009e2a:	4598      	cmp	r8, r3
 8009e2c:	d118      	bne.n	8009e60 <__ieee754_pow+0x120>
 8009e2e:	f1b9 0f00 	cmp.w	r9, #0
 8009e32:	f280 845a 	bge.w	800a6ea <__ieee754_pow+0x9aa>
 8009e36:	4948      	ldr	r1, [pc, #288]	; (8009f58 <__ieee754_pow+0x218>)
 8009e38:	4632      	mov	r2, r6
 8009e3a:	463b      	mov	r3, r7
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	f7f6 fd25 	bl	800088c <__aeabi_ddiv>
 8009e42:	e7dd      	b.n	8009e00 <__ieee754_pow+0xc0>
 8009e44:	f04f 0b02 	mov.w	fp, #2
 8009e48:	e7c4      	b.n	8009dd4 <__ieee754_pow+0x94>
 8009e4a:	f04f 0b00 	mov.w	fp, #0
 8009e4e:	e7c1      	b.n	8009dd4 <__ieee754_pow+0x94>
 8009e50:	f1b9 0f00 	cmp.w	r9, #0
 8009e54:	dad2      	bge.n	8009dfc <__ieee754_pow+0xbc>
 8009e56:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009e5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009e5e:	e7cf      	b.n	8009e00 <__ieee754_pow+0xc0>
 8009e60:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009e64:	d106      	bne.n	8009e74 <__ieee754_pow+0x134>
 8009e66:	4632      	mov	r2, r6
 8009e68:	463b      	mov	r3, r7
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f7f6 fbe3 	bl	8000638 <__aeabi_dmul>
 8009e72:	e7c5      	b.n	8009e00 <__ieee754_pow+0xc0>
 8009e74:	4b39      	ldr	r3, [pc, #228]	; (8009f5c <__ieee754_pow+0x21c>)
 8009e76:	4599      	cmp	r9, r3
 8009e78:	d10a      	bne.n	8009e90 <__ieee754_pow+0x150>
 8009e7a:	2d00      	cmp	r5, #0
 8009e7c:	db08      	blt.n	8009e90 <__ieee754_pow+0x150>
 8009e7e:	ec47 6b10 	vmov	d0, r6, r7
 8009e82:	b011      	add	sp, #68	; 0x44
 8009e84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e88:	f000 bc68 	b.w	800a75c <__ieee754_sqrt>
 8009e8c:	f04f 0b00 	mov.w	fp, #0
 8009e90:	ec47 6b10 	vmov	d0, r6, r7
 8009e94:	f000 fd12 	bl	800a8bc <fabs>
 8009e98:	ec51 0b10 	vmov	r0, r1, d0
 8009e9c:	f1ba 0f00 	cmp.w	sl, #0
 8009ea0:	d127      	bne.n	8009ef2 <__ieee754_pow+0x1b2>
 8009ea2:	b124      	cbz	r4, 8009eae <__ieee754_pow+0x16e>
 8009ea4:	4b2c      	ldr	r3, [pc, #176]	; (8009f58 <__ieee754_pow+0x218>)
 8009ea6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d121      	bne.n	8009ef2 <__ieee754_pow+0x1b2>
 8009eae:	f1b9 0f00 	cmp.w	r9, #0
 8009eb2:	da05      	bge.n	8009ec0 <__ieee754_pow+0x180>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	2000      	movs	r0, #0
 8009eba:	4927      	ldr	r1, [pc, #156]	; (8009f58 <__ieee754_pow+0x218>)
 8009ebc:	f7f6 fce6 	bl	800088c <__aeabi_ddiv>
 8009ec0:	2d00      	cmp	r5, #0
 8009ec2:	da9d      	bge.n	8009e00 <__ieee754_pow+0xc0>
 8009ec4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009ec8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009ecc:	ea54 030b 	orrs.w	r3, r4, fp
 8009ed0:	d108      	bne.n	8009ee4 <__ieee754_pow+0x1a4>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	4619      	mov	r1, r3
 8009eda:	f7f6 f9f5 	bl	80002c8 <__aeabi_dsub>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	e7ac      	b.n	8009e3e <__ieee754_pow+0xfe>
 8009ee4:	f1bb 0f01 	cmp.w	fp, #1
 8009ee8:	d18a      	bne.n	8009e00 <__ieee754_pow+0xc0>
 8009eea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009eee:	4619      	mov	r1, r3
 8009ef0:	e786      	b.n	8009e00 <__ieee754_pow+0xc0>
 8009ef2:	0fed      	lsrs	r5, r5, #31
 8009ef4:	1e6b      	subs	r3, r5, #1
 8009ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ef8:	ea5b 0303 	orrs.w	r3, fp, r3
 8009efc:	d102      	bne.n	8009f04 <__ieee754_pow+0x1c4>
 8009efe:	4632      	mov	r2, r6
 8009f00:	463b      	mov	r3, r7
 8009f02:	e7e8      	b.n	8009ed6 <__ieee754_pow+0x196>
 8009f04:	4b16      	ldr	r3, [pc, #88]	; (8009f60 <__ieee754_pow+0x220>)
 8009f06:	4598      	cmp	r8, r3
 8009f08:	f340 80fe 	ble.w	800a108 <__ieee754_pow+0x3c8>
 8009f0c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009f10:	4598      	cmp	r8, r3
 8009f12:	dd0a      	ble.n	8009f2a <__ieee754_pow+0x1ea>
 8009f14:	4b0f      	ldr	r3, [pc, #60]	; (8009f54 <__ieee754_pow+0x214>)
 8009f16:	429c      	cmp	r4, r3
 8009f18:	dc0d      	bgt.n	8009f36 <__ieee754_pow+0x1f6>
 8009f1a:	f1b9 0f00 	cmp.w	r9, #0
 8009f1e:	f6bf af6d 	bge.w	8009dfc <__ieee754_pow+0xbc>
 8009f22:	a307      	add	r3, pc, #28	; (adr r3, 8009f40 <__ieee754_pow+0x200>)
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	e79f      	b.n	8009e6a <__ieee754_pow+0x12a>
 8009f2a:	4b0e      	ldr	r3, [pc, #56]	; (8009f64 <__ieee754_pow+0x224>)
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	ddf4      	ble.n	8009f1a <__ieee754_pow+0x1da>
 8009f30:	4b09      	ldr	r3, [pc, #36]	; (8009f58 <__ieee754_pow+0x218>)
 8009f32:	429c      	cmp	r4, r3
 8009f34:	dd18      	ble.n	8009f68 <__ieee754_pow+0x228>
 8009f36:	f1b9 0f00 	cmp.w	r9, #0
 8009f3a:	dcf2      	bgt.n	8009f22 <__ieee754_pow+0x1e2>
 8009f3c:	e75e      	b.n	8009dfc <__ieee754_pow+0xbc>
 8009f3e:	bf00      	nop
 8009f40:	8800759c 	.word	0x8800759c
 8009f44:	7e37e43c 	.word	0x7e37e43c
 8009f48:	7ff00000 	.word	0x7ff00000
 8009f4c:	0800ab91 	.word	0x0800ab91
 8009f50:	433fffff 	.word	0x433fffff
 8009f54:	3fefffff 	.word	0x3fefffff
 8009f58:	3ff00000 	.word	0x3ff00000
 8009f5c:	3fe00000 	.word	0x3fe00000
 8009f60:	41e00000 	.word	0x41e00000
 8009f64:	3feffffe 	.word	0x3feffffe
 8009f68:	2200      	movs	r2, #0
 8009f6a:	4b63      	ldr	r3, [pc, #396]	; (800a0f8 <__ieee754_pow+0x3b8>)
 8009f6c:	f7f6 f9ac 	bl	80002c8 <__aeabi_dsub>
 8009f70:	a355      	add	r3, pc, #340	; (adr r3, 800a0c8 <__ieee754_pow+0x388>)
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	4604      	mov	r4, r0
 8009f78:	460d      	mov	r5, r1
 8009f7a:	f7f6 fb5d 	bl	8000638 <__aeabi_dmul>
 8009f7e:	a354      	add	r3, pc, #336	; (adr r3, 800a0d0 <__ieee754_pow+0x390>)
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	4606      	mov	r6, r0
 8009f86:	460f      	mov	r7, r1
 8009f88:	4620      	mov	r0, r4
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	f7f6 fb54 	bl	8000638 <__aeabi_dmul>
 8009f90:	2200      	movs	r2, #0
 8009f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f96:	4b59      	ldr	r3, [pc, #356]	; (800a0fc <__ieee754_pow+0x3bc>)
 8009f98:	4620      	mov	r0, r4
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	f7f6 fb4c 	bl	8000638 <__aeabi_dmul>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	a14c      	add	r1, pc, #304	; (adr r1, 800a0d8 <__ieee754_pow+0x398>)
 8009fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009faa:	f7f6 f98d 	bl	80002c8 <__aeabi_dsub>
 8009fae:	4622      	mov	r2, r4
 8009fb0:	462b      	mov	r3, r5
 8009fb2:	f7f6 fb41 	bl	8000638 <__aeabi_dmul>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	2000      	movs	r0, #0
 8009fbc:	4950      	ldr	r1, [pc, #320]	; (800a100 <__ieee754_pow+0x3c0>)
 8009fbe:	f7f6 f983 	bl	80002c8 <__aeabi_dsub>
 8009fc2:	4622      	mov	r2, r4
 8009fc4:	462b      	mov	r3, r5
 8009fc6:	4680      	mov	r8, r0
 8009fc8:	4689      	mov	r9, r1
 8009fca:	4620      	mov	r0, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	f7f6 fb33 	bl	8000638 <__aeabi_dmul>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	4649      	mov	r1, r9
 8009fda:	f7f6 fb2d 	bl	8000638 <__aeabi_dmul>
 8009fde:	a340      	add	r3, pc, #256	; (adr r3, 800a0e0 <__ieee754_pow+0x3a0>)
 8009fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe4:	f7f6 fb28 	bl	8000638 <__aeabi_dmul>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ff0:	f7f6 f96a 	bl	80002c8 <__aeabi_dsub>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	4639      	mov	r1, r7
 800a000:	f7f6 f964 	bl	80002cc <__adddf3>
 800a004:	2000      	movs	r0, #0
 800a006:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a00a:	4632      	mov	r2, r6
 800a00c:	463b      	mov	r3, r7
 800a00e:	f7f6 f95b 	bl	80002c8 <__aeabi_dsub>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	4620      	mov	r0, r4
 800a018:	4629      	mov	r1, r5
 800a01a:	f7f6 f955 	bl	80002c8 <__aeabi_dsub>
 800a01e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a020:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a024:	4313      	orrs	r3, r2
 800a026:	4606      	mov	r6, r0
 800a028:	460f      	mov	r7, r1
 800a02a:	f040 81eb 	bne.w	800a404 <__ieee754_pow+0x6c4>
 800a02e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a0e8 <__ieee754_pow+0x3a8>
 800a032:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a036:	2400      	movs	r4, #0
 800a038:	4622      	mov	r2, r4
 800a03a:	462b      	mov	r3, r5
 800a03c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a040:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a044:	f7f6 f940 	bl	80002c8 <__aeabi_dsub>
 800a048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a04c:	f7f6 faf4 	bl	8000638 <__aeabi_dmul>
 800a050:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a054:	4680      	mov	r8, r0
 800a056:	4689      	mov	r9, r1
 800a058:	4630      	mov	r0, r6
 800a05a:	4639      	mov	r1, r7
 800a05c:	f7f6 faec 	bl	8000638 <__aeabi_dmul>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4640      	mov	r0, r8
 800a066:	4649      	mov	r1, r9
 800a068:	f7f6 f930 	bl	80002cc <__adddf3>
 800a06c:	4622      	mov	r2, r4
 800a06e:	462b      	mov	r3, r5
 800a070:	4680      	mov	r8, r0
 800a072:	4689      	mov	r9, r1
 800a074:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a078:	f7f6 fade 	bl	8000638 <__aeabi_dmul>
 800a07c:	460b      	mov	r3, r1
 800a07e:	4604      	mov	r4, r0
 800a080:	460d      	mov	r5, r1
 800a082:	4602      	mov	r2, r0
 800a084:	4649      	mov	r1, r9
 800a086:	4640      	mov	r0, r8
 800a088:	e9cd 4500 	strd	r4, r5, [sp]
 800a08c:	f7f6 f91e 	bl	80002cc <__adddf3>
 800a090:	4b1c      	ldr	r3, [pc, #112]	; (800a104 <__ieee754_pow+0x3c4>)
 800a092:	4299      	cmp	r1, r3
 800a094:	4606      	mov	r6, r0
 800a096:	460f      	mov	r7, r1
 800a098:	468b      	mov	fp, r1
 800a09a:	f340 82f7 	ble.w	800a68c <__ieee754_pow+0x94c>
 800a09e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a0a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a0a6:	4303      	orrs	r3, r0
 800a0a8:	f000 81ea 	beq.w	800a480 <__ieee754_pow+0x740>
 800a0ac:	a310      	add	r3, pc, #64	; (adr r3, 800a0f0 <__ieee754_pow+0x3b0>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b6:	f7f6 fabf 	bl	8000638 <__aeabi_dmul>
 800a0ba:	a30d      	add	r3, pc, #52	; (adr r3, 800a0f0 <__ieee754_pow+0x3b0>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	e6d5      	b.n	8009e6e <__ieee754_pow+0x12e>
 800a0c2:	bf00      	nop
 800a0c4:	f3af 8000 	nop.w
 800a0c8:	60000000 	.word	0x60000000
 800a0cc:	3ff71547 	.word	0x3ff71547
 800a0d0:	f85ddf44 	.word	0xf85ddf44
 800a0d4:	3e54ae0b 	.word	0x3e54ae0b
 800a0d8:	55555555 	.word	0x55555555
 800a0dc:	3fd55555 	.word	0x3fd55555
 800a0e0:	652b82fe 	.word	0x652b82fe
 800a0e4:	3ff71547 	.word	0x3ff71547
 800a0e8:	00000000 	.word	0x00000000
 800a0ec:	bff00000 	.word	0xbff00000
 800a0f0:	8800759c 	.word	0x8800759c
 800a0f4:	7e37e43c 	.word	0x7e37e43c
 800a0f8:	3ff00000 	.word	0x3ff00000
 800a0fc:	3fd00000 	.word	0x3fd00000
 800a100:	3fe00000 	.word	0x3fe00000
 800a104:	408fffff 	.word	0x408fffff
 800a108:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a10c:	f04f 0200 	mov.w	r2, #0
 800a110:	da05      	bge.n	800a11e <__ieee754_pow+0x3de>
 800a112:	4bd3      	ldr	r3, [pc, #844]	; (800a460 <__ieee754_pow+0x720>)
 800a114:	f7f6 fa90 	bl	8000638 <__aeabi_dmul>
 800a118:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a11c:	460c      	mov	r4, r1
 800a11e:	1523      	asrs	r3, r4, #20
 800a120:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a124:	4413      	add	r3, r2
 800a126:	9309      	str	r3, [sp, #36]	; 0x24
 800a128:	4bce      	ldr	r3, [pc, #824]	; (800a464 <__ieee754_pow+0x724>)
 800a12a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a12e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a132:	429c      	cmp	r4, r3
 800a134:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a138:	dd08      	ble.n	800a14c <__ieee754_pow+0x40c>
 800a13a:	4bcb      	ldr	r3, [pc, #812]	; (800a468 <__ieee754_pow+0x728>)
 800a13c:	429c      	cmp	r4, r3
 800a13e:	f340 815e 	ble.w	800a3fe <__ieee754_pow+0x6be>
 800a142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a144:	3301      	adds	r3, #1
 800a146:	9309      	str	r3, [sp, #36]	; 0x24
 800a148:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a14c:	f04f 0a00 	mov.w	sl, #0
 800a150:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a154:	930c      	str	r3, [sp, #48]	; 0x30
 800a156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a158:	4bc4      	ldr	r3, [pc, #784]	; (800a46c <__ieee754_pow+0x72c>)
 800a15a:	4413      	add	r3, r2
 800a15c:	ed93 7b00 	vldr	d7, [r3]
 800a160:	4629      	mov	r1, r5
 800a162:	ec53 2b17 	vmov	r2, r3, d7
 800a166:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a16a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a16e:	f7f6 f8ab 	bl	80002c8 <__aeabi_dsub>
 800a172:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a176:	4606      	mov	r6, r0
 800a178:	460f      	mov	r7, r1
 800a17a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a17e:	f7f6 f8a5 	bl	80002cc <__adddf3>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	2000      	movs	r0, #0
 800a188:	49b9      	ldr	r1, [pc, #740]	; (800a470 <__ieee754_pow+0x730>)
 800a18a:	f7f6 fb7f 	bl	800088c <__aeabi_ddiv>
 800a18e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4630      	mov	r0, r6
 800a198:	4639      	mov	r1, r7
 800a19a:	f7f6 fa4d 	bl	8000638 <__aeabi_dmul>
 800a19e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1a2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a1a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	9302      	str	r3, [sp, #8]
 800a1ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a1b2:	106d      	asrs	r5, r5, #1
 800a1b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a1b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a1bc:	2200      	movs	r2, #0
 800a1be:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	4614      	mov	r4, r2
 800a1c8:	461d      	mov	r5, r3
 800a1ca:	f7f6 fa35 	bl	8000638 <__aeabi_dmul>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	f7f6 f877 	bl	80002c8 <__aeabi_dsub>
 800a1da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460f      	mov	r7, r1
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f7f6 f86f 	bl	80002c8 <__aeabi_dsub>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1f2:	f7f6 f869 	bl	80002c8 <__aeabi_dsub>
 800a1f6:	4642      	mov	r2, r8
 800a1f8:	464b      	mov	r3, r9
 800a1fa:	f7f6 fa1d 	bl	8000638 <__aeabi_dmul>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4630      	mov	r0, r6
 800a204:	4639      	mov	r1, r7
 800a206:	f7f6 f85f 	bl	80002c8 <__aeabi_dsub>
 800a20a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a20e:	f7f6 fa13 	bl	8000638 <__aeabi_dmul>
 800a212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a216:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a21a:	4610      	mov	r0, r2
 800a21c:	4619      	mov	r1, r3
 800a21e:	f7f6 fa0b 	bl	8000638 <__aeabi_dmul>
 800a222:	a37b      	add	r3, pc, #492	; (adr r3, 800a410 <__ieee754_pow+0x6d0>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	4604      	mov	r4, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	f7f6 fa04 	bl	8000638 <__aeabi_dmul>
 800a230:	a379      	add	r3, pc, #484	; (adr r3, 800a418 <__ieee754_pow+0x6d8>)
 800a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a236:	f7f6 f849 	bl	80002cc <__adddf3>
 800a23a:	4622      	mov	r2, r4
 800a23c:	462b      	mov	r3, r5
 800a23e:	f7f6 f9fb 	bl	8000638 <__aeabi_dmul>
 800a242:	a377      	add	r3, pc, #476	; (adr r3, 800a420 <__ieee754_pow+0x6e0>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	f7f6 f840 	bl	80002cc <__adddf3>
 800a24c:	4622      	mov	r2, r4
 800a24e:	462b      	mov	r3, r5
 800a250:	f7f6 f9f2 	bl	8000638 <__aeabi_dmul>
 800a254:	a374      	add	r3, pc, #464	; (adr r3, 800a428 <__ieee754_pow+0x6e8>)
 800a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25a:	f7f6 f837 	bl	80002cc <__adddf3>
 800a25e:	4622      	mov	r2, r4
 800a260:	462b      	mov	r3, r5
 800a262:	f7f6 f9e9 	bl	8000638 <__aeabi_dmul>
 800a266:	a372      	add	r3, pc, #456	; (adr r3, 800a430 <__ieee754_pow+0x6f0>)
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	f7f6 f82e 	bl	80002cc <__adddf3>
 800a270:	4622      	mov	r2, r4
 800a272:	462b      	mov	r3, r5
 800a274:	f7f6 f9e0 	bl	8000638 <__aeabi_dmul>
 800a278:	a36f      	add	r3, pc, #444	; (adr r3, 800a438 <__ieee754_pow+0x6f8>)
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f7f6 f825 	bl	80002cc <__adddf3>
 800a282:	4622      	mov	r2, r4
 800a284:	4606      	mov	r6, r0
 800a286:	460f      	mov	r7, r1
 800a288:	462b      	mov	r3, r5
 800a28a:	4620      	mov	r0, r4
 800a28c:	4629      	mov	r1, r5
 800a28e:	f7f6 f9d3 	bl	8000638 <__aeabi_dmul>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f6 f9cd 	bl	8000638 <__aeabi_dmul>
 800a29e:	4642      	mov	r2, r8
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	460d      	mov	r5, r1
 800a2a4:	464b      	mov	r3, r9
 800a2a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2aa:	f7f6 f80f 	bl	80002cc <__adddf3>
 800a2ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2b2:	f7f6 f9c1 	bl	8000638 <__aeabi_dmul>
 800a2b6:	4622      	mov	r2, r4
 800a2b8:	462b      	mov	r3, r5
 800a2ba:	f7f6 f807 	bl	80002cc <__adddf3>
 800a2be:	4642      	mov	r2, r8
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	460f      	mov	r7, r1
 800a2c4:	464b      	mov	r3, r9
 800a2c6:	4640      	mov	r0, r8
 800a2c8:	4649      	mov	r1, r9
 800a2ca:	f7f6 f9b5 	bl	8000638 <__aeabi_dmul>
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	4b68      	ldr	r3, [pc, #416]	; (800a474 <__ieee754_pow+0x734>)
 800a2d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a2d6:	f7f5 fff9 	bl	80002cc <__adddf3>
 800a2da:	4632      	mov	r2, r6
 800a2dc:	463b      	mov	r3, r7
 800a2de:	f7f5 fff5 	bl	80002cc <__adddf3>
 800a2e2:	9802      	ldr	r0, [sp, #8]
 800a2e4:	460d      	mov	r5, r1
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4640      	mov	r0, r8
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	f7f6 f9a2 	bl	8000638 <__aeabi_dmul>
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4680      	mov	r8, r0
 800a2f8:	4689      	mov	r9, r1
 800a2fa:	4b5e      	ldr	r3, [pc, #376]	; (800a474 <__ieee754_pow+0x734>)
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	4629      	mov	r1, r5
 800a300:	f7f5 ffe2 	bl	80002c8 <__aeabi_dsub>
 800a304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a308:	f7f5 ffde 	bl	80002c8 <__aeabi_dsub>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4630      	mov	r0, r6
 800a312:	4639      	mov	r1, r7
 800a314:	f7f5 ffd8 	bl	80002c8 <__aeabi_dsub>
 800a318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a31c:	f7f6 f98c 	bl	8000638 <__aeabi_dmul>
 800a320:	4622      	mov	r2, r4
 800a322:	4606      	mov	r6, r0
 800a324:	460f      	mov	r7, r1
 800a326:	462b      	mov	r3, r5
 800a328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a32c:	f7f6 f984 	bl	8000638 <__aeabi_dmul>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4630      	mov	r0, r6
 800a336:	4639      	mov	r1, r7
 800a338:	f7f5 ffc8 	bl	80002cc <__adddf3>
 800a33c:	4606      	mov	r6, r0
 800a33e:	460f      	mov	r7, r1
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4640      	mov	r0, r8
 800a346:	4649      	mov	r1, r9
 800a348:	f7f5 ffc0 	bl	80002cc <__adddf3>
 800a34c:	9802      	ldr	r0, [sp, #8]
 800a34e:	a33c      	add	r3, pc, #240	; (adr r3, 800a440 <__ieee754_pow+0x700>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	4604      	mov	r4, r0
 800a356:	460d      	mov	r5, r1
 800a358:	f7f6 f96e 	bl	8000638 <__aeabi_dmul>
 800a35c:	4642      	mov	r2, r8
 800a35e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a362:	464b      	mov	r3, r9
 800a364:	4620      	mov	r0, r4
 800a366:	4629      	mov	r1, r5
 800a368:	f7f5 ffae 	bl	80002c8 <__aeabi_dsub>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4630      	mov	r0, r6
 800a372:	4639      	mov	r1, r7
 800a374:	f7f5 ffa8 	bl	80002c8 <__aeabi_dsub>
 800a378:	a333      	add	r3, pc, #204	; (adr r3, 800a448 <__ieee754_pow+0x708>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	f7f6 f95b 	bl	8000638 <__aeabi_dmul>
 800a382:	a333      	add	r3, pc, #204	; (adr r3, 800a450 <__ieee754_pow+0x710>)
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	4606      	mov	r6, r0
 800a38a:	460f      	mov	r7, r1
 800a38c:	4620      	mov	r0, r4
 800a38e:	4629      	mov	r1, r5
 800a390:	f7f6 f952 	bl	8000638 <__aeabi_dmul>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4630      	mov	r0, r6
 800a39a:	4639      	mov	r1, r7
 800a39c:	f7f5 ff96 	bl	80002cc <__adddf3>
 800a3a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3a2:	4b35      	ldr	r3, [pc, #212]	; (800a478 <__ieee754_pow+0x738>)
 800a3a4:	4413      	add	r3, r2
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	f7f5 ff8f 	bl	80002cc <__adddf3>
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3b2:	460d      	mov	r5, r1
 800a3b4:	f7f6 f8d6 	bl	8000564 <__aeabi_i2d>
 800a3b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3ba:	4b30      	ldr	r3, [pc, #192]	; (800a47c <__ieee754_pow+0x73c>)
 800a3bc:	4413      	add	r3, r2
 800a3be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	460f      	mov	r7, r1
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	462b      	mov	r3, r5
 800a3ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3ce:	f7f5 ff7d 	bl	80002cc <__adddf3>
 800a3d2:	4642      	mov	r2, r8
 800a3d4:	464b      	mov	r3, r9
 800a3d6:	f7f5 ff79 	bl	80002cc <__adddf3>
 800a3da:	4632      	mov	r2, r6
 800a3dc:	463b      	mov	r3, r7
 800a3de:	f7f5 ff75 	bl	80002cc <__adddf3>
 800a3e2:	9802      	ldr	r0, [sp, #8]
 800a3e4:	4632      	mov	r2, r6
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3ec:	f7f5 ff6c 	bl	80002c8 <__aeabi_dsub>
 800a3f0:	4642      	mov	r2, r8
 800a3f2:	464b      	mov	r3, r9
 800a3f4:	f7f5 ff68 	bl	80002c8 <__aeabi_dsub>
 800a3f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3fc:	e607      	b.n	800a00e <__ieee754_pow+0x2ce>
 800a3fe:	f04f 0a01 	mov.w	sl, #1
 800a402:	e6a5      	b.n	800a150 <__ieee754_pow+0x410>
 800a404:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a458 <__ieee754_pow+0x718>
 800a408:	e613      	b.n	800a032 <__ieee754_pow+0x2f2>
 800a40a:	bf00      	nop
 800a40c:	f3af 8000 	nop.w
 800a410:	4a454eef 	.word	0x4a454eef
 800a414:	3fca7e28 	.word	0x3fca7e28
 800a418:	93c9db65 	.word	0x93c9db65
 800a41c:	3fcd864a 	.word	0x3fcd864a
 800a420:	a91d4101 	.word	0xa91d4101
 800a424:	3fd17460 	.word	0x3fd17460
 800a428:	518f264d 	.word	0x518f264d
 800a42c:	3fd55555 	.word	0x3fd55555
 800a430:	db6fabff 	.word	0xdb6fabff
 800a434:	3fdb6db6 	.word	0x3fdb6db6
 800a438:	33333303 	.word	0x33333303
 800a43c:	3fe33333 	.word	0x3fe33333
 800a440:	e0000000 	.word	0xe0000000
 800a444:	3feec709 	.word	0x3feec709
 800a448:	dc3a03fd 	.word	0xdc3a03fd
 800a44c:	3feec709 	.word	0x3feec709
 800a450:	145b01f5 	.word	0x145b01f5
 800a454:	be3e2fe0 	.word	0xbe3e2fe0
 800a458:	00000000 	.word	0x00000000
 800a45c:	3ff00000 	.word	0x3ff00000
 800a460:	43400000 	.word	0x43400000
 800a464:	0003988e 	.word	0x0003988e
 800a468:	000bb679 	.word	0x000bb679
 800a46c:	0800ad50 	.word	0x0800ad50
 800a470:	3ff00000 	.word	0x3ff00000
 800a474:	40080000 	.word	0x40080000
 800a478:	0800ad70 	.word	0x0800ad70
 800a47c:	0800ad60 	.word	0x0800ad60
 800a480:	a3b4      	add	r3, pc, #720	; (adr r3, 800a754 <__ieee754_pow+0xa14>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	4640      	mov	r0, r8
 800a488:	4649      	mov	r1, r9
 800a48a:	f7f5 ff1f 	bl	80002cc <__adddf3>
 800a48e:	4622      	mov	r2, r4
 800a490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a494:	462b      	mov	r3, r5
 800a496:	4630      	mov	r0, r6
 800a498:	4639      	mov	r1, r7
 800a49a:	f7f5 ff15 	bl	80002c8 <__aeabi_dsub>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4a6:	f7f6 fb57 	bl	8000b58 <__aeabi_dcmpgt>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	f47f adfe 	bne.w	800a0ac <__ieee754_pow+0x36c>
 800a4b0:	4aa3      	ldr	r2, [pc, #652]	; (800a740 <__ieee754_pow+0xa00>)
 800a4b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	f340 810a 	ble.w	800a6d0 <__ieee754_pow+0x990>
 800a4bc:	151b      	asrs	r3, r3, #20
 800a4be:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a4c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a4c6:	fa4a f303 	asr.w	r3, sl, r3
 800a4ca:	445b      	add	r3, fp
 800a4cc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a4d0:	4e9c      	ldr	r6, [pc, #624]	; (800a744 <__ieee754_pow+0xa04>)
 800a4d2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a4d6:	4116      	asrs	r6, r2
 800a4d8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a4dc:	2000      	movs	r0, #0
 800a4de:	ea23 0106 	bic.w	r1, r3, r6
 800a4e2:	f1c2 0214 	rsb	r2, r2, #20
 800a4e6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a4ea:	fa4a fa02 	asr.w	sl, sl, r2
 800a4ee:	f1bb 0f00 	cmp.w	fp, #0
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	bfb8      	it	lt
 800a4fc:	f1ca 0a00 	rsblt	sl, sl, #0
 800a500:	f7f5 fee2 	bl	80002c8 <__aeabi_dsub>
 800a504:	e9cd 0100 	strd	r0, r1, [sp]
 800a508:	4642      	mov	r2, r8
 800a50a:	464b      	mov	r3, r9
 800a50c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a510:	f7f5 fedc 	bl	80002cc <__adddf3>
 800a514:	2000      	movs	r0, #0
 800a516:	a378      	add	r3, pc, #480	; (adr r3, 800a6f8 <__ieee754_pow+0x9b8>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	4604      	mov	r4, r0
 800a51e:	460d      	mov	r5, r1
 800a520:	f7f6 f88a 	bl	8000638 <__aeabi_dmul>
 800a524:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a528:	4606      	mov	r6, r0
 800a52a:	460f      	mov	r7, r1
 800a52c:	4620      	mov	r0, r4
 800a52e:	4629      	mov	r1, r5
 800a530:	f7f5 feca 	bl	80002c8 <__aeabi_dsub>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4640      	mov	r0, r8
 800a53a:	4649      	mov	r1, r9
 800a53c:	f7f5 fec4 	bl	80002c8 <__aeabi_dsub>
 800a540:	a36f      	add	r3, pc, #444	; (adr r3, 800a700 <__ieee754_pow+0x9c0>)
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	f7f6 f877 	bl	8000638 <__aeabi_dmul>
 800a54a:	a36f      	add	r3, pc, #444	; (adr r3, 800a708 <__ieee754_pow+0x9c8>)
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	4680      	mov	r8, r0
 800a552:	4689      	mov	r9, r1
 800a554:	4620      	mov	r0, r4
 800a556:	4629      	mov	r1, r5
 800a558:	f7f6 f86e 	bl	8000638 <__aeabi_dmul>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4640      	mov	r0, r8
 800a562:	4649      	mov	r1, r9
 800a564:	f7f5 feb2 	bl	80002cc <__adddf3>
 800a568:	4604      	mov	r4, r0
 800a56a:	460d      	mov	r5, r1
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4630      	mov	r0, r6
 800a572:	4639      	mov	r1, r7
 800a574:	f7f5 feaa 	bl	80002cc <__adddf3>
 800a578:	4632      	mov	r2, r6
 800a57a:	463b      	mov	r3, r7
 800a57c:	4680      	mov	r8, r0
 800a57e:	4689      	mov	r9, r1
 800a580:	f7f5 fea2 	bl	80002c8 <__aeabi_dsub>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4620      	mov	r0, r4
 800a58a:	4629      	mov	r1, r5
 800a58c:	f7f5 fe9c 	bl	80002c8 <__aeabi_dsub>
 800a590:	4642      	mov	r2, r8
 800a592:	4606      	mov	r6, r0
 800a594:	460f      	mov	r7, r1
 800a596:	464b      	mov	r3, r9
 800a598:	4640      	mov	r0, r8
 800a59a:	4649      	mov	r1, r9
 800a59c:	f7f6 f84c 	bl	8000638 <__aeabi_dmul>
 800a5a0:	a35b      	add	r3, pc, #364	; (adr r3, 800a710 <__ieee754_pow+0x9d0>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	460d      	mov	r5, r1
 800a5aa:	f7f6 f845 	bl	8000638 <__aeabi_dmul>
 800a5ae:	a35a      	add	r3, pc, #360	; (adr r3, 800a718 <__ieee754_pow+0x9d8>)
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f7f5 fe88 	bl	80002c8 <__aeabi_dsub>
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	462b      	mov	r3, r5
 800a5bc:	f7f6 f83c 	bl	8000638 <__aeabi_dmul>
 800a5c0:	a357      	add	r3, pc, #348	; (adr r3, 800a720 <__ieee754_pow+0x9e0>)
 800a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c6:	f7f5 fe81 	bl	80002cc <__adddf3>
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	462b      	mov	r3, r5
 800a5ce:	f7f6 f833 	bl	8000638 <__aeabi_dmul>
 800a5d2:	a355      	add	r3, pc, #340	; (adr r3, 800a728 <__ieee754_pow+0x9e8>)
 800a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d8:	f7f5 fe76 	bl	80002c8 <__aeabi_dsub>
 800a5dc:	4622      	mov	r2, r4
 800a5de:	462b      	mov	r3, r5
 800a5e0:	f7f6 f82a 	bl	8000638 <__aeabi_dmul>
 800a5e4:	a352      	add	r3, pc, #328	; (adr r3, 800a730 <__ieee754_pow+0x9f0>)
 800a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ea:	f7f5 fe6f 	bl	80002cc <__adddf3>
 800a5ee:	4622      	mov	r2, r4
 800a5f0:	462b      	mov	r3, r5
 800a5f2:	f7f6 f821 	bl	8000638 <__aeabi_dmul>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	f7f5 fe63 	bl	80002c8 <__aeabi_dsub>
 800a602:	4604      	mov	r4, r0
 800a604:	460d      	mov	r5, r1
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	4640      	mov	r0, r8
 800a60c:	4649      	mov	r1, r9
 800a60e:	f7f6 f813 	bl	8000638 <__aeabi_dmul>
 800a612:	2200      	movs	r2, #0
 800a614:	e9cd 0100 	strd	r0, r1, [sp]
 800a618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a61c:	4620      	mov	r0, r4
 800a61e:	4629      	mov	r1, r5
 800a620:	f7f5 fe52 	bl	80002c8 <__aeabi_dsub>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a62c:	f7f6 f92e 	bl	800088c <__aeabi_ddiv>
 800a630:	4632      	mov	r2, r6
 800a632:	4604      	mov	r4, r0
 800a634:	460d      	mov	r5, r1
 800a636:	463b      	mov	r3, r7
 800a638:	4640      	mov	r0, r8
 800a63a:	4649      	mov	r1, r9
 800a63c:	f7f5 fffc 	bl	8000638 <__aeabi_dmul>
 800a640:	4632      	mov	r2, r6
 800a642:	463b      	mov	r3, r7
 800a644:	f7f5 fe42 	bl	80002cc <__adddf3>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	4620      	mov	r0, r4
 800a64e:	4629      	mov	r1, r5
 800a650:	f7f5 fe3a 	bl	80002c8 <__aeabi_dsub>
 800a654:	4642      	mov	r2, r8
 800a656:	464b      	mov	r3, r9
 800a658:	f7f5 fe36 	bl	80002c8 <__aeabi_dsub>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	2000      	movs	r0, #0
 800a662:	4939      	ldr	r1, [pc, #228]	; (800a748 <__ieee754_pow+0xa08>)
 800a664:	f7f5 fe30 	bl	80002c8 <__aeabi_dsub>
 800a668:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a66c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	da2f      	bge.n	800a6d6 <__ieee754_pow+0x996>
 800a676:	4650      	mov	r0, sl
 800a678:	ec43 2b10 	vmov	d0, r2, r3
 800a67c:	f000 f9c0 	bl	800aa00 <scalbn>
 800a680:	ec51 0b10 	vmov	r0, r1, d0
 800a684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a688:	f7ff bbf1 	b.w	8009e6e <__ieee754_pow+0x12e>
 800a68c:	4b2f      	ldr	r3, [pc, #188]	; (800a74c <__ieee754_pow+0xa0c>)
 800a68e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a692:	429e      	cmp	r6, r3
 800a694:	f77f af0c 	ble.w	800a4b0 <__ieee754_pow+0x770>
 800a698:	4b2d      	ldr	r3, [pc, #180]	; (800a750 <__ieee754_pow+0xa10>)
 800a69a:	440b      	add	r3, r1
 800a69c:	4303      	orrs	r3, r0
 800a69e:	d00b      	beq.n	800a6b8 <__ieee754_pow+0x978>
 800a6a0:	a325      	add	r3, pc, #148	; (adr r3, 800a738 <__ieee754_pow+0x9f8>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6aa:	f7f5 ffc5 	bl	8000638 <__aeabi_dmul>
 800a6ae:	a322      	add	r3, pc, #136	; (adr r3, 800a738 <__ieee754_pow+0x9f8>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f7ff bbdb 	b.w	8009e6e <__ieee754_pow+0x12e>
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	f7f5 fe04 	bl	80002c8 <__aeabi_dsub>
 800a6c0:	4642      	mov	r2, r8
 800a6c2:	464b      	mov	r3, r9
 800a6c4:	f7f6 fa3e 	bl	8000b44 <__aeabi_dcmpge>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	f43f aef1 	beq.w	800a4b0 <__ieee754_pow+0x770>
 800a6ce:	e7e7      	b.n	800a6a0 <__ieee754_pow+0x960>
 800a6d0:	f04f 0a00 	mov.w	sl, #0
 800a6d4:	e718      	b.n	800a508 <__ieee754_pow+0x7c8>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	e7d4      	b.n	800a684 <__ieee754_pow+0x944>
 800a6da:	2000      	movs	r0, #0
 800a6dc:	491a      	ldr	r1, [pc, #104]	; (800a748 <__ieee754_pow+0xa08>)
 800a6de:	f7ff bb8f 	b.w	8009e00 <__ieee754_pow+0xc0>
 800a6e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6e6:	f7ff bb8b 	b.w	8009e00 <__ieee754_pow+0xc0>
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	4639      	mov	r1, r7
 800a6ee:	f7ff bb87 	b.w	8009e00 <__ieee754_pow+0xc0>
 800a6f2:	4693      	mov	fp, r2
 800a6f4:	f7ff bb98 	b.w	8009e28 <__ieee754_pow+0xe8>
 800a6f8:	00000000 	.word	0x00000000
 800a6fc:	3fe62e43 	.word	0x3fe62e43
 800a700:	fefa39ef 	.word	0xfefa39ef
 800a704:	3fe62e42 	.word	0x3fe62e42
 800a708:	0ca86c39 	.word	0x0ca86c39
 800a70c:	be205c61 	.word	0xbe205c61
 800a710:	72bea4d0 	.word	0x72bea4d0
 800a714:	3e663769 	.word	0x3e663769
 800a718:	c5d26bf1 	.word	0xc5d26bf1
 800a71c:	3ebbbd41 	.word	0x3ebbbd41
 800a720:	af25de2c 	.word	0xaf25de2c
 800a724:	3f11566a 	.word	0x3f11566a
 800a728:	16bebd93 	.word	0x16bebd93
 800a72c:	3f66c16c 	.word	0x3f66c16c
 800a730:	5555553e 	.word	0x5555553e
 800a734:	3fc55555 	.word	0x3fc55555
 800a738:	c2f8f359 	.word	0xc2f8f359
 800a73c:	01a56e1f 	.word	0x01a56e1f
 800a740:	3fe00000 	.word	0x3fe00000
 800a744:	000fffff 	.word	0x000fffff
 800a748:	3ff00000 	.word	0x3ff00000
 800a74c:	4090cbff 	.word	0x4090cbff
 800a750:	3f6f3400 	.word	0x3f6f3400
 800a754:	652b82fe 	.word	0x652b82fe
 800a758:	3c971547 	.word	0x3c971547

0800a75c <__ieee754_sqrt>:
 800a75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a760:	4955      	ldr	r1, [pc, #340]	; (800a8b8 <__ieee754_sqrt+0x15c>)
 800a762:	ec55 4b10 	vmov	r4, r5, d0
 800a766:	43a9      	bics	r1, r5
 800a768:	462b      	mov	r3, r5
 800a76a:	462a      	mov	r2, r5
 800a76c:	d112      	bne.n	800a794 <__ieee754_sqrt+0x38>
 800a76e:	ee10 2a10 	vmov	r2, s0
 800a772:	ee10 0a10 	vmov	r0, s0
 800a776:	4629      	mov	r1, r5
 800a778:	f7f5 ff5e 	bl	8000638 <__aeabi_dmul>
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	4620      	mov	r0, r4
 800a782:	4629      	mov	r1, r5
 800a784:	f7f5 fda2 	bl	80002cc <__adddf3>
 800a788:	4604      	mov	r4, r0
 800a78a:	460d      	mov	r5, r1
 800a78c:	ec45 4b10 	vmov	d0, r4, r5
 800a790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a794:	2d00      	cmp	r5, #0
 800a796:	ee10 0a10 	vmov	r0, s0
 800a79a:	4621      	mov	r1, r4
 800a79c:	dc0f      	bgt.n	800a7be <__ieee754_sqrt+0x62>
 800a79e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a7a2:	4330      	orrs	r0, r6
 800a7a4:	d0f2      	beq.n	800a78c <__ieee754_sqrt+0x30>
 800a7a6:	b155      	cbz	r5, 800a7be <__ieee754_sqrt+0x62>
 800a7a8:	ee10 2a10 	vmov	r2, s0
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	f7f5 fd8a 	bl	80002c8 <__aeabi_dsub>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	f7f6 f868 	bl	800088c <__aeabi_ddiv>
 800a7bc:	e7e4      	b.n	800a788 <__ieee754_sqrt+0x2c>
 800a7be:	151b      	asrs	r3, r3, #20
 800a7c0:	d073      	beq.n	800a8aa <__ieee754_sqrt+0x14e>
 800a7c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a7c6:	07dd      	lsls	r5, r3, #31
 800a7c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a7cc:	bf48      	it	mi
 800a7ce:	0fc8      	lsrmi	r0, r1, #31
 800a7d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a7d4:	bf44      	itt	mi
 800a7d6:	0049      	lslmi	r1, r1, #1
 800a7d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a7dc:	2500      	movs	r5, #0
 800a7de:	1058      	asrs	r0, r3, #1
 800a7e0:	0fcb      	lsrs	r3, r1, #31
 800a7e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a7e6:	0049      	lsls	r1, r1, #1
 800a7e8:	2316      	movs	r3, #22
 800a7ea:	462c      	mov	r4, r5
 800a7ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a7f0:	19a7      	adds	r7, r4, r6
 800a7f2:	4297      	cmp	r7, r2
 800a7f4:	bfde      	ittt	le
 800a7f6:	19bc      	addle	r4, r7, r6
 800a7f8:	1bd2      	suble	r2, r2, r7
 800a7fa:	19ad      	addle	r5, r5, r6
 800a7fc:	0fcf      	lsrs	r7, r1, #31
 800a7fe:	3b01      	subs	r3, #1
 800a800:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a804:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a808:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a80c:	d1f0      	bne.n	800a7f0 <__ieee754_sqrt+0x94>
 800a80e:	f04f 0c20 	mov.w	ip, #32
 800a812:	469e      	mov	lr, r3
 800a814:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a818:	42a2      	cmp	r2, r4
 800a81a:	eb06 070e 	add.w	r7, r6, lr
 800a81e:	dc02      	bgt.n	800a826 <__ieee754_sqrt+0xca>
 800a820:	d112      	bne.n	800a848 <__ieee754_sqrt+0xec>
 800a822:	428f      	cmp	r7, r1
 800a824:	d810      	bhi.n	800a848 <__ieee754_sqrt+0xec>
 800a826:	2f00      	cmp	r7, #0
 800a828:	eb07 0e06 	add.w	lr, r7, r6
 800a82c:	da42      	bge.n	800a8b4 <__ieee754_sqrt+0x158>
 800a82e:	f1be 0f00 	cmp.w	lr, #0
 800a832:	db3f      	blt.n	800a8b4 <__ieee754_sqrt+0x158>
 800a834:	f104 0801 	add.w	r8, r4, #1
 800a838:	1b12      	subs	r2, r2, r4
 800a83a:	428f      	cmp	r7, r1
 800a83c:	bf88      	it	hi
 800a83e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a842:	1bc9      	subs	r1, r1, r7
 800a844:	4433      	add	r3, r6
 800a846:	4644      	mov	r4, r8
 800a848:	0052      	lsls	r2, r2, #1
 800a84a:	f1bc 0c01 	subs.w	ip, ip, #1
 800a84e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a852:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a856:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a85a:	d1dd      	bne.n	800a818 <__ieee754_sqrt+0xbc>
 800a85c:	430a      	orrs	r2, r1
 800a85e:	d006      	beq.n	800a86e <__ieee754_sqrt+0x112>
 800a860:	1c5c      	adds	r4, r3, #1
 800a862:	bf13      	iteet	ne
 800a864:	3301      	addne	r3, #1
 800a866:	3501      	addeq	r5, #1
 800a868:	4663      	moveq	r3, ip
 800a86a:	f023 0301 	bicne.w	r3, r3, #1
 800a86e:	106a      	asrs	r2, r5, #1
 800a870:	085b      	lsrs	r3, r3, #1
 800a872:	07e9      	lsls	r1, r5, #31
 800a874:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a878:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a87c:	bf48      	it	mi
 800a87e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a882:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a886:	461c      	mov	r4, r3
 800a888:	e780      	b.n	800a78c <__ieee754_sqrt+0x30>
 800a88a:	0aca      	lsrs	r2, r1, #11
 800a88c:	3815      	subs	r0, #21
 800a88e:	0549      	lsls	r1, r1, #21
 800a890:	2a00      	cmp	r2, #0
 800a892:	d0fa      	beq.n	800a88a <__ieee754_sqrt+0x12e>
 800a894:	02d6      	lsls	r6, r2, #11
 800a896:	d50a      	bpl.n	800a8ae <__ieee754_sqrt+0x152>
 800a898:	f1c3 0420 	rsb	r4, r3, #32
 800a89c:	fa21 f404 	lsr.w	r4, r1, r4
 800a8a0:	1e5d      	subs	r5, r3, #1
 800a8a2:	4099      	lsls	r1, r3
 800a8a4:	4322      	orrs	r2, r4
 800a8a6:	1b43      	subs	r3, r0, r5
 800a8a8:	e78b      	b.n	800a7c2 <__ieee754_sqrt+0x66>
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	e7f0      	b.n	800a890 <__ieee754_sqrt+0x134>
 800a8ae:	0052      	lsls	r2, r2, #1
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	e7ef      	b.n	800a894 <__ieee754_sqrt+0x138>
 800a8b4:	46a0      	mov	r8, r4
 800a8b6:	e7bf      	b.n	800a838 <__ieee754_sqrt+0xdc>
 800a8b8:	7ff00000 	.word	0x7ff00000

0800a8bc <fabs>:
 800a8bc:	ec51 0b10 	vmov	r0, r1, d0
 800a8c0:	ee10 2a10 	vmov	r2, s0
 800a8c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a8c8:	ec43 2b10 	vmov	d0, r2, r3
 800a8cc:	4770      	bx	lr

0800a8ce <finite>:
 800a8ce:	ee10 3a90 	vmov	r3, s1
 800a8d2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a8d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a8da:	0fc0      	lsrs	r0, r0, #31
 800a8dc:	4770      	bx	lr

0800a8de <matherr>:
 800a8de:	2000      	movs	r0, #0
 800a8e0:	4770      	bx	lr
 800a8e2:	0000      	movs	r0, r0
 800a8e4:	0000      	movs	r0, r0
	...

0800a8e8 <nan>:
 800a8e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a8f0 <nan+0x8>
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	00000000 	.word	0x00000000
 800a8f4:	7ff80000 	.word	0x7ff80000

0800a8f8 <rint>:
 800a8f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8fa:	ec51 0b10 	vmov	r0, r1, d0
 800a8fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a902:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a906:	2e13      	cmp	r6, #19
 800a908:	460b      	mov	r3, r1
 800a90a:	ee10 4a10 	vmov	r4, s0
 800a90e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a912:	dc56      	bgt.n	800a9c2 <rint+0xca>
 800a914:	2e00      	cmp	r6, #0
 800a916:	da2b      	bge.n	800a970 <rint+0x78>
 800a918:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a91c:	4302      	orrs	r2, r0
 800a91e:	d023      	beq.n	800a968 <rint+0x70>
 800a920:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a924:	4302      	orrs	r2, r0
 800a926:	4254      	negs	r4, r2
 800a928:	4314      	orrs	r4, r2
 800a92a:	0c4b      	lsrs	r3, r1, #17
 800a92c:	0b24      	lsrs	r4, r4, #12
 800a92e:	045b      	lsls	r3, r3, #17
 800a930:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a934:	ea44 0103 	orr.w	r1, r4, r3
 800a938:	460b      	mov	r3, r1
 800a93a:	492f      	ldr	r1, [pc, #188]	; (800a9f8 <rint+0x100>)
 800a93c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a940:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a944:	4602      	mov	r2, r0
 800a946:	4639      	mov	r1, r7
 800a948:	4630      	mov	r0, r6
 800a94a:	f7f5 fcbf 	bl	80002cc <__adddf3>
 800a94e:	e9cd 0100 	strd	r0, r1, [sp]
 800a952:	463b      	mov	r3, r7
 800a954:	4632      	mov	r2, r6
 800a956:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a95a:	f7f5 fcb5 	bl	80002c8 <__aeabi_dsub>
 800a95e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a962:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a966:	4639      	mov	r1, r7
 800a968:	ec41 0b10 	vmov	d0, r0, r1
 800a96c:	b003      	add	sp, #12
 800a96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a970:	4a22      	ldr	r2, [pc, #136]	; (800a9fc <rint+0x104>)
 800a972:	4132      	asrs	r2, r6
 800a974:	ea01 0702 	and.w	r7, r1, r2
 800a978:	4307      	orrs	r7, r0
 800a97a:	d0f5      	beq.n	800a968 <rint+0x70>
 800a97c:	0852      	lsrs	r2, r2, #1
 800a97e:	4011      	ands	r1, r2
 800a980:	430c      	orrs	r4, r1
 800a982:	d00b      	beq.n	800a99c <rint+0xa4>
 800a984:	ea23 0202 	bic.w	r2, r3, r2
 800a988:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a98c:	2e13      	cmp	r6, #19
 800a98e:	fa43 f306 	asr.w	r3, r3, r6
 800a992:	bf0c      	ite	eq
 800a994:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a998:	2400      	movne	r4, #0
 800a99a:	4313      	orrs	r3, r2
 800a99c:	4916      	ldr	r1, [pc, #88]	; (800a9f8 <rint+0x100>)
 800a99e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	f7f5 fc8e 	bl	80002cc <__adddf3>
 800a9b0:	e9cd 0100 	strd	r0, r1, [sp]
 800a9b4:	4622      	mov	r2, r4
 800a9b6:	462b      	mov	r3, r5
 800a9b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9bc:	f7f5 fc84 	bl	80002c8 <__aeabi_dsub>
 800a9c0:	e7d2      	b.n	800a968 <rint+0x70>
 800a9c2:	2e33      	cmp	r6, #51	; 0x33
 800a9c4:	dd07      	ble.n	800a9d6 <rint+0xde>
 800a9c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a9ca:	d1cd      	bne.n	800a968 <rint+0x70>
 800a9cc:	ee10 2a10 	vmov	r2, s0
 800a9d0:	f7f5 fc7c 	bl	80002cc <__adddf3>
 800a9d4:	e7c8      	b.n	800a968 <rint+0x70>
 800a9d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a9da:	f04f 32ff 	mov.w	r2, #4294967295
 800a9de:	40f2      	lsrs	r2, r6
 800a9e0:	4210      	tst	r0, r2
 800a9e2:	d0c1      	beq.n	800a968 <rint+0x70>
 800a9e4:	0852      	lsrs	r2, r2, #1
 800a9e6:	4210      	tst	r0, r2
 800a9e8:	bf1f      	itttt	ne
 800a9ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a9ee:	ea20 0202 	bicne.w	r2, r0, r2
 800a9f2:	4134      	asrne	r4, r6
 800a9f4:	4314      	orrne	r4, r2
 800a9f6:	e7d1      	b.n	800a99c <rint+0xa4>
 800a9f8:	0800ad80 	.word	0x0800ad80
 800a9fc:	000fffff 	.word	0x000fffff

0800aa00 <scalbn>:
 800aa00:	b570      	push	{r4, r5, r6, lr}
 800aa02:	ec55 4b10 	vmov	r4, r5, d0
 800aa06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	b9aa      	cbnz	r2, 800aa3c <scalbn+0x3c>
 800aa10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aa14:	4323      	orrs	r3, r4
 800aa16:	d03b      	beq.n	800aa90 <scalbn+0x90>
 800aa18:	4b31      	ldr	r3, [pc, #196]	; (800aae0 <scalbn+0xe0>)
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	ee10 0a10 	vmov	r0, s0
 800aa22:	f7f5 fe09 	bl	8000638 <__aeabi_dmul>
 800aa26:	4b2f      	ldr	r3, [pc, #188]	; (800aae4 <scalbn+0xe4>)
 800aa28:	429e      	cmp	r6, r3
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	460d      	mov	r5, r1
 800aa2e:	da12      	bge.n	800aa56 <scalbn+0x56>
 800aa30:	a327      	add	r3, pc, #156	; (adr r3, 800aad0 <scalbn+0xd0>)
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	f7f5 fdff 	bl	8000638 <__aeabi_dmul>
 800aa3a:	e009      	b.n	800aa50 <scalbn+0x50>
 800aa3c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800aa40:	428a      	cmp	r2, r1
 800aa42:	d10c      	bne.n	800aa5e <scalbn+0x5e>
 800aa44:	ee10 2a10 	vmov	r2, s0
 800aa48:	4620      	mov	r0, r4
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	f7f5 fc3e 	bl	80002cc <__adddf3>
 800aa50:	4604      	mov	r4, r0
 800aa52:	460d      	mov	r5, r1
 800aa54:	e01c      	b.n	800aa90 <scalbn+0x90>
 800aa56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	3a36      	subs	r2, #54	; 0x36
 800aa5e:	4432      	add	r2, r6
 800aa60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aa64:	428a      	cmp	r2, r1
 800aa66:	dd0b      	ble.n	800aa80 <scalbn+0x80>
 800aa68:	ec45 4b11 	vmov	d1, r4, r5
 800aa6c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800aad8 <scalbn+0xd8>
 800aa70:	f000 f83c 	bl	800aaec <copysign>
 800aa74:	a318      	add	r3, pc, #96	; (adr r3, 800aad8 <scalbn+0xd8>)
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	ec51 0b10 	vmov	r0, r1, d0
 800aa7e:	e7da      	b.n	800aa36 <scalbn+0x36>
 800aa80:	2a00      	cmp	r2, #0
 800aa82:	dd08      	ble.n	800aa96 <scalbn+0x96>
 800aa84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa90:	ec45 4b10 	vmov	d0, r4, r5
 800aa94:	bd70      	pop	{r4, r5, r6, pc}
 800aa96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa9a:	da0d      	bge.n	800aab8 <scalbn+0xb8>
 800aa9c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aaa0:	429e      	cmp	r6, r3
 800aaa2:	ec45 4b11 	vmov	d1, r4, r5
 800aaa6:	dce1      	bgt.n	800aa6c <scalbn+0x6c>
 800aaa8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800aad0 <scalbn+0xd0>
 800aaac:	f000 f81e 	bl	800aaec <copysign>
 800aab0:	a307      	add	r3, pc, #28	; (adr r3, 800aad0 <scalbn+0xd0>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	e7e0      	b.n	800aa7a <scalbn+0x7a>
 800aab8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aabc:	3236      	adds	r2, #54	; 0x36
 800aabe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aac2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aac6:	4620      	mov	r0, r4
 800aac8:	4629      	mov	r1, r5
 800aaca:	2200      	movs	r2, #0
 800aacc:	4b06      	ldr	r3, [pc, #24]	; (800aae8 <scalbn+0xe8>)
 800aace:	e7b2      	b.n	800aa36 <scalbn+0x36>
 800aad0:	c2f8f359 	.word	0xc2f8f359
 800aad4:	01a56e1f 	.word	0x01a56e1f
 800aad8:	8800759c 	.word	0x8800759c
 800aadc:	7e37e43c 	.word	0x7e37e43c
 800aae0:	43500000 	.word	0x43500000
 800aae4:	ffff3cb0 	.word	0xffff3cb0
 800aae8:	3c900000 	.word	0x3c900000

0800aaec <copysign>:
 800aaec:	ec51 0b10 	vmov	r0, r1, d0
 800aaf0:	ee11 0a90 	vmov	r0, s3
 800aaf4:	ee10 2a10 	vmov	r2, s0
 800aaf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aafc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ab00:	ea41 0300 	orr.w	r3, r1, r0
 800ab04:	ec43 2b10 	vmov	d0, r2, r3
 800ab08:	4770      	bx	lr
	...

0800ab0c <_init>:
 800ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0e:	bf00      	nop
 800ab10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab12:	bc08      	pop	{r3}
 800ab14:	469e      	mov	lr, r3
 800ab16:	4770      	bx	lr

0800ab18 <_fini>:
 800ab18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1a:	bf00      	nop
 800ab1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1e:	bc08      	pop	{r3}
 800ab20:	469e      	mov	lr, r3
 800ab22:	4770      	bx	lr
