
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08009478  08009478  00019478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e0  080096e0  000202c8  2**0
                  CONTENTS
  4 .ARM          00000008  080096e0  080096e0  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096e8  080096e8  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e8  080096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096ec  080096ec  000196ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  080096f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  200002c8  080099b8  000202c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b3c  080099b8  00020b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae08  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003bb7  00000000  00000000  0003b100  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001568  00000000  00000000  0003ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  00040220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c22  00000000  00000000  00041580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014eb0  00000000  00000000  0006b1a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fde2e  00000000  00000000  00080052  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017de80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006184  00000000  00000000  0017defc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002c8 	.word	0x200002c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009460 	.word	0x08009460

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002cc 	.word	0x200002cc
 800020c:	08009460 	.word	0x08009460

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000dce:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dd0:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <MX_ADC1_Init+0xa0>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000dfe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e1e:	480e      	ldr	r0, [pc, #56]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e20:	f001 fe00 	bl	8002a24 <HAL_ADC_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000e2a:	f000 ffad 	bl	8001d88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e36:	2307      	movs	r3, #7
 8000e38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MX_ADC1_Init+0x9c>)
 8000e40:	f001 ff40 	bl	8002cc4 <HAL_ADC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e4a:	f000 ff9d 	bl	8001d88 <Error_Handler>
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000036c 	.word	0x2000036c
 8000e5c:	40012000 	.word	0x40012000

08000e60 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000e74:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <MX_ADC2_Init+0xa0>)
 8000e76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_TRGO;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000ea2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ec2:	480e      	ldr	r0, [pc, #56]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000ec4:	f001 fdae 	bl	8002a24 <HAL_ADC_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000ece:	f000 ff5b 	bl	8001d88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000eda:	2307      	movs	r3, #7
 8000edc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <MX_ADC2_Init+0x9c>)
 8000ee4:	f001 feee 	bl	8002cc4 <HAL_ADC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000eee:	f000 ff4b 	bl	8001d88 <Error_Handler>
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000324 	.word	0x20000324
 8000f00:	40012100 	.word	0x40012100

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a5a      	ldr	r2, [pc, #360]	; (800108c <HAL_ADC_MspInit+0x188>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d154      	bne.n	8000fd0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f26:	4b5a      	ldr	r3, [pc, #360]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	4a59      	ldr	r2, [pc, #356]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8000f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f30:	6453      	str	r3, [r2, #68]	; 0x44
 8000f32:	4b57      	ldr	r3, [pc, #348]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	61bb      	str	r3, [r7, #24]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b54      	ldr	r3, [pc, #336]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a53      	ldr	r2, [pc, #332]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b51      	ldr	r3, [pc, #324]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f56:	2308      	movs	r3, #8
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	484a      	ldr	r0, [pc, #296]	; (8001094 <HAL_ADC_MspInit+0x190>)
 8000f6a:	f003 fbc9 	bl	8004700 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f6e:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000f70:	4a4a      	ldr	r2, [pc, #296]	; (800109c <HAL_ADC_MspInit+0x198>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f74:	4b48      	ldr	r3, [pc, #288]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b47      	ldr	r3, [pc, #284]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b45      	ldr	r3, [pc, #276]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b44      	ldr	r3, [pc, #272]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f8e:	4b42      	ldr	r3, [pc, #264]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f96:	4b40      	ldr	r3, [pc, #256]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f9e:	4b3e      	ldr	r3, [pc, #248]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fb2:	4839      	ldr	r0, [pc, #228]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000fb4:	f002 fba0 	bl	80036f8 <HAL_DMA_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000fbe:	f000 fee3 	bl	8001d88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a34      	ldr	r2, [pc, #208]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fc8:	4a33      	ldr	r2, [pc, #204]	; (8001098 <HAL_ADC_MspInit+0x194>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000fce:	e059      	b.n	8001084 <HAL_ADC_MspInit+0x180>
  else if(adcHandle->Instance==ADC2)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a32      	ldr	r2, [pc, #200]	; (80010a0 <HAL_ADC_MspInit+0x19c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d154      	bne.n	8001084 <HAL_ADC_MspInit+0x180>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a2c      	ldr	r2, [pc, #176]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8000fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a26      	ldr	r2, [pc, #152]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <HAL_ADC_MspInit+0x18c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800100a:	2310      	movs	r3, #16
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	481d      	ldr	r0, [pc, #116]	; (8001094 <HAL_ADC_MspInit+0x190>)
 800101e:	f003 fb6f 	bl	8004700 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 8001024:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <HAL_ADC_MspInit+0x1a4>)
 8001026:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 800102a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800102e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 800103e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001042:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 8001046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800104a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 800104e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001052:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 8001056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800105a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001068:	480e      	ldr	r0, [pc, #56]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 800106a:	f002 fb45 	bl	80036f8 <HAL_DMA_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_ADC_MspInit+0x174>
      Error_Handler();
 8001074:	f000 fe88 	bl	8001d88 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 800107c:	639a      	str	r2, [r3, #56]	; 0x38
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <HAL_ADC_MspInit+0x1a0>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001084:	bf00      	nop
 8001086:	3730      	adds	r7, #48	; 0x30
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40012000 	.word	0x40012000
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000
 8001098:	200003b4 	.word	0x200003b4
 800109c:	40026410 	.word	0x40026410
 80010a0:	40012100 	.word	0x40012100
 80010a4:	20000414 	.word	0x20000414
 80010a8:	40026440 	.word	0x40026440

080010ac <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80010b2:	463b      	mov	r3, r7
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_DAC_Init+0x4c>)
 80010bc:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <MX_DAC_Init+0x50>)
 80010be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_DAC_Init+0x4c>)
 80010c2:	f002 f9c0 	bl	8003446 <HAL_DAC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80010cc:	f000 fe5c 	bl	8001d88 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 80010d0:	232c      	movs	r3, #44	; 0x2c
 80010d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	2210      	movs	r2, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_DAC_Init+0x4c>)
 80010e0:	f002 fa8d 	bl	80035fe <HAL_DAC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010ea:	f000 fe4d 	bl	8001d88 <Error_Handler>
  }

}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000474 	.word	0x20000474
 80010fc:	40007400 	.word	0x40007400

08001100 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a19      	ldr	r2, [pc, #100]	; (8001184 <HAL_DAC_MspInit+0x84>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d12b      	bne.n	800117a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_DAC_MspInit+0x88>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_DAC_MspInit+0x88>)
 8001128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_DAC_MspInit+0x88>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_DAC_MspInit+0x88>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <HAL_DAC_MspInit+0x88>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_DAC_MspInit+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001152:	2320      	movs	r3, #32
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001156:	2303      	movs	r3, #3
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <HAL_DAC_MspInit+0x8c>)
 8001166:	f003 facb 	bl	8004700 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2036      	movs	r0, #54	; 0x36
 8001170:	f002 f933 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001174:	2036      	movs	r0, #54	; 0x36
 8001176:	f002 f94c 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40007400 	.word	0x40007400
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000

08001190 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_DMA_Init+0x48>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <MX_DMA_Init+0x48>)
 800119c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <MX_DMA_Init+0x48>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2038      	movs	r0, #56	; 0x38
 80011b4:	f002 f911 	bl	80033da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011b8:	2038      	movs	r0, #56	; 0x38
 80011ba:	f002 f92a 	bl	8003412 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	203a      	movs	r0, #58	; 0x3a
 80011c4:	f002 f909 	bl	80033da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80011c8:	203a      	movs	r0, #58	; 0x3a
 80011ca:	f002 f922 	bl	8003412 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_ETH_Init+0x78>)
 80011e2:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <MX_ETH_Init+0x7c>)
 80011e4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_ETH_Init+0x78>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_ETH_Init+0x78>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_ETH_Init+0x78>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_ETH_Init+0x78>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	3301      	adds	r3, #1
 8001200:	2280      	movs	r2, #128	; 0x80
 8001202:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_ETH_Init+0x78>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	3302      	adds	r3, #2
 800120a:	22e1      	movs	r2, #225	; 0xe1
 800120c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_ETH_Init+0x78>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	3303      	adds	r3, #3
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_ETH_Init+0x78>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	3304      	adds	r3, #4
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_ETH_Init+0x78>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	3305      	adds	r3, #5
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_ETH_Init+0x78>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_ETH_Init+0x78>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_ETH_Init+0x78>)
 800123a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800123e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_ETH_Init+0x78>)
 8001242:	f002 fdf1 	bl	8003e28 <HAL_ETH_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 800124c:	f000 fd9c 	bl	8001d88 <Error_Handler>
  }

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000488 	.word	0x20000488
 8001258:	40028000 	.word	0x40028000

0800125c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a4e      	ldr	r2, [pc, #312]	; (80013b4 <HAL_ETH_MspInit+0x158>)
 800127a:	4293      	cmp	r3, r2
 800127c:	f040 8096 	bne.w	80013ac <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001280:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	4a4c      	ldr	r2, [pc, #304]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 8001286:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800128a:	6313      	str	r3, [r2, #48]	; 0x30
 800128c:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001294:	623b      	str	r3, [r7, #32]
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	4a46      	ldr	r2, [pc, #280]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 800129e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012a2:	6313      	str	r3, [r2, #48]	; 0x30
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a40      	ldr	r2, [pc, #256]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a3a      	ldr	r2, [pc, #232]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a34      	ldr	r2, [pc, #208]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a2e      	ldr	r2, [pc, #184]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 8001316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_ETH_MspInit+0x15c>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001328:	2332      	movs	r3, #50	; 0x32
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001338:	230b      	movs	r3, #11
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	481e      	ldr	r0, [pc, #120]	; (80013bc <HAL_ETH_MspInit+0x160>)
 8001344:	f003 f9dc 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001348:	2386      	movs	r3, #134	; 0x86
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001358:	230b      	movs	r3, #11
 800135a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	4817      	ldr	r0, [pc, #92]	; (80013c0 <HAL_ETH_MspInit+0x164>)
 8001364:	f003 f9cc 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800137a:	230b      	movs	r3, #11
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <HAL_ETH_MspInit+0x168>)
 8001386:	f003 f9bb 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800138a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139c:	230b      	movs	r3, #11
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	4619      	mov	r1, r3
 80013a6:	4808      	ldr	r0, [pc, #32]	; (80013c8 <HAL_ETH_MspInit+0x16c>)
 80013a8:	f003 f9aa 	bl	8004700 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80013ac:	bf00      	nop
 80013ae:	3738      	adds	r7, #56	; 0x38
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40028000 	.word	0x40028000
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40021800 	.word	0x40021800

080013cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <MX_GPIO_Init+0x194>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a5e      	ldr	r2, [pc, #376]	; (8001560 <MX_GPIO_Init+0x194>)
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <MX_GPIO_Init+0x194>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	4b59      	ldr	r3, [pc, #356]	; (8001560 <MX_GPIO_Init+0x194>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a58      	ldr	r2, [pc, #352]	; (8001560 <MX_GPIO_Init+0x194>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b56      	ldr	r3, [pc, #344]	; (8001560 <MX_GPIO_Init+0x194>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001412:	4b53      	ldr	r3, [pc, #332]	; (8001560 <MX_GPIO_Init+0x194>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a52      	ldr	r2, [pc, #328]	; (8001560 <MX_GPIO_Init+0x194>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b50      	ldr	r3, [pc, #320]	; (8001560 <MX_GPIO_Init+0x194>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b4d      	ldr	r3, [pc, #308]	; (8001560 <MX_GPIO_Init+0x194>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a4c      	ldr	r2, [pc, #304]	; (8001560 <MX_GPIO_Init+0x194>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <MX_GPIO_Init+0x194>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <MX_GPIO_Init+0x194>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a46      	ldr	r2, [pc, #280]	; (8001560 <MX_GPIO_Init+0x194>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b44      	ldr	r3, [pc, #272]	; (8001560 <MX_GPIO_Init+0x194>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <MX_GPIO_Init+0x194>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a40      	ldr	r2, [pc, #256]	; (8001560 <MX_GPIO_Init+0x194>)
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <MX_GPIO_Init+0x194>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <MX_GPIO_Init+0x194>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a3a      	ldr	r2, [pc, #232]	; (8001560 <MX_GPIO_Init+0x194>)
 8001478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b38      	ldr	r3, [pc, #224]	; (8001560 <MX_GPIO_Init+0x194>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|Enable_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2114      	movs	r1, #20
 800148e:	4835      	ldr	r0, [pc, #212]	; (8001564 <MX_GPIO_Init+0x198>)
 8001490:	f003 fae0 	bl	8004a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f244 0181 	movw	r1, #16513	; 0x4081
 800149a:	4833      	ldr	r0, [pc, #204]	; (8001568 <MX_GPIO_Init+0x19c>)
 800149c:	f003 fada 	bl	8004a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2140      	movs	r1, #64	; 0x40
 80014a4:	4831      	ldr	r0, [pc, #196]	; (800156c <MX_GPIO_Init+0x1a0>)
 80014a6:	f003 fad5 	bl	8004a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	21f0      	movs	r1, #240	; 0xf0
 80014ae:	4830      	ldr	r0, [pc, #192]	; (8001570 <MX_GPIO_Init+0x1a4>)
 80014b0:	f003 fad0 	bl	8004a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = RS_Pin|Enable_Pin;
 80014b4:	2314      	movs	r3, #20
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	4826      	ldr	r0, [pc, #152]	; (8001564 <MX_GPIO_Init+0x198>)
 80014cc:	f003 f918 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80014d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <MX_GPIO_Init+0x1a8>)
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4824      	ldr	r0, [pc, #144]	; (8001578 <MX_GPIO_Init+0x1ac>)
 80014e6:	f003 f90b 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014ea:	f244 0381 	movw	r3, #16513	; 0x4081
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4819      	ldr	r0, [pc, #100]	; (8001568 <MX_GPIO_Init+0x19c>)
 8001504:	f003 f8fc 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001508:	2340      	movs	r3, #64	; 0x40
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4813      	ldr	r0, [pc, #76]	; (800156c <MX_GPIO_Init+0x1a0>)
 8001520:	f003 f8ee 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_GPIO_Init+0x1a0>)
 8001538:	f003 f8e2 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 800153c:	23f0      	movs	r3, #240	; 0xf0
 800153e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4807      	ldr	r0, [pc, #28]	; (8001570 <MX_GPIO_Init+0x1a4>)
 8001554:	f003 f8d4 	bl	8004700 <HAL_GPIO_Init>

}
 8001558:	bf00      	nop
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	40021000 	.word	0x40021000
 8001568:	40020400 	.word	0x40020400
 800156c:	40021800 	.word	0x40021800
 8001570:	40020c00 	.word	0x40020c00
 8001574:	10110000 	.word	0x10110000
 8001578:	40020800 	.word	0x40020800

0800157c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800158a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800158e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8001592:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001596:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8001598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800159a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800159c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800159e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 f80e 	bl	80015d2 <Lcd_init>

	return lcd;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	461d      	mov	r5, r3
 80015ba:	f107 0410 	add.w	r4, r7, #16
 80015be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015c6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bdb0      	pop	{r4, r5, r7, pc}

080015d2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7d9b      	ldrb	r3, [r3, #22]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10c      	bne.n	80015fc <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80015e2:	2133      	movs	r1, #51	; 0x33
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f86d 	bl	80016c4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80015ea:	2132      	movs	r1, #50	; 0x32
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f869 	bl	80016c4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80015f2:	2128      	movs	r1, #40	; 0x28
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f865 	bl	80016c4 <lcd_write_command>
 80015fa:	e003      	b.n	8001604 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80015fc:	2138      	movs	r1, #56	; 0x38
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f860 	bl	80016c4 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001604:	2101      	movs	r1, #1
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f85c 	bl	80016c4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800160c:	210c      	movs	r1, #12
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f858 	bl	80016c4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001614:	2106      	movs	r1, #6
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f854 	bl	80016c4 <lcd_write_command>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	4906      	ldr	r1, [pc, #24]	; (8001650 <Lcd_int+0x2c>)
 8001636:	4618      	mov	r0, r3
 8001638:	f006 fe26 	bl	8008288 <siprintf>

	Lcd_string(lcd, buffer);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f806 	bl	8001654 <Lcd_string>
}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	08009478 	.word	0x08009478

08001654 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800165e:	2300      	movs	r3, #0
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	e00a      	b.n	800167a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	4413      	add	r3, r2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f856 	bl	8001720 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	3301      	adds	r3, #1
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	7bfc      	ldrb	r4, [r7, #15]
 800167c:	6838      	ldr	r0, [r7, #0]
 800167e:	f7fe fdd1 	bl	8000224 <strlen>
 8001682:	4603      	mov	r3, r0
 8001684:	429c      	cmp	r4, r3
 8001686:	d3ed      	bcc.n	8001664 <Lcd_string+0x10>
	}
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}

08001690 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
 800169c:	4613      	mov	r3, r2
 800169e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <Lcd_cursor+0x30>)
 80016a4:	5cd2      	ldrb	r2, [r2, r3]
 80016a6:	78bb      	ldrb	r3, [r7, #2]
 80016a8:	4413      	add	r3, r2
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	3b80      	subs	r3, #128	; 0x80
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f806 	bl	80016c4 <lcd_write_command>
	#endif
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	08009500 	.word	0x08009500

080016c4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6898      	ldr	r0, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	899b      	ldrh	r3, [r3, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	4619      	mov	r1, r3
 80016dc:	f003 f9ba 	bl	8004a54 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7d9b      	ldrb	r3, [r3, #22]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2204      	movs	r2, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f842 	bl	800177c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2204      	movs	r2, #4
 8001702:	4619      	mov	r1, r3
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f839 	bl	800177c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800170a:	e005      	b.n	8001718 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	2208      	movs	r2, #8
 8001710:	4619      	mov	r1, r3
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f832 	bl	800177c <lcd_write>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6898      	ldr	r0, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	899b      	ldrh	r3, [r3, #12]
 8001734:	2201      	movs	r2, #1
 8001736:	4619      	mov	r1, r3
 8001738:	f003 f98c 	bl	8004a54 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7d9b      	ldrb	r3, [r3, #22]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d111      	bne.n	8001768 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2204      	movs	r2, #4
 800174c:	4619      	mov	r1, r3
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f814 	bl	800177c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2204      	movs	r2, #4
 800175e:	4619      	mov	r1, r3
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f80b 	bl	800177c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001766:	e005      	b.n	8001774 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	2208      	movs	r2, #8
 800176c:	4619      	mov	r1, r3
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f804 	bl	800177c <lcd_write>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]
 8001788:	4613      	mov	r3, r2
 800178a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e019      	b.n	80017c6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	8819      	ldrh	r1, [r3, #0]
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	fa42 f303 	asr.w	r3, r2, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	f003 f94a 	bl	8004a54 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	3301      	adds	r3, #1
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	78bb      	ldrb	r3, [r7, #2]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d3e1      	bcc.n	8001792 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6918      	ldr	r0, [r3, #16]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	8a9b      	ldrh	r3, [r3, #20]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4619      	mov	r1, r3
 80017da:	f003 f93b 	bl	8004a54 <HAL_GPIO_WritePin>
	DELAY(1);
 80017de:	2001      	movs	r0, #1
 80017e0:	f001 f8fe 	bl	80029e0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6918      	ldr	r0, [r3, #16]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	8a9b      	ldrh	r3, [r3, #20]
 80017ec:	2200      	movs	r2, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	f003 f930 	bl	8004a54 <HAL_GPIO_WritePin>
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	0000      	movs	r0, r0
	...

08001800 <Set_Sinus_Values>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

//Scale samples values to set amplitude
void Set_Sinus_Values()
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
	for(int j = 0; j < 100; j++) {
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	e032      	b.n	8001872 <Set_Sinus_Values+0x72>
		sine[j] = (float)sine[j] * A * 2.0 / 3.3;
 800180c:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <Set_Sinus_Values+0x88>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800181c:	ee17 0a90 	vmov	r0, s15
 8001820:	f7fe fec2 	bl	80005a8 <__aeabi_f2d>
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <Set_Sinus_Values+0x8c>)
 8001826:	e9d3 3400 	ldrd	r3, r4, [r3]
 800182a:	461a      	mov	r2, r3
 800182c:	4623      	mov	r3, r4
 800182e:	f7fe ff13 	bl	8000658 <__aeabi_dmul>
 8001832:	4603      	mov	r3, r0
 8001834:	460c      	mov	r4, r1
 8001836:	4618      	mov	r0, r3
 8001838:	4621      	mov	r1, r4
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	f7fe fd55 	bl	80002ec <__adddf3>
 8001842:	4603      	mov	r3, r0
 8001844:	460c      	mov	r4, r1
 8001846:	4618      	mov	r0, r3
 8001848:	4621      	mov	r1, r4
 800184a:	a30d      	add	r3, pc, #52	; (adr r3, 8001880 <Set_Sinus_Values+0x80>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7ff f82c 	bl	80008ac <__aeabi_ddiv>
 8001854:	4603      	mov	r3, r0
 8001856:	460c      	mov	r4, r1
 8001858:	4618      	mov	r0, r3
 800185a:	4621      	mov	r1, r4
 800185c:	f7ff f90e 	bl	8000a7c <__aeabi_d2uiz>
 8001860:	4603      	mov	r3, r0
 8001862:	b299      	uxth	r1, r3
 8001864:	4a08      	ldr	r2, [pc, #32]	; (8001888 <Set_Sinus_Values+0x88>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j = 0; j < 100; j++) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b63      	cmp	r3, #99	; 0x63
 8001876:	ddc9      	ble.n	800180c <Set_Sinus_Values+0xc>
	}
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bd90      	pop	{r4, r7, pc}
 8001880:	66666666 	.word	0x66666666
 8001884:	400a6666 	.word	0x400a6666
 8001888:	20000008 	.word	0x20000008
 800188c:	20000000 	.word	0x20000000

08001890 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) { //If interrupt comes from timer 2
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a0:	d102      	bne.n	80018a8 <HAL_TIM_PeriodElapsedCallback+0x18>
		ifDisplay = 1;
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM3) { //If interrupt comes from timer 3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d102      	bne.n	80018b8 <HAL_TIM_PeriodElapsedCallback+0x28>
		ifServo=1;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM4){ //If interrupt comes from timer 4
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d115      	bne.n	80018ee <HAL_TIM_PeriodElapsedCallback+0x5e>
		i += 1;
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80018ca:	6013      	str	r3, [r2, #0]
		if (i>=100) {
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b63      	cmp	r3, #99	; 0x63
 80018d2:	dd02      	ble.n	80018da <HAL_TIM_PeriodElapsedCallback+0x4a>
			i = 0;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
		}
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sine[i]);
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a11      	ldr	r2, [pc, #68]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80018e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018e4:	2200      	movs	r2, #0
 80018e6:	2110      	movs	r1, #16
 80018e8:	480f      	ldr	r0, [pc, #60]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80018ea:	f001 fed5 	bl	8003698 <HAL_DAC_SetValue>
	}
	if(htim->Instance == TIM5){ //If interrupt comes from timer 5
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d107      	bne.n	8001908 <HAL_TIM_PeriodElapsedCallback+0x78>
		sensor_value = sensor_read_from_DMA;
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80018fe:	6013      	str	r3, [r2, #0]
		pot_value = pot_read_from_DMA;
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001906:	6013      	str	r3, [r2, #0]
	}
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200002f8 	.word	0x200002f8
 8001914:	40000400 	.word	0x40000400
 8001918:	200002fc 	.word	0x200002fc
 800191c:	40000800 	.word	0x40000800
 8001920:	200002e4 	.word	0x200002e4
 8001924:	20000008 	.word	0x20000008
 8001928:	20000474 	.word	0x20000474
 800192c:	40000c00 	.word	0x40000c00
 8001930:	200002f0 	.word	0x200002f0
 8001934:	200002ec 	.word	0x200002ec
 8001938:	200002f4 	.word	0x200002f4
 800193c:	200002e8 	.word	0x200002e8

08001940 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	//Save received data
	for (int i = 0; i < MESSAGE_MAX_SIZE; i++) {
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e00b      	b.n	8001966 <HAL_UART_RxCpltCallback+0x26>
		savedMessage[i] = receivedMessage[i];
 800194e:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <HAL_UART_RxCpltCallback+0x44>)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	7819      	ldrb	r1, [r3, #0]
 8001956:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <HAL_UART_RxCpltCallback+0x48>)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	460a      	mov	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MESSAGE_MAX_SIZE; i++) {
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3301      	adds	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b07      	cmp	r3, #7
 800196a:	ddf0      	ble.n	800194e <HAL_UART_RxCpltCallback+0xe>
	}
	receivedMessage[0] = '\0';
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_UART_RxCpltCallback+0x44>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]

	//Listening again
	HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedMessage, 7);
 8001972:	2207      	movs	r2, #7
 8001974:	4903      	ldr	r1, [pc, #12]	; (8001984 <HAL_UART_RxCpltCallback+0x44>)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <HAL_UART_RxCpltCallback+0x4c>)
 8001978:	f005 fb12 	bl	8006fa0 <HAL_UART_Receive_IT>
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000304 	.word	0x20000304
 8001988:	2000030c 	.word	0x2000030c
 800198c:	200006b0 	.word	0x200006b0

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001996:	f000 ffc6 	bl	8002926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f963 	bl	8001c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f7ff fd15 	bl	80013cc <MX_GPIO_Init>
  MX_ETH_Init();
 80019a2:	f7ff fc1b 	bl	80011dc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80019a6:	f000 fe2d 	bl	8002604 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80019aa:	f000 ff09 	bl	80027c0 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 80019ae:	f7ff fbef 	bl	8001190 <MX_DMA_Init>
  MX_ADC1_Init();
 80019b2:	f7ff fa03 	bl	8000dbc <MX_ADC1_Init>
  MX_TIM1_Init();
 80019b6:	f000 fb79 	bl	80020ac <MX_TIM1_Init>
  MX_TIM2_Init();
 80019ba:	f000 fc23 	bl	8002204 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019be:	f000 fc6f 	bl	80022a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019c2:	f000 fcbd 	bl	8002340 <MX_TIM4_Init>
  MX_DAC_Init();
 80019c6:	f7ff fb71 	bl	80010ac <MX_DAC_Init>
  MX_ADC2_Init();
 80019ca:	f7ff fa49 	bl	8000e60 <MX_ADC2_Init>
  MX_TIM5_Init();
 80019ce:	f000 fd05 	bl	80023dc <MX_TIM5_Init>
  MX_USART6_UART_Init();
 80019d2:	f000 fe47 	bl	8002664 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  //Start tim2 to write data from joystick to the lcd display
  HAL_TIM_Base_Start_IT(&htim2);
 80019d6:	487e      	ldr	r0, [pc, #504]	; (8001bd0 <main+0x240>)
 80019d8:	f004 fa20 	bl	8005e1c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80019dc:	487d      	ldr	r0, [pc, #500]	; (8001bd4 <main+0x244>)
 80019de:	f004 fa1d 	bl	8005e1c <HAL_TIM_Base_Start_IT>

  //Create lcd
  my_lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, Enable_GPIO_Port, Enable_Pin, LCD_4_BIT_MODE);
 80019e2:	4c7d      	ldr	r4, [pc, #500]	; (8001bd8 <main+0x248>)
 80019e4:	4638      	mov	r0, r7
 80019e6:	2300      	movs	r3, #0
 80019e8:	9303      	str	r3, [sp, #12]
 80019ea:	2310      	movs	r3, #16
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	4b7b      	ldr	r3, [pc, #492]	; (8001bdc <main+0x24c>)
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	2304      	movs	r3, #4
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	4b79      	ldr	r3, [pc, #484]	; (8001bdc <main+0x24c>)
 80019f8:	4a79      	ldr	r2, [pc, #484]	; (8001be0 <main+0x250>)
 80019fa:	497a      	ldr	r1, [pc, #488]	; (8001be4 <main+0x254>)
 80019fc:	f7ff fdbe 	bl	800157c <Lcd_create>
 8001a00:	4625      	mov	r5, r4
 8001a02:	463c      	mov	r4, r7
 8001a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a0c:	e885 0003 	stmia.w	r5, {r0, r1}

  //Initialize micro servo sg90
  Servo_Init(&servo1, &htim1, TIM_CHANNEL_4);
 8001a10:	220c      	movs	r2, #12
 8001a12:	4975      	ldr	r1, [pc, #468]	; (8001be8 <main+0x258>)
 8001a14:	4875      	ldr	r0, [pc, #468]	; (8001bec <main+0x25c>)
 8001a16:	f000 f9be 	bl	8001d96 <Servo_Init>

  //Sinus
  Set_Sinus_Values();
 8001a1a:	f7ff fef1 	bl	8001800 <Set_Sinus_Values>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001a1e:	2110      	movs	r1, #16
 8001a20:	4873      	ldr	r0, [pc, #460]	; (8001bf0 <main+0x260>)
 8001a22:	f001 fd32 	bl	800348a <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001a26:	4873      	ldr	r0, [pc, #460]	; (8001bf4 <main+0x264>)
 8001a28:	f004 f9f8 	bl	8005e1c <HAL_TIM_Base_Start_IT>

  //Interrupts for DMA adc2
  HAL_TIM_Base_Start_IT(&htim5);
 8001a2c:	4872      	ldr	r0, [pc, #456]	; (8001bf8 <main+0x268>)
 8001a2e:	f004 f9f5 	bl	8005e1c <HAL_TIM_Base_Start_IT>

  //Start ADC conversion from the potentiometer and sensor
  HAL_ADC_Start_DMA(&hadc1, &pot_read_from_DMA, 1);
 8001a32:	2201      	movs	r2, #1
 8001a34:	4971      	ldr	r1, [pc, #452]	; (8001bfc <main+0x26c>)
 8001a36:	4872      	ldr	r0, [pc, #456]	; (8001c00 <main+0x270>)
 8001a38:	f001 f838 	bl	8002aac <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &sensor_read_from_DMA, 1);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4971      	ldr	r1, [pc, #452]	; (8001c04 <main+0x274>)
 8001a40:	4871      	ldr	r0, [pc, #452]	; (8001c08 <main+0x278>)
 8001a42:	f001 f833 	bl	8002aac <HAL_ADC_Start_DMA>

  //UART listening
  HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedMessage, 7);
 8001a46:	2207      	movs	r2, #7
 8001a48:	4970      	ldr	r1, [pc, #448]	; (8001c0c <main+0x27c>)
 8001a4a:	4871      	ldr	r0, [pc, #452]	; (8001c10 <main+0x280>)
 8001a4c:	f005 faa8 	bl	8006fa0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ifDisplay == 1) {
 8001a50:	4b70      	ldr	r3, [pc, #448]	; (8001c14 <main+0x284>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d132      	bne.n	8001abe <main+0x12e>
		  Lcd_cursor(&my_lcd, 0, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	485e      	ldr	r0, [pc, #376]	; (8001bd8 <main+0x248>)
 8001a5e:	f7ff fe17 	bl	8001690 <Lcd_cursor>
		  Lcd_string(&my_lcd, "                ");
 8001a62:	496d      	ldr	r1, [pc, #436]	; (8001c18 <main+0x288>)
 8001a64:	485c      	ldr	r0, [pc, #368]	; (8001bd8 <main+0x248>)
 8001a66:	f7ff fdf5 	bl	8001654 <Lcd_string>
		  Lcd_cursor(&my_lcd, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	485a      	ldr	r0, [pc, #360]	; (8001bd8 <main+0x248>)
 8001a70:	f7ff fe0e 	bl	8001690 <Lcd_cursor>
		  Lcd_string(&my_lcd, "Sens: ");
 8001a74:	4969      	ldr	r1, [pc, #420]	; (8001c1c <main+0x28c>)
 8001a76:	4858      	ldr	r0, [pc, #352]	; (8001bd8 <main+0x248>)
 8001a78:	f7ff fdec 	bl	8001654 <Lcd_string>
		  Lcd_int(&my_lcd, sensor_value);
 8001a7c:	4b68      	ldr	r3, [pc, #416]	; (8001c20 <main+0x290>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4855      	ldr	r0, [pc, #340]	; (8001bd8 <main+0x248>)
 8001a84:	f7ff fdce 	bl	8001624 <Lcd_int>
		  Lcd_cursor(&my_lcd, 1, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4852      	ldr	r0, [pc, #328]	; (8001bd8 <main+0x248>)
 8001a8e:	f7ff fdff 	bl	8001690 <Lcd_cursor>
		  Lcd_string(&my_lcd, "                ");
 8001a92:	4961      	ldr	r1, [pc, #388]	; (8001c18 <main+0x288>)
 8001a94:	4850      	ldr	r0, [pc, #320]	; (8001bd8 <main+0x248>)
 8001a96:	f7ff fddd 	bl	8001654 <Lcd_string>
		  Lcd_cursor(&my_lcd, 1, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	484e      	ldr	r0, [pc, #312]	; (8001bd8 <main+0x248>)
 8001aa0:	f7ff fdf6 	bl	8001690 <Lcd_cursor>
		  Lcd_string(&my_lcd, "Pot: ");
 8001aa4:	495f      	ldr	r1, [pc, #380]	; (8001c24 <main+0x294>)
 8001aa6:	484c      	ldr	r0, [pc, #304]	; (8001bd8 <main+0x248>)
 8001aa8:	f7ff fdd4 	bl	8001654 <Lcd_string>
		  Lcd_int(&my_lcd, pot_value);
 8001aac:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <main+0x298>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4849      	ldr	r0, [pc, #292]	; (8001bd8 <main+0x248>)
 8001ab4:	f7ff fdb6 	bl	8001624 <Lcd_int>
		  ifDisplay = 0;
 8001ab8:	4b56      	ldr	r3, [pc, #344]	; (8001c14 <main+0x284>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
	  }
	  if(ifServo)
 8001abe:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <main+0x29c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d015      	beq.n	8001af2 <main+0x162>
	  {
		  angle = pot_value * 180 / 4095;
 8001ac6:	4b58      	ldr	r3, [pc, #352]	; (8001c28 <main+0x298>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	22b4      	movs	r2, #180	; 0xb4
 8001acc:	fb02 f203 	mul.w	r2, r2, r3
 8001ad0:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <main+0x2a0>)
 8001ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ad6:	1ad2      	subs	r2, r2, r3
 8001ad8:	0852      	lsrs	r2, r2, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	0adb      	lsrs	r3, r3, #11
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <main+0x2a4>)
 8001ae2:	601a      	str	r2, [r3, #0]
		  Servo_SetAngle(&servo1, angle);
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <main+0x2a4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4619      	mov	r1, r3
 8001aec:	483f      	ldr	r0, [pc, #252]	; (8001bec <main+0x25c>)
 8001aee:	f000 f986 	bl	8001dfe <Servo_SetAngle>
	  }

	  //LEDs' control by UART
	  if (!strcmp(savedMessage, "LD_R_ON") || !strcmp(savedMessage, "LD_G_ON") || !strcmp(savedMessage, "LD_B_ON")) {
 8001af2:	4951      	ldr	r1, [pc, #324]	; (8001c38 <main+0x2a8>)
 8001af4:	4851      	ldr	r0, [pc, #324]	; (8001c3c <main+0x2ac>)
 8001af6:	f7fe fb8b 	bl	8000210 <strcmp>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00d      	beq.n	8001b1c <main+0x18c>
 8001b00:	494f      	ldr	r1, [pc, #316]	; (8001c40 <main+0x2b0>)
 8001b02:	484e      	ldr	r0, [pc, #312]	; (8001c3c <main+0x2ac>)
 8001b04:	f7fe fb84 	bl	8000210 <strcmp>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <main+0x18c>
 8001b0e:	494d      	ldr	r1, [pc, #308]	; (8001c44 <main+0x2b4>)
 8001b10:	484a      	ldr	r0, [pc, #296]	; (8001c3c <main+0x2ac>)
 8001b12:	f7fe fb7d 	bl	8000210 <strcmp>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d121      	bne.n	8001b60 <main+0x1d0>
		  sscanf((char*)savedMessage, "LD_%c_ON ", &ledColor);
 8001b1c:	4a4a      	ldr	r2, [pc, #296]	; (8001c48 <main+0x2b8>)
 8001b1e:	494b      	ldr	r1, [pc, #300]	; (8001c4c <main+0x2bc>)
 8001b20:	4846      	ldr	r0, [pc, #280]	; (8001c3c <main+0x2ac>)
 8001b22:	f006 fbd1 	bl	80082c8 <siscanf>
		  switch(ledColor) {
 8001b26:	4b48      	ldr	r3, [pc, #288]	; (8001c48 <main+0x2b8>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b47      	cmp	r3, #71	; 0x47
 8001b2c:	d004      	beq.n	8001b38 <main+0x1a8>
 8001b2e:	2b52      	cmp	r3, #82	; 0x52
 8001b30:	d00c      	beq.n	8001b4c <main+0x1bc>
 8001b32:	2b42      	cmp	r3, #66	; 0x42
 8001b34:	d005      	beq.n	8001b42 <main+0x1b2>
 8001b36:	e00f      	b.n	8001b58 <main+0x1c8>
		  case 'G':
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4844      	ldr	r0, [pc, #272]	; (8001c50 <main+0x2c0>)
 8001b3e:	f002 ff89 	bl	8004a54 <HAL_GPIO_WritePin>
		  case 'B':
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	4842      	ldr	r0, [pc, #264]	; (8001c50 <main+0x2c0>)
 8001b48:	f002 ff84 	bl	8004a54 <HAL_GPIO_WritePin>
		  case 'R':
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b52:	483f      	ldr	r0, [pc, #252]	; (8001c50 <main+0x2c0>)
 8001b54:	f002 ff7e 	bl	8004a54 <HAL_GPIO_WritePin>
		  }
		  savedMessage[0] = '\0';
 8001b58:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <main+0x2ac>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
	  if (!strcmp(savedMessage, "LD_R_ON") || !strcmp(savedMessage, "LD_G_ON") || !strcmp(savedMessage, "LD_B_ON")) {
 8001b5e:	e036      	b.n	8001bce <main+0x23e>
	  }
	  else if (!strcmp(savedMessage, "LD_R_OFF") || !strcmp(savedMessage, "LD_G_OFF") || !strcmp(savedMessage, "LD_B_OFF")) {
 8001b60:	493c      	ldr	r1, [pc, #240]	; (8001c54 <main+0x2c4>)
 8001b62:	4836      	ldr	r0, [pc, #216]	; (8001c3c <main+0x2ac>)
 8001b64:	f7fe fb54 	bl	8000210 <strcmp>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00e      	beq.n	8001b8c <main+0x1fc>
 8001b6e:	493a      	ldr	r1, [pc, #232]	; (8001c58 <main+0x2c8>)
 8001b70:	4832      	ldr	r0, [pc, #200]	; (8001c3c <main+0x2ac>)
 8001b72:	f7fe fb4d 	bl	8000210 <strcmp>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <main+0x1fc>
 8001b7c:	4937      	ldr	r1, [pc, #220]	; (8001c5c <main+0x2cc>)
 8001b7e:	482f      	ldr	r0, [pc, #188]	; (8001c3c <main+0x2ac>)
 8001b80:	f7fe fb46 	bl	8000210 <strcmp>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f47f af62 	bne.w	8001a50 <main+0xc0>
		  sscanf((char*)savedMessage, "LD_%c_OFF", &ledColor);
 8001b8c:	4a2e      	ldr	r2, [pc, #184]	; (8001c48 <main+0x2b8>)
 8001b8e:	4934      	ldr	r1, [pc, #208]	; (8001c60 <main+0x2d0>)
 8001b90:	482a      	ldr	r0, [pc, #168]	; (8001c3c <main+0x2ac>)
 8001b92:	f006 fb99 	bl	80082c8 <siscanf>
		  switch(ledColor) {
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <main+0x2b8>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b47      	cmp	r3, #71	; 0x47
 8001b9c:	d004      	beq.n	8001ba8 <main+0x218>
 8001b9e:	2b52      	cmp	r3, #82	; 0x52
 8001ba0:	d00c      	beq.n	8001bbc <main+0x22c>
 8001ba2:	2b42      	cmp	r3, #66	; 0x42
 8001ba4:	d005      	beq.n	8001bb2 <main+0x222>
 8001ba6:	e00f      	b.n	8001bc8 <main+0x238>
		  case 'G':
		  	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2101      	movs	r1, #1
 8001bac:	4828      	ldr	r0, [pc, #160]	; (8001c50 <main+0x2c0>)
 8001bae:	f002 ff51 	bl	8004a54 <HAL_GPIO_WritePin>
		  case 'B':
		  	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	4826      	ldr	r0, [pc, #152]	; (8001c50 <main+0x2c0>)
 8001bb8:	f002 ff4c 	bl	8004a54 <HAL_GPIO_WritePin>
		  case 'R':
		  	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc2:	4823      	ldr	r0, [pc, #140]	; (8001c50 <main+0x2c0>)
 8001bc4:	f002 ff46 	bl	8004a54 <HAL_GPIO_WritePin>
		  }
		  savedMessage[0] = '\0';
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <main+0x2ac>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	  if(ifDisplay == 1) {
 8001bce:	e73f      	b.n	8001a50 <main+0xc0>
 8001bd0:	200005f0 	.word	0x200005f0
 8001bd4:	20000570 	.word	0x20000570
 8001bd8:	200004d8 	.word	0x200004d8
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	200000e4 	.word	0x200000e4
 8001be4:	200000d4 	.word	0x200000d4
 8001be8:	200005b0 	.word	0x200005b0
 8001bec:	200004d0 	.word	0x200004d0
 8001bf0:	20000474 	.word	0x20000474
 8001bf4:	200004f0 	.word	0x200004f0
 8001bf8:	20000530 	.word	0x20000530
 8001bfc:	200002f4 	.word	0x200002f4
 8001c00:	2000036c 	.word	0x2000036c
 8001c04:	200002f0 	.word	0x200002f0
 8001c08:	20000324 	.word	0x20000324
 8001c0c:	20000304 	.word	0x20000304
 8001c10:	200006b0 	.word	0x200006b0
 8001c14:	200002f8 	.word	0x200002f8
 8001c18:	0800947c 	.word	0x0800947c
 8001c1c:	08009490 	.word	0x08009490
 8001c20:	200002ec 	.word	0x200002ec
 8001c24:	08009498 	.word	0x08009498
 8001c28:	200002e8 	.word	0x200002e8
 8001c2c:	200002fc 	.word	0x200002fc
 8001c30:	00100101 	.word	0x00100101
 8001c34:	20000300 	.word	0x20000300
 8001c38:	080094a0 	.word	0x080094a0
 8001c3c:	2000030c 	.word	0x2000030c
 8001c40:	080094a8 	.word	0x080094a8
 8001c44:	080094b0 	.word	0x080094b0
 8001c48:	20000314 	.word	0x20000314
 8001c4c:	080094b8 	.word	0x080094b8
 8001c50:	40020400 	.word	0x40020400
 8001c54:	080094c4 	.word	0x080094c4
 8001c58:	080094d0 	.word	0x080094d0
 8001c5c:	080094dc 	.word	0x080094dc
 8001c60:	080094e8 	.word	0x080094e8

08001c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0b4      	sub	sp, #208	; 0xd0
 8001c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c6e:	2230      	movs	r2, #48	; 0x30
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f006 fb00 	bl	8008278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c78:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	2284      	movs	r2, #132	; 0x84
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f006 faf1 	bl	8008278 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001c96:	f003 f833 	bl	8004d00 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <SystemClock_Config+0x118>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a37      	ldr	r2, [pc, #220]	; (8001d7c <SystemClock_Config+0x118>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <SystemClock_Config+0x118>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <SystemClock_Config+0x11c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cba:	4a31      	ldr	r2, [pc, #196]	; (8001d80 <SystemClock_Config+0x11c>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <SystemClock_Config+0x11c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cd4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ce2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cea:	2304      	movs	r3, #4
 8001cec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001cf0:	2348      	movs	r3, #72	; 0x48
 8001cf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 f80a 	bl	8004d20 <HAL_RCC_OscConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001d12:	f000 f839 	bl	8001d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d16:	230f      	movs	r3, #15
 8001d18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 fa5f 	bl	8005200 <HAL_RCC_ClockConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001d48:	f000 f81e 	bl	8001d88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <SystemClock_Config+0x120>)
 8001d4e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001d54:	2300      	movs	r3, #0
 8001d56:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fc40 	bl	80055e8 <HAL_RCCEx_PeriphCLKConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8001d6e:	f000 f80b 	bl	8001d88 <Error_Handler>
  }
}
 8001d72:	bf00      	nop
 8001d74:	37d0      	adds	r7, #208	; 0xd0
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40007000 	.word	0x40007000
 8001d84:	00200900 	.word	0x00200900

08001d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <Servo_Init>:

//
//	Servo innitialization
//
void Servo_Init(servo_t *servo, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
	servo->htim = _htim;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	601a      	str	r2, [r3, #0]
	servo->channel = _channel;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_Start(servo->htim, servo->channel);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f004 f88f 	bl	8005edc <HAL_TIM_PWM_Start>
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <map>:

//
//	map help function
//
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	1a8a      	subs	r2, r1, r2
 8001de0:	fb02 f203 	mul.w	r2, r2, r3
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1acb      	subs	r3, r1, r3
 8001dea:	fb92 f2f3 	sdiv	r2, r2, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	4413      	add	r3, r2
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <Servo_SetAngle>:

//
//	Servo set angle function
//
void Servo_SetAngle(servo_t *servo, uint16_t angle)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	807b      	strh	r3, [r7, #2]
	if(angle < 0) angle = 0;
	if(angle > 180) angle = 180;
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	2bb4      	cmp	r3, #180	; 0xb4
 8001e0e:	d901      	bls.n	8001e14 <Servo_SetAngle+0x16>
 8001e10:	23b4      	movs	r3, #180	; 0xb4
 8001e12:	807b      	strh	r3, [r7, #2]

	  uint16_t tmp = map(angle, ANGLE_MIN, ANGLE_MAX, SERVO_MIN, SERVO_MAX);
 8001e14:	8878      	ldrh	r0, [r7, #2]
 8001e16:	f640 137e 	movw	r3, #2430	; 0x97e
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f240 2326 	movw	r3, #550	; 0x226
 8001e20:	22b4      	movs	r2, #180	; 0xb4
 8001e22:	2100      	movs	r1, #0
 8001e24:	f7ff ffcf 	bl	8001dc6 <map>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	81fb      	strh	r3, [r7, #14]
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <Servo_SetAngle+0x42>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	89fa      	ldrh	r2, [r7, #14]
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e3e:	e02c      	b.n	8001e9a <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d105      	bne.n	8001e54 <Servo_SetAngle+0x56>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	89fa      	ldrh	r2, [r7, #14]
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e52:	e022      	b.n	8001e9a <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d105      	bne.n	8001e68 <Servo_SetAngle+0x6a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	89fa      	ldrh	r2, [r7, #14]
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001e66:	e018      	b.n	8001e9a <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d105      	bne.n	8001e7c <Servo_SetAngle+0x7e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	89fa      	ldrh	r2, [r7, #14]
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e7a:	e00e      	b.n	8001e9a <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b10      	cmp	r3, #16
 8001e82:	d105      	bne.n	8001e90 <Servo_SetAngle+0x92>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	89fa      	ldrh	r2, [r7, #14]
 8001e8c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001e8e:	e004      	b.n	8001e9a <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	89fa      	ldrh	r2, [r7, #14]
 8001e98:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_MspInit+0x44>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_MspInit+0x44>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_MspInit+0x44>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_MspInit+0x44>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <HAL_MspInit+0x44>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_MspInit+0x44>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <MemManage_Handler+0x4>

08001f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f000 fd2e 	bl	80029a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <TIM2_IRQHandler+0x10>)
 8001f4e:	f004 f809 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200005f0 	.word	0x200005f0

08001f5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <TIM3_IRQHandler+0x10>)
 8001f62:	f003 ffff 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000570 	.word	0x20000570

08001f70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <TIM4_IRQHandler+0x10>)
 8001f76:	f003 fff5 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200004f0 	.word	0x200004f0

08001f84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <TIM5_IRQHandler+0x10>)
 8001f8a:	f003 ffeb 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000530 	.word	0x20000530

08001f98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <TIM6_DAC_IRQHandler+0x10>)
 8001f9e:	f001 fada 	bl	8003556 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000474 	.word	0x20000474

08001fac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <DMA2_Stream0_IRQHandler+0x10>)
 8001fb2:	f001 fcd1 	bl	8003958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200003b4 	.word	0x200003b4

08001fc0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <DMA2_Stream2_IRQHandler+0x10>)
 8001fc6:	f001 fcc7 	bl	8003958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000414 	.word	0x20000414

08001fd4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <USART6_IRQHandler+0x10>)
 8001fda:	f005 f883 	bl	80070e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200006b0 	.word	0x200006b0

08001fe8 <_sbrk>:
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <_sbrk+0x50>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <_sbrk+0x16>
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <_sbrk+0x50>)
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <_sbrk+0x54>)
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <_sbrk+0x50>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <_sbrk+0x50>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	466a      	mov	r2, sp
 800200e:	4293      	cmp	r3, r2
 8002010:	d907      	bls.n	8002022 <_sbrk+0x3a>
 8002012:	f006 f907 	bl	8008224 <__errno>
 8002016:	4602      	mov	r2, r0
 8002018:	230c      	movs	r3, #12
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
 8002020:	e006      	b.n	8002030 <_sbrk+0x48>
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <_sbrk+0x50>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	4a03      	ldr	r2, [pc, #12]	; (8002038 <_sbrk+0x50>)
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000318 	.word	0x20000318
 800203c:	20000b40 	.word	0x20000b40

08002040 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <SystemInit+0x5c>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	4a14      	ldr	r2, [pc, #80]	; (800209c <SystemInit+0x5c>)
 800204c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <SystemInit+0x60>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <SystemInit+0x60>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <SystemInit+0x60>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <SystemInit+0x60>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	490d      	ldr	r1, [pc, #52]	; (80020a0 <SystemInit+0x60>)
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <SystemInit+0x64>)
 800206e:	4013      	ands	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <SystemInit+0x60>)
 8002074:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <SystemInit+0x68>)
 8002076:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <SystemInit+0x60>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <SystemInit+0x60>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <SystemInit+0x60>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <SystemInit+0x5c>)
 800208c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002090:	609a      	str	r2, [r3, #8]
#endif
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00
 80020a0:	40023800 	.word	0x40023800
 80020a4:	fef6ffff 	.word	0xfef6ffff
 80020a8:	24003010 	.word	0x24003010

080020ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b09a      	sub	sp, #104	; 0x68
 80020b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
 80020dc:	615a      	str	r2, [r3, #20]
 80020de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	222c      	movs	r2, #44	; 0x2c
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f006 f8c6 	bl	8008278 <memset>

  htim1.Instance = TIM1;
 80020ec:	4b43      	ldr	r3, [pc, #268]	; (80021fc <MX_TIM1_Init+0x150>)
 80020ee:	4a44      	ldr	r2, [pc, #272]	; (8002200 <MX_TIM1_Init+0x154>)
 80020f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80020f2:	4b42      	ldr	r3, [pc, #264]	; (80021fc <MX_TIM1_Init+0x150>)
 80020f4:	2247      	movs	r2, #71	; 0x47
 80020f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f8:	4b40      	ldr	r3, [pc, #256]	; (80021fc <MX_TIM1_Init+0x150>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80020fe:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <MX_TIM1_Init+0x150>)
 8002100:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002104:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <MX_TIM1_Init+0x150>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800210c:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <MX_TIM1_Init+0x150>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002112:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <MX_TIM1_Init+0x150>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002118:	4838      	ldr	r0, [pc, #224]	; (80021fc <MX_TIM1_Init+0x150>)
 800211a:	f003 fe53 	bl	8005dc4 <HAL_TIM_Base_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002124:	f7ff fe30 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800212e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002132:	4619      	mov	r1, r3
 8002134:	4831      	ldr	r0, [pc, #196]	; (80021fc <MX_TIM1_Init+0x150>)
 8002136:	f004 f94d 	bl	80063d4 <HAL_TIM_ConfigClockSource>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002140:	f7ff fe22 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002144:	482d      	ldr	r0, [pc, #180]	; (80021fc <MX_TIM1_Init+0x150>)
 8002146:	f003 fe93 	bl	8005e70 <HAL_TIM_PWM_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002150:	f7ff fe1a 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002154:	2300      	movs	r3, #0
 8002156:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002160:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002164:	4619      	mov	r1, r3
 8002166:	4825      	ldr	r0, [pc, #148]	; (80021fc <MX_TIM1_Init+0x150>)
 8002168:	f004 fdd4 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002172:	f7ff fe09 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002176:	2360      	movs	r3, #96	; 0x60
 8002178:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 800217a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002180:	2300      	movs	r3, #0
 8002182:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002194:	220c      	movs	r2, #12
 8002196:	4619      	mov	r1, r3
 8002198:	4818      	ldr	r0, [pc, #96]	; (80021fc <MX_TIM1_Init+0x150>)
 800219a:	f004 f803 	bl	80061a4 <HAL_TIM_PWM_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80021a4:	f7ff fdf0 	bl	8001d88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	4807      	ldr	r0, [pc, #28]	; (80021fc <MX_TIM1_Init+0x150>)
 80021de:	f004 fdf5 	bl	8006dcc <HAL_TIMEx_ConfigBreakDeadTime>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80021e8:	f7ff fdce 	bl	8001d88 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <MX_TIM1_Init+0x150>)
 80021ee:	f000 f9d1 	bl	8002594 <HAL_TIM_MspPostInit>

}
 80021f2:	bf00      	nop
 80021f4:	3768      	adds	r7, #104	; 0x68
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200005b0 	.word	0x200005b0
 8002200:	40010000 	.word	0x40010000

08002204 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <MX_TIM2_Init+0x98>)
 8002224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002228:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800222a:	4b1c      	ldr	r3, [pc, #112]	; (800229c <MX_TIM2_Init+0x98>)
 800222c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MX_TIM2_Init+0x98>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <MX_TIM2_Init+0x98>)
 800223a:	f241 3287 	movw	r2, #4999	; 0x1387
 800223e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <MX_TIM2_Init+0x98>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <MX_TIM2_Init+0x98>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800224c:	4813      	ldr	r0, [pc, #76]	; (800229c <MX_TIM2_Init+0x98>)
 800224e:	f003 fdb9 	bl	8005dc4 <HAL_TIM_Base_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002258:	f7ff fd96 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4619      	mov	r1, r3
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <MX_TIM2_Init+0x98>)
 800226a:	f004 f8b3 	bl	80063d4 <HAL_TIM_ConfigClockSource>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002274:	f7ff fd88 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002278:	2320      	movs	r3, #32
 800227a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	4619      	mov	r1, r3
 8002284:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_TIM2_Init+0x98>)
 8002286:	f004 fd45 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002290:	f7ff fd7a 	bl	8001d88 <Error_Handler>
  }

}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200005f0 	.word	0x200005f0

080022a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0310 	add.w	r3, r7, #16
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <MX_TIM3_Init+0x98>)
 80022c0:	4a1e      	ldr	r2, [pc, #120]	; (800233c <MX_TIM3_Init+0x9c>)
 80022c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80022c4:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <MX_TIM3_Init+0x98>)
 80022c6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80022ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <MX_TIM3_Init+0x98>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <MX_TIM3_Init+0x98>)
 80022d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <MX_TIM3_Init+0x98>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e0:	4b15      	ldr	r3, [pc, #84]	; (8002338 <MX_TIM3_Init+0x98>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022e6:	4814      	ldr	r0, [pc, #80]	; (8002338 <MX_TIM3_Init+0x98>)
 80022e8:	f003 fd6c 	bl	8005dc4 <HAL_TIM_Base_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80022f2:	f7ff fd49 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	4619      	mov	r1, r3
 8002302:	480d      	ldr	r0, [pc, #52]	; (8002338 <MX_TIM3_Init+0x98>)
 8002304:	f004 f866 	bl	80063d4 <HAL_TIM_ConfigClockSource>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800230e:	f7ff fd3b 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4806      	ldr	r0, [pc, #24]	; (8002338 <MX_TIM3_Init+0x98>)
 8002320:	f004 fcf8 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800232a:	f7ff fd2d 	bl	8001d88 <Error_Handler>
  }

}
 800232e:	bf00      	nop
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000570 	.word	0x20000570
 800233c:	40000400 	.word	0x40000400

08002340 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <MX_TIM4_Init+0x94>)
 8002360:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <MX_TIM4_Init+0x98>)
 8002362:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <MX_TIM4_Init+0x94>)
 8002366:	2247      	movs	r2, #71	; 0x47
 8002368:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <MX_TIM4_Init+0x94>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <MX_TIM4_Init+0x94>)
 8002372:	2209      	movs	r2, #9
 8002374:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <MX_TIM4_Init+0x94>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <MX_TIM4_Init+0x94>)
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002382:	4814      	ldr	r0, [pc, #80]	; (80023d4 <MX_TIM4_Init+0x94>)
 8002384:	f003 fd1e 	bl	8005dc4 <HAL_TIM_Base_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800238e:	f7ff fcfb 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002396:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	4619      	mov	r1, r3
 800239e:	480d      	ldr	r0, [pc, #52]	; (80023d4 <MX_TIM4_Init+0x94>)
 80023a0:	f004 f818 	bl	80063d4 <HAL_TIM_ConfigClockSource>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80023aa:	f7ff fced 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023ae:	2320      	movs	r3, #32
 80023b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4806      	ldr	r0, [pc, #24]	; (80023d4 <MX_TIM4_Init+0x94>)
 80023bc:	f004 fcaa 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80023c6:	f7ff fcdf 	bl	8001d88 <Error_Handler>
  }

}
 80023ca:	bf00      	nop
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200004f0 	.word	0x200004f0
 80023d8:	40000800 	.word	0x40000800

080023dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e2:	f107 0310 	add.w	r3, r7, #16
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <MX_TIM5_Init+0x98>)
 80023fc:	4a1e      	ldr	r2, [pc, #120]	; (8002478 <MX_TIM5_Init+0x9c>)
 80023fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7199;
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <MX_TIM5_Init+0x98>)
 8002402:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002406:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <MX_TIM5_Init+0x98>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <MX_TIM5_Init+0x98>)
 8002410:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002414:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <MX_TIM5_Init+0x98>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <MX_TIM5_Init+0x98>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002422:	4814      	ldr	r0, [pc, #80]	; (8002474 <MX_TIM5_Init+0x98>)
 8002424:	f003 fcce 	bl	8005dc4 <HAL_TIM_Base_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800242e:	f7ff fcab 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002436:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	4619      	mov	r1, r3
 800243e:	480d      	ldr	r0, [pc, #52]	; (8002474 <MX_TIM5_Init+0x98>)
 8002440:	f003 ffc8 	bl	80063d4 <HAL_TIM_ConfigClockSource>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800244a:	f7ff fc9d 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800244e:	2320      	movs	r3, #32
 8002450:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	4619      	mov	r1, r3
 800245a:	4806      	ldr	r0, [pc, #24]	; (8002474 <MX_TIM5_Init+0x98>)
 800245c:	f004 fc5a 	bl	8006d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8002466:	f7ff fc8f 	bl	8001d88 <Error_Handler>
  }

}
 800246a:	bf00      	nop
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000530 	.word	0x20000530
 8002478:	40000c00 	.word	0x40000c00

0800247c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a3d      	ldr	r2, [pc, #244]	; (8002580 <HAL_TIM_Base_MspInit+0x104>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10c      	bne.n	80024a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800248e:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a3c      	ldr	r2, [pc, #240]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80024a6:	e066      	b.n	8002576 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b0:	d114      	bne.n	80024dc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024b2:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a33      	ldr	r2, [pc, #204]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	201c      	movs	r0, #28
 80024d0:	f000 ff83 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024d4:	201c      	movs	r0, #28
 80024d6:	f000 ff9c 	bl	8003412 <HAL_NVIC_EnableIRQ>
}
 80024da:	e04c      	b.n	8002576 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a29      	ldr	r2, [pc, #164]	; (8002588 <HAL_TIM_Base_MspInit+0x10c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d114      	bne.n	8002510 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024e6:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a26      	ldr	r2, [pc, #152]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2100      	movs	r1, #0
 8002502:	201d      	movs	r0, #29
 8002504:	f000 ff69 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002508:	201d      	movs	r0, #29
 800250a:	f000 ff82 	bl	8003412 <HAL_NVIC_EnableIRQ>
}
 800250e:	e032      	b.n	8002576 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM4)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_TIM_Base_MspInit+0x110>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d114      	bne.n	8002544 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a19      	ldr	r2, [pc, #100]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	201e      	movs	r0, #30
 8002538:	f000 ff4f 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800253c:	201e      	movs	r0, #30
 800253e:	f000 ff68 	bl	8003412 <HAL_NVIC_EnableIRQ>
}
 8002542:	e018      	b.n	8002576 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM5)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a11      	ldr	r2, [pc, #68]	; (8002590 <HAL_TIM_Base_MspInit+0x114>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d113      	bne.n	8002576 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_TIM_Base_MspInit+0x108>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	2032      	movs	r0, #50	; 0x32
 800256c:	f000 ff35 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002570:	2032      	movs	r0, #50	; 0x32
 8002572:	f000 ff4e 	bl	8003412 <HAL_NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40010000 	.word	0x40010000
 8002584:	40023800 	.word	0x40023800
 8002588:	40000400 	.word	0x40000400
 800258c:	40000800 	.word	0x40000800
 8002590:	40000c00 	.word	0x40000c00

08002594 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <HAL_TIM_MspPostInit+0x64>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d11c      	bne.n	80025f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025b6:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_TIM_MspPostInit+0x68>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a10      	ldr	r2, [pc, #64]	; (80025fc <HAL_TIM_MspPostInit+0x68>)
 80025bc:	f043 0310 	orr.w	r3, r3, #16
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_TIM_MspPostInit+0x68>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025e0:	2301      	movs	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025e4:	f107 030c 	add.w	r3, r7, #12
 80025e8:	4619      	mov	r1, r3
 80025ea:	4805      	ldr	r0, [pc, #20]	; (8002600 <HAL_TIM_MspPostInit+0x6c>)
 80025ec:	f002 f888 	bl	8004700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025f0:	bf00      	nop
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40010000 	.word	0x40010000
 80025fc:	40023800 	.word	0x40023800
 8002600:	40021000 	.word	0x40021000

08002604 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <MX_USART3_UART_Init+0x58>)
 800260a:	4a15      	ldr	r2, [pc, #84]	; (8002660 <MX_USART3_UART_Init+0x5c>)
 800260c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <MX_USART3_UART_Init+0x58>)
 8002610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002614:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <MX_USART3_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <MX_USART3_UART_Init+0x58>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <MX_USART3_UART_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <MX_USART3_UART_Init+0x58>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <MX_USART3_UART_Init+0x58>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <MX_USART3_UART_Init+0x58>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <MX_USART3_UART_Init+0x58>)
 800263c:	2200      	movs	r2, #0
 800263e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <MX_USART3_UART_Init+0x58>)
 8002642:	2200      	movs	r2, #0
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_USART3_UART_Init+0x58>)
 8002648:	f004 fc5c 	bl	8006f04 <HAL_UART_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002652:	f7ff fb99 	bl	8001d88 <Error_Handler>
  }

}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000630 	.word	0x20000630
 8002660:	40004800 	.word	0x40004800

08002664 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <MX_USART6_UART_Init+0x58>)
 800266a:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <MX_USART6_UART_Init+0x5c>)
 800266c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <MX_USART6_UART_Init+0x58>)
 8002670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002674:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <MX_USART6_UART_Init+0x58>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <MX_USART6_UART_Init+0x58>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <MX_USART6_UART_Init+0x58>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <MX_USART6_UART_Init+0x58>)
 800268a:	220c      	movs	r2, #12
 800268c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <MX_USART6_UART_Init+0x58>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <MX_USART6_UART_Init+0x58>)
 8002696:	2200      	movs	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <MX_USART6_UART_Init+0x58>)
 800269c:	2200      	movs	r2, #0
 800269e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <MX_USART6_UART_Init+0x58>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80026a6:	4805      	ldr	r0, [pc, #20]	; (80026bc <MX_USART6_UART_Init+0x58>)
 80026a8:	f004 fc2c 	bl	8006f04 <HAL_UART_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80026b2:	f7ff fb69 	bl	8001d88 <Error_Handler>
  }

}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200006b0 	.word	0x200006b0
 80026c0:	40011400 	.word	0x40011400

080026c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a32      	ldr	r2, [pc, #200]	; (80027ac <HAL_UART_MspInit+0xe8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d129      	bne.n	800273a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026e6:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <HAL_UART_MspInit+0xec>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a31      	ldr	r2, [pc, #196]	; (80027b0 <HAL_UART_MspInit+0xec>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <HAL_UART_MspInit+0xec>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fa:	61bb      	str	r3, [r7, #24]
 80026fc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fe:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <HAL_UART_MspInit+0xec>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <HAL_UART_MspInit+0xec>)
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_UART_MspInit+0xec>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002716:	f44f 7340 	mov.w	r3, #768	; 0x300
 800271a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002728:	2307      	movs	r3, #7
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272c:	f107 031c 	add.w	r3, r7, #28
 8002730:	4619      	mov	r1, r3
 8002732:	4820      	ldr	r0, [pc, #128]	; (80027b4 <HAL_UART_MspInit+0xf0>)
 8002734:	f001 ffe4 	bl	8004700 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002738:	e034      	b.n	80027a4 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <HAL_UART_MspInit+0xf4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d12f      	bne.n	80027a4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_UART_MspInit+0xec>)
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_UART_MspInit+0xec>)
 800274a:	f043 0320 	orr.w	r3, r3, #32
 800274e:	6453      	str	r3, [r2, #68]	; 0x44
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_UART_MspInit+0xec>)
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800275c:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_UART_MspInit+0xec>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <HAL_UART_MspInit+0xec>)
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	6313      	str	r3, [r2, #48]	; 0x30
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_UART_MspInit+0xec>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002774:	23c0      	movs	r3, #192	; 0xc0
 8002776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002784:	2308      	movs	r3, #8
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	4619      	mov	r1, r3
 800278e:	480b      	ldr	r0, [pc, #44]	; (80027bc <HAL_UART_MspInit+0xf8>)
 8002790:	f001 ffb6 	bl	8004700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	2047      	movs	r0, #71	; 0x47
 800279a:	f000 fe1e 	bl	80033da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800279e:	2047      	movs	r0, #71	; 0x47
 80027a0:	f000 fe37 	bl	8003412 <HAL_NVIC_EnableIRQ>
}
 80027a4:	bf00      	nop
 80027a6:	3730      	adds	r7, #48	; 0x30
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40004800 	.word	0x40004800
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40011400 	.word	0x40011400
 80027bc:	40020800 	.word	0x40020800

080027c0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80027ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027ce:	2206      	movs	r2, #6
 80027d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027d4:	2202      	movs	r2, #2
 80027d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027e0:	2202      	movs	r2, #2
 80027e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002804:	f002 f93f 	bl	8004a86 <HAL_PCD_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800280e:	f7ff fabb 	bl	8001d88 <Error_Handler>
  }

}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000730 	.word	0x20000730

0800281c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800283c:	d141      	bne.n	80028c2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_PCD_MspInit+0xb0>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a22      	ldr	r2, [pc, #136]	; (80028cc <HAL_PCD_MspInit+0xb0>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_PCD_MspInit+0xb0>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002856:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800285a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002868:	230a      	movs	r3, #10
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	4619      	mov	r1, r3
 8002872:	4817      	ldr	r0, [pc, #92]	; (80028d0 <HAL_PCD_MspInit+0xb4>)
 8002874:	f001 ff44 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002886:	f107 0314 	add.w	r3, r7, #20
 800288a:	4619      	mov	r1, r3
 800288c:	4810      	ldr	r0, [pc, #64]	; (80028d0 <HAL_PCD_MspInit+0xb4>)
 800288e:	f001 ff37 	bl	8004700 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_PCD_MspInit+0xb0>)
 8002894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002896:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_PCD_MspInit+0xb0>)
 8002898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289c:	6353      	str	r3, [r2, #52]	; 0x34
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_PCD_MspInit+0xb0>)
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_PCD_MspInit+0xb0>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_PCD_MspInit+0xb0>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_PCD_MspInit+0xb0>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020000 	.word	0x40020000

080028d4 <Reset_Handler>:
 80028d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800290c <LoopFillZerobss+0x14>
 80028d8:	2100      	movs	r1, #0
 80028da:	e003      	b.n	80028e4 <LoopCopyDataInit>

080028dc <CopyDataInit>:
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <LoopFillZerobss+0x18>)
 80028de:	585b      	ldr	r3, [r3, r1]
 80028e0:	5043      	str	r3, [r0, r1]
 80028e2:	3104      	adds	r1, #4

080028e4 <LoopCopyDataInit>:
 80028e4:	480b      	ldr	r0, [pc, #44]	; (8002914 <LoopFillZerobss+0x1c>)
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <LoopFillZerobss+0x20>)
 80028e8:	1842      	adds	r2, r0, r1
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d3f6      	bcc.n	80028dc <CopyDataInit>
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <LoopFillZerobss+0x24>)
 80028f0:	e002      	b.n	80028f8 <LoopFillZerobss>

080028f2 <FillZerobss>:
 80028f2:	2300      	movs	r3, #0
 80028f4:	f842 3b04 	str.w	r3, [r2], #4

080028f8 <LoopFillZerobss>:
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <LoopFillZerobss+0x28>)
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d3f9      	bcc.n	80028f2 <FillZerobss>
 80028fe:	f7ff fb9f 	bl	8002040 <SystemInit>
 8002902:	f005 fc95 	bl	8008230 <__libc_init_array>
 8002906:	f7ff f843 	bl	8001990 <main>
 800290a:	4770      	bx	lr
 800290c:	20050000 	.word	0x20050000
 8002910:	080096f0 	.word	0x080096f0
 8002914:	20000000 	.word	0x20000000
 8002918:	200002c8 	.word	0x200002c8
 800291c:	200002c8 	.word	0x200002c8
 8002920:	20000b3c 	.word	0x20000b3c

08002924 <ADC_IRQHandler>:
 8002924:	e7fe      	b.n	8002924 <ADC_IRQHandler>

08002926 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292a:	2003      	movs	r0, #3
 800292c:	f000 fd4a 	bl	80033c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002930:	2000      	movs	r0, #0
 8002932:	f000 f805 	bl	8002940 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002936:	f7ff fab5 	bl	8001ea4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_InitTick+0x54>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_InitTick+0x58>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	4619      	mov	r1, r3
 8002952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002956:	fbb3 f3f1 	udiv	r3, r3, r1
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fd65 	bl	800342e <HAL_SYSTICK_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e00e      	b.n	800298c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b0f      	cmp	r3, #15
 8002972:	d80a      	bhi.n	800298a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002974:	2200      	movs	r2, #0
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	f000 fd2d 	bl	80033da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002980:	4a06      	ldr	r2, [pc, #24]	; (800299c <HAL_InitTick+0x5c>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200000ec 	.word	0x200000ec
 8002998:	200000f4 	.word	0x200000f4
 800299c:	200000f0 	.word	0x200000f0

080029a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_IncTick+0x20>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_IncTick+0x24>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_IncTick+0x24>)
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	200000f4 	.word	0x200000f4
 80029c4:	20000b34 	.word	0x20000b34

080029c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_GetTick+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000b34 	.word	0x20000b34

080029e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7ff ffee 	bl	80029c8 <HAL_GetTick>
 80029ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d005      	beq.n	8002a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_Delay+0x40>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a06:	bf00      	nop
 8002a08:	f7ff ffde 	bl	80029c8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d8f7      	bhi.n	8002a08 <HAL_Delay+0x28>
  {
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	200000f4 	.word	0x200000f4

08002a24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e031      	b.n	8002a9e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fa5e 	bl	8000f04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d116      	bne.n	8002a90 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_ADC_Init+0x84>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	f043 0202 	orr.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fa5a 	bl	8002f2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f023 0303 	bic.w	r3, r3, #3
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a8e:	e001      	b.n	8002a94 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	ffffeefd 	.word	0xffffeefd

08002aac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_Start_DMA+0x1e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0c7      	b.n	8002c5a <HAL_ADC_Start_DMA+0x1ae>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d018      	beq.n	8002b12 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002af0:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <HAL_ADC_Start_DMA+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a5c      	ldr	r2, [pc, #368]	; (8002c68 <HAL_ADC_Start_DMA+0x1bc>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0c9a      	lsrs	r2, r3, #18
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002b04:	e002      	b.n	8002b0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f9      	bne.n	8002b06 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	f040 809b 	bne.w	8002c58 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b26:	4b51      	ldr	r3, [pc, #324]	; (8002c6c <HAL_ADC_Start_DMA+0x1c0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5c:	d106      	bne.n	8002b6c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f023 0206 	bic.w	r2, r3, #6
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
 8002b6a:	e002      	b.n	8002b72 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	4a3c      	ldr	r2, [pc, #240]	; (8002c70 <HAL_ADC_Start_DMA+0x1c4>)
 8002b80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	4a3b      	ldr	r2, [pc, #236]	; (8002c74 <HAL_ADC_Start_DMA+0x1c8>)
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	4a3a      	ldr	r2, [pc, #232]	; (8002c78 <HAL_ADC_Start_DMA+0x1cc>)
 8002b90:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002baa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	334c      	adds	r3, #76	; 0x4c
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f000 fe42 	bl	8003854 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <HAL_ADC_Start_DMA+0x1d0>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10f      	bne.n	8002bfc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d136      	bne.n	8002c58 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	e02d      	b.n	8002c58 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <HAL_ADC_Start_DMA+0x1d4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10e      	bne.n	8002c24 <HAL_ADC_Start_DMA+0x178>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d107      	bne.n	8002c24 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c22:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_ADC_Start_DMA+0x1d0>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d113      	bne.n	8002c58 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <HAL_ADC_Start_DMA+0x1d8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10e      	bne.n	8002c58 <HAL_ADC_Start_DMA+0x1ac>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c56:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200000ec 	.word	0x200000ec
 8002c68:	431bde83 	.word	0x431bde83
 8002c6c:	fffff8fe 	.word	0xfffff8fe
 8002c70:	08003121 	.word	0x08003121
 8002c74:	080031db 	.word	0x080031db
 8002c78:	080031f7 	.word	0x080031f7
 8002c7c:	40012300 	.word	0x40012300
 8002c80:	40012000 	.word	0x40012000
 8002c84:	40012200 	.word	0x40012200

08002c88 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x1c>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e115      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x248>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b09      	cmp	r3, #9
 8002cee:	d935      	bls.n	8002d5c <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68d9      	ldr	r1, [r3, #12]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	3b1e      	subs	r3, #30
 8002d06:	2207      	movs	r2, #7
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	400a      	ands	r2, r1
 8002d14:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a7f      	ldr	r2, [pc, #508]	; (8002f18 <HAL_ADC_ConfigChannel+0x254>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d10a      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68d9      	ldr	r1, [r3, #12]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	061a      	lsls	r2, r3, #24
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	e035      	b.n	8002da2 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68d9      	ldr	r1, [r3, #12]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4618      	mov	r0, r3
 8002d48:	4603      	mov	r3, r0
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4403      	add	r3, r0
 8002d4e:	3b1e      	subs	r3, #30
 8002d50:	409a      	lsls	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	e022      	b.n	8002da2 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6919      	ldr	r1, [r3, #16]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	2207      	movs	r2, #7
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43da      	mvns	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6919      	ldr	r1, [r3, #16]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4403      	add	r3, r0
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d824      	bhi.n	8002df4 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	3b05      	subs	r3, #5
 8002dbc:	221f      	movs	r2, #31
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	400a      	ands	r2, r1
 8002dca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4618      	mov	r0, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	3b05      	subs	r3, #5
 8002de6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	635a      	str	r2, [r3, #52]	; 0x34
 8002df2:	e04c      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	d824      	bhi.n	8002e46 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b23      	subs	r3, #35	; 0x23
 8002e0e:	221f      	movs	r2, #31
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43da      	mvns	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	3b23      	subs	r3, #35	; 0x23
 8002e38:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
 8002e44:	e023      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	3b41      	subs	r3, #65	; 0x41
 8002e58:	221f      	movs	r2, #31
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	400a      	ands	r2, r1
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b41      	subs	r3, #65	; 0x41
 8002e82:	fa00 f203 	lsl.w	r2, r0, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <HAL_ADC_ConfigChannel+0x258>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d109      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x1e8>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b12      	cmp	r3, #18
 8002e9e:	d105      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <HAL_ADC_ConfigChannel+0x25c>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <HAL_ADC_ConfigChannel+0x25c>)
 8002ea6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eaa:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1a      	ldr	r2, [pc, #104]	; (8002f1c <HAL_ADC_ConfigChannel+0x258>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d125      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x23e>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a17      	ldr	r2, [pc, #92]	; (8002f18 <HAL_ADC_ConfigChannel+0x254>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <HAL_ADC_ConfigChannel+0x204>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b11      	cmp	r3, #17
 8002ec6:	d11c      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_ADC_ConfigChannel+0x25c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <HAL_ADC_ConfigChannel+0x25c>)
 8002ece:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ed2:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <HAL_ADC_ConfigChannel+0x254>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d111      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_ADC_ConfigChannel+0x260>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a11      	ldr	r2, [pc, #68]	; (8002f28 <HAL_ADC_ConfigChannel+0x264>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	0c9a      	lsrs	r2, r3, #18
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ef4:	e002      	b.n	8002efc <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f9      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	10000012 	.word	0x10000012
 8002f1c:	40012000 	.word	0x40012000
 8002f20:	40012300 	.word	0x40012300
 8002f24:	200000ec 	.word	0x200000ec
 8002f28:	431bde83 	.word	0x431bde83

08002f2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f34:	4b78      	ldr	r3, [pc, #480]	; (8003118 <ADC_Init+0x1ec>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a77      	ldr	r2, [pc, #476]	; (8003118 <ADC_Init+0x1ec>)
 8002f3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f40:	4b75      	ldr	r3, [pc, #468]	; (8003118 <ADC_Init+0x1ec>)
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4973      	ldr	r1, [pc, #460]	; (8003118 <ADC_Init+0x1ec>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	021a      	lsls	r2, r3, #8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6899      	ldr	r1, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	4a58      	ldr	r2, [pc, #352]	; (800311c <ADC_Init+0x1f0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d022      	beq.n	8003006 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6899      	ldr	r1, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6899      	ldr	r1, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	e00f      	b.n	8003026 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003024:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0202 	bic.w	r2, r2, #2
 8003034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6899      	ldr	r1, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	005a      	lsls	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01b      	beq.n	800308c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003062:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003072:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6859      	ldr	r1, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	3b01      	subs	r3, #1
 8003080:	035a      	lsls	r2, r3, #13
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	e007      	b.n	800309c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	051a      	lsls	r2, r3, #20
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6899      	ldr	r1, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030de:	025a      	lsls	r2, r3, #9
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6899      	ldr	r1, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	029a      	lsls	r2, r3, #10
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40012300 	.word	0x40012300
 800311c:	0f000001 	.word	0x0f000001

08003120 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003136:	2b00      	cmp	r3, #0
 8003138:	d13c      	bne.n	80031b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d12b      	bne.n	80031ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003158:	2b00      	cmp	r3, #0
 800315a:	d127      	bne.n	80031ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003174:	2b00      	cmp	r3, #0
 8003176:	d119      	bne.n	80031ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0220 	bic.w	r2, r2, #32
 8003186:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d105      	bne.n	80031ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f043 0201 	orr.w	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff fd6b 	bl	8002c88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031b2:	e00e      	b.n	80031d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f7ff fd75 	bl	8002cb0 <HAL_ADC_ErrorCallback>
}
 80031c6:	e004      	b.n	80031d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff fd57 	bl	8002c9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003202:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2240      	movs	r2, #64	; 0x40
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f043 0204 	orr.w	r2, r3, #4
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7ff fd4a 	bl	8002cb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <__NVIC_SetPriorityGrouping+0x40>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003240:	4013      	ands	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <__NVIC_SetPriorityGrouping+0x44>)
 800324e:	4313      	orrs	r3, r2
 8003250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003252:	4a04      	ldr	r2, [pc, #16]	; (8003264 <__NVIC_SetPriorityGrouping+0x40>)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	60d3      	str	r3, [r2, #12]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00
 8003268:	05fa0000 	.word	0x05fa0000

0800326c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <__NVIC_GetPriorityGrouping+0x18>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 0307 	and.w	r3, r3, #7
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	2b00      	cmp	r3, #0
 8003298:	db0b      	blt.n	80032b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	f003 021f 	and.w	r2, r3, #31
 80032a0:	4907      	ldr	r1, [pc, #28]	; (80032c0 <__NVIC_EnableIRQ+0x38>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2001      	movs	r0, #1
 80032aa:	fa00 f202 	lsl.w	r2, r0, r2
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000e100 	.word	0xe000e100

080032c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	db0a      	blt.n	80032ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	490c      	ldr	r1, [pc, #48]	; (8003310 <__NVIC_SetPriority+0x4c>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	0112      	lsls	r2, r2, #4
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	440b      	add	r3, r1
 80032e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ec:	e00a      	b.n	8003304 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	4908      	ldr	r1, [pc, #32]	; (8003314 <__NVIC_SetPriority+0x50>)
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	3b04      	subs	r3, #4
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	440b      	add	r3, r1
 8003302:	761a      	strb	r2, [r3, #24]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000e100 	.word	0xe000e100
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003318:	b480      	push	{r7}
 800331a:	b089      	sub	sp, #36	; 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f1c3 0307 	rsb	r3, r3, #7
 8003332:	2b04      	cmp	r3, #4
 8003334:	bf28      	it	cs
 8003336:	2304      	movcs	r3, #4
 8003338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3304      	adds	r3, #4
 800333e:	2b06      	cmp	r3, #6
 8003340:	d902      	bls.n	8003348 <NVIC_EncodePriority+0x30>
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3b03      	subs	r3, #3
 8003346:	e000      	b.n	800334a <NVIC_EncodePriority+0x32>
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	f04f 32ff 	mov.w	r2, #4294967295
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43da      	mvns	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	401a      	ands	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003360:	f04f 31ff 	mov.w	r1, #4294967295
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	43d9      	mvns	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	4313      	orrs	r3, r2
         );
}
 8003372:	4618      	mov	r0, r3
 8003374:	3724      	adds	r7, #36	; 0x24
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003390:	d301      	bcc.n	8003396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003392:	2301      	movs	r3, #1
 8003394:	e00f      	b.n	80033b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <SysTick_Config+0x40>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3b01      	subs	r3, #1
 800339c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800339e:	210f      	movs	r1, #15
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	f7ff ff8e 	bl	80032c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <SysTick_Config+0x40>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ae:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <SysTick_Config+0x40>)
 80033b0:	2207      	movs	r2, #7
 80033b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	e000e010 	.word	0xe000e010

080033c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff29 	bl	8003224 <__NVIC_SetPriorityGrouping>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ec:	f7ff ff3e 	bl	800326c <__NVIC_GetPriorityGrouping>
 80033f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	6978      	ldr	r0, [r7, #20]
 80033f8:	f7ff ff8e 	bl	8003318 <NVIC_EncodePriority>
 80033fc:	4602      	mov	r2, r0
 80033fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff5d 	bl	80032c4 <__NVIC_SetPriority>
}
 800340a:	bf00      	nop
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	4603      	mov	r3, r0
 800341a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff31 	bl	8003288 <__NVIC_EnableIRQ>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ffa2 	bl	8003380 <SysTick_Config>
 800343c:	4603      	mov	r3, r0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e014      	b.n	8003482 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	791b      	ldrb	r3, [r3, #4]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7fd fe49 	bl	8001100 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800348a:	b480      	push	{r7}
 800348c:	b085      	sub	sp, #20
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	2300      	movs	r3, #0
 800349a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	795b      	ldrb	r3, [r3, #5]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_DAC_Start+0x1e>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e050      	b.n	800354a <HAL_DAC_Start+0xc0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	2201      	movs	r2, #1
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	409a      	lsls	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11a      	bne.n	8003504 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034e4:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d127      	bne.n	800353c <HAL_DAC_Start+0xb2>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b38      	cmp	r3, #56	; 0x38
 80034f0:	d124      	bne.n	800353c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	e01b      	b.n	800353c <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800351a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003522:	d10b      	bne.n	800353c <HAL_DAC_Start+0xb2>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800352a:	d107      	bne.n	800353c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0202 	orr.w	r2, r2, #2
 800353a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356c:	d118      	bne.n	80035a0 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2204      	movs	r2, #4
 8003572:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f043 0201 	orr.w	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003588:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003598:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f825 	bl	80035ea <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ae:	d118      	bne.n	80035e2 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2204      	movs	r2, #4
 80035b4:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f043 0202 	orr.w	r2, r3, #2
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80035ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80035da:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f880 	bl	80036e2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80035fe:	b480      	push	{r7}
 8003600:	b087      	sub	sp, #28
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	795b      	ldrb	r3, [r3, #5]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_DAC_ConfigChannel+0x20>
 800361a:	2302      	movs	r3, #2
 800361c:	e036      	b.n	800368c <HAL_DAC_ConfigChannel+0x8e>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2202      	movs	r2, #2
 8003628:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003632:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4013      	ands	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	22c0      	movs	r2, #192	; 0xc0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43da      	mvns	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	400a      	ands	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3308      	adds	r3, #8
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	e004      	b.n	80036cc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	3314      	adds	r3, #20
 80036ca:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	461a      	mov	r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003704:	f7ff f960 	bl	80029c8 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e099      	b.n	8003848 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0201 	bic.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003734:	e00f      	b.n	8003756 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003736:	f7ff f947 	bl	80029c8 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b05      	cmp	r3, #5
 8003742:	d908      	bls.n	8003756 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2203      	movs	r2, #3
 800374e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e078      	b.n	8003848 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e8      	bne.n	8003736 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4b38      	ldr	r3, [pc, #224]	; (8003850 <HAL_DMA_Init+0x158>)
 8003770:	4013      	ands	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003782:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d107      	bne.n	80037c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	4313      	orrs	r3, r2
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f023 0307 	bic.w	r3, r3, #7
 80037d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d117      	bne.n	800381a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00e      	beq.n	800381a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa99 	bl	8003d34 <DMA_CheckFifoParam>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2240      	movs	r2, #64	; 0x40
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003816:	2301      	movs	r3, #1
 8003818:	e016      	b.n	8003848 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa50 	bl	8003cc8 <DMA_CalcBaseAndBitshift>
 8003828:	4603      	mov	r3, r0
 800382a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	223f      	movs	r2, #63	; 0x3f
 8003832:	409a      	lsls	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	f010803f 	.word	0xf010803f

08003854 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_DMA_Start_IT+0x26>
 8003876:	2302      	movs	r3, #2
 8003878:	e048      	b.n	800390c <HAL_DMA_Start_IT+0xb8>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d137      	bne.n	80038fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f9e2 	bl	8003c6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	223f      	movs	r2, #63	; 0x3f
 80038ae:	409a      	lsls	r2, r3
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0216 	orr.w	r2, r2, #22
 80038c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038d2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0208 	orr.w	r2, r2, #8
 80038ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e005      	b.n	800390a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003906:	2302      	movs	r3, #2
 8003908:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d004      	beq.n	8003932 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e00c      	b.n	800394c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2205      	movs	r2, #5
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003964:	4b92      	ldr	r3, [pc, #584]	; (8003bb0 <HAL_DMA_IRQHandler+0x258>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a92      	ldr	r2, [pc, #584]	; (8003bb4 <HAL_DMA_IRQHandler+0x25c>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	2208      	movs	r2, #8
 8003984:	409a      	lsls	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01a      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0204 	bic.w	r2, r2, #4
 80039aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	2208      	movs	r2, #8
 80039b2:	409a      	lsls	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	2201      	movs	r2, #1
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d012      	beq.n	80039fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	2201      	movs	r2, #1
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	f043 0202 	orr.w	r2, r3, #2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fe:	2204      	movs	r2, #4
 8003a00:	409a      	lsls	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d012      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	2210      	movs	r2, #16
 8003a36:	409a      	lsls	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d043      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d03c      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	2210      	movs	r2, #16
 8003a54:	409a      	lsls	r2, r3
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d018      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d108      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d024      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
 8003a86:	e01f      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01b      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
 8003a98:	e016      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0208 	bic.w	r2, r2, #8
 8003ab6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	2220      	movs	r2, #32
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 808e 	beq.w	8003bf6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8086 	beq.w	8003bf6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	2220      	movs	r2, #32
 8003af0:	409a      	lsls	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d136      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0216 	bic.w	r2, r2, #22
 8003b10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x1da>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0208 	bic.w	r2, r2, #8
 8003b40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	223f      	movs	r2, #63	; 0x3f
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d07d      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
        }
        return;
 8003b6e:	e078      	b.n	8003c62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01c      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d030      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
 8003b9c:	e02b      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d027      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
 8003bae:	e022      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
 8003bb0:	200000ec 	.word	0x200000ec
 8003bb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0210 	bic.w	r2, r2, #16
 8003bd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d032      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d022      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2205      	movs	r2, #5
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	3301      	adds	r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d307      	bcc.n	8003c3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f2      	bne.n	8003c22 <HAL_DMA_IRQHandler+0x2ca>
 8003c3c:	e000      	b.n	8003c40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c3e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
 8003c60:	e000      	b.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c62:	bf00      	nop
    }
  }
}
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop

08003c6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d108      	bne.n	8003cac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003caa:	e007      	b.n	8003cbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	3b10      	subs	r3, #16
 8003cd8:	4a13      	ldr	r2, [pc, #76]	; (8003d28 <DMA_CalcBaseAndBitshift+0x60>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <DMA_CalcBaseAndBitshift+0x64>)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d908      	bls.n	8003d08 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <DMA_CalcBaseAndBitshift+0x68>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	659a      	str	r2, [r3, #88]	; 0x58
 8003d06:	e006      	b.n	8003d16 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <DMA_CalcBaseAndBitshift+0x68>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	aaaaaaab 	.word	0xaaaaaaab
 8003d2c:	0800951c 	.word	0x0800951c
 8003d30:	fffffc00 	.word	0xfffffc00

08003d34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d11f      	bne.n	8003d8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d855      	bhi.n	8003e00 <DMA_CheckFifoParam+0xcc>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <DMA_CheckFifoParam+0x28>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d7f 	.word	0x08003d7f
 8003d64:	08003d6d 	.word	0x08003d6d
 8003d68:	08003e01 	.word	0x08003e01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d045      	beq.n	8003e04 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7c:	e042      	b.n	8003e04 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d86:	d13f      	bne.n	8003e08 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8c:	e03c      	b.n	8003e08 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d96:	d121      	bne.n	8003ddc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d836      	bhi.n	8003e0c <DMA_CheckFifoParam+0xd8>
 8003d9e:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <DMA_CheckFifoParam+0x70>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003db5 	.word	0x08003db5
 8003da8:	08003dbb 	.word	0x08003dbb
 8003dac:	08003db5 	.word	0x08003db5
 8003db0:	08003dcd 	.word	0x08003dcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      break;
 8003db8:	e02f      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d024      	beq.n	8003e10 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dca:	e021      	b.n	8003e10 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dd4:	d11e      	bne.n	8003e14 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dda:	e01b      	b.n	8003e14 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d902      	bls.n	8003de8 <DMA_CheckFifoParam+0xb4>
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d003      	beq.n	8003dee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003de6:	e018      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      break;
 8003dec:	e015      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00e      	beq.n	8003e18 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfe:	e00b      	b.n	8003e18 <DMA_CheckFifoParam+0xe4>
      break;
 8003e00:	bf00      	nop
 8003e02:	e00a      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;
 8003e04:	bf00      	nop
 8003e06:	e008      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;
 8003e08:	bf00      	nop
 8003e0a:	e006      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;
 8003e0c:	bf00      	nop
 8003e0e:	e004      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;
 8003e10:	bf00      	nop
 8003e12:	e002      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;   
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;
 8003e18:	bf00      	nop
    }
  } 
  
  return status; 
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003e38:	4ba9      	ldr	r3, [pc, #676]	; (80040e0 <HAL_ETH_Init+0x2b8>)
 8003e3a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003e40:	2300      	movs	r3, #0
 8003e42:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e183      	b.n	8004156 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd f9fa 	bl	800125c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e68:	4b9e      	ldr	r3, [pc, #632]	; (80040e4 <HAL_ETH_Init+0x2bc>)
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	4a9d      	ldr	r2, [pc, #628]	; (80040e4 <HAL_ETH_Init+0x2bc>)
 8003e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e72:	6453      	str	r3, [r2, #68]	; 0x44
 8003e74:	4b9b      	ldr	r3, [pc, #620]	; (80040e4 <HAL_ETH_Init+0x2bc>)
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003e80:	4b99      	ldr	r3, [pc, #612]	; (80040e8 <HAL_ETH_Init+0x2c0>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4a98      	ldr	r2, [pc, #608]	; (80040e8 <HAL_ETH_Init+0x2c0>)
 8003e86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e8a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003e8c:	4b96      	ldr	r3, [pc, #600]	; (80040e8 <HAL_ETH_Init+0x2c0>)
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	4994      	ldr	r1, [pc, #592]	; (80040e8 <HAL_ETH_Init+0x2c0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb2:	f7fe fd89 	bl	80029c8 <HAL_GetTick>
 8003eb6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003eb8:	e011      	b.n	8003ede <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003eba:	f7fe fd85 	bl	80029c8 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ec8:	d909      	bls.n	8003ede <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e13b      	b.n	8004156 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e4      	bne.n	8003eba <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f023 031c 	bic.w	r3, r3, #28
 8003efe:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003f00:	f001 fb3e 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 8003f04:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	4a78      	ldr	r2, [pc, #480]	; (80040ec <HAL_ETH_Init+0x2c4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d908      	bls.n	8003f20 <HAL_ETH_Init+0xf8>
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	4a77      	ldr	r2, [pc, #476]	; (80040f0 <HAL_ETH_Init+0x2c8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d804      	bhi.n	8003f20 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f043 0308 	orr.w	r3, r3, #8
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	e027      	b.n	8003f70 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	4a73      	ldr	r2, [pc, #460]	; (80040f0 <HAL_ETH_Init+0x2c8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d908      	bls.n	8003f3a <HAL_ETH_Init+0x112>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	4a72      	ldr	r2, [pc, #456]	; (80040f4 <HAL_ETH_Init+0x2cc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d804      	bhi.n	8003f3a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f043 030c 	orr.w	r3, r3, #12
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	e01a      	b.n	8003f70 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	4a6d      	ldr	r2, [pc, #436]	; (80040f4 <HAL_ETH_Init+0x2cc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d903      	bls.n	8003f4a <HAL_ETH_Init+0x122>
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	4a6c      	ldr	r2, [pc, #432]	; (80040f8 <HAL_ETH_Init+0x2d0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d911      	bls.n	8003f6e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	4a6a      	ldr	r2, [pc, #424]	; (80040f8 <HAL_ETH_Init+0x2d0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d908      	bls.n	8003f64 <HAL_ETH_Init+0x13c>
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4a69      	ldr	r2, [pc, #420]	; (80040fc <HAL_ETH_Init+0x2d4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d804      	bhi.n	8003f64 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	e005      	b.n	8003f70 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f043 0310 	orr.w	r3, r3, #16
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	e000      	b.n	8003f70 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003f6e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003f78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f956 	bl	8004230 <HAL_ETH_WritePHYRegister>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003f8e:	6939      	ldr	r1, [r7, #16]
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f9b3 	bl	80042fc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e0d9      	b.n	8004156 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003fa2:	20ff      	movs	r0, #255	; 0xff
 8003fa4:	f7fe fd1c 	bl	80029e0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80a7 	beq.w	8004100 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fb2:	f7fe fd09 	bl	80029c8 <HAL_GetTick>
 8003fb6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003fb8:	f107 030c 	add.w	r3, r7, #12
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8cd 	bl	8004160 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003fc6:	f7fe fcff 	bl	80029c8 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d90f      	bls.n	8003ff8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003fdc:	6939      	ldr	r1, [r7, #16]
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f98c 	bl	80042fc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0ae      	b.n	8004156 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0da      	beq.n	8003fb8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004006:	2100      	movs	r1, #0
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f911 	bl	8004230 <HAL_ETH_WritePHYRegister>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00b      	beq.n	800402c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004018:	6939      	ldr	r1, [r7, #16]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f96e 	bl	80042fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004028:	2301      	movs	r3, #1
 800402a:	e094      	b.n	8004156 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800402c:	f7fe fccc 	bl	80029c8 <HAL_GetTick>
 8004030:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004032:	f107 030c 	add.w	r3, r7, #12
 8004036:	461a      	mov	r2, r3
 8004038:	2101      	movs	r1, #1
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f890 	bl	8004160 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004040:	f7fe fcc2 	bl	80029c8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d90f      	bls.n	8004072 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004056:	6939      	ldr	r1, [r7, #16]
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f94f 	bl	80042fc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e071      	b.n	8004156 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0da      	beq.n	8004032 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	461a      	mov	r2, r3
 8004082:	211f      	movs	r1, #31
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f86b 	bl	8004160 <HAL_ETH_ReadPHYRegister>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004094:	6939      	ldr	r1, [r7, #16]
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f930 	bl	80042fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80040a4:	2301      	movs	r3, #1
 80040a6:	e056      	b.n	8004156 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	e002      	b.n	80040c2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	609a      	str	r2, [r3, #8]
 80040d2:	e037      	b.n	8004144 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	e032      	b.n	8004144 <HAL_ETH_Init+0x31c>
 80040de:	bf00      	nop
 80040e0:	03938700 	.word	0x03938700
 80040e4:	40023800 	.word	0x40023800
 80040e8:	40013800 	.word	0x40013800
 80040ec:	01312cff 	.word	0x01312cff
 80040f0:	02160ebf 	.word	0x02160ebf
 80040f4:	039386ff 	.word	0x039386ff
 80040f8:	05f5e0ff 	.word	0x05f5e0ff
 80040fc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	08db      	lsrs	r3, r3, #3
 8004106:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004110:	4313      	orrs	r3, r2
 8004112:	b29b      	uxth	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	2100      	movs	r1, #0
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f889 	bl	8004230 <HAL_ETH_WritePHYRegister>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00b      	beq.n	800413c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004128:	6939      	ldr	r1, [r7, #16]
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8e6 	bl	80042fc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e00c      	b.n	8004156 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800413c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004140:	f7fe fc4e 	bl	80029e0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004144:	6939      	ldr	r1, [r7, #16]
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f8d8 	bl	80042fc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop

08004160 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	460b      	mov	r3, r1
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b82      	cmp	r3, #130	; 0x82
 8004180:	d101      	bne.n	8004186 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
 8004184:	e050      	b.n	8004228 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2282      	movs	r2, #130	; 0x82
 800418a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 031c 	and.w	r3, r3, #28
 800419c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8a1b      	ldrh	r3, [r3, #16]
 80041a2:	02db      	lsls	r3, r3, #11
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80041ac:	897b      	ldrh	r3, [r7, #10]
 80041ae:	019b      	lsls	r3, r3, #6
 80041b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 0302 	bic.w	r3, r3, #2
 80041c0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80041d2:	f7fe fbf9 	bl	80029c8 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041d8:	e015      	b.n	8004206 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80041da:	f7fe fbf5 	bl	80029c8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d309      	bcc.n	80041fe <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e014      	b.n	8004228 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e4      	bne.n	80041da <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	b29b      	uxth	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	460b      	mov	r3, r1
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b42      	cmp	r3, #66	; 0x42
 8004250:	d101      	bne.n	8004256 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004252:	2302      	movs	r3, #2
 8004254:	e04e      	b.n	80042f4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2242      	movs	r2, #66	; 0x42
 800425a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f003 031c 	and.w	r3, r3, #28
 800426c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8a1b      	ldrh	r3, [r3, #16]
 8004272:	02db      	lsls	r3, r3, #11
 8004274:	b29b      	uxth	r3, r3
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800427c:	897b      	ldrh	r3, [r7, #10]
 800427e:	019b      	lsls	r3, r3, #6
 8004280:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f043 0302 	orr.w	r3, r3, #2
 8004290:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80042ac:	f7fe fb8c 	bl	80029c8 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80042b2:	e015      	b.n	80042e0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80042b4:	f7fe fb88 	bl	80029c8 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c2:	d309      	bcc.n	80042d8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e00d      	b.n	80042f4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e4      	bne.n	80042b4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b0b0      	sub	sp, #192	; 0xc0
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004318:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004320:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004322:	2300      	movs	r3, #0
 8004324:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004326:	2300      	movs	r3, #0
 8004328:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800432a:	2300      	movs	r3, #0
 800432c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800432e:	2300      	movs	r3, #0
 8004330:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004332:	2300      	movs	r3, #0
 8004334:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004336:	2300      	movs	r3, #0
 8004338:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004346:	663b      	str	r3, [r7, #96]	; 0x60
 8004348:	e001      	b.n	800434e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800434a:	2300      	movs	r3, #0
 800434c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800434e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004352:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004354:	2300      	movs	r3, #0
 8004356:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004358:	2300      	movs	r3, #0
 800435a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800435c:	2300      	movs	r3, #0
 800435e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004360:	2300      	movs	r3, #0
 8004362:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004364:	2300      	movs	r3, #0
 8004366:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004368:	2340      	movs	r3, #64	; 0x40
 800436a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800436c:	2300      	movs	r3, #0
 800436e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004372:	2300      	movs	r3, #0
 8004374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800438a:	2300      	movs	r3, #0
 800438c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004390:	2300      	movs	r3, #0
 8004392:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004396:	2300      	movs	r3, #0
 8004398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80043d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043d4:	4bab      	ldr	r3, [pc, #684]	; (8004684 <ETH_MACDMAConfig+0x388>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80043dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80043de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80043e0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80043e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80043e4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80043e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80043e8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80043ee:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80043f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80043f2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80043f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80043f6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80043fc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80043fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004400:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004404:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004408:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800440a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800440c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800440e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004410:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004412:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004424:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004430:	2001      	movs	r0, #1
 8004432:	f7fe fad5 	bl	80029e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800443e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004440:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004444:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004446:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004448:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800444a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800444e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004454:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800445a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800445c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004460:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004464:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800446c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800446e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800447a:	2001      	movs	r0, #1
 800447c:	f7fe fab0 	bl	80029e0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004488:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004492:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800449c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80044a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044ac:	f64f 7341 	movw	r3, #65345	; 0xff41
 80044b0:	4013      	ands	r3, r2
 80044b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80044b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044ba:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80044bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80044c0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80044c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80044c6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80044c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80044cc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80044ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80044d2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80044d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80044d8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80044da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044ec:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80044f8:	2001      	movs	r0, #1
 80044fa:	f7fe fa71 	bl	80029e0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004506:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004508:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800450c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004522:	2001      	movs	r0, #1
 8004524:	f7fe fa5c 	bl	80029e0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004530:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800453a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004540:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004544:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004546:	2300      	movs	r3, #0
 8004548:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800454e:	2300      	movs	r3, #0
 8004550:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004556:	2304      	movs	r3, #4
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800455a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004564:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800456a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800456c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004570:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004576:	2300      	movs	r3, #0
 8004578:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800457a:	2300      	movs	r3, #0
 800457c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	f241 0318 	movw	r3, #4120	; 0x1018
 8004586:	4413      	add	r3, r2
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800458e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004592:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <ETH_MACDMAConfig+0x38c>)
 8004594:	4013      	ands	r3, r2
 8004596:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800459a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800459c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800459e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80045a0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80045a2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80045a4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80045a6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80045a8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80045aa:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80045ac:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80045ae:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80045b0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80045b2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80045b6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80045ba:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80045bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	f241 0318 	movw	r3, #4120	; 0x1018
 80045ce:	4413      	add	r3, r2
 80045d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045d4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	f241 0318 	movw	r3, #4120	; 0x1018
 80045de:	4413      	add	r3, r2
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80045e6:	2001      	movs	r0, #1
 80045e8:	f7fe f9fa 	bl	80029e0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80045f4:	4413      	add	r3, r2
 80045f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045fa:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80045fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004600:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004604:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004608:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800460a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800460c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800460e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004610:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004612:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8004616:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004624:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004634:	2001      	movs	r0, #1
 8004636:	f7fe f9d3 	bl	80029e0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004642:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004646:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10d      	bne.n	800466c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	f241 031c 	movw	r3, #4124	; 0x101c
 8004658:	4413      	add	r3, r2
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6811      	ldr	r1, [r2, #0]
 8004660:	4a0a      	ldr	r2, [pc, #40]	; (800468c <ETH_MACDMAConfig+0x390>)
 8004662:	431a      	orrs	r2, r3
 8004664:	f241 031c 	movw	r3, #4124	; 0x101c
 8004668:	440b      	add	r3, r1
 800466a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	461a      	mov	r2, r3
 8004672:	2100      	movs	r1, #0
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f80b 	bl	8004690 <ETH_MACAddressConfig>
}
 800467a:	bf00      	nop
 800467c:	37c0      	adds	r7, #192	; 0xc0
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	ff20810f 	.word	0xff20810f
 8004688:	f8de3f23 	.word	0xf8de3f23
 800468c:	00010040 	.word	0x00010040

08004690 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3305      	adds	r3, #5
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	3204      	adds	r2, #4
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <ETH_MACAddressConfig+0x68>)
 80046b2:	4413      	add	r3, r2
 80046b4:	461a      	mov	r2, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3303      	adds	r3, #3
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	061a      	lsls	r2, r3, #24
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3302      	adds	r3, #2
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3301      	adds	r3, #1
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	4313      	orrs	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	7812      	ldrb	r2, [r2, #0]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <ETH_MACAddressConfig+0x6c>)
 80046e2:	4413      	add	r3, r2
 80046e4:	461a      	mov	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	6013      	str	r3, [r2, #0]
}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40028040 	.word	0x40028040
 80046fc:	40028044 	.word	0x40028044

08004700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	; 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004712:	2300      	movs	r3, #0
 8004714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	e175      	b.n	8004a0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004720:	2201      	movs	r2, #1
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	429a      	cmp	r2, r3
 800473a:	f040 8164 	bne.w	8004a06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d003      	beq.n	800474e <HAL_GPIO_Init+0x4e>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b12      	cmp	r3, #18
 800474c:	d123      	bne.n	8004796 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	08da      	lsrs	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3208      	adds	r2, #8
 8004756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	220f      	movs	r2, #15
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4013      	ands	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	08da      	lsrs	r2, r3, #3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3208      	adds	r2, #8
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	2203      	movs	r2, #3
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 0203 	and.w	r2, r3, #3
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d00b      	beq.n	80047ea <HAL_GPIO_Init+0xea>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d007      	beq.n	80047ea <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047de:	2b11      	cmp	r3, #17
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b12      	cmp	r3, #18
 80047e8:	d130      	bne.n	800484c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	2203      	movs	r2, #3
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004820:	2201      	movs	r2, #1
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f003 0201 	and.w	r2, r3, #1
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	2203      	movs	r2, #3
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4013      	ands	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80be 	beq.w	8004a06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488a:	4b65      	ldr	r3, [pc, #404]	; (8004a20 <HAL_GPIO_Init+0x320>)
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	4a64      	ldr	r2, [pc, #400]	; (8004a20 <HAL_GPIO_Init+0x320>)
 8004890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004894:	6453      	str	r3, [r2, #68]	; 0x44
 8004896:	4b62      	ldr	r3, [pc, #392]	; (8004a20 <HAL_GPIO_Init+0x320>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80048a2:	4a60      	ldr	r2, [pc, #384]	; (8004a24 <HAL_GPIO_Init+0x324>)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	3302      	adds	r3, #2
 80048aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	220f      	movs	r2, #15
 80048ba:	fa02 f303 	lsl.w	r3, r2, r3
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a57      	ldr	r2, [pc, #348]	; (8004a28 <HAL_GPIO_Init+0x328>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d037      	beq.n	800493e <HAL_GPIO_Init+0x23e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a56      	ldr	r2, [pc, #344]	; (8004a2c <HAL_GPIO_Init+0x32c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d031      	beq.n	800493a <HAL_GPIO_Init+0x23a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a55      	ldr	r2, [pc, #340]	; (8004a30 <HAL_GPIO_Init+0x330>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d02b      	beq.n	8004936 <HAL_GPIO_Init+0x236>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a54      	ldr	r2, [pc, #336]	; (8004a34 <HAL_GPIO_Init+0x334>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d025      	beq.n	8004932 <HAL_GPIO_Init+0x232>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a53      	ldr	r2, [pc, #332]	; (8004a38 <HAL_GPIO_Init+0x338>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01f      	beq.n	800492e <HAL_GPIO_Init+0x22e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a52      	ldr	r2, [pc, #328]	; (8004a3c <HAL_GPIO_Init+0x33c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d019      	beq.n	800492a <HAL_GPIO_Init+0x22a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a51      	ldr	r2, [pc, #324]	; (8004a40 <HAL_GPIO_Init+0x340>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <HAL_GPIO_Init+0x226>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a50      	ldr	r2, [pc, #320]	; (8004a44 <HAL_GPIO_Init+0x344>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00d      	beq.n	8004922 <HAL_GPIO_Init+0x222>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a4f      	ldr	r2, [pc, #316]	; (8004a48 <HAL_GPIO_Init+0x348>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <HAL_GPIO_Init+0x21e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4e      	ldr	r2, [pc, #312]	; (8004a4c <HAL_GPIO_Init+0x34c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <HAL_GPIO_Init+0x21a>
 8004916:	2309      	movs	r3, #9
 8004918:	e012      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800491a:	230a      	movs	r3, #10
 800491c:	e010      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800491e:	2308      	movs	r3, #8
 8004920:	e00e      	b.n	8004940 <HAL_GPIO_Init+0x240>
 8004922:	2307      	movs	r3, #7
 8004924:	e00c      	b.n	8004940 <HAL_GPIO_Init+0x240>
 8004926:	2306      	movs	r3, #6
 8004928:	e00a      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800492a:	2305      	movs	r3, #5
 800492c:	e008      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800492e:	2304      	movs	r3, #4
 8004930:	e006      	b.n	8004940 <HAL_GPIO_Init+0x240>
 8004932:	2303      	movs	r3, #3
 8004934:	e004      	b.n	8004940 <HAL_GPIO_Init+0x240>
 8004936:	2302      	movs	r3, #2
 8004938:	e002      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_GPIO_Init+0x240>
 800493e:	2300      	movs	r3, #0
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	f002 0203 	and.w	r2, r2, #3
 8004946:	0092      	lsls	r2, r2, #2
 8004948:	4093      	lsls	r3, r2
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004950:	4934      	ldr	r1, [pc, #208]	; (8004a24 <HAL_GPIO_Init+0x324>)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	3302      	adds	r3, #2
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800495e:	4b3c      	ldr	r3, [pc, #240]	; (8004a50 <HAL_GPIO_Init+0x350>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004982:	4a33      	ldr	r2, [pc, #204]	; (8004a50 <HAL_GPIO_Init+0x350>)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004988:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <HAL_GPIO_Init+0x350>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049ac:	4a28      	ldr	r2, [pc, #160]	; (8004a50 <HAL_GPIO_Init+0x350>)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049b2:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <HAL_GPIO_Init+0x350>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	43db      	mvns	r3, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4013      	ands	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049d6:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <HAL_GPIO_Init+0x350>)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049dc:	4b1c      	ldr	r3, [pc, #112]	; (8004a50 <HAL_GPIO_Init+0x350>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a00:	4a13      	ldr	r2, [pc, #76]	; (8004a50 <HAL_GPIO_Init+0x350>)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b0f      	cmp	r3, #15
 8004a10:	f67f ae86 	bls.w	8004720 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004a14:	bf00      	nop
 8004a16:	3724      	adds	r7, #36	; 0x24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40013800 	.word	0x40013800
 8004a28:	40020000 	.word	0x40020000
 8004a2c:	40020400 	.word	0x40020400
 8004a30:	40020800 	.word	0x40020800
 8004a34:	40020c00 	.word	0x40020c00
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40021400 	.word	0x40021400
 8004a40:	40021800 	.word	0x40021800
 8004a44:	40021c00 	.word	0x40021c00
 8004a48:	40022000 	.word	0x40022000
 8004a4c:	40022400 	.word	0x40022400
 8004a50:	40013c00 	.word	0x40013c00

08004a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	807b      	strh	r3, [r7, #2]
 8004a60:	4613      	mov	r3, r2
 8004a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a64:	787b      	ldrb	r3, [r7, #1]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a6a:	887a      	ldrh	r2, [r7, #2]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a70:	e003      	b.n	8004a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a72:	887b      	ldrh	r3, [r7, #2]
 8004a74:	041a      	lsls	r2, r3, #16
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	619a      	str	r2, [r3, #24]
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a88:	b08f      	sub	sp, #60	; 0x3c
 8004a8a:	af0a      	add	r7, sp, #40	; 0x28
 8004a8c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e10a      	b.n	8004cae <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d106      	bne.n	8004ab2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7fd feb5 	bl	800281c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f003 f94a 	bl	8007d58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	687e      	ldr	r6, [r7, #4]
 8004acc:	466d      	mov	r5, sp
 8004ace:	f106 0410 	add.w	r4, r6, #16
 8004ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ada:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ade:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ae2:	1d33      	adds	r3, r6, #4
 8004ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ae6:	6838      	ldr	r0, [r7, #0]
 8004ae8:	f003 f8de 	bl	8007ca8 <USB_CoreInit>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e0d7      	b.n	8004cae <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f003 f938 	bl	8007d7a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
 8004b0e:	e04a      	b.n	8004ba6 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b10:	7bfa      	ldrb	r2, [r7, #15]
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	4613      	mov	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	333d      	adds	r3, #61	; 0x3d
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b24:	7bfa      	ldrb	r2, [r7, #15]
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	333c      	adds	r3, #60	; 0x3c
 8004b34:	7bfa      	ldrb	r2, [r7, #15]
 8004b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b38:	7bfa      	ldrb	r2, [r7, #15]
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	b298      	uxth	r0, r3
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	3342      	adds	r3, #66	; 0x42
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b50:	7bfa      	ldrb	r2, [r7, #15]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	333f      	adds	r3, #63	; 0x3f
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b64:	7bfa      	ldrb	r2, [r7, #15]
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	3344      	adds	r3, #68	; 0x44
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b78:	7bfa      	ldrb	r2, [r7, #15]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	1a9b      	subs	r3, r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	3348      	adds	r3, #72	; 0x48
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b8c:	7bfa      	ldrb	r2, [r7, #15]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	3350      	adds	r3, #80	; 0x50
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	73fb      	strb	r3, [r7, #15]
 8004ba6:	7bfa      	ldrb	r2, [r7, #15]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d3af      	bcc.n	8004b10 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	e044      	b.n	8004c40 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bb6:	7bfa      	ldrb	r2, [r7, #15]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004bde:	7bfa      	ldrb	r2, [r7, #15]
 8004be0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004be2:	7bfa      	ldrb	r2, [r7, #15]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bf8:	7bfa      	ldrb	r2, [r7, #15]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c0e:	7bfa      	ldrb	r2, [r7, #15]
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c24:	7bfa      	ldrb	r2, [r7, #15]
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
 8004c40:	7bfa      	ldrb	r2, [r7, #15]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d3b5      	bcc.n	8004bb6 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	687e      	ldr	r6, [r7, #4]
 8004c52:	466d      	mov	r5, sp
 8004c54:	f106 0410 	add.w	r4, r6, #16
 8004c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c64:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c68:	1d33      	adds	r3, r6, #4
 8004c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c6c:	6838      	ldr	r0, [r7, #0]
 8004c6e:	f003 f8af 	bl	8007dd0 <USB_DevInit>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e014      	b.n	8004cae <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d102      	bne.n	8004ca2 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f80b 	bl	8004cb8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f003 fa6f 	bl	800818a <USB_DevDisconnect>

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004cb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_PCDEx_ActivateLPM+0x44>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	10000003 	.word	0x10000003

08004d00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d04:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a04      	ldr	r2, [pc, #16]	; (8004d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0e:	6013      	str	r3, [r2, #0]
}
 8004d10:	bf00      	nop
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40007000 	.word	0x40007000

08004d20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e25c      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8087 	beq.w	8004e52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d44:	4b96      	ldr	r3, [pc, #600]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 030c 	and.w	r3, r3, #12
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d00c      	beq.n	8004d6a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d50:	4b93      	ldr	r3, [pc, #588]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 030c 	and.w	r3, r3, #12
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d112      	bne.n	8004d82 <HAL_RCC_OscConfig+0x62>
 8004d5c:	4b90      	ldr	r3, [pc, #576]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d68:	d10b      	bne.n	8004d82 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6a:	4b8d      	ldr	r3, [pc, #564]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d06c      	beq.n	8004e50 <HAL_RCC_OscConfig+0x130>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d168      	bne.n	8004e50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e236      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8a:	d106      	bne.n	8004d9a <HAL_RCC_OscConfig+0x7a>
 8004d8c:	4b84      	ldr	r3, [pc, #528]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a83      	ldr	r2, [pc, #524]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	e02e      	b.n	8004df8 <HAL_RCC_OscConfig+0xd8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x9c>
 8004da2:	4b7f      	ldr	r3, [pc, #508]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a7e      	ldr	r2, [pc, #504]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b7c      	ldr	r3, [pc, #496]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a7b      	ldr	r2, [pc, #492]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e01d      	b.n	8004df8 <HAL_RCC_OscConfig+0xd8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCC_OscConfig+0xc0>
 8004dc6:	4b76      	ldr	r3, [pc, #472]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a75      	ldr	r2, [pc, #468]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	4b73      	ldr	r3, [pc, #460]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a72      	ldr	r2, [pc, #456]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e00b      	b.n	8004df8 <HAL_RCC_OscConfig+0xd8>
 8004de0:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a6e      	ldr	r2, [pc, #440]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b6c      	ldr	r3, [pc, #432]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a6b      	ldr	r2, [pc, #428]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fd fde2 	bl	80029c8 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fd fdde 	bl	80029c8 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	; 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e1ea      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0xe8>
 8004e26:	e014      	b.n	8004e52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fd fdce 	bl	80029c8 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fd fdca 	bl	80029c8 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e1d6      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e42:	4b57      	ldr	r3, [pc, #348]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x110>
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d069      	beq.n	8004f32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e5e:	4b50      	ldr	r3, [pc, #320]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 030c 	and.w	r3, r3, #12
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00b      	beq.n	8004e82 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e6a:	4b4d      	ldr	r3, [pc, #308]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d11c      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x190>
 8004e76:	4b4a      	ldr	r3, [pc, #296]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d116      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e82:	4b47      	ldr	r3, [pc, #284]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_RCC_OscConfig+0x17a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e1aa      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9a:	4b41      	ldr	r3, [pc, #260]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	493d      	ldr	r1, [pc, #244]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eae:	e040      	b.n	8004f32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d023      	beq.n	8004f00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb8:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a38      	ldr	r2, [pc, #224]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fd80 	bl	80029c8 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ecc:	f7fd fd7c 	bl	80029c8 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e188      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ede:	4b30      	ldr	r3, [pc, #192]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eea:	4b2d      	ldr	r3, [pc, #180]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4929      	ldr	r1, [pc, #164]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	600b      	str	r3, [r1, #0]
 8004efe:	e018      	b.n	8004f32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a26      	ldr	r2, [pc, #152]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0c:	f7fd fd5c 	bl	80029c8 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f14:	f7fd fd58 	bl	80029c8 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e164      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f26:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d038      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d019      	beq.n	8004f7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f46:	4b16      	ldr	r3, [pc, #88]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4a:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f52:	f7fd fd39 	bl	80029c8 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f5a:	f7fd fd35 	bl	80029c8 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e141      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x23a>
 8004f78:	e01a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f7a:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7e:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <HAL_RCC_OscConfig+0x280>)
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f86:	f7fd fd1f 	bl	80029c8 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f8e:	f7fd fd1b 	bl	80029c8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d903      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e127      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
 8004fa0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa4:	4b94      	ldr	r3, [pc, #592]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8004fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ee      	bne.n	8004f8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80a4 	beq.w	8005106 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fbe:	4b8e      	ldr	r3, [pc, #568]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fca:	4b8b      	ldr	r3, [pc, #556]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	4a8a      	ldr	r2, [pc, #552]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8004fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fd6:	4b88      	ldr	r3, [pc, #544]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe6:	4b85      	ldr	r3, [pc, #532]	; (80051fc <HAL_RCC_OscConfig+0x4dc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d118      	bne.n	8005024 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ff2:	4b82      	ldr	r3, [pc, #520]	; (80051fc <HAL_RCC_OscConfig+0x4dc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a81      	ldr	r2, [pc, #516]	; (80051fc <HAL_RCC_OscConfig+0x4dc>)
 8004ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ffe:	f7fd fce3 	bl	80029c8 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005006:	f7fd fcdf 	bl	80029c8 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b64      	cmp	r3, #100	; 0x64
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0eb      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005018:	4b78      	ldr	r3, [pc, #480]	; (80051fc <HAL_RCC_OscConfig+0x4dc>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d106      	bne.n	800503a <HAL_RCC_OscConfig+0x31a>
 800502c:	4b72      	ldr	r3, [pc, #456]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	4a71      	ldr	r2, [pc, #452]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	6713      	str	r3, [r2, #112]	; 0x70
 8005038:	e02d      	b.n	8005096 <HAL_RCC_OscConfig+0x376>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10c      	bne.n	800505c <HAL_RCC_OscConfig+0x33c>
 8005042:	4b6d      	ldr	r3, [pc, #436]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005046:	4a6c      	ldr	r2, [pc, #432]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	6713      	str	r3, [r2, #112]	; 0x70
 800504e:	4b6a      	ldr	r3, [pc, #424]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	4a69      	ldr	r2, [pc, #420]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005054:	f023 0304 	bic.w	r3, r3, #4
 8005058:	6713      	str	r3, [r2, #112]	; 0x70
 800505a:	e01c      	b.n	8005096 <HAL_RCC_OscConfig+0x376>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b05      	cmp	r3, #5
 8005062:	d10c      	bne.n	800507e <HAL_RCC_OscConfig+0x35e>
 8005064:	4b64      	ldr	r3, [pc, #400]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005068:	4a63      	ldr	r2, [pc, #396]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	6713      	str	r3, [r2, #112]	; 0x70
 8005070:	4b61      	ldr	r3, [pc, #388]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005074:	4a60      	ldr	r2, [pc, #384]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005076:	f043 0301 	orr.w	r3, r3, #1
 800507a:	6713      	str	r3, [r2, #112]	; 0x70
 800507c:	e00b      	b.n	8005096 <HAL_RCC_OscConfig+0x376>
 800507e:	4b5e      	ldr	r3, [pc, #376]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	4a5d      	ldr	r2, [pc, #372]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005084:	f023 0301 	bic.w	r3, r3, #1
 8005088:	6713      	str	r3, [r2, #112]	; 0x70
 800508a:	4b5b      	ldr	r3, [pc, #364]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	4a5a      	ldr	r2, [pc, #360]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005090:	f023 0304 	bic.w	r3, r3, #4
 8005094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d015      	beq.n	80050ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509e:	f7fd fc93 	bl	80029c8 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a4:	e00a      	b.n	80050bc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fd fc8f 	bl	80029c8 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e099      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050bc:	4b4e      	ldr	r3, [pc, #312]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ee      	beq.n	80050a6 <HAL_RCC_OscConfig+0x386>
 80050c8:	e014      	b.n	80050f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fd fc7d 	bl	80029c8 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d0:	e00a      	b.n	80050e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d2:	f7fd fc79 	bl	80029c8 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e083      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e8:	4b43      	ldr	r3, [pc, #268]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1ee      	bne.n	80050d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d105      	bne.n	8005106 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050fa:	4b3f      	ldr	r3, [pc, #252]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	4a3e      	ldr	r2, [pc, #248]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005104:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d06f      	beq.n	80051ee <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800510e:	4b3a      	ldr	r3, [pc, #232]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b08      	cmp	r3, #8
 8005118:	d067      	beq.n	80051ea <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d149      	bne.n	80051b6 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005122:	4b35      	ldr	r3, [pc, #212]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a34      	ldr	r2, [pc, #208]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800512c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512e:	f7fd fc4b 	bl	80029c8 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005136:	f7fd fc47 	bl	80029c8 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e053      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005148:	4b2b      	ldr	r3, [pc, #172]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f0      	bne.n	8005136 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	019b      	lsls	r3, r3, #6
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	3b01      	subs	r3, #1
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	061b      	lsls	r3, r3, #24
 8005178:	4313      	orrs	r3, r2
 800517a:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 800517c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005180:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005182:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 8005188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800518c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518e:	f7fd fc1b 	bl	80029c8 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005196:	f7fd fc17 	bl	80029c8 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e023      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a8:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCC_OscConfig+0x476>
 80051b4:	e01b      	b.n	80051ee <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b6:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a0f      	ldr	r2, [pc, #60]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 80051bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c2:	f7fd fc01 	bl	80029c8 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ca:	f7fd fbfd 	bl	80029c8 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e009      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <HAL_RCC_OscConfig+0x4d8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1f0      	bne.n	80051ca <HAL_RCC_OscConfig+0x4aa>
 80051e8:	e001      	b.n	80051ee <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40007000 	.word	0x40007000

08005200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e0ce      	b.n	80053b6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005218:	4b69      	ldr	r3, [pc, #420]	; (80053c0 <HAL_RCC_ClockConfig+0x1c0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d910      	bls.n	8005248 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005226:	4b66      	ldr	r3, [pc, #408]	; (80053c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f023 020f 	bic.w	r2, r3, #15
 800522e:	4964      	ldr	r1, [pc, #400]	; (80053c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	4313      	orrs	r3, r2
 8005234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005236:	4b62      	ldr	r3, [pc, #392]	; (80053c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d001      	beq.n	8005248 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0b6      	b.n	80053b6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d020      	beq.n	8005296 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005260:	4b58      	ldr	r3, [pc, #352]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	4a57      	ldr	r2, [pc, #348]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800526a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005278:	4b52      	ldr	r3, [pc, #328]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	4a51      	ldr	r2, [pc, #324]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 800527e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005282:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005284:	4b4f      	ldr	r3, [pc, #316]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	494c      	ldr	r1, [pc, #304]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005292:	4313      	orrs	r3, r2
 8005294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d040      	beq.n	8005324 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d107      	bne.n	80052ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052aa:	4b46      	ldr	r3, [pc, #280]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d115      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e07d      	b.n	80053b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d107      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c2:	4b40      	ldr	r3, [pc, #256]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e071      	b.n	80053b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d2:	4b3c      	ldr	r3, [pc, #240]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e069      	b.n	80053b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052e2:	4b38      	ldr	r3, [pc, #224]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f023 0203 	bic.w	r2, r3, #3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	4935      	ldr	r1, [pc, #212]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f4:	f7fd fb68 	bl	80029c8 <HAL_GetTick>
 80052f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fa:	e00a      	b.n	8005312 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052fc:	f7fd fb64 	bl	80029c8 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f241 3288 	movw	r2, #5000	; 0x1388
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e051      	b.n	80053b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005312:	4b2c      	ldr	r3, [pc, #176]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 020c 	and.w	r2, r3, #12
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	429a      	cmp	r2, r3
 8005322:	d1eb      	bne.n	80052fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005324:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d210      	bcs.n	8005354 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005332:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 020f 	bic.w	r2, r3, #15
 800533a:	4921      	ldr	r1, [pc, #132]	; (80053c0 <HAL_RCC_ClockConfig+0x1c0>)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	4313      	orrs	r3, r2
 8005340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005342:	4b1f      	ldr	r3, [pc, #124]	; (80053c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d001      	beq.n	8005354 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e030      	b.n	80053b6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005360:	4b18      	ldr	r3, [pc, #96]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	4915      	ldr	r1, [pc, #84]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 800536e:	4313      	orrs	r3, r2
 8005370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800537e:	4b11      	ldr	r3, [pc, #68]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	490d      	ldr	r1, [pc, #52]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 800538e:	4313      	orrs	r3, r2
 8005390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005392:	f000 f81d 	bl	80053d0 <HAL_RCC_GetSysClockFreq>
 8005396:	4601      	mov	r1, r0
 8005398:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	4a09      	ldr	r2, [pc, #36]	; (80053c8 <HAL_RCC_ClockConfig+0x1c8>)
 80053a4:	5cd3      	ldrb	r3, [r2, r3]
 80053a6:	fa21 f303 	lsr.w	r3, r1, r3
 80053aa:	4a08      	ldr	r2, [pc, #32]	; (80053cc <HAL_RCC_ClockConfig+0x1cc>)
 80053ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80053ae:	2000      	movs	r0, #0
 80053b0:	f7fd fac6 	bl	8002940 <HAL_InitTick>

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40023c00 	.word	0x40023c00
 80053c4:	40023800 	.word	0x40023800
 80053c8:	08009504 	.word	0x08009504
 80053cc:	200000ec 	.word	0x200000ec

080053d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	2300      	movs	r3, #0
 80053e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053e6:	4b63      	ldr	r3, [pc, #396]	; (8005574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d007      	beq.n	8005402 <HAL_RCC_GetSysClockFreq+0x32>
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d008      	beq.n	8005408 <HAL_RCC_GetSysClockFreq+0x38>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f040 80b4 	bne.w	8005564 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053fc:	4b5e      	ldr	r3, [pc, #376]	; (8005578 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80053fe:	60bb      	str	r3, [r7, #8]
       break;
 8005400:	e0b3      	b.n	800556a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005402:	4b5e      	ldr	r3, [pc, #376]	; (800557c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005404:	60bb      	str	r3, [r7, #8]
      break;
 8005406:	e0b0      	b.n	800556a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005408:	4b5a      	ldr	r3, [pc, #360]	; (8005574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005410:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005412:	4b58      	ldr	r3, [pc, #352]	; (8005574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d04a      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800541e:	4b55      	ldr	r3, [pc, #340]	; (8005574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	099b      	lsrs	r3, r3, #6
 8005424:	f04f 0400 	mov.w	r4, #0
 8005428:	f240 11ff 	movw	r1, #511	; 0x1ff
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	ea03 0501 	and.w	r5, r3, r1
 8005434:	ea04 0602 	and.w	r6, r4, r2
 8005438:	4629      	mov	r1, r5
 800543a:	4632      	mov	r2, r6
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	f04f 0400 	mov.w	r4, #0
 8005444:	0154      	lsls	r4, r2, #5
 8005446:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800544a:	014b      	lsls	r3, r1, #5
 800544c:	4619      	mov	r1, r3
 800544e:	4622      	mov	r2, r4
 8005450:	1b49      	subs	r1, r1, r5
 8005452:	eb62 0206 	sbc.w	r2, r2, r6
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	f04f 0400 	mov.w	r4, #0
 800545e:	0194      	lsls	r4, r2, #6
 8005460:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005464:	018b      	lsls	r3, r1, #6
 8005466:	1a5b      	subs	r3, r3, r1
 8005468:	eb64 0402 	sbc.w	r4, r4, r2
 800546c:	f04f 0100 	mov.w	r1, #0
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	00e2      	lsls	r2, r4, #3
 8005476:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800547a:	00d9      	lsls	r1, r3, #3
 800547c:	460b      	mov	r3, r1
 800547e:	4614      	mov	r4, r2
 8005480:	195b      	adds	r3, r3, r5
 8005482:	eb44 0406 	adc.w	r4, r4, r6
 8005486:	f04f 0100 	mov.w	r1, #0
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	0262      	lsls	r2, r4, #9
 8005490:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005494:	0259      	lsls	r1, r3, #9
 8005496:	460b      	mov	r3, r1
 8005498:	4614      	mov	r4, r2
 800549a:	4618      	mov	r0, r3
 800549c:	4621      	mov	r1, r4
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f04f 0400 	mov.w	r4, #0
 80054a4:	461a      	mov	r2, r3
 80054a6:	4623      	mov	r3, r4
 80054a8:	f7fb fb08 	bl	8000abc <__aeabi_uldivmod>
 80054ac:	4603      	mov	r3, r0
 80054ae:	460c      	mov	r4, r1
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	e049      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b4:	4b2f      	ldr	r3, [pc, #188]	; (8005574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	099b      	lsrs	r3, r3, #6
 80054ba:	f04f 0400 	mov.w	r4, #0
 80054be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	ea03 0501 	and.w	r5, r3, r1
 80054ca:	ea04 0602 	and.w	r6, r4, r2
 80054ce:	4629      	mov	r1, r5
 80054d0:	4632      	mov	r2, r6
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	f04f 0400 	mov.w	r4, #0
 80054da:	0154      	lsls	r4, r2, #5
 80054dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054e0:	014b      	lsls	r3, r1, #5
 80054e2:	4619      	mov	r1, r3
 80054e4:	4622      	mov	r2, r4
 80054e6:	1b49      	subs	r1, r1, r5
 80054e8:	eb62 0206 	sbc.w	r2, r2, r6
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	f04f 0400 	mov.w	r4, #0
 80054f4:	0194      	lsls	r4, r2, #6
 80054f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80054fa:	018b      	lsls	r3, r1, #6
 80054fc:	1a5b      	subs	r3, r3, r1
 80054fe:	eb64 0402 	sbc.w	r4, r4, r2
 8005502:	f04f 0100 	mov.w	r1, #0
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	00e2      	lsls	r2, r4, #3
 800550c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005510:	00d9      	lsls	r1, r3, #3
 8005512:	460b      	mov	r3, r1
 8005514:	4614      	mov	r4, r2
 8005516:	195b      	adds	r3, r3, r5
 8005518:	eb44 0406 	adc.w	r4, r4, r6
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	02a2      	lsls	r2, r4, #10
 8005526:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800552a:	0299      	lsls	r1, r3, #10
 800552c:	460b      	mov	r3, r1
 800552e:	4614      	mov	r4, r2
 8005530:	4618      	mov	r0, r3
 8005532:	4621      	mov	r1, r4
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f04f 0400 	mov.w	r4, #0
 800553a:	461a      	mov	r2, r3
 800553c:	4623      	mov	r3, r4
 800553e:	f7fb fabd 	bl	8000abc <__aeabi_uldivmod>
 8005542:	4603      	mov	r3, r0
 8005544:	460c      	mov	r4, r1
 8005546:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	0c1b      	lsrs	r3, r3, #16
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	3301      	adds	r3, #1
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	60bb      	str	r3, [r7, #8]
      break;
 8005562:	e002      	b.n	800556a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005564:	4b04      	ldr	r3, [pc, #16]	; (8005578 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005566:	60bb      	str	r3, [r7, #8]
      break;
 8005568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800556a:	68bb      	ldr	r3, [r7, #8]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005574:	40023800 	.word	0x40023800
 8005578:	00f42400 	.word	0x00f42400
 800557c:	007a1200 	.word	0x007a1200

08005580 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005584:	4b03      	ldr	r3, [pc, #12]	; (8005594 <HAL_RCC_GetHCLKFreq+0x14>)
 8005586:	681b      	ldr	r3, [r3, #0]
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	200000ec 	.word	0x200000ec

08005598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800559c:	f7ff fff0 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 80055a0:	4601      	mov	r1, r0
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	0a9b      	lsrs	r3, r3, #10
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	4a03      	ldr	r2, [pc, #12]	; (80055bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ae:	5cd3      	ldrb	r3, [r2, r3]
 80055b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40023800 	.word	0x40023800
 80055bc:	08009514 	.word	0x08009514

080055c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055c4:	f7ff ffdc 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 80055c8:	4601      	mov	r1, r0
 80055ca:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	0b5b      	lsrs	r3, r3, #13
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	4a03      	ldr	r2, [pc, #12]	; (80055e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055d6:	5cd3      	ldrb	r3, [r2, r3]
 80055d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055dc:	4618      	mov	r0, r3
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40023800 	.word	0x40023800
 80055e4:	08009514 	.word	0x08009514

080055e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d012      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005610:	4b69      	ldr	r3, [pc, #420]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4a68      	ldr	r2, [pc, #416]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005616:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800561a:	6093      	str	r3, [r2, #8]
 800561c:	4b66      	ldr	r3, [pc, #408]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005624:	4964      	ldr	r1, [pc, #400]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005626:	4313      	orrs	r3, r2
 8005628:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005632:	2301      	movs	r3, #1
 8005634:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d017      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005642:	4b5d      	ldr	r3, [pc, #372]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005650:	4959      	ldr	r1, [pc, #356]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005660:	d101      	bne.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005662:	2301      	movs	r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800566e:	2301      	movs	r3, #1
 8005670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d017      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800567e:	4b4e      	ldr	r3, [pc, #312]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005684:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	494a      	ldr	r1, [pc, #296]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800569c:	d101      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800569e:	2301      	movs	r3, #1
 80056a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80056aa:	2301      	movs	r3, #1
 80056ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80056ba:	2301      	movs	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 808b 	beq.w	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056cc:	4b3a      	ldr	r3, [pc, #232]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	4a39      	ldr	r2, [pc, #228]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d6:	6413      	str	r3, [r2, #64]	; 0x40
 80056d8:	4b37      	ldr	r3, [pc, #220]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056e4:	4b35      	ldr	r3, [pc, #212]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a34      	ldr	r2, [pc, #208]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f0:	f7fd f96a 	bl	80029c8 <HAL_GetTick>
 80056f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f8:	f7fd f966 	bl	80029c8 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b64      	cmp	r3, #100	; 0x64
 8005704:	d901      	bls.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e355      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800570a:	4b2c      	ldr	r3, [pc, #176]	; (80057bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0f0      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005716:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d035      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	429a      	cmp	r2, r3
 8005732:	d02e      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005734:	4b20      	ldr	r3, [pc, #128]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800573e:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005748:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800574a:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	4a1a      	ldr	r2, [pc, #104]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005754:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005756:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800575c:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b01      	cmp	r3, #1
 8005766:	d114      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005768:	f7fd f92e 	bl	80029c8 <HAL_GetTick>
 800576c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576e:	e00a      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005770:	f7fd f92a 	bl	80029c8 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f241 3288 	movw	r2, #5000	; 0x1388
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e317      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0ee      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579e:	d111      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057ac:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057ae:	400b      	ands	r3, r1
 80057b0:	4901      	ldr	r1, [pc, #4]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	608b      	str	r3, [r1, #8]
 80057b6:	e00b      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40007000 	.word	0x40007000
 80057c0:	0ffffcff 	.word	0x0ffffcff
 80057c4:	4bb0      	ldr	r3, [pc, #704]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4aaf      	ldr	r2, [pc, #700]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057ce:	6093      	str	r3, [r2, #8]
 80057d0:	4bad      	ldr	r3, [pc, #692]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057dc:	49aa      	ldr	r1, [pc, #680]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d010      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057ee:	4ba6      	ldr	r3, [pc, #664]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f4:	4aa4      	ldr	r2, [pc, #656]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80057fe:	4ba2      	ldr	r3, [pc, #648]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005800:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	499f      	ldr	r1, [pc, #636]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800581c:	4b9a      	ldr	r3, [pc, #616]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005822:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800582a:	4997      	ldr	r1, [pc, #604]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800583e:	4b92      	ldr	r3, [pc, #584]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005844:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800584c:	498e      	ldr	r1, [pc, #568]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005860:	4b89      	ldr	r3, [pc, #548]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800586e:	4986      	ldr	r1, [pc, #536]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005882:	4b81      	ldr	r3, [pc, #516]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005888:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	497d      	ldr	r1, [pc, #500]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058a4:	4b78      	ldr	r3, [pc, #480]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058aa:	f023 0203 	bic.w	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	4975      	ldr	r1, [pc, #468]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058c6:	4b70      	ldr	r3, [pc, #448]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058cc:	f023 020c 	bic.w	r2, r3, #12
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d4:	496c      	ldr	r1, [pc, #432]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058e8:	4b67      	ldr	r3, [pc, #412]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f6:	4964      	ldr	r1, [pc, #400]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800590a:	4b5f      	ldr	r3, [pc, #380]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800590c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005910:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005918:	495b      	ldr	r1, [pc, #364]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800592c:	4b56      	ldr	r3, [pc, #344]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005932:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593a:	4953      	ldr	r1, [pc, #332]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800594e:	4b4e      	ldr	r3, [pc, #312]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005954:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595c:	494a      	ldr	r1, [pc, #296]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005970:	4b45      	ldr	r3, [pc, #276]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005976:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597e:	4942      	ldr	r1, [pc, #264]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005992:	4b3d      	ldr	r3, [pc, #244]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005998:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a0:	4939      	ldr	r1, [pc, #228]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059b4:	4b34      	ldr	r3, [pc, #208]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059c2:	4931      	ldr	r1, [pc, #196]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d011      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059d6:	4b2c      	ldr	r3, [pc, #176]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e4:	4928      	ldr	r1, [pc, #160]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f4:	d101      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80059f6:	2301      	movs	r3, #1
 80059f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005a06:	2301      	movs	r3, #1
 8005a08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a24:	4918      	ldr	r1, [pc, #96]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00b      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a38:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a48:	490f      	ldr	r1, [pc, #60]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d005      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a5e:	f040 80d8 	bne.w	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a62:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6e:	f7fc ffab 	bl	80029c8 <HAL_GetTick>
 8005a72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a74:	e00a      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a76:	f7fc ffa7 	bl	80029c8 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b64      	cmp	r3, #100	; 0x64
 8005a82:	d903      	bls.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e196      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005a88:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a8c:	4b6c      	ldr	r3, [pc, #432]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1ee      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d021      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d11d      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005aac:	4b64      	ldr	r3, [pc, #400]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab2:	0c1b      	lsrs	r3, r3, #16
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005aba:	4b61      	ldr	r3, [pc, #388]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac0:	0e1b      	lsrs	r3, r3, #24
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	019a      	lsls	r2, r3, #6
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	041b      	lsls	r3, r3, #16
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	061b      	lsls	r3, r3, #24
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	071b      	lsls	r3, r3, #28
 8005ae0:	4957      	ldr	r1, [pc, #348]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005afc:	d00a      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d02e      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b12:	d129      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b14:	4b4a      	ldr	r3, [pc, #296]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1a:	0c1b      	lsrs	r3, r3, #16
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b22:	4b47      	ldr	r3, [pc, #284]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b28:	0f1b      	lsrs	r3, r3, #28
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	019a      	lsls	r2, r3, #6
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	041b      	lsls	r3, r3, #16
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	061b      	lsls	r3, r3, #24
 8005b42:	431a      	orrs	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	071b      	lsls	r3, r3, #28
 8005b48:	493d      	ldr	r1, [pc, #244]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b50:	4b3b      	ldr	r3, [pc, #236]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b56:	f023 021f 	bic.w	r2, r3, #31
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	4937      	ldr	r1, [pc, #220]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01d      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b74:	4b32      	ldr	r3, [pc, #200]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b7a:	0e1b      	lsrs	r3, r3, #24
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b82:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b88:	0f1b      	lsrs	r3, r3, #28
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	019a      	lsls	r2, r3, #6
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	061b      	lsls	r3, r3, #24
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	071b      	lsls	r3, r3, #28
 8005ba8:	4925      	ldr	r1, [pc, #148]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d011      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	019a      	lsls	r2, r3, #6
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	041b      	lsls	r3, r3, #16
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	061b      	lsls	r3, r3, #24
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	071b      	lsls	r3, r3, #28
 8005bd8:	4919      	ldr	r1, [pc, #100]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005be0:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a16      	ldr	r2, [pc, #88]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005be6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bec:	f7fc feec 	bl	80029c8 <HAL_GetTick>
 8005bf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bf4:	f7fc fee8 	bl	80029c8 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b64      	cmp	r3, #100	; 0x64
 8005c00:	d901      	bls.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e0d7      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c06:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f0      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	f040 80cd 	bne.w	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c1a:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a08      	ldr	r2, [pc, #32]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c26:	f7fc fecf 	bl	80029c8 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c2c:	e00a      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c2e:	f7fc fecb 	bl	80029c8 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b64      	cmp	r3, #100	; 0x64
 8005c3a:	d903      	bls.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e0ba      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005c40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c44:	4b5e      	ldr	r3, [pc, #376]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c50:	d0ed      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d02e      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d12a      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c7a:	4b51      	ldr	r3, [pc, #324]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c80:	0c1b      	lsrs	r3, r3, #16
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c88:	4b4d      	ldr	r3, [pc, #308]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	0f1b      	lsrs	r3, r3, #28
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	019a      	lsls	r2, r3, #6
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	061b      	lsls	r3, r3, #24
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	071b      	lsls	r3, r3, #28
 8005cae:	4944      	ldr	r1, [pc, #272]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cb6:	4b42      	ldr	r3, [pc, #264]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	493d      	ldr	r1, [pc, #244]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d022      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ce4:	d11d      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ce6:	4b36      	ldr	r3, [pc, #216]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	0e1b      	lsrs	r3, r3, #24
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cf4:	4b32      	ldr	r3, [pc, #200]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfa:	0f1b      	lsrs	r3, r3, #28
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	019a      	lsls	r2, r3, #6
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	061b      	lsls	r3, r3, #24
 8005d14:	431a      	orrs	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	071b      	lsls	r3, r3, #28
 8005d1a:	4929      	ldr	r1, [pc, #164]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d028      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d2e:	4b24      	ldr	r3, [pc, #144]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	0e1b      	lsrs	r3, r3, #24
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d3c:	4b20      	ldr	r3, [pc, #128]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d42:	0c1b      	lsrs	r3, r3, #16
 8005d44:	f003 0303 	and.w	r3, r3, #3
 8005d48:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	019a      	lsls	r2, r3, #6
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	041b      	lsls	r3, r3, #16
 8005d54:	431a      	orrs	r2, r3
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	061b      	lsls	r3, r3, #24
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	071b      	lsls	r3, r3, #28
 8005d62:	4917      	ldr	r1, [pc, #92]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d6a:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	4911      	ldr	r1, [pc, #68]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a0e      	ldr	r2, [pc, #56]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8c:	f7fc fe1c 	bl	80029c8 <HAL_GetTick>
 8005d90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d92:	e008      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d94:	f7fc fe18 	bl	80029c8 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b64      	cmp	r3, #100	; 0x64
 8005da0:	d901      	bls.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e007      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005da6:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db2:	d1ef      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40023800 	.word	0x40023800

08005dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e01d      	b.n	8005e12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fc fb46 	bl	800247c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f000 fbc8 	bl	8006598 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <HAL_TIM_Base_Start_IT+0x50>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b06      	cmp	r3, #6
 8005e44:	d00b      	beq.n	8005e5e <HAL_TIM_Base_Start_IT+0x42>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d007      	beq.n	8005e5e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	00010007 	.word	0x00010007

08005e70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e01d      	b.n	8005ebe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f815 	bl	8005ec6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	4619      	mov	r1, r3
 8005eae:	4610      	mov	r0, r2
 8005eb0:	f000 fb72 	bl	8006598 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2201      	movs	r2, #1
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 feea 	bl	8006cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <HAL_TIM_PWM_Start+0x7c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_TIM_PWM_Start+0x2c>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a16      	ldr	r2, [pc, #88]	; (8005f5c <HAL_TIM_PWM_Start+0x80>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d101      	bne.n	8005f0c <HAL_TIM_PWM_Start+0x30>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_TIM_PWM_Start+0x32>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d007      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <HAL_TIM_PWM_Start+0x84>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b06      	cmp	r3, #6
 8005f32:	d00b      	beq.n	8005f4c <HAL_TIM_PWM_Start+0x70>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3a:	d007      	beq.n	8005f4c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	00010007 	.word	0x00010007

08005f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d122      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d11b      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0202 	mvn.w	r2, #2
 8005f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fad8 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 faca 	bl	8006548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fadb 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0204 	mvn.w	r2, #4
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 faae 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 faa0 	bl	8006548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fab1 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0308 	and.w	r3, r3, #8
 800601e:	2b08      	cmp	r3, #8
 8006020:	d122      	bne.n	8006068 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b08      	cmp	r3, #8
 800602e:	d11b      	bne.n	8006068 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0208 	mvn.w	r2, #8
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2204      	movs	r2, #4
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fa84 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fa76 	bl	8006548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa87 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0310 	and.w	r3, r3, #16
 8006072:	2b10      	cmp	r3, #16
 8006074:	d122      	bne.n	80060bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0310 	and.w	r3, r3, #16
 8006080:	2b10      	cmp	r3, #16
 8006082:	d11b      	bne.n	80060bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0210 	mvn.w	r2, #16
 800608c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2208      	movs	r2, #8
 8006092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa5a 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 80060a8:	e005      	b.n	80060b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fa4c 	bl	8006548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fa5d 	bl	8006570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d10e      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d107      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0201 	mvn.w	r2, #1
 80060e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fb fbd4 	bl	8001890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f2:	2b80      	cmp	r3, #128	; 0x80
 80060f4:	d10e      	bne.n	8006114 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006100:	2b80      	cmp	r3, #128	; 0x80
 8006102:	d107      	bne.n	8006114 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800610c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fee4 	bl	8006edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006122:	d10e      	bne.n	8006142 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d107      	bne.n	8006142 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800613a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fed7 	bl	8006ef0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	d10e      	bne.n	800616e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d107      	bne.n	800616e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fa0b 	bl	8006584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b20      	cmp	r3, #32
 800617a:	d10e      	bne.n	800619a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b20      	cmp	r3, #32
 8006188:	d107      	bne.n	800619a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f06f 0220 	mvn.w	r2, #32
 8006192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fe97 	bl	8006ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e105      	b.n	80063ca <HAL_TIM_PWM_ConfigChannel+0x226>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b14      	cmp	r3, #20
 80061d2:	f200 80f0 	bhi.w	80063b6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	08006231 	.word	0x08006231
 80061e0:	080063b7 	.word	0x080063b7
 80061e4:	080063b7 	.word	0x080063b7
 80061e8:	080063b7 	.word	0x080063b7
 80061ec:	08006271 	.word	0x08006271
 80061f0:	080063b7 	.word	0x080063b7
 80061f4:	080063b7 	.word	0x080063b7
 80061f8:	080063b7 	.word	0x080063b7
 80061fc:	080062b3 	.word	0x080062b3
 8006200:	080063b7 	.word	0x080063b7
 8006204:	080063b7 	.word	0x080063b7
 8006208:	080063b7 	.word	0x080063b7
 800620c:	080062f3 	.word	0x080062f3
 8006210:	080063b7 	.word	0x080063b7
 8006214:	080063b7 	.word	0x080063b7
 8006218:	080063b7 	.word	0x080063b7
 800621c:	08006335 	.word	0x08006335
 8006220:	080063b7 	.word	0x080063b7
 8006224:	080063b7 	.word	0x080063b7
 8006228:	080063b7 	.word	0x080063b7
 800622c:	08006375 	.word	0x08006375
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fa4e 	bl	80066d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0208 	orr.w	r2, r2, #8
 800624a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0204 	bic.w	r2, r2, #4
 800625a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6999      	ldr	r1, [r3, #24]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	619a      	str	r2, [r3, #24]
      break;
 800626e:	e0a3      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 faa0 	bl	80067bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800628a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6999      	ldr	r1, [r3, #24]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	021a      	lsls	r2, r3, #8
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	619a      	str	r2, [r3, #24]
      break;
 80062b0:	e082      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 faf7 	bl	80068ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0208 	orr.w	r2, r2, #8
 80062cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0204 	bic.w	r2, r2, #4
 80062dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69d9      	ldr	r1, [r3, #28]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	61da      	str	r2, [r3, #28]
      break;
 80062f0:	e062      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fb4d 	bl	8006998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800630c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69d9      	ldr	r1, [r3, #28]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	021a      	lsls	r2, r3, #8
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	61da      	str	r2, [r3, #28]
      break;
 8006332:	e041      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fb84 	bl	8006a48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0208 	orr.w	r2, r2, #8
 800634e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0204 	bic.w	r2, r2, #4
 800635e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006372:	e021      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68b9      	ldr	r1, [r7, #8]
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fbb6 	bl	8006aec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800638e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	021a      	lsls	r2, r3, #8
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063b4:	e000      	b.n	80063b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80063b6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop

080063d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_TIM_ConfigClockSource+0x18>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e0a6      	b.n	800653a <HAL_TIM_ConfigClockSource+0x166>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4b4f      	ldr	r3, [pc, #316]	; (8006544 <HAL_TIM_ConfigClockSource+0x170>)
 8006408:	4013      	ands	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006412:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d067      	beq.n	80064f4 <HAL_TIM_ConfigClockSource+0x120>
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d80b      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x6c>
 8006428:	2b10      	cmp	r3, #16
 800642a:	d073      	beq.n	8006514 <HAL_TIM_ConfigClockSource+0x140>
 800642c:	2b10      	cmp	r3, #16
 800642e:	d802      	bhi.n	8006436 <HAL_TIM_ConfigClockSource+0x62>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d06f      	beq.n	8006514 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006434:	e078      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006436:	2b20      	cmp	r3, #32
 8006438:	d06c      	beq.n	8006514 <HAL_TIM_ConfigClockSource+0x140>
 800643a:	2b30      	cmp	r3, #48	; 0x30
 800643c:	d06a      	beq.n	8006514 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800643e:	e073      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006440:	2b70      	cmp	r3, #112	; 0x70
 8006442:	d00d      	beq.n	8006460 <HAL_TIM_ConfigClockSource+0x8c>
 8006444:	2b70      	cmp	r3, #112	; 0x70
 8006446:	d804      	bhi.n	8006452 <HAL_TIM_ConfigClockSource+0x7e>
 8006448:	2b50      	cmp	r3, #80	; 0x50
 800644a:	d033      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0xe0>
 800644c:	2b60      	cmp	r3, #96	; 0x60
 800644e:	d041      	beq.n	80064d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006450:	e06a      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006456:	d066      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0x152>
 8006458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645c:	d017      	beq.n	800648e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800645e:	e063      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6899      	ldr	r1, [r3, #8]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f000 fc0a 	bl	8006c88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006482:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	609a      	str	r2, [r3, #8]
      break;
 800648c:	e04c      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6899      	ldr	r1, [r3, #8]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f000 fbf3 	bl	8006c88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064b0:	609a      	str	r2, [r3, #8]
      break;
 80064b2:	e039      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6859      	ldr	r1, [r3, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	461a      	mov	r2, r3
 80064c2:	f000 fb67 	bl	8006b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2150      	movs	r1, #80	; 0x50
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fbc0 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 80064d2:	e029      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	6859      	ldr	r1, [r3, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	461a      	mov	r2, r3
 80064e2:	f000 fb86 	bl	8006bf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2160      	movs	r1, #96	; 0x60
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fbb0 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 80064f2:	e019      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	6859      	ldr	r1, [r3, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	461a      	mov	r2, r3
 8006502:	f000 fb47 	bl	8006b94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2140      	movs	r1, #64	; 0x40
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fba0 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 8006512:	e009      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f000 fb97 	bl	8006c52 <TIM_ITRx_SetConfig>
      break;
 8006524:	e000      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	fffeff88 	.word	0xfffeff88

08006548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a40      	ldr	r2, [pc, #256]	; (80066ac <TIM_Base_SetConfig+0x114>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b6:	d00f      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a3d      	ldr	r2, [pc, #244]	; (80066b0 <TIM_Base_SetConfig+0x118>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00b      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a3c      	ldr	r2, [pc, #240]	; (80066b4 <TIM_Base_SetConfig+0x11c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a3b      	ldr	r2, [pc, #236]	; (80066b8 <TIM_Base_SetConfig+0x120>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a3a      	ldr	r2, [pc, #232]	; (80066bc <TIM_Base_SetConfig+0x124>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d108      	bne.n	80065ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a2f      	ldr	r2, [pc, #188]	; (80066ac <TIM_Base_SetConfig+0x114>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d02b      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f8:	d027      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a2c      	ldr	r2, [pc, #176]	; (80066b0 <TIM_Base_SetConfig+0x118>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d023      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2b      	ldr	r2, [pc, #172]	; (80066b4 <TIM_Base_SetConfig+0x11c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01f      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2a      	ldr	r2, [pc, #168]	; (80066b8 <TIM_Base_SetConfig+0x120>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01b      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a29      	ldr	r2, [pc, #164]	; (80066bc <TIM_Base_SetConfig+0x124>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d017      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a28      	ldr	r2, [pc, #160]	; (80066c0 <TIM_Base_SetConfig+0x128>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a27      	ldr	r2, [pc, #156]	; (80066c4 <TIM_Base_SetConfig+0x12c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00f      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a26      	ldr	r2, [pc, #152]	; (80066c8 <TIM_Base_SetConfig+0x130>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00b      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a25      	ldr	r2, [pc, #148]	; (80066cc <TIM_Base_SetConfig+0x134>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a24      	ldr	r2, [pc, #144]	; (80066d0 <TIM_Base_SetConfig+0x138>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a23      	ldr	r2, [pc, #140]	; (80066d4 <TIM_Base_SetConfig+0x13c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d108      	bne.n	800665c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <TIM_Base_SetConfig+0x114>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_Base_SetConfig+0xf8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a0c      	ldr	r2, [pc, #48]	; (80066bc <TIM_Base_SetConfig+0x124>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d103      	bne.n	8006698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	615a      	str	r2, [r3, #20]
}
 800669e:	bf00      	nop
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40010000 	.word	0x40010000
 80066b0:	40000400 	.word	0x40000400
 80066b4:	40000800 	.word	0x40000800
 80066b8:	40000c00 	.word	0x40000c00
 80066bc:	40010400 	.word	0x40010400
 80066c0:	40014000 	.word	0x40014000
 80066c4:	40014400 	.word	0x40014400
 80066c8:	40014800 	.word	0x40014800
 80066cc:	40001800 	.word	0x40001800
 80066d0:	40001c00 	.word	0x40001c00
 80066d4:	40002000 	.word	0x40002000

080066d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f023 0201 	bic.w	r2, r3, #1
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <TIM_OC1_SetConfig+0xd8>)
 8006704:	4013      	ands	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 0303 	bic.w	r3, r3, #3
 800670e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f023 0302 	bic.w	r3, r3, #2
 8006720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a21      	ldr	r2, [pc, #132]	; (80067b4 <TIM_OC1_SetConfig+0xdc>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d003      	beq.n	800673c <TIM_OC1_SetConfig+0x64>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a20      	ldr	r2, [pc, #128]	; (80067b8 <TIM_OC1_SetConfig+0xe0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d10c      	bne.n	8006756 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f023 0308 	bic.w	r3, r3, #8
 8006742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 0304 	bic.w	r3, r3, #4
 8006754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a16      	ldr	r2, [pc, #88]	; (80067b4 <TIM_OC1_SetConfig+0xdc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d003      	beq.n	8006766 <TIM_OC1_SetConfig+0x8e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a15      	ldr	r2, [pc, #84]	; (80067b8 <TIM_OC1_SetConfig+0xe0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d111      	bne.n	800678a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800676c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	621a      	str	r2, [r3, #32]
}
 80067a4:	bf00      	nop
 80067a6:	371c      	adds	r7, #28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	fffeff8f 	.word	0xfffeff8f
 80067b4:	40010000 	.word	0x40010000
 80067b8:	40010400 	.word	0x40010400

080067bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	f023 0210 	bic.w	r2, r3, #16
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <TIM_OC2_SetConfig+0xe4>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f023 0320 	bic.w	r3, r3, #32
 8006806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a23      	ldr	r2, [pc, #140]	; (80068a4 <TIM_OC2_SetConfig+0xe8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <TIM_OC2_SetConfig+0x68>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a22      	ldr	r2, [pc, #136]	; (80068a8 <TIM_OC2_SetConfig+0xec>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d10d      	bne.n	8006840 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800682a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a18      	ldr	r2, [pc, #96]	; (80068a4 <TIM_OC2_SetConfig+0xe8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <TIM_OC2_SetConfig+0x94>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <TIM_OC2_SetConfig+0xec>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d113      	bne.n	8006878 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800685e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	feff8fff 	.word	0xfeff8fff
 80068a4:	40010000 	.word	0x40010000
 80068a8:	40010400 	.word	0x40010400

080068ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4b2d      	ldr	r3, [pc, #180]	; (800698c <TIM_OC3_SetConfig+0xe0>)
 80068d8:	4013      	ands	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a22      	ldr	r2, [pc, #136]	; (8006990 <TIM_OC3_SetConfig+0xe4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d003      	beq.n	8006912 <TIM_OC3_SetConfig+0x66>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a21      	ldr	r2, [pc, #132]	; (8006994 <TIM_OC3_SetConfig+0xe8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d10d      	bne.n	800692e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800692c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a17      	ldr	r2, [pc, #92]	; (8006990 <TIM_OC3_SetConfig+0xe4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d003      	beq.n	800693e <TIM_OC3_SetConfig+0x92>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a16      	ldr	r2, [pc, #88]	; (8006994 <TIM_OC3_SetConfig+0xe8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d113      	bne.n	8006966 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800694c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	621a      	str	r2, [r3, #32]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	fffeff8f 	.word	0xfffeff8f
 8006990:	40010000 	.word	0x40010000
 8006994:	40010400 	.word	0x40010400

08006998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4b1e      	ldr	r3, [pc, #120]	; (8006a3c <TIM_OC4_SetConfig+0xa4>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	031b      	lsls	r3, r3, #12
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <TIM_OC4_SetConfig+0xa8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC4_SetConfig+0x68>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a12      	ldr	r2, [pc, #72]	; (8006a44 <TIM_OC4_SetConfig+0xac>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d109      	bne.n	8006a14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	019b      	lsls	r3, r3, #6
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	621a      	str	r2, [r3, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	feff8fff 	.word	0xfeff8fff
 8006a40:	40010000 	.word	0x40010000
 8006a44:	40010400 	.word	0x40010400

08006a48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4b1b      	ldr	r3, [pc, #108]	; (8006ae0 <TIM_OC5_SetConfig+0x98>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a12      	ldr	r2, [pc, #72]	; (8006ae4 <TIM_OC5_SetConfig+0x9c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d003      	beq.n	8006aa6 <TIM_OC5_SetConfig+0x5e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a11      	ldr	r2, [pc, #68]	; (8006ae8 <TIM_OC5_SetConfig+0xa0>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d109      	bne.n	8006aba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	bf00      	nop
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	fffeff8f 	.word	0xfffeff8f
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40010400 	.word	0x40010400

08006aec <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4b1c      	ldr	r3, [pc, #112]	; (8006b88 <TIM_OC6_SetConfig+0x9c>)
 8006b18:	4013      	ands	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	051b      	lsls	r3, r3, #20
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a13      	ldr	r2, [pc, #76]	; (8006b8c <TIM_OC6_SetConfig+0xa0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_OC6_SetConfig+0x60>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <TIM_OC6_SetConfig+0xa4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d109      	bne.n	8006b60 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	029b      	lsls	r3, r3, #10
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	621a      	str	r2, [r3, #32]
}
 8006b7a:	bf00      	nop
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	feff8fff 	.word	0xfeff8fff
 8006b8c:	40010000 	.word	0x40010000
 8006b90:	40010400 	.word	0x40010400

08006b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	f023 0201 	bic.w	r2, r3, #1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f023 030a 	bic.w	r3, r3, #10
 8006bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	621a      	str	r2, [r3, #32]
}
 8006be6:	bf00      	nop
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b087      	sub	sp, #28
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0210 	bic.w	r2, r3, #16
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	031b      	lsls	r3, r3, #12
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f043 0307 	orr.w	r3, r3, #7
 8006c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	609a      	str	r2, [r3, #8]
}
 8006c7c:	bf00      	nop
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	021a      	lsls	r2, r3, #8
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	431a      	orrs	r2, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	609a      	str	r2, [r3, #8]
}
 8006cbc:	bf00      	nop
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f003 031f 	and.w	r3, r3, #31
 8006cda:	2201      	movs	r2, #1
 8006cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a1a      	ldr	r2, [r3, #32]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	401a      	ands	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a1a      	ldr	r2, [r3, #32]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f003 031f 	and.w	r3, r3, #31
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006d00:	431a      	orrs	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
	...

08006d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e045      	b.n	8006db8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1c      	ldr	r2, [pc, #112]	; (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a1b      	ldr	r2, [pc, #108]	; (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d108      	bne.n	8006d72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d8a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40010400 	.word	0x40010400

08006dcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e065      	b.n	8006eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	041b      	lsls	r3, r3, #16
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a16      	ldr	r2, [pc, #88]	; (8006ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a14      	ldr	r2, [pc, #80]	; (8006ec4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d115      	bne.n	8006ea2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	051b      	lsls	r3, r3, #20
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	40010000 	.word	0x40010000
 8006ec4:	40010400 	.word	0x40010400

08006ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e040      	b.n	8006f98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fb fbcc 	bl	80026c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2224      	movs	r2, #36	; 0x24
 8006f30:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0201 	bic.w	r2, r2, #1
 8006f40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f9fe 	bl	8007344 <UART_SetConfig>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e022      	b.n	8006f98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fc96 	bl	800788c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f7e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0201 	orr.w	r2, r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fd1d 	bl	80079d0 <UART_CheckIdleState>
 8006f96:	4603      	mov	r3, r0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	f040 808a 	bne.w	80070cc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <HAL_UART_Receive_IT+0x24>
 8006fbe:	88fb      	ldrh	r3, [r7, #6]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e082      	b.n	80070ce <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d101      	bne.n	8006fd6 <HAL_UART_Receive_IT+0x36>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e07b      	b.n	80070ce <HAL_UART_Receive_IT+0x12e>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	88fa      	ldrh	r2, [r7, #6]
 8006fe8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	88fa      	ldrh	r2, [r7, #6]
 8006ff0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007002:	d10e      	bne.n	8007022 <HAL_UART_Receive_IT+0x82>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d105      	bne.n	8007018 <HAL_UART_Receive_IT+0x78>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007012:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007016:	e02d      	b.n	8007074 <HAL_UART_Receive_IT+0xd4>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	22ff      	movs	r2, #255	; 0xff
 800701c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007020:	e028      	b.n	8007074 <HAL_UART_Receive_IT+0xd4>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10d      	bne.n	8007046 <HAL_UART_Receive_IT+0xa6>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d104      	bne.n	800703c <HAL_UART_Receive_IT+0x9c>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	22ff      	movs	r2, #255	; 0xff
 8007036:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800703a:	e01b      	b.n	8007074 <HAL_UART_Receive_IT+0xd4>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	227f      	movs	r2, #127	; 0x7f
 8007040:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007044:	e016      	b.n	8007074 <HAL_UART_Receive_IT+0xd4>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800704e:	d10d      	bne.n	800706c <HAL_UART_Receive_IT+0xcc>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <HAL_UART_Receive_IT+0xc2>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	227f      	movs	r2, #127	; 0x7f
 800705c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007060:	e008      	b.n	8007074 <HAL_UART_Receive_IT+0xd4>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	223f      	movs	r2, #63	; 0x3f
 8007066:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800706a:	e003      	b.n	8007074 <HAL_UART_Receive_IT+0xd4>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2222      	movs	r2, #34	; 0x22
 800707e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007098:	d107      	bne.n	80070aa <HAL_UART_Receive_IT+0x10a>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d103      	bne.n	80070aa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4a0d      	ldr	r2, [pc, #52]	; (80070dc <HAL_UART_Receive_IT+0x13c>)
 80070a6:	661a      	str	r2, [r3, #96]	; 0x60
 80070a8:	e002      	b.n	80070b0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4a0c      	ldr	r2, [pc, #48]	; (80070e0 <HAL_UART_Receive_IT+0x140>)
 80070ae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80070c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	e000      	b.n	80070ce <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80070cc:	2302      	movs	r3, #2
  }
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	08007c03 	.word	0x08007c03
 80070e0:	08007b5d 	.word	0x08007b5d

080070e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d113      	bne.n	800713a <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	f003 0320 	and.w	r3, r3, #32
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00e      	beq.n	800713a <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 80eb 	beq.w	8007306 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
      }
      return;
 8007138:	e0e5      	b.n	8007306 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 80c0 	beq.w	80072c2 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d105      	bne.n	8007158 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80b5 	beq.w	80072c2 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00e      	beq.n	8007180 <HAL_UART_IRQHandler+0x9c>
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007168:	2b00      	cmp	r3, #0
 800716a:	d009      	beq.n	8007180 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2201      	movs	r2, #1
 8007172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007178:	f043 0201 	orr.w	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00e      	beq.n	80071a8 <HAL_UART_IRQHandler+0xc4>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d009      	beq.n	80071a8 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2202      	movs	r2, #2
 800719a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a0:	f043 0204 	orr.w	r2, r3, #4
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00e      	beq.n	80071d0 <HAL_UART_IRQHandler+0xec>
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2204      	movs	r2, #4
 80071c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071c8:	f043 0202 	orr.w	r2, r3, #2
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d013      	beq.n	8007202 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d104      	bne.n	80071ee <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d009      	beq.n	8007202 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2208      	movs	r2, #8
 80071f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071fa:	f043 0208 	orr.w	r2, r3, #8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d07f      	beq.n	800730a <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00c      	beq.n	800722e <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d007      	beq.n	800722e <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007232:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b40      	cmp	r3, #64	; 0x40
 8007240:	d004      	beq.n	800724c <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007248:	2b00      	cmp	r3, #0
 800724a:	d031      	beq.n	80072b0 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fc36 	bl	8007abe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725c:	2b40      	cmp	r3, #64	; 0x40
 800725e:	d123      	bne.n	80072a8 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689a      	ldr	r2, [r3, #8]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800726e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d013      	beq.n	80072a0 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800727c:	4a26      	ldr	r2, [pc, #152]	; (8007318 <HAL_UART_IRQHandler+0x234>)
 800727e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007284:	4618      	mov	r0, r3
 8007286:	f7fc fb45 	bl	8003914 <HAL_DMA_Abort_IT>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d016      	beq.n	80072be <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800729a:	4610      	mov	r0, r2
 800729c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729e:	e00e      	b.n	80072be <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f845 	bl	8007330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a6:	e00a      	b.n	80072be <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f841 	bl	8007330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ae:	e006      	b.n	80072be <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f83d 	bl	8007330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80072bc:	e025      	b.n	800730a <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072be:	bf00      	nop
    return;
 80072c0:	e023      	b.n	800730a <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00d      	beq.n	80072e8 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d008      	beq.n	80072e8 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d017      	beq.n	800730e <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
    }
    return;
 80072e6:	e012      	b.n	800730e <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <HAL_UART_IRQHandler+0x22c>
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d009      	beq.n	8007310 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fc14 	bl	8007b2a <UART_EndTransmit_IT>
    return;
 8007302:	bf00      	nop
 8007304:	e004      	b.n	8007310 <HAL_UART_IRQHandler+0x22c>
      return;
 8007306:	bf00      	nop
 8007308:	e002      	b.n	8007310 <HAL_UART_IRQHandler+0x22c>
    return;
 800730a:	bf00      	nop
 800730c:	e000      	b.n	8007310 <HAL_UART_IRQHandler+0x22c>
    return;
 800730e:	bf00      	nop
  }

}
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	08007aff 	.word	0x08007aff

0800731c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800734c:	2300      	movs	r3, #0
 800734e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	4bb1      	ldr	r3, [pc, #708]	; (8007638 <UART_SetConfig+0x2f4>)
 8007374:	4013      	ands	r3, r2
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	6812      	ldr	r2, [r2, #0]
 800737a:	6939      	ldr	r1, [r7, #16]
 800737c:	430b      	orrs	r3, r1
 800737e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a9f      	ldr	r2, [pc, #636]	; (800763c <UART_SetConfig+0x2f8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d121      	bne.n	8007408 <UART_SetConfig+0xc4>
 80073c4:	4b9e      	ldr	r3, [pc, #632]	; (8007640 <UART_SetConfig+0x2fc>)
 80073c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d816      	bhi.n	8007400 <UART_SetConfig+0xbc>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <UART_SetConfig+0x94>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	080073e9 	.word	0x080073e9
 80073dc:	080073f5 	.word	0x080073f5
 80073e0:	080073ef 	.word	0x080073ef
 80073e4:	080073fb 	.word	0x080073fb
 80073e8:	2301      	movs	r3, #1
 80073ea:	77fb      	strb	r3, [r7, #31]
 80073ec:	e151      	b.n	8007692 <UART_SetConfig+0x34e>
 80073ee:	2302      	movs	r3, #2
 80073f0:	77fb      	strb	r3, [r7, #31]
 80073f2:	e14e      	b.n	8007692 <UART_SetConfig+0x34e>
 80073f4:	2304      	movs	r3, #4
 80073f6:	77fb      	strb	r3, [r7, #31]
 80073f8:	e14b      	b.n	8007692 <UART_SetConfig+0x34e>
 80073fa:	2308      	movs	r3, #8
 80073fc:	77fb      	strb	r3, [r7, #31]
 80073fe:	e148      	b.n	8007692 <UART_SetConfig+0x34e>
 8007400:	2310      	movs	r3, #16
 8007402:	77fb      	strb	r3, [r7, #31]
 8007404:	bf00      	nop
 8007406:	e144      	b.n	8007692 <UART_SetConfig+0x34e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a8d      	ldr	r2, [pc, #564]	; (8007644 <UART_SetConfig+0x300>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d134      	bne.n	800747c <UART_SetConfig+0x138>
 8007412:	4b8b      	ldr	r3, [pc, #556]	; (8007640 <UART_SetConfig+0x2fc>)
 8007414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007418:	f003 030c 	and.w	r3, r3, #12
 800741c:	2b0c      	cmp	r3, #12
 800741e:	d829      	bhi.n	8007474 <UART_SetConfig+0x130>
 8007420:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <UART_SetConfig+0xe4>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	0800745d 	.word	0x0800745d
 800742c:	08007475 	.word	0x08007475
 8007430:	08007475 	.word	0x08007475
 8007434:	08007475 	.word	0x08007475
 8007438:	08007469 	.word	0x08007469
 800743c:	08007475 	.word	0x08007475
 8007440:	08007475 	.word	0x08007475
 8007444:	08007475 	.word	0x08007475
 8007448:	08007463 	.word	0x08007463
 800744c:	08007475 	.word	0x08007475
 8007450:	08007475 	.word	0x08007475
 8007454:	08007475 	.word	0x08007475
 8007458:	0800746f 	.word	0x0800746f
 800745c:	2300      	movs	r3, #0
 800745e:	77fb      	strb	r3, [r7, #31]
 8007460:	e117      	b.n	8007692 <UART_SetConfig+0x34e>
 8007462:	2302      	movs	r3, #2
 8007464:	77fb      	strb	r3, [r7, #31]
 8007466:	e114      	b.n	8007692 <UART_SetConfig+0x34e>
 8007468:	2304      	movs	r3, #4
 800746a:	77fb      	strb	r3, [r7, #31]
 800746c:	e111      	b.n	8007692 <UART_SetConfig+0x34e>
 800746e:	2308      	movs	r3, #8
 8007470:	77fb      	strb	r3, [r7, #31]
 8007472:	e10e      	b.n	8007692 <UART_SetConfig+0x34e>
 8007474:	2310      	movs	r3, #16
 8007476:	77fb      	strb	r3, [r7, #31]
 8007478:	bf00      	nop
 800747a:	e10a      	b.n	8007692 <UART_SetConfig+0x34e>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a71      	ldr	r2, [pc, #452]	; (8007648 <UART_SetConfig+0x304>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d120      	bne.n	80074c8 <UART_SetConfig+0x184>
 8007486:	4b6e      	ldr	r3, [pc, #440]	; (8007640 <UART_SetConfig+0x2fc>)
 8007488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007490:	2b10      	cmp	r3, #16
 8007492:	d00f      	beq.n	80074b4 <UART_SetConfig+0x170>
 8007494:	2b10      	cmp	r3, #16
 8007496:	d802      	bhi.n	800749e <UART_SetConfig+0x15a>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <UART_SetConfig+0x164>
 800749c:	e010      	b.n	80074c0 <UART_SetConfig+0x17c>
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d005      	beq.n	80074ae <UART_SetConfig+0x16a>
 80074a2:	2b30      	cmp	r3, #48	; 0x30
 80074a4:	d009      	beq.n	80074ba <UART_SetConfig+0x176>
 80074a6:	e00b      	b.n	80074c0 <UART_SetConfig+0x17c>
 80074a8:	2300      	movs	r3, #0
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e0f1      	b.n	8007692 <UART_SetConfig+0x34e>
 80074ae:	2302      	movs	r3, #2
 80074b0:	77fb      	strb	r3, [r7, #31]
 80074b2:	e0ee      	b.n	8007692 <UART_SetConfig+0x34e>
 80074b4:	2304      	movs	r3, #4
 80074b6:	77fb      	strb	r3, [r7, #31]
 80074b8:	e0eb      	b.n	8007692 <UART_SetConfig+0x34e>
 80074ba:	2308      	movs	r3, #8
 80074bc:	77fb      	strb	r3, [r7, #31]
 80074be:	e0e8      	b.n	8007692 <UART_SetConfig+0x34e>
 80074c0:	2310      	movs	r3, #16
 80074c2:	77fb      	strb	r3, [r7, #31]
 80074c4:	bf00      	nop
 80074c6:	e0e4      	b.n	8007692 <UART_SetConfig+0x34e>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a5f      	ldr	r2, [pc, #380]	; (800764c <UART_SetConfig+0x308>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d120      	bne.n	8007514 <UART_SetConfig+0x1d0>
 80074d2:	4b5b      	ldr	r3, [pc, #364]	; (8007640 <UART_SetConfig+0x2fc>)
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074dc:	2b40      	cmp	r3, #64	; 0x40
 80074de:	d00f      	beq.n	8007500 <UART_SetConfig+0x1bc>
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	d802      	bhi.n	80074ea <UART_SetConfig+0x1a6>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <UART_SetConfig+0x1b0>
 80074e8:	e010      	b.n	800750c <UART_SetConfig+0x1c8>
 80074ea:	2b80      	cmp	r3, #128	; 0x80
 80074ec:	d005      	beq.n	80074fa <UART_SetConfig+0x1b6>
 80074ee:	2bc0      	cmp	r3, #192	; 0xc0
 80074f0:	d009      	beq.n	8007506 <UART_SetConfig+0x1c2>
 80074f2:	e00b      	b.n	800750c <UART_SetConfig+0x1c8>
 80074f4:	2300      	movs	r3, #0
 80074f6:	77fb      	strb	r3, [r7, #31]
 80074f8:	e0cb      	b.n	8007692 <UART_SetConfig+0x34e>
 80074fa:	2302      	movs	r3, #2
 80074fc:	77fb      	strb	r3, [r7, #31]
 80074fe:	e0c8      	b.n	8007692 <UART_SetConfig+0x34e>
 8007500:	2304      	movs	r3, #4
 8007502:	77fb      	strb	r3, [r7, #31]
 8007504:	e0c5      	b.n	8007692 <UART_SetConfig+0x34e>
 8007506:	2308      	movs	r3, #8
 8007508:	77fb      	strb	r3, [r7, #31]
 800750a:	e0c2      	b.n	8007692 <UART_SetConfig+0x34e>
 800750c:	2310      	movs	r3, #16
 800750e:	77fb      	strb	r3, [r7, #31]
 8007510:	bf00      	nop
 8007512:	e0be      	b.n	8007692 <UART_SetConfig+0x34e>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a4d      	ldr	r2, [pc, #308]	; (8007650 <UART_SetConfig+0x30c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d124      	bne.n	8007568 <UART_SetConfig+0x224>
 800751e:	4b48      	ldr	r3, [pc, #288]	; (8007640 <UART_SetConfig+0x2fc>)
 8007520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800752c:	d012      	beq.n	8007554 <UART_SetConfig+0x210>
 800752e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007532:	d802      	bhi.n	800753a <UART_SetConfig+0x1f6>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <UART_SetConfig+0x204>
 8007538:	e012      	b.n	8007560 <UART_SetConfig+0x21c>
 800753a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800753e:	d006      	beq.n	800754e <UART_SetConfig+0x20a>
 8007540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007544:	d009      	beq.n	800755a <UART_SetConfig+0x216>
 8007546:	e00b      	b.n	8007560 <UART_SetConfig+0x21c>
 8007548:	2300      	movs	r3, #0
 800754a:	77fb      	strb	r3, [r7, #31]
 800754c:	e0a1      	b.n	8007692 <UART_SetConfig+0x34e>
 800754e:	2302      	movs	r3, #2
 8007550:	77fb      	strb	r3, [r7, #31]
 8007552:	e09e      	b.n	8007692 <UART_SetConfig+0x34e>
 8007554:	2304      	movs	r3, #4
 8007556:	77fb      	strb	r3, [r7, #31]
 8007558:	e09b      	b.n	8007692 <UART_SetConfig+0x34e>
 800755a:	2308      	movs	r3, #8
 800755c:	77fb      	strb	r3, [r7, #31]
 800755e:	e098      	b.n	8007692 <UART_SetConfig+0x34e>
 8007560:	2310      	movs	r3, #16
 8007562:	77fb      	strb	r3, [r7, #31]
 8007564:	bf00      	nop
 8007566:	e094      	b.n	8007692 <UART_SetConfig+0x34e>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a39      	ldr	r2, [pc, #228]	; (8007654 <UART_SetConfig+0x310>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d124      	bne.n	80075bc <UART_SetConfig+0x278>
 8007572:	4b33      	ldr	r3, [pc, #204]	; (8007640 <UART_SetConfig+0x2fc>)
 8007574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007578:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800757c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007580:	d012      	beq.n	80075a8 <UART_SetConfig+0x264>
 8007582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007586:	d802      	bhi.n	800758e <UART_SetConfig+0x24a>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d007      	beq.n	800759c <UART_SetConfig+0x258>
 800758c:	e012      	b.n	80075b4 <UART_SetConfig+0x270>
 800758e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007592:	d006      	beq.n	80075a2 <UART_SetConfig+0x25e>
 8007594:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007598:	d009      	beq.n	80075ae <UART_SetConfig+0x26a>
 800759a:	e00b      	b.n	80075b4 <UART_SetConfig+0x270>
 800759c:	2301      	movs	r3, #1
 800759e:	77fb      	strb	r3, [r7, #31]
 80075a0:	e077      	b.n	8007692 <UART_SetConfig+0x34e>
 80075a2:	2302      	movs	r3, #2
 80075a4:	77fb      	strb	r3, [r7, #31]
 80075a6:	e074      	b.n	8007692 <UART_SetConfig+0x34e>
 80075a8:	2304      	movs	r3, #4
 80075aa:	77fb      	strb	r3, [r7, #31]
 80075ac:	e071      	b.n	8007692 <UART_SetConfig+0x34e>
 80075ae:	2308      	movs	r3, #8
 80075b0:	77fb      	strb	r3, [r7, #31]
 80075b2:	e06e      	b.n	8007692 <UART_SetConfig+0x34e>
 80075b4:	2310      	movs	r3, #16
 80075b6:	77fb      	strb	r3, [r7, #31]
 80075b8:	bf00      	nop
 80075ba:	e06a      	b.n	8007692 <UART_SetConfig+0x34e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a25      	ldr	r2, [pc, #148]	; (8007658 <UART_SetConfig+0x314>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d124      	bne.n	8007610 <UART_SetConfig+0x2cc>
 80075c6:	4b1e      	ldr	r3, [pc, #120]	; (8007640 <UART_SetConfig+0x2fc>)
 80075c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80075d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d4:	d012      	beq.n	80075fc <UART_SetConfig+0x2b8>
 80075d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075da:	d802      	bhi.n	80075e2 <UART_SetConfig+0x29e>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <UART_SetConfig+0x2ac>
 80075e0:	e012      	b.n	8007608 <UART_SetConfig+0x2c4>
 80075e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e6:	d006      	beq.n	80075f6 <UART_SetConfig+0x2b2>
 80075e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075ec:	d009      	beq.n	8007602 <UART_SetConfig+0x2be>
 80075ee:	e00b      	b.n	8007608 <UART_SetConfig+0x2c4>
 80075f0:	2300      	movs	r3, #0
 80075f2:	77fb      	strb	r3, [r7, #31]
 80075f4:	e04d      	b.n	8007692 <UART_SetConfig+0x34e>
 80075f6:	2302      	movs	r3, #2
 80075f8:	77fb      	strb	r3, [r7, #31]
 80075fa:	e04a      	b.n	8007692 <UART_SetConfig+0x34e>
 80075fc:	2304      	movs	r3, #4
 80075fe:	77fb      	strb	r3, [r7, #31]
 8007600:	e047      	b.n	8007692 <UART_SetConfig+0x34e>
 8007602:	2308      	movs	r3, #8
 8007604:	77fb      	strb	r3, [r7, #31]
 8007606:	e044      	b.n	8007692 <UART_SetConfig+0x34e>
 8007608:	2310      	movs	r3, #16
 800760a:	77fb      	strb	r3, [r7, #31]
 800760c:	bf00      	nop
 800760e:	e040      	b.n	8007692 <UART_SetConfig+0x34e>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a11      	ldr	r2, [pc, #68]	; (800765c <UART_SetConfig+0x318>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d139      	bne.n	800768e <UART_SetConfig+0x34a>
 800761a:	4b09      	ldr	r3, [pc, #36]	; (8007640 <UART_SetConfig+0x2fc>)
 800761c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007628:	d027      	beq.n	800767a <UART_SetConfig+0x336>
 800762a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800762e:	d817      	bhi.n	8007660 <UART_SetConfig+0x31c>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01c      	beq.n	800766e <UART_SetConfig+0x32a>
 8007634:	e027      	b.n	8007686 <UART_SetConfig+0x342>
 8007636:	bf00      	nop
 8007638:	efff69f3 	.word	0xefff69f3
 800763c:	40011000 	.word	0x40011000
 8007640:	40023800 	.word	0x40023800
 8007644:	40004400 	.word	0x40004400
 8007648:	40004800 	.word	0x40004800
 800764c:	40004c00 	.word	0x40004c00
 8007650:	40005000 	.word	0x40005000
 8007654:	40011400 	.word	0x40011400
 8007658:	40007800 	.word	0x40007800
 800765c:	40007c00 	.word	0x40007c00
 8007660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007664:	d006      	beq.n	8007674 <UART_SetConfig+0x330>
 8007666:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800766a:	d009      	beq.n	8007680 <UART_SetConfig+0x33c>
 800766c:	e00b      	b.n	8007686 <UART_SetConfig+0x342>
 800766e:	2300      	movs	r3, #0
 8007670:	77fb      	strb	r3, [r7, #31]
 8007672:	e00e      	b.n	8007692 <UART_SetConfig+0x34e>
 8007674:	2302      	movs	r3, #2
 8007676:	77fb      	strb	r3, [r7, #31]
 8007678:	e00b      	b.n	8007692 <UART_SetConfig+0x34e>
 800767a:	2304      	movs	r3, #4
 800767c:	77fb      	strb	r3, [r7, #31]
 800767e:	e008      	b.n	8007692 <UART_SetConfig+0x34e>
 8007680:	2308      	movs	r3, #8
 8007682:	77fb      	strb	r3, [r7, #31]
 8007684:	e005      	b.n	8007692 <UART_SetConfig+0x34e>
 8007686:	2310      	movs	r3, #16
 8007688:	77fb      	strb	r3, [r7, #31]
 800768a:	bf00      	nop
 800768c:	e001      	b.n	8007692 <UART_SetConfig+0x34e>
 800768e:	2310      	movs	r3, #16
 8007690:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769a:	d17c      	bne.n	8007796 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800769c:	7ffb      	ldrb	r3, [r7, #31]
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d859      	bhi.n	8007756 <UART_SetConfig+0x412>
 80076a2:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <UART_SetConfig+0x364>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	080076cd 	.word	0x080076cd
 80076ac:	080076eb 	.word	0x080076eb
 80076b0:	08007709 	.word	0x08007709
 80076b4:	08007757 	.word	0x08007757
 80076b8:	08007721 	.word	0x08007721
 80076bc:	08007757 	.word	0x08007757
 80076c0:	08007757 	.word	0x08007757
 80076c4:	08007757 	.word	0x08007757
 80076c8:	0800773f 	.word	0x0800773f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80076cc:	f7fd ff64 	bl	8005598 <HAL_RCC_GetPCLK1Freq>
 80076d0:	4603      	mov	r3, r0
 80076d2:	005a      	lsls	r2, r3, #1
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	085b      	lsrs	r3, r3, #1
 80076da:	441a      	add	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	61bb      	str	r3, [r7, #24]
        break;
 80076e8:	e038      	b.n	800775c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80076ea:	f7fd ff69 	bl	80055c0 <HAL_RCC_GetPCLK2Freq>
 80076ee:	4603      	mov	r3, r0
 80076f0:	005a      	lsls	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	085b      	lsrs	r3, r3, #1
 80076f8:	441a      	add	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007702:	b29b      	uxth	r3, r3
 8007704:	61bb      	str	r3, [r7, #24]
        break;
 8007706:	e029      	b.n	800775c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	085a      	lsrs	r2, r3, #1
 800770e:	4b5d      	ldr	r3, [pc, #372]	; (8007884 <UART_SetConfig+0x540>)
 8007710:	4413      	add	r3, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6852      	ldr	r2, [r2, #4]
 8007716:	fbb3 f3f2 	udiv	r3, r3, r2
 800771a:	b29b      	uxth	r3, r3
 800771c:	61bb      	str	r3, [r7, #24]
        break;
 800771e:	e01d      	b.n	800775c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007720:	f7fd fe56 	bl	80053d0 <HAL_RCC_GetSysClockFreq>
 8007724:	4603      	mov	r3, r0
 8007726:	005a      	lsls	r2, r3, #1
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	085b      	lsrs	r3, r3, #1
 800772e:	441a      	add	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	fbb2 f3f3 	udiv	r3, r2, r3
 8007738:	b29b      	uxth	r3, r3
 800773a:	61bb      	str	r3, [r7, #24]
        break;
 800773c:	e00e      	b.n	800775c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	085b      	lsrs	r3, r3, #1
 8007744:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007750:	b29b      	uxth	r3, r3
 8007752:	61bb      	str	r3, [r7, #24]
        break;
 8007754:	e002      	b.n	800775c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	75fb      	strb	r3, [r7, #23]
        break;
 800775a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	2b0f      	cmp	r3, #15
 8007760:	d916      	bls.n	8007790 <UART_SetConfig+0x44c>
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007768:	d212      	bcs.n	8007790 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	b29b      	uxth	r3, r3
 800776e:	f023 030f 	bic.w	r3, r3, #15
 8007772:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	085b      	lsrs	r3, r3, #1
 8007778:	b29b      	uxth	r3, r3
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	b29a      	uxth	r2, r3
 8007780:	89fb      	ldrh	r3, [r7, #14]
 8007782:	4313      	orrs	r3, r2
 8007784:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	89fa      	ldrh	r2, [r7, #14]
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	e06e      	b.n	800786e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	75fb      	strb	r3, [r7, #23]
 8007794:	e06b      	b.n	800786e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8007796:	7ffb      	ldrb	r3, [r7, #31]
 8007798:	2b08      	cmp	r3, #8
 800779a:	d857      	bhi.n	800784c <UART_SetConfig+0x508>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <UART_SetConfig+0x460>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077e5 	.word	0x080077e5
 80077ac:	08007801 	.word	0x08007801
 80077b0:	0800784d 	.word	0x0800784d
 80077b4:	08007819 	.word	0x08007819
 80077b8:	0800784d 	.word	0x0800784d
 80077bc:	0800784d 	.word	0x0800784d
 80077c0:	0800784d 	.word	0x0800784d
 80077c4:	08007835 	.word	0x08007835
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80077c8:	f7fd fee6 	bl	8005598 <HAL_RCC_GetPCLK1Freq>
 80077cc:	4602      	mov	r2, r0
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	085b      	lsrs	r3, r3, #1
 80077d4:	441a      	add	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	fbb2 f3f3 	udiv	r3, r2, r3
 80077de:	b29b      	uxth	r3, r3
 80077e0:	61bb      	str	r3, [r7, #24]
        break;
 80077e2:	e036      	b.n	8007852 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80077e4:	f7fd feec 	bl	80055c0 <HAL_RCC_GetPCLK2Freq>
 80077e8:	4602      	mov	r2, r0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	085b      	lsrs	r3, r3, #1
 80077f0:	441a      	add	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	61bb      	str	r3, [r7, #24]
        break;
 80077fe:	e028      	b.n	8007852 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	085a      	lsrs	r2, r3, #1
 8007806:	4b20      	ldr	r3, [pc, #128]	; (8007888 <UART_SetConfig+0x544>)
 8007808:	4413      	add	r3, r2
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6852      	ldr	r2, [r2, #4]
 800780e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007812:	b29b      	uxth	r3, r3
 8007814:	61bb      	str	r3, [r7, #24]
        break;
 8007816:	e01c      	b.n	8007852 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007818:	f7fd fdda 	bl	80053d0 <HAL_RCC_GetSysClockFreq>
 800781c:	4602      	mov	r2, r0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	085b      	lsrs	r3, r3, #1
 8007824:	441a      	add	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	fbb2 f3f3 	udiv	r3, r2, r3
 800782e:	b29b      	uxth	r3, r3
 8007830:	61bb      	str	r3, [r7, #24]
        break;
 8007832:	e00e      	b.n	8007852 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	085b      	lsrs	r3, r3, #1
 800783a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	fbb2 f3f3 	udiv	r3, r2, r3
 8007846:	b29b      	uxth	r3, r3
 8007848:	61bb      	str	r3, [r7, #24]
        break;
 800784a:	e002      	b.n	8007852 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	75fb      	strb	r3, [r7, #23]
        break;
 8007850:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b0f      	cmp	r3, #15
 8007856:	d908      	bls.n	800786a <UART_SetConfig+0x526>
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800785e:	d204      	bcs.n	800786a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	60da      	str	r2, [r3, #12]
 8007868:	e001      	b.n	800786e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800787a:	7dfb      	ldrb	r3, [r7, #23]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3720      	adds	r7, #32
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	01e84800 	.word	0x01e84800
 8007888:	00f42400 	.word	0x00f42400

0800788c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00a      	beq.n	80078b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	f003 0308 	and.w	r3, r3, #8
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01a      	beq.n	80079a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800798a:	d10a      	bne.n	80079a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00a      	beq.n	80079c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	605a      	str	r2, [r3, #4]
  }
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80079de:	f7fa fff3 	bl	80029c8 <HAL_GetTick>
 80079e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d10e      	bne.n	8007a10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f814 	bl	8007a2e <UART_WaitOnFlagUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e00a      	b.n	8007a26 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2220      	movs	r2, #32
 8007a14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	60f8      	str	r0, [r7, #12]
 8007a36:	60b9      	str	r1, [r7, #8]
 8007a38:	603b      	str	r3, [r7, #0]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a3e:	e02a      	b.n	8007a96 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d026      	beq.n	8007a96 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a48:	f7fa ffbe 	bl	80029c8 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d302      	bcc.n	8007a5e <UART_WaitOnFlagUntilTimeout+0x30>
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d11b      	bne.n	8007a96 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 0201 	bic.w	r2, r2, #1
 8007a7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2220      	movs	r2, #32
 8007a82:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e00f      	b.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69da      	ldr	r2, [r3, #28]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	bf0c      	ite	eq
 8007aa6:	2301      	moveq	r3, #1
 8007aa8:	2300      	movne	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d0c5      	beq.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ad4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 0201 	bic.w	r2, r2, #1
 8007ae4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2220      	movs	r2, #32
 8007aea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f7ff fc07 	bl	8007330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b22:	bf00      	nop
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b40:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2220      	movs	r2, #32
 8007b46:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff fbe4 	bl	800731c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b6a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b70:	2b22      	cmp	r3, #34	; 0x22
 8007b72:	d13a      	bne.n	8007bea <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b7c:	89bb      	ldrh	r3, [r7, #12]
 8007b7e:	b2d9      	uxtb	r1, r3
 8007b80:	89fb      	ldrh	r3, [r7, #14]
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b88:	400a      	ands	r2, r1
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d121      	bne.n	8007bfa <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007bc4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0201 	bic.w	r2, r2, #1
 8007bd4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7f9 feac 	bl	8001940 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007be8:	e007      	b.n	8007bfa <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699a      	ldr	r2, [r3, #24]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0208 	orr.w	r2, r2, #8
 8007bf8:	619a      	str	r2, [r3, #24]
}
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c10:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c16:	2b22      	cmp	r3, #34	; 0x22
 8007c18:	d13a      	bne.n	8007c90 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c28:	89ba      	ldrh	r2, [r7, #12]
 8007c2a:	89fb      	ldrh	r3, [r7, #14]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c38:	1c9a      	adds	r2, r3, #2
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	3b01      	subs	r3, #1
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d121      	bne.n	8007ca0 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c6a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	689a      	ldr	r2, [r3, #8]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0201 	bic.w	r2, r2, #1
 8007c7a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7f9 fe59 	bl	8001940 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c8e:	e007      	b.n	8007ca0 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	699a      	ldr	r2, [r3, #24]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f042 0208 	orr.w	r2, r2, #8
 8007c9e:	619a      	str	r2, [r3, #24]
}
 8007ca0:	bf00      	nop
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ca8:	b084      	sub	sp, #16
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	f107 001c 	add.w	r0, r7, #28
 8007cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d120      	bne.n	8007d02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	4b20      	ldr	r3, [pc, #128]	; (8007d54 <USB_CoreInit+0xac>)
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d105      	bne.n	8007cf6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa60 	bl	80081bc <USB_CoreReset>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]
 8007d00:	e010      	b.n	8007d24 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa54 	bl	80081bc <USB_CoreReset>
 8007d14:	4603      	mov	r3, r0
 8007d16:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d10b      	bne.n	8007d42 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f043 0206 	orr.w	r2, r3, #6
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f043 0220 	orr.w	r2, r3, #32
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d4e:	b004      	add	sp, #16
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	ffbdffbf 	.word	0xffbdffbf

08007d58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f023 0201 	bic.w	r2, r3, #1
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	460b      	mov	r3, r1
 8007d84:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d106      	bne.n	8007da6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60da      	str	r2, [r3, #12]
 8007da4:	e00b      	b.n	8007dbe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d106      	bne.n	8007dba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	60da      	str	r2, [r3, #12]
 8007db8:	e001      	b.n	8007dbe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e003      	b.n	8007dc6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007dbe:	2032      	movs	r0, #50	; 0x32
 8007dc0:	f7fa fe0e 	bl	80029e0 <HAL_Delay>

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b086      	sub	sp, #24
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007dea:	2300      	movs	r3, #0
 8007dec:	613b      	str	r3, [r7, #16]
 8007dee:	e009      	b.n	8007e04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3340      	adds	r3, #64	; 0x40
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	3301      	adds	r3, #1
 8007e02:	613b      	str	r3, [r7, #16]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	2b0e      	cmp	r3, #14
 8007e08:	d9f2      	bls.n	8007df0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d112      	bne.n	8007e36 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	e005      	b.n	8007e42 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e48:	461a      	mov	r2, r3
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e54:	4619      	mov	r1, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	680b      	ldr	r3, [r1, #0]
 8007e60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d10c      	bne.n	8007e82 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d104      	bne.n	8007e78 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e6e:	2100      	movs	r1, #0
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f971 	bl	8008158 <USB_SetDevSpeed>
 8007e76:	e018      	b.n	8007eaa <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e78:	2101      	movs	r1, #1
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f96c 	bl	8008158 <USB_SetDevSpeed>
 8007e80:	e013      	b.n	8007eaa <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d10c      	bne.n	8007ea2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d104      	bne.n	8007e98 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e8e:	2100      	movs	r1, #0
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f961 	bl	8008158 <USB_SetDevSpeed>
 8007e96:	e008      	b.n	8007eaa <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e98:	2101      	movs	r1, #1
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f95c 	bl	8008158 <USB_SetDevSpeed>
 8007ea0:	e003      	b.n	8007eaa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ea2:	2103      	movs	r1, #3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f957 	bl	8008158 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007eaa:	2110      	movs	r1, #16
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f90b 	bl	80080c8 <USB_FlushTxFifo>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f929 	bl	8008114 <USB_FlushRxFifo>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ede:	461a      	mov	r2, r3
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eea:	461a      	mov	r2, r3
 8007eec:	2300      	movs	r3, #0
 8007eee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	613b      	str	r3, [r7, #16]
 8007ef4:	e043      	b.n	8007f7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f0c:	d118      	bne.n	8007f40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f20:	461a      	mov	r2, r3
 8007f22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	e013      	b.n	8007f52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f36:	461a      	mov	r2, r3
 8007f38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	e008      	b.n	8007f52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5e:	461a      	mov	r2, r3
 8007f60:	2300      	movs	r3, #0
 8007f62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f70:	461a      	mov	r2, r3
 8007f72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	613b      	str	r3, [r7, #16]
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d3b7      	bcc.n	8007ef6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	e043      	b.n	8008014 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fa2:	d118      	bne.n	8007fd6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	e013      	b.n	8007fe8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	e008      	b.n	8007fe8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008006:	461a      	mov	r2, r3
 8008008:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800800c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3301      	adds	r3, #1
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	429a      	cmp	r2, r3
 800801a:	d3b7      	bcc.n	8007f8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800802a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800802e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	2b01      	cmp	r3, #1
 8008034:	d110      	bne.n	8008058 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800803c:	461a      	mov	r2, r3
 800803e:	4b1e      	ldr	r3, [pc, #120]	; (80080b8 <USB_DevInit+0x2e8>)
 8008040:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008050:	4619      	mov	r1, r3
 8008052:	4b1a      	ldr	r3, [pc, #104]	; (80080bc <USB_DevInit+0x2ec>)
 8008054:	4313      	orrs	r3, r2
 8008056:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008064:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	2b00      	cmp	r3, #0
 800806a:	d105      	bne.n	8008078 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f043 0210 	orr.w	r2, r3, #16
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699a      	ldr	r2, [r3, #24]
 800807c:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <USB_DevInit+0x2f0>)
 800807e:	4313      	orrs	r3, r2
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f043 0208 	orr.w	r2, r3, #8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008098:	2b01      	cmp	r3, #1
 800809a:	d105      	bne.n	80080a8 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	4b08      	ldr	r3, [pc, #32]	; (80080c4 <USB_DevInit+0x2f4>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080b4:	b004      	add	sp, #16
 80080b6:	4770      	bx	lr
 80080b8:	00800100 	.word	0x00800100
 80080bc:	00010003 	.word	0x00010003
 80080c0:	803c3800 	.word	0x803c3800
 80080c4:	40000004 	.word	0x40000004

080080c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	019b      	lsls	r3, r3, #6
 80080da:	f043 0220 	orr.w	r2, r3, #32
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3301      	adds	r3, #1
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4a09      	ldr	r2, [pc, #36]	; (8008110 <USB_FlushTxFifo+0x48>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d901      	bls.n	80080f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e006      	b.n	8008102 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b20      	cmp	r3, #32
 80080fe:	d0f0      	beq.n	80080e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	00030d40 	.word	0x00030d40

08008114 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2210      	movs	r2, #16
 8008124:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3301      	adds	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4a09      	ldr	r2, [pc, #36]	; (8008154 <USB_FlushRxFifo+0x40>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d901      	bls.n	8008138 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e006      	b.n	8008146 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	f003 0310 	and.w	r3, r3, #16
 8008140:	2b10      	cmp	r3, #16
 8008142:	d0f0      	beq.n	8008126 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	00030d40 	.word	0x00030d40

08008158 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	68f9      	ldr	r1, [r7, #12]
 8008174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008178:	4313      	orrs	r3, r2
 800817a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081a4:	f043 0302 	orr.w	r3, r3, #2
 80081a8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80081aa:	2003      	movs	r0, #3
 80081ac:	f7fa fc18 	bl	80029e0 <HAL_Delay>

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4a13      	ldr	r2, [pc, #76]	; (8008220 <USB_CoreReset+0x64>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d901      	bls.n	80081da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e01b      	b.n	8008212 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	daf2      	bge.n	80081c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f043 0201 	orr.w	r2, r3, #1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3301      	adds	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4a09      	ldr	r2, [pc, #36]	; (8008220 <USB_CoreReset+0x64>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d901      	bls.n	8008204 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e006      	b.n	8008212 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b01      	cmp	r3, #1
 800820e:	d0f0      	beq.n	80081f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	00030d40 	.word	0x00030d40

08008224 <__errno>:
 8008224:	4b01      	ldr	r3, [pc, #4]	; (800822c <__errno+0x8>)
 8008226:	6818      	ldr	r0, [r3, #0]
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	200000f8 	.word	0x200000f8

08008230 <__libc_init_array>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	4e0d      	ldr	r6, [pc, #52]	; (8008268 <__libc_init_array+0x38>)
 8008234:	4c0d      	ldr	r4, [pc, #52]	; (800826c <__libc_init_array+0x3c>)
 8008236:	1ba4      	subs	r4, r4, r6
 8008238:	10a4      	asrs	r4, r4, #2
 800823a:	2500      	movs	r5, #0
 800823c:	42a5      	cmp	r5, r4
 800823e:	d109      	bne.n	8008254 <__libc_init_array+0x24>
 8008240:	4e0b      	ldr	r6, [pc, #44]	; (8008270 <__libc_init_array+0x40>)
 8008242:	4c0c      	ldr	r4, [pc, #48]	; (8008274 <__libc_init_array+0x44>)
 8008244:	f001 f90c 	bl	8009460 <_init>
 8008248:	1ba4      	subs	r4, r4, r6
 800824a:	10a4      	asrs	r4, r4, #2
 800824c:	2500      	movs	r5, #0
 800824e:	42a5      	cmp	r5, r4
 8008250:	d105      	bne.n	800825e <__libc_init_array+0x2e>
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008258:	4798      	blx	r3
 800825a:	3501      	adds	r5, #1
 800825c:	e7ee      	b.n	800823c <__libc_init_array+0xc>
 800825e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008262:	4798      	blx	r3
 8008264:	3501      	adds	r5, #1
 8008266:	e7f2      	b.n	800824e <__libc_init_array+0x1e>
 8008268:	080096e8 	.word	0x080096e8
 800826c:	080096e8 	.word	0x080096e8
 8008270:	080096e8 	.word	0x080096e8
 8008274:	080096ec 	.word	0x080096ec

08008278 <memset>:
 8008278:	4402      	add	r2, r0
 800827a:	4603      	mov	r3, r0
 800827c:	4293      	cmp	r3, r2
 800827e:	d100      	bne.n	8008282 <memset+0xa>
 8008280:	4770      	bx	lr
 8008282:	f803 1b01 	strb.w	r1, [r3], #1
 8008286:	e7f9      	b.n	800827c <memset+0x4>

08008288 <siprintf>:
 8008288:	b40e      	push	{r1, r2, r3}
 800828a:	b500      	push	{lr}
 800828c:	b09c      	sub	sp, #112	; 0x70
 800828e:	ab1d      	add	r3, sp, #116	; 0x74
 8008290:	9002      	str	r0, [sp, #8]
 8008292:	9006      	str	r0, [sp, #24]
 8008294:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008298:	4809      	ldr	r0, [pc, #36]	; (80082c0 <siprintf+0x38>)
 800829a:	9107      	str	r1, [sp, #28]
 800829c:	9104      	str	r1, [sp, #16]
 800829e:	4909      	ldr	r1, [pc, #36]	; (80082c4 <siprintf+0x3c>)
 80082a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a4:	9105      	str	r1, [sp, #20]
 80082a6:	6800      	ldr	r0, [r0, #0]
 80082a8:	9301      	str	r3, [sp, #4]
 80082aa:	a902      	add	r1, sp, #8
 80082ac:	f000 f892 	bl	80083d4 <_svfiprintf_r>
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	2200      	movs	r2, #0
 80082b4:	701a      	strb	r2, [r3, #0]
 80082b6:	b01c      	add	sp, #112	; 0x70
 80082b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082bc:	b003      	add	sp, #12
 80082be:	4770      	bx	lr
 80082c0:	200000f8 	.word	0x200000f8
 80082c4:	ffff0208 	.word	0xffff0208

080082c8 <siscanf>:
 80082c8:	b40e      	push	{r1, r2, r3}
 80082ca:	b530      	push	{r4, r5, lr}
 80082cc:	b09c      	sub	sp, #112	; 0x70
 80082ce:	ac1f      	add	r4, sp, #124	; 0x7c
 80082d0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80082d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80082d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80082dc:	9002      	str	r0, [sp, #8]
 80082de:	9006      	str	r0, [sp, #24]
 80082e0:	f7f7 ffa0 	bl	8000224 <strlen>
 80082e4:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <siscanf+0x4c>)
 80082e6:	9003      	str	r0, [sp, #12]
 80082e8:	9007      	str	r0, [sp, #28]
 80082ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ec:	480a      	ldr	r0, [pc, #40]	; (8008318 <siscanf+0x50>)
 80082ee:	9401      	str	r4, [sp, #4]
 80082f0:	2300      	movs	r3, #0
 80082f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80082f4:	9314      	str	r3, [sp, #80]	; 0x50
 80082f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082fe:	462a      	mov	r2, r5
 8008300:	4623      	mov	r3, r4
 8008302:	a902      	add	r1, sp, #8
 8008304:	6800      	ldr	r0, [r0, #0]
 8008306:	f000 f9b7 	bl	8008678 <__ssvfiscanf_r>
 800830a:	b01c      	add	sp, #112	; 0x70
 800830c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008310:	b003      	add	sp, #12
 8008312:	4770      	bx	lr
 8008314:	0800831d 	.word	0x0800831d
 8008318:	200000f8 	.word	0x200000f8

0800831c <__seofread>:
 800831c:	2000      	movs	r0, #0
 800831e:	4770      	bx	lr

08008320 <__ssputs_r>:
 8008320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008324:	688e      	ldr	r6, [r1, #8]
 8008326:	429e      	cmp	r6, r3
 8008328:	4682      	mov	sl, r0
 800832a:	460c      	mov	r4, r1
 800832c:	4690      	mov	r8, r2
 800832e:	4699      	mov	r9, r3
 8008330:	d837      	bhi.n	80083a2 <__ssputs_r+0x82>
 8008332:	898a      	ldrh	r2, [r1, #12]
 8008334:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008338:	d031      	beq.n	800839e <__ssputs_r+0x7e>
 800833a:	6825      	ldr	r5, [r4, #0]
 800833c:	6909      	ldr	r1, [r1, #16]
 800833e:	1a6f      	subs	r7, r5, r1
 8008340:	6965      	ldr	r5, [r4, #20]
 8008342:	2302      	movs	r3, #2
 8008344:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008348:	fb95 f5f3 	sdiv	r5, r5, r3
 800834c:	f109 0301 	add.w	r3, r9, #1
 8008350:	443b      	add	r3, r7
 8008352:	429d      	cmp	r5, r3
 8008354:	bf38      	it	cc
 8008356:	461d      	movcc	r5, r3
 8008358:	0553      	lsls	r3, r2, #21
 800835a:	d530      	bpl.n	80083be <__ssputs_r+0x9e>
 800835c:	4629      	mov	r1, r5
 800835e:	f000 ffd7 	bl	8009310 <_malloc_r>
 8008362:	4606      	mov	r6, r0
 8008364:	b950      	cbnz	r0, 800837c <__ssputs_r+0x5c>
 8008366:	230c      	movs	r3, #12
 8008368:	f8ca 3000 	str.w	r3, [sl]
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008372:	81a3      	strh	r3, [r4, #12]
 8008374:	f04f 30ff 	mov.w	r0, #4294967295
 8008378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837c:	463a      	mov	r2, r7
 800837e:	6921      	ldr	r1, [r4, #16]
 8008380:	f000 ff54 	bl	800922c <memcpy>
 8008384:	89a3      	ldrh	r3, [r4, #12]
 8008386:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800838a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838e:	81a3      	strh	r3, [r4, #12]
 8008390:	6126      	str	r6, [r4, #16]
 8008392:	6165      	str	r5, [r4, #20]
 8008394:	443e      	add	r6, r7
 8008396:	1bed      	subs	r5, r5, r7
 8008398:	6026      	str	r6, [r4, #0]
 800839a:	60a5      	str	r5, [r4, #8]
 800839c:	464e      	mov	r6, r9
 800839e:	454e      	cmp	r6, r9
 80083a0:	d900      	bls.n	80083a4 <__ssputs_r+0x84>
 80083a2:	464e      	mov	r6, r9
 80083a4:	4632      	mov	r2, r6
 80083a6:	4641      	mov	r1, r8
 80083a8:	6820      	ldr	r0, [r4, #0]
 80083aa:	f000 ff4a 	bl	8009242 <memmove>
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	1b9b      	subs	r3, r3, r6
 80083b2:	60a3      	str	r3, [r4, #8]
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	441e      	add	r6, r3
 80083b8:	6026      	str	r6, [r4, #0]
 80083ba:	2000      	movs	r0, #0
 80083bc:	e7dc      	b.n	8008378 <__ssputs_r+0x58>
 80083be:	462a      	mov	r2, r5
 80083c0:	f001 f800 	bl	80093c4 <_realloc_r>
 80083c4:	4606      	mov	r6, r0
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d1e2      	bne.n	8008390 <__ssputs_r+0x70>
 80083ca:	6921      	ldr	r1, [r4, #16]
 80083cc:	4650      	mov	r0, sl
 80083ce:	f000 ff51 	bl	8009274 <_free_r>
 80083d2:	e7c8      	b.n	8008366 <__ssputs_r+0x46>

080083d4 <_svfiprintf_r>:
 80083d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d8:	461d      	mov	r5, r3
 80083da:	898b      	ldrh	r3, [r1, #12]
 80083dc:	061f      	lsls	r7, r3, #24
 80083de:	b09d      	sub	sp, #116	; 0x74
 80083e0:	4680      	mov	r8, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	4616      	mov	r6, r2
 80083e6:	d50f      	bpl.n	8008408 <_svfiprintf_r+0x34>
 80083e8:	690b      	ldr	r3, [r1, #16]
 80083ea:	b96b      	cbnz	r3, 8008408 <_svfiprintf_r+0x34>
 80083ec:	2140      	movs	r1, #64	; 0x40
 80083ee:	f000 ff8f 	bl	8009310 <_malloc_r>
 80083f2:	6020      	str	r0, [r4, #0]
 80083f4:	6120      	str	r0, [r4, #16]
 80083f6:	b928      	cbnz	r0, 8008404 <_svfiprintf_r+0x30>
 80083f8:	230c      	movs	r3, #12
 80083fa:	f8c8 3000 	str.w	r3, [r8]
 80083fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008402:	e0c8      	b.n	8008596 <_svfiprintf_r+0x1c2>
 8008404:	2340      	movs	r3, #64	; 0x40
 8008406:	6163      	str	r3, [r4, #20]
 8008408:	2300      	movs	r3, #0
 800840a:	9309      	str	r3, [sp, #36]	; 0x24
 800840c:	2320      	movs	r3, #32
 800840e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008412:	2330      	movs	r3, #48	; 0x30
 8008414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008418:	9503      	str	r5, [sp, #12]
 800841a:	f04f 0b01 	mov.w	fp, #1
 800841e:	4637      	mov	r7, r6
 8008420:	463d      	mov	r5, r7
 8008422:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008426:	b10b      	cbz	r3, 800842c <_svfiprintf_r+0x58>
 8008428:	2b25      	cmp	r3, #37	; 0x25
 800842a:	d13e      	bne.n	80084aa <_svfiprintf_r+0xd6>
 800842c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008430:	d00b      	beq.n	800844a <_svfiprintf_r+0x76>
 8008432:	4653      	mov	r3, sl
 8008434:	4632      	mov	r2, r6
 8008436:	4621      	mov	r1, r4
 8008438:	4640      	mov	r0, r8
 800843a:	f7ff ff71 	bl	8008320 <__ssputs_r>
 800843e:	3001      	adds	r0, #1
 8008440:	f000 80a4 	beq.w	800858c <_svfiprintf_r+0x1b8>
 8008444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008446:	4453      	add	r3, sl
 8008448:	9309      	str	r3, [sp, #36]	; 0x24
 800844a:	783b      	ldrb	r3, [r7, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 809d 	beq.w	800858c <_svfiprintf_r+0x1b8>
 8008452:	2300      	movs	r3, #0
 8008454:	f04f 32ff 	mov.w	r2, #4294967295
 8008458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800845c:	9304      	str	r3, [sp, #16]
 800845e:	9307      	str	r3, [sp, #28]
 8008460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008464:	931a      	str	r3, [sp, #104]	; 0x68
 8008466:	462f      	mov	r7, r5
 8008468:	2205      	movs	r2, #5
 800846a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800846e:	4850      	ldr	r0, [pc, #320]	; (80085b0 <_svfiprintf_r+0x1dc>)
 8008470:	f7f7 fee6 	bl	8000240 <memchr>
 8008474:	9b04      	ldr	r3, [sp, #16]
 8008476:	b9d0      	cbnz	r0, 80084ae <_svfiprintf_r+0xda>
 8008478:	06d9      	lsls	r1, r3, #27
 800847a:	bf44      	itt	mi
 800847c:	2220      	movmi	r2, #32
 800847e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008482:	071a      	lsls	r2, r3, #28
 8008484:	bf44      	itt	mi
 8008486:	222b      	movmi	r2, #43	; 0x2b
 8008488:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800848c:	782a      	ldrb	r2, [r5, #0]
 800848e:	2a2a      	cmp	r2, #42	; 0x2a
 8008490:	d015      	beq.n	80084be <_svfiprintf_r+0xea>
 8008492:	9a07      	ldr	r2, [sp, #28]
 8008494:	462f      	mov	r7, r5
 8008496:	2000      	movs	r0, #0
 8008498:	250a      	movs	r5, #10
 800849a:	4639      	mov	r1, r7
 800849c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084a0:	3b30      	subs	r3, #48	; 0x30
 80084a2:	2b09      	cmp	r3, #9
 80084a4:	d94d      	bls.n	8008542 <_svfiprintf_r+0x16e>
 80084a6:	b1b8      	cbz	r0, 80084d8 <_svfiprintf_r+0x104>
 80084a8:	e00f      	b.n	80084ca <_svfiprintf_r+0xf6>
 80084aa:	462f      	mov	r7, r5
 80084ac:	e7b8      	b.n	8008420 <_svfiprintf_r+0x4c>
 80084ae:	4a40      	ldr	r2, [pc, #256]	; (80085b0 <_svfiprintf_r+0x1dc>)
 80084b0:	1a80      	subs	r0, r0, r2
 80084b2:	fa0b f000 	lsl.w	r0, fp, r0
 80084b6:	4318      	orrs	r0, r3
 80084b8:	9004      	str	r0, [sp, #16]
 80084ba:	463d      	mov	r5, r7
 80084bc:	e7d3      	b.n	8008466 <_svfiprintf_r+0x92>
 80084be:	9a03      	ldr	r2, [sp, #12]
 80084c0:	1d11      	adds	r1, r2, #4
 80084c2:	6812      	ldr	r2, [r2, #0]
 80084c4:	9103      	str	r1, [sp, #12]
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	db01      	blt.n	80084ce <_svfiprintf_r+0xfa>
 80084ca:	9207      	str	r2, [sp, #28]
 80084cc:	e004      	b.n	80084d8 <_svfiprintf_r+0x104>
 80084ce:	4252      	negs	r2, r2
 80084d0:	f043 0302 	orr.w	r3, r3, #2
 80084d4:	9207      	str	r2, [sp, #28]
 80084d6:	9304      	str	r3, [sp, #16]
 80084d8:	783b      	ldrb	r3, [r7, #0]
 80084da:	2b2e      	cmp	r3, #46	; 0x2e
 80084dc:	d10c      	bne.n	80084f8 <_svfiprintf_r+0x124>
 80084de:	787b      	ldrb	r3, [r7, #1]
 80084e0:	2b2a      	cmp	r3, #42	; 0x2a
 80084e2:	d133      	bne.n	800854c <_svfiprintf_r+0x178>
 80084e4:	9b03      	ldr	r3, [sp, #12]
 80084e6:	1d1a      	adds	r2, r3, #4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	9203      	str	r2, [sp, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bfb8      	it	lt
 80084f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80084f4:	3702      	adds	r7, #2
 80084f6:	9305      	str	r3, [sp, #20]
 80084f8:	4d2e      	ldr	r5, [pc, #184]	; (80085b4 <_svfiprintf_r+0x1e0>)
 80084fa:	7839      	ldrb	r1, [r7, #0]
 80084fc:	2203      	movs	r2, #3
 80084fe:	4628      	mov	r0, r5
 8008500:	f7f7 fe9e 	bl	8000240 <memchr>
 8008504:	b138      	cbz	r0, 8008516 <_svfiprintf_r+0x142>
 8008506:	2340      	movs	r3, #64	; 0x40
 8008508:	1b40      	subs	r0, r0, r5
 800850a:	fa03 f000 	lsl.w	r0, r3, r0
 800850e:	9b04      	ldr	r3, [sp, #16]
 8008510:	4303      	orrs	r3, r0
 8008512:	3701      	adds	r7, #1
 8008514:	9304      	str	r3, [sp, #16]
 8008516:	7839      	ldrb	r1, [r7, #0]
 8008518:	4827      	ldr	r0, [pc, #156]	; (80085b8 <_svfiprintf_r+0x1e4>)
 800851a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800851e:	2206      	movs	r2, #6
 8008520:	1c7e      	adds	r6, r7, #1
 8008522:	f7f7 fe8d 	bl	8000240 <memchr>
 8008526:	2800      	cmp	r0, #0
 8008528:	d038      	beq.n	800859c <_svfiprintf_r+0x1c8>
 800852a:	4b24      	ldr	r3, [pc, #144]	; (80085bc <_svfiprintf_r+0x1e8>)
 800852c:	bb13      	cbnz	r3, 8008574 <_svfiprintf_r+0x1a0>
 800852e:	9b03      	ldr	r3, [sp, #12]
 8008530:	3307      	adds	r3, #7
 8008532:	f023 0307 	bic.w	r3, r3, #7
 8008536:	3308      	adds	r3, #8
 8008538:	9303      	str	r3, [sp, #12]
 800853a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800853c:	444b      	add	r3, r9
 800853e:	9309      	str	r3, [sp, #36]	; 0x24
 8008540:	e76d      	b.n	800841e <_svfiprintf_r+0x4a>
 8008542:	fb05 3202 	mla	r2, r5, r2, r3
 8008546:	2001      	movs	r0, #1
 8008548:	460f      	mov	r7, r1
 800854a:	e7a6      	b.n	800849a <_svfiprintf_r+0xc6>
 800854c:	2300      	movs	r3, #0
 800854e:	3701      	adds	r7, #1
 8008550:	9305      	str	r3, [sp, #20]
 8008552:	4619      	mov	r1, r3
 8008554:	250a      	movs	r5, #10
 8008556:	4638      	mov	r0, r7
 8008558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800855c:	3a30      	subs	r2, #48	; 0x30
 800855e:	2a09      	cmp	r2, #9
 8008560:	d903      	bls.n	800856a <_svfiprintf_r+0x196>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0c8      	beq.n	80084f8 <_svfiprintf_r+0x124>
 8008566:	9105      	str	r1, [sp, #20]
 8008568:	e7c6      	b.n	80084f8 <_svfiprintf_r+0x124>
 800856a:	fb05 2101 	mla	r1, r5, r1, r2
 800856e:	2301      	movs	r3, #1
 8008570:	4607      	mov	r7, r0
 8008572:	e7f0      	b.n	8008556 <_svfiprintf_r+0x182>
 8008574:	ab03      	add	r3, sp, #12
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	4622      	mov	r2, r4
 800857a:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <_svfiprintf_r+0x1ec>)
 800857c:	a904      	add	r1, sp, #16
 800857e:	4640      	mov	r0, r8
 8008580:	f3af 8000 	nop.w
 8008584:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008588:	4681      	mov	r9, r0
 800858a:	d1d6      	bne.n	800853a <_svfiprintf_r+0x166>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	065b      	lsls	r3, r3, #25
 8008590:	f53f af35 	bmi.w	80083fe <_svfiprintf_r+0x2a>
 8008594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008596:	b01d      	add	sp, #116	; 0x74
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	ab03      	add	r3, sp, #12
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	4622      	mov	r2, r4
 80085a2:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <_svfiprintf_r+0x1ec>)
 80085a4:	a904      	add	r1, sp, #16
 80085a6:	4640      	mov	r0, r8
 80085a8:	f000 fa2c 	bl	8008a04 <_printf_i>
 80085ac:	e7ea      	b.n	8008584 <_svfiprintf_r+0x1b0>
 80085ae:	bf00      	nop
 80085b0:	08009524 	.word	0x08009524
 80085b4:	0800952a 	.word	0x0800952a
 80085b8:	0800952e 	.word	0x0800952e
 80085bc:	00000000 	.word	0x00000000
 80085c0:	08008321 	.word	0x08008321

080085c4 <_sungetc_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	1c4b      	adds	r3, r1, #1
 80085c8:	4614      	mov	r4, r2
 80085ca:	d103      	bne.n	80085d4 <_sungetc_r+0x10>
 80085cc:	f04f 35ff 	mov.w	r5, #4294967295
 80085d0:	4628      	mov	r0, r5
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	8993      	ldrh	r3, [r2, #12]
 80085d6:	f023 0320 	bic.w	r3, r3, #32
 80085da:	8193      	strh	r3, [r2, #12]
 80085dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085de:	6852      	ldr	r2, [r2, #4]
 80085e0:	b2cd      	uxtb	r5, r1
 80085e2:	b18b      	cbz	r3, 8008608 <_sungetc_r+0x44>
 80085e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085e6:	4293      	cmp	r3, r2
 80085e8:	dd08      	ble.n	80085fc <_sungetc_r+0x38>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	1e5a      	subs	r2, r3, #1
 80085ee:	6022      	str	r2, [r4, #0]
 80085f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80085f4:	6863      	ldr	r3, [r4, #4]
 80085f6:	3301      	adds	r3, #1
 80085f8:	6063      	str	r3, [r4, #4]
 80085fa:	e7e9      	b.n	80085d0 <_sungetc_r+0xc>
 80085fc:	4621      	mov	r1, r4
 80085fe:	f000 fdb7 	bl	8009170 <__submore>
 8008602:	2800      	cmp	r0, #0
 8008604:	d0f1      	beq.n	80085ea <_sungetc_r+0x26>
 8008606:	e7e1      	b.n	80085cc <_sungetc_r+0x8>
 8008608:	6921      	ldr	r1, [r4, #16]
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	b151      	cbz	r1, 8008624 <_sungetc_r+0x60>
 800860e:	4299      	cmp	r1, r3
 8008610:	d208      	bcs.n	8008624 <_sungetc_r+0x60>
 8008612:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008616:	42a9      	cmp	r1, r5
 8008618:	d104      	bne.n	8008624 <_sungetc_r+0x60>
 800861a:	3b01      	subs	r3, #1
 800861c:	3201      	adds	r2, #1
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	6062      	str	r2, [r4, #4]
 8008622:	e7d5      	b.n	80085d0 <_sungetc_r+0xc>
 8008624:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800862c:	6363      	str	r3, [r4, #52]	; 0x34
 800862e:	2303      	movs	r3, #3
 8008630:	63a3      	str	r3, [r4, #56]	; 0x38
 8008632:	4623      	mov	r3, r4
 8008634:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	2301      	movs	r3, #1
 800863c:	e7dc      	b.n	80085f8 <_sungetc_r+0x34>

0800863e <__ssrefill_r>:
 800863e:	b510      	push	{r4, lr}
 8008640:	460c      	mov	r4, r1
 8008642:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008644:	b169      	cbz	r1, 8008662 <__ssrefill_r+0x24>
 8008646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800864a:	4299      	cmp	r1, r3
 800864c:	d001      	beq.n	8008652 <__ssrefill_r+0x14>
 800864e:	f000 fe11 	bl	8009274 <_free_r>
 8008652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008654:	6063      	str	r3, [r4, #4]
 8008656:	2000      	movs	r0, #0
 8008658:	6360      	str	r0, [r4, #52]	; 0x34
 800865a:	b113      	cbz	r3, 8008662 <__ssrefill_r+0x24>
 800865c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	bd10      	pop	{r4, pc}
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	2300      	movs	r3, #0
 8008668:	6063      	str	r3, [r4, #4]
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	f043 0320 	orr.w	r3, r3, #32
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	f04f 30ff 	mov.w	r0, #4294967295
 8008676:	e7f3      	b.n	8008660 <__ssrefill_r+0x22>

08008678 <__ssvfiscanf_r>:
 8008678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008680:	460c      	mov	r4, r1
 8008682:	2100      	movs	r1, #0
 8008684:	9144      	str	r1, [sp, #272]	; 0x110
 8008686:	9145      	str	r1, [sp, #276]	; 0x114
 8008688:	499f      	ldr	r1, [pc, #636]	; (8008908 <__ssvfiscanf_r+0x290>)
 800868a:	91a0      	str	r1, [sp, #640]	; 0x280
 800868c:	f10d 0804 	add.w	r8, sp, #4
 8008690:	499e      	ldr	r1, [pc, #632]	; (800890c <__ssvfiscanf_r+0x294>)
 8008692:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008910 <__ssvfiscanf_r+0x298>
 8008696:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800869a:	4606      	mov	r6, r0
 800869c:	4692      	mov	sl, r2
 800869e:	91a1      	str	r1, [sp, #644]	; 0x284
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	270a      	movs	r7, #10
 80086a4:	f89a 3000 	ldrb.w	r3, [sl]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 812a 	beq.w	8008902 <__ssvfiscanf_r+0x28a>
 80086ae:	4655      	mov	r5, sl
 80086b0:	f000 fd9c 	bl	80091ec <__locale_ctype_ptr>
 80086b4:	f815 bb01 	ldrb.w	fp, [r5], #1
 80086b8:	4458      	add	r0, fp
 80086ba:	7843      	ldrb	r3, [r0, #1]
 80086bc:	f013 0308 	ands.w	r3, r3, #8
 80086c0:	d01c      	beq.n	80086fc <__ssvfiscanf_r+0x84>
 80086c2:	6863      	ldr	r3, [r4, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dd12      	ble.n	80086ee <__ssvfiscanf_r+0x76>
 80086c8:	f000 fd90 	bl	80091ec <__locale_ctype_ptr>
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	781a      	ldrb	r2, [r3, #0]
 80086d0:	4410      	add	r0, r2
 80086d2:	7842      	ldrb	r2, [r0, #1]
 80086d4:	0712      	lsls	r2, r2, #28
 80086d6:	d401      	bmi.n	80086dc <__ssvfiscanf_r+0x64>
 80086d8:	46aa      	mov	sl, r5
 80086da:	e7e3      	b.n	80086a4 <__ssvfiscanf_r+0x2c>
 80086dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80086de:	3201      	adds	r2, #1
 80086e0:	9245      	str	r2, [sp, #276]	; 0x114
 80086e2:	6862      	ldr	r2, [r4, #4]
 80086e4:	3301      	adds	r3, #1
 80086e6:	3a01      	subs	r2, #1
 80086e8:	6062      	str	r2, [r4, #4]
 80086ea:	6023      	str	r3, [r4, #0]
 80086ec:	e7e9      	b.n	80086c2 <__ssvfiscanf_r+0x4a>
 80086ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80086f0:	4621      	mov	r1, r4
 80086f2:	4630      	mov	r0, r6
 80086f4:	4798      	blx	r3
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d0e6      	beq.n	80086c8 <__ssvfiscanf_r+0x50>
 80086fa:	e7ed      	b.n	80086d8 <__ssvfiscanf_r+0x60>
 80086fc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008700:	f040 8082 	bne.w	8008808 <__ssvfiscanf_r+0x190>
 8008704:	9343      	str	r3, [sp, #268]	; 0x10c
 8008706:	9341      	str	r3, [sp, #260]	; 0x104
 8008708:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800870c:	2b2a      	cmp	r3, #42	; 0x2a
 800870e:	d103      	bne.n	8008718 <__ssvfiscanf_r+0xa0>
 8008710:	2310      	movs	r3, #16
 8008712:	9341      	str	r3, [sp, #260]	; 0x104
 8008714:	f10a 0502 	add.w	r5, sl, #2
 8008718:	46aa      	mov	sl, r5
 800871a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800871e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008722:	2a09      	cmp	r2, #9
 8008724:	d922      	bls.n	800876c <__ssvfiscanf_r+0xf4>
 8008726:	2203      	movs	r2, #3
 8008728:	4879      	ldr	r0, [pc, #484]	; (8008910 <__ssvfiscanf_r+0x298>)
 800872a:	f7f7 fd89 	bl	8000240 <memchr>
 800872e:	b138      	cbz	r0, 8008740 <__ssvfiscanf_r+0xc8>
 8008730:	eba0 0309 	sub.w	r3, r0, r9
 8008734:	2001      	movs	r0, #1
 8008736:	4098      	lsls	r0, r3
 8008738:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800873a:	4318      	orrs	r0, r3
 800873c:	9041      	str	r0, [sp, #260]	; 0x104
 800873e:	46aa      	mov	sl, r5
 8008740:	f89a 3000 	ldrb.w	r3, [sl]
 8008744:	2b67      	cmp	r3, #103	; 0x67
 8008746:	f10a 0501 	add.w	r5, sl, #1
 800874a:	d82b      	bhi.n	80087a4 <__ssvfiscanf_r+0x12c>
 800874c:	2b65      	cmp	r3, #101	; 0x65
 800874e:	f080 809f 	bcs.w	8008890 <__ssvfiscanf_r+0x218>
 8008752:	2b47      	cmp	r3, #71	; 0x47
 8008754:	d810      	bhi.n	8008778 <__ssvfiscanf_r+0x100>
 8008756:	2b45      	cmp	r3, #69	; 0x45
 8008758:	f080 809a 	bcs.w	8008890 <__ssvfiscanf_r+0x218>
 800875c:	2b00      	cmp	r3, #0
 800875e:	d06c      	beq.n	800883a <__ssvfiscanf_r+0x1c2>
 8008760:	2b25      	cmp	r3, #37	; 0x25
 8008762:	d051      	beq.n	8008808 <__ssvfiscanf_r+0x190>
 8008764:	2303      	movs	r3, #3
 8008766:	9347      	str	r3, [sp, #284]	; 0x11c
 8008768:	9742      	str	r7, [sp, #264]	; 0x108
 800876a:	e027      	b.n	80087bc <__ssvfiscanf_r+0x144>
 800876c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800876e:	fb07 1303 	mla	r3, r7, r3, r1
 8008772:	3b30      	subs	r3, #48	; 0x30
 8008774:	9343      	str	r3, [sp, #268]	; 0x10c
 8008776:	e7cf      	b.n	8008718 <__ssvfiscanf_r+0xa0>
 8008778:	2b5b      	cmp	r3, #91	; 0x5b
 800877a:	d06a      	beq.n	8008852 <__ssvfiscanf_r+0x1da>
 800877c:	d80c      	bhi.n	8008798 <__ssvfiscanf_r+0x120>
 800877e:	2b58      	cmp	r3, #88	; 0x58
 8008780:	d1f0      	bne.n	8008764 <__ssvfiscanf_r+0xec>
 8008782:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008788:	9241      	str	r2, [sp, #260]	; 0x104
 800878a:	2210      	movs	r2, #16
 800878c:	9242      	str	r2, [sp, #264]	; 0x108
 800878e:	2b6e      	cmp	r3, #110	; 0x6e
 8008790:	bf8c      	ite	hi
 8008792:	2304      	movhi	r3, #4
 8008794:	2303      	movls	r3, #3
 8008796:	e010      	b.n	80087ba <__ssvfiscanf_r+0x142>
 8008798:	2b63      	cmp	r3, #99	; 0x63
 800879a:	d065      	beq.n	8008868 <__ssvfiscanf_r+0x1f0>
 800879c:	2b64      	cmp	r3, #100	; 0x64
 800879e:	d1e1      	bne.n	8008764 <__ssvfiscanf_r+0xec>
 80087a0:	9742      	str	r7, [sp, #264]	; 0x108
 80087a2:	e7f4      	b.n	800878e <__ssvfiscanf_r+0x116>
 80087a4:	2b70      	cmp	r3, #112	; 0x70
 80087a6:	d04b      	beq.n	8008840 <__ssvfiscanf_r+0x1c8>
 80087a8:	d826      	bhi.n	80087f8 <__ssvfiscanf_r+0x180>
 80087aa:	2b6e      	cmp	r3, #110	; 0x6e
 80087ac:	d062      	beq.n	8008874 <__ssvfiscanf_r+0x1fc>
 80087ae:	d84c      	bhi.n	800884a <__ssvfiscanf_r+0x1d2>
 80087b0:	2b69      	cmp	r3, #105	; 0x69
 80087b2:	d1d7      	bne.n	8008764 <__ssvfiscanf_r+0xec>
 80087b4:	2300      	movs	r3, #0
 80087b6:	9342      	str	r3, [sp, #264]	; 0x108
 80087b8:	2303      	movs	r3, #3
 80087ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80087bc:	6863      	ldr	r3, [r4, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	dd68      	ble.n	8008894 <__ssvfiscanf_r+0x21c>
 80087c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80087c4:	0659      	lsls	r1, r3, #25
 80087c6:	d407      	bmi.n	80087d8 <__ssvfiscanf_r+0x160>
 80087c8:	f000 fd10 	bl	80091ec <__locale_ctype_ptr>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	781a      	ldrb	r2, [r3, #0]
 80087d0:	4410      	add	r0, r2
 80087d2:	7842      	ldrb	r2, [r0, #1]
 80087d4:	0712      	lsls	r2, r2, #28
 80087d6:	d464      	bmi.n	80088a2 <__ssvfiscanf_r+0x22a>
 80087d8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80087da:	2b02      	cmp	r3, #2
 80087dc:	dc73      	bgt.n	80088c6 <__ssvfiscanf_r+0x24e>
 80087de:	466b      	mov	r3, sp
 80087e0:	4622      	mov	r2, r4
 80087e2:	a941      	add	r1, sp, #260	; 0x104
 80087e4:	4630      	mov	r0, r6
 80087e6:	f000 fa1f 	bl	8008c28 <_scanf_chars>
 80087ea:	2801      	cmp	r0, #1
 80087ec:	f000 8089 	beq.w	8008902 <__ssvfiscanf_r+0x28a>
 80087f0:	2802      	cmp	r0, #2
 80087f2:	f47f af71 	bne.w	80086d8 <__ssvfiscanf_r+0x60>
 80087f6:	e01d      	b.n	8008834 <__ssvfiscanf_r+0x1bc>
 80087f8:	2b75      	cmp	r3, #117	; 0x75
 80087fa:	d0d1      	beq.n	80087a0 <__ssvfiscanf_r+0x128>
 80087fc:	2b78      	cmp	r3, #120	; 0x78
 80087fe:	d0c0      	beq.n	8008782 <__ssvfiscanf_r+0x10a>
 8008800:	2b73      	cmp	r3, #115	; 0x73
 8008802:	d1af      	bne.n	8008764 <__ssvfiscanf_r+0xec>
 8008804:	2302      	movs	r3, #2
 8008806:	e7d8      	b.n	80087ba <__ssvfiscanf_r+0x142>
 8008808:	6863      	ldr	r3, [r4, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	dd0c      	ble.n	8008828 <__ssvfiscanf_r+0x1b0>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	781a      	ldrb	r2, [r3, #0]
 8008812:	455a      	cmp	r2, fp
 8008814:	d175      	bne.n	8008902 <__ssvfiscanf_r+0x28a>
 8008816:	3301      	adds	r3, #1
 8008818:	6862      	ldr	r2, [r4, #4]
 800881a:	6023      	str	r3, [r4, #0]
 800881c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800881e:	3a01      	subs	r2, #1
 8008820:	3301      	adds	r3, #1
 8008822:	6062      	str	r2, [r4, #4]
 8008824:	9345      	str	r3, [sp, #276]	; 0x114
 8008826:	e757      	b.n	80086d8 <__ssvfiscanf_r+0x60>
 8008828:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800882a:	4621      	mov	r1, r4
 800882c:	4630      	mov	r0, r6
 800882e:	4798      	blx	r3
 8008830:	2800      	cmp	r0, #0
 8008832:	d0ec      	beq.n	800880e <__ssvfiscanf_r+0x196>
 8008834:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008836:	2800      	cmp	r0, #0
 8008838:	d159      	bne.n	80088ee <__ssvfiscanf_r+0x276>
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	e05c      	b.n	80088fa <__ssvfiscanf_r+0x282>
 8008840:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008842:	f042 0220 	orr.w	r2, r2, #32
 8008846:	9241      	str	r2, [sp, #260]	; 0x104
 8008848:	e79b      	b.n	8008782 <__ssvfiscanf_r+0x10a>
 800884a:	2308      	movs	r3, #8
 800884c:	9342      	str	r3, [sp, #264]	; 0x108
 800884e:	2304      	movs	r3, #4
 8008850:	e7b3      	b.n	80087ba <__ssvfiscanf_r+0x142>
 8008852:	4629      	mov	r1, r5
 8008854:	4640      	mov	r0, r8
 8008856:	f000 fb3f 	bl	8008ed8 <__sccl>
 800885a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800885c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008860:	9341      	str	r3, [sp, #260]	; 0x104
 8008862:	4605      	mov	r5, r0
 8008864:	2301      	movs	r3, #1
 8008866:	e7a8      	b.n	80087ba <__ssvfiscanf_r+0x142>
 8008868:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800886a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800886e:	9341      	str	r3, [sp, #260]	; 0x104
 8008870:	2300      	movs	r3, #0
 8008872:	e7a2      	b.n	80087ba <__ssvfiscanf_r+0x142>
 8008874:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008876:	06c3      	lsls	r3, r0, #27
 8008878:	f53f af2e 	bmi.w	80086d8 <__ssvfiscanf_r+0x60>
 800887c:	9b00      	ldr	r3, [sp, #0]
 800887e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008880:	1d19      	adds	r1, r3, #4
 8008882:	9100      	str	r1, [sp, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	07c0      	lsls	r0, r0, #31
 8008888:	bf4c      	ite	mi
 800888a:	801a      	strhmi	r2, [r3, #0]
 800888c:	601a      	strpl	r2, [r3, #0]
 800888e:	e723      	b.n	80086d8 <__ssvfiscanf_r+0x60>
 8008890:	2305      	movs	r3, #5
 8008892:	e792      	b.n	80087ba <__ssvfiscanf_r+0x142>
 8008894:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008896:	4621      	mov	r1, r4
 8008898:	4630      	mov	r0, r6
 800889a:	4798      	blx	r3
 800889c:	2800      	cmp	r0, #0
 800889e:	d090      	beq.n	80087c2 <__ssvfiscanf_r+0x14a>
 80088a0:	e7c8      	b.n	8008834 <__ssvfiscanf_r+0x1bc>
 80088a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80088a4:	3201      	adds	r2, #1
 80088a6:	9245      	str	r2, [sp, #276]	; 0x114
 80088a8:	6862      	ldr	r2, [r4, #4]
 80088aa:	3a01      	subs	r2, #1
 80088ac:	2a00      	cmp	r2, #0
 80088ae:	6062      	str	r2, [r4, #4]
 80088b0:	dd02      	ble.n	80088b8 <__ssvfiscanf_r+0x240>
 80088b2:	3301      	adds	r3, #1
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	e787      	b.n	80087c8 <__ssvfiscanf_r+0x150>
 80088b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80088ba:	4621      	mov	r1, r4
 80088bc:	4630      	mov	r0, r6
 80088be:	4798      	blx	r3
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d081      	beq.n	80087c8 <__ssvfiscanf_r+0x150>
 80088c4:	e7b6      	b.n	8008834 <__ssvfiscanf_r+0x1bc>
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	dc06      	bgt.n	80088d8 <__ssvfiscanf_r+0x260>
 80088ca:	466b      	mov	r3, sp
 80088cc:	4622      	mov	r2, r4
 80088ce:	a941      	add	r1, sp, #260	; 0x104
 80088d0:	4630      	mov	r0, r6
 80088d2:	f000 fa0d 	bl	8008cf0 <_scanf_i>
 80088d6:	e788      	b.n	80087ea <__ssvfiscanf_r+0x172>
 80088d8:	4b0e      	ldr	r3, [pc, #56]	; (8008914 <__ssvfiscanf_r+0x29c>)
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f43f aefc 	beq.w	80086d8 <__ssvfiscanf_r+0x60>
 80088e0:	466b      	mov	r3, sp
 80088e2:	4622      	mov	r2, r4
 80088e4:	a941      	add	r1, sp, #260	; 0x104
 80088e6:	4630      	mov	r0, r6
 80088e8:	f3af 8000 	nop.w
 80088ec:	e77d      	b.n	80087ea <__ssvfiscanf_r+0x172>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80088f4:	bf18      	it	ne
 80088f6:	f04f 30ff 	movne.w	r0, #4294967295
 80088fa:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80088fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008902:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008904:	e7f9      	b.n	80088fa <__ssvfiscanf_r+0x282>
 8008906:	bf00      	nop
 8008908:	080085c5 	.word	0x080085c5
 800890c:	0800863f 	.word	0x0800863f
 8008910:	0800952a 	.word	0x0800952a
 8008914:	00000000 	.word	0x00000000

08008918 <_printf_common>:
 8008918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800891c:	4691      	mov	r9, r2
 800891e:	461f      	mov	r7, r3
 8008920:	688a      	ldr	r2, [r1, #8]
 8008922:	690b      	ldr	r3, [r1, #16]
 8008924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008928:	4293      	cmp	r3, r2
 800892a:	bfb8      	it	lt
 800892c:	4613      	movlt	r3, r2
 800892e:	f8c9 3000 	str.w	r3, [r9]
 8008932:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008936:	4606      	mov	r6, r0
 8008938:	460c      	mov	r4, r1
 800893a:	b112      	cbz	r2, 8008942 <_printf_common+0x2a>
 800893c:	3301      	adds	r3, #1
 800893e:	f8c9 3000 	str.w	r3, [r9]
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	0699      	lsls	r1, r3, #26
 8008946:	bf42      	ittt	mi
 8008948:	f8d9 3000 	ldrmi.w	r3, [r9]
 800894c:	3302      	addmi	r3, #2
 800894e:	f8c9 3000 	strmi.w	r3, [r9]
 8008952:	6825      	ldr	r5, [r4, #0]
 8008954:	f015 0506 	ands.w	r5, r5, #6
 8008958:	d107      	bne.n	800896a <_printf_common+0x52>
 800895a:	f104 0a19 	add.w	sl, r4, #25
 800895e:	68e3      	ldr	r3, [r4, #12]
 8008960:	f8d9 2000 	ldr.w	r2, [r9]
 8008964:	1a9b      	subs	r3, r3, r2
 8008966:	42ab      	cmp	r3, r5
 8008968:	dc28      	bgt.n	80089bc <_printf_common+0xa4>
 800896a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800896e:	6822      	ldr	r2, [r4, #0]
 8008970:	3300      	adds	r3, #0
 8008972:	bf18      	it	ne
 8008974:	2301      	movne	r3, #1
 8008976:	0692      	lsls	r2, r2, #26
 8008978:	d42d      	bmi.n	80089d6 <_printf_common+0xbe>
 800897a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800897e:	4639      	mov	r1, r7
 8008980:	4630      	mov	r0, r6
 8008982:	47c0      	blx	r8
 8008984:	3001      	adds	r0, #1
 8008986:	d020      	beq.n	80089ca <_printf_common+0xb2>
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	68e5      	ldr	r5, [r4, #12]
 800898c:	f8d9 2000 	ldr.w	r2, [r9]
 8008990:	f003 0306 	and.w	r3, r3, #6
 8008994:	2b04      	cmp	r3, #4
 8008996:	bf08      	it	eq
 8008998:	1aad      	subeq	r5, r5, r2
 800899a:	68a3      	ldr	r3, [r4, #8]
 800899c:	6922      	ldr	r2, [r4, #16]
 800899e:	bf0c      	ite	eq
 80089a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089a4:	2500      	movne	r5, #0
 80089a6:	4293      	cmp	r3, r2
 80089a8:	bfc4      	itt	gt
 80089aa:	1a9b      	subgt	r3, r3, r2
 80089ac:	18ed      	addgt	r5, r5, r3
 80089ae:	f04f 0900 	mov.w	r9, #0
 80089b2:	341a      	adds	r4, #26
 80089b4:	454d      	cmp	r5, r9
 80089b6:	d11a      	bne.n	80089ee <_printf_common+0xd6>
 80089b8:	2000      	movs	r0, #0
 80089ba:	e008      	b.n	80089ce <_printf_common+0xb6>
 80089bc:	2301      	movs	r3, #1
 80089be:	4652      	mov	r2, sl
 80089c0:	4639      	mov	r1, r7
 80089c2:	4630      	mov	r0, r6
 80089c4:	47c0      	blx	r8
 80089c6:	3001      	adds	r0, #1
 80089c8:	d103      	bne.n	80089d2 <_printf_common+0xba>
 80089ca:	f04f 30ff 	mov.w	r0, #4294967295
 80089ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d2:	3501      	adds	r5, #1
 80089d4:	e7c3      	b.n	800895e <_printf_common+0x46>
 80089d6:	18e1      	adds	r1, r4, r3
 80089d8:	1c5a      	adds	r2, r3, #1
 80089da:	2030      	movs	r0, #48	; 0x30
 80089dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089e0:	4422      	add	r2, r4
 80089e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089ea:	3302      	adds	r3, #2
 80089ec:	e7c5      	b.n	800897a <_printf_common+0x62>
 80089ee:	2301      	movs	r3, #1
 80089f0:	4622      	mov	r2, r4
 80089f2:	4639      	mov	r1, r7
 80089f4:	4630      	mov	r0, r6
 80089f6:	47c0      	blx	r8
 80089f8:	3001      	adds	r0, #1
 80089fa:	d0e6      	beq.n	80089ca <_printf_common+0xb2>
 80089fc:	f109 0901 	add.w	r9, r9, #1
 8008a00:	e7d8      	b.n	80089b4 <_printf_common+0x9c>
	...

08008a04 <_printf_i>:
 8008a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	7e09      	ldrb	r1, [r1, #24]
 8008a10:	b085      	sub	sp, #20
 8008a12:	296e      	cmp	r1, #110	; 0x6e
 8008a14:	4617      	mov	r7, r2
 8008a16:	4606      	mov	r6, r0
 8008a18:	4698      	mov	r8, r3
 8008a1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a1c:	f000 80b3 	beq.w	8008b86 <_printf_i+0x182>
 8008a20:	d822      	bhi.n	8008a68 <_printf_i+0x64>
 8008a22:	2963      	cmp	r1, #99	; 0x63
 8008a24:	d036      	beq.n	8008a94 <_printf_i+0x90>
 8008a26:	d80a      	bhi.n	8008a3e <_printf_i+0x3a>
 8008a28:	2900      	cmp	r1, #0
 8008a2a:	f000 80b9 	beq.w	8008ba0 <_printf_i+0x19c>
 8008a2e:	2958      	cmp	r1, #88	; 0x58
 8008a30:	f000 8083 	beq.w	8008b3a <_printf_i+0x136>
 8008a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a3c:	e032      	b.n	8008aa4 <_printf_i+0xa0>
 8008a3e:	2964      	cmp	r1, #100	; 0x64
 8008a40:	d001      	beq.n	8008a46 <_printf_i+0x42>
 8008a42:	2969      	cmp	r1, #105	; 0x69
 8008a44:	d1f6      	bne.n	8008a34 <_printf_i+0x30>
 8008a46:	6820      	ldr	r0, [r4, #0]
 8008a48:	6813      	ldr	r3, [r2, #0]
 8008a4a:	0605      	lsls	r5, r0, #24
 8008a4c:	f103 0104 	add.w	r1, r3, #4
 8008a50:	d52a      	bpl.n	8008aa8 <_printf_i+0xa4>
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6011      	str	r1, [r2, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	da03      	bge.n	8008a62 <_printf_i+0x5e>
 8008a5a:	222d      	movs	r2, #45	; 0x2d
 8008a5c:	425b      	negs	r3, r3
 8008a5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008a62:	486f      	ldr	r0, [pc, #444]	; (8008c20 <_printf_i+0x21c>)
 8008a64:	220a      	movs	r2, #10
 8008a66:	e039      	b.n	8008adc <_printf_i+0xd8>
 8008a68:	2973      	cmp	r1, #115	; 0x73
 8008a6a:	f000 809d 	beq.w	8008ba8 <_printf_i+0x1a4>
 8008a6e:	d808      	bhi.n	8008a82 <_printf_i+0x7e>
 8008a70:	296f      	cmp	r1, #111	; 0x6f
 8008a72:	d020      	beq.n	8008ab6 <_printf_i+0xb2>
 8008a74:	2970      	cmp	r1, #112	; 0x70
 8008a76:	d1dd      	bne.n	8008a34 <_printf_i+0x30>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	f043 0320 	orr.w	r3, r3, #32
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	e003      	b.n	8008a8a <_printf_i+0x86>
 8008a82:	2975      	cmp	r1, #117	; 0x75
 8008a84:	d017      	beq.n	8008ab6 <_printf_i+0xb2>
 8008a86:	2978      	cmp	r1, #120	; 0x78
 8008a88:	d1d4      	bne.n	8008a34 <_printf_i+0x30>
 8008a8a:	2378      	movs	r3, #120	; 0x78
 8008a8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a90:	4864      	ldr	r0, [pc, #400]	; (8008c24 <_printf_i+0x220>)
 8008a92:	e055      	b.n	8008b40 <_printf_i+0x13c>
 8008a94:	6813      	ldr	r3, [r2, #0]
 8008a96:	1d19      	adds	r1, r3, #4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6011      	str	r1, [r2, #0]
 8008a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e08c      	b.n	8008bc2 <_printf_i+0x1be>
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6011      	str	r1, [r2, #0]
 8008aac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ab0:	bf18      	it	ne
 8008ab2:	b21b      	sxthne	r3, r3
 8008ab4:	e7cf      	b.n	8008a56 <_printf_i+0x52>
 8008ab6:	6813      	ldr	r3, [r2, #0]
 8008ab8:	6825      	ldr	r5, [r4, #0]
 8008aba:	1d18      	adds	r0, r3, #4
 8008abc:	6010      	str	r0, [r2, #0]
 8008abe:	0628      	lsls	r0, r5, #24
 8008ac0:	d501      	bpl.n	8008ac6 <_printf_i+0xc2>
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	e002      	b.n	8008acc <_printf_i+0xc8>
 8008ac6:	0668      	lsls	r0, r5, #25
 8008ac8:	d5fb      	bpl.n	8008ac2 <_printf_i+0xbe>
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	4854      	ldr	r0, [pc, #336]	; (8008c20 <_printf_i+0x21c>)
 8008ace:	296f      	cmp	r1, #111	; 0x6f
 8008ad0:	bf14      	ite	ne
 8008ad2:	220a      	movne	r2, #10
 8008ad4:	2208      	moveq	r2, #8
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008adc:	6865      	ldr	r5, [r4, #4]
 8008ade:	60a5      	str	r5, [r4, #8]
 8008ae0:	2d00      	cmp	r5, #0
 8008ae2:	f2c0 8095 	blt.w	8008c10 <_printf_i+0x20c>
 8008ae6:	6821      	ldr	r1, [r4, #0]
 8008ae8:	f021 0104 	bic.w	r1, r1, #4
 8008aec:	6021      	str	r1, [r4, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d13d      	bne.n	8008b6e <_printf_i+0x16a>
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	f040 808e 	bne.w	8008c14 <_printf_i+0x210>
 8008af8:	4665      	mov	r5, ip
 8008afa:	2a08      	cmp	r2, #8
 8008afc:	d10b      	bne.n	8008b16 <_printf_i+0x112>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	07db      	lsls	r3, r3, #31
 8008b02:	d508      	bpl.n	8008b16 <_printf_i+0x112>
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	6862      	ldr	r2, [r4, #4]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	bfde      	ittt	le
 8008b0c:	2330      	movle	r3, #48	; 0x30
 8008b0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b16:	ebac 0305 	sub.w	r3, ip, r5
 8008b1a:	6123      	str	r3, [r4, #16]
 8008b1c:	f8cd 8000 	str.w	r8, [sp]
 8008b20:	463b      	mov	r3, r7
 8008b22:	aa03      	add	r2, sp, #12
 8008b24:	4621      	mov	r1, r4
 8008b26:	4630      	mov	r0, r6
 8008b28:	f7ff fef6 	bl	8008918 <_printf_common>
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d14d      	bne.n	8008bcc <_printf_i+0x1c8>
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	b005      	add	sp, #20
 8008b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b3a:	4839      	ldr	r0, [pc, #228]	; (8008c20 <_printf_i+0x21c>)
 8008b3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b40:	6813      	ldr	r3, [r2, #0]
 8008b42:	6821      	ldr	r1, [r4, #0]
 8008b44:	1d1d      	adds	r5, r3, #4
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6015      	str	r5, [r2, #0]
 8008b4a:	060a      	lsls	r2, r1, #24
 8008b4c:	d50b      	bpl.n	8008b66 <_printf_i+0x162>
 8008b4e:	07ca      	lsls	r2, r1, #31
 8008b50:	bf44      	itt	mi
 8008b52:	f041 0120 	orrmi.w	r1, r1, #32
 8008b56:	6021      	strmi	r1, [r4, #0]
 8008b58:	b91b      	cbnz	r3, 8008b62 <_printf_i+0x15e>
 8008b5a:	6822      	ldr	r2, [r4, #0]
 8008b5c:	f022 0220 	bic.w	r2, r2, #32
 8008b60:	6022      	str	r2, [r4, #0]
 8008b62:	2210      	movs	r2, #16
 8008b64:	e7b7      	b.n	8008ad6 <_printf_i+0xd2>
 8008b66:	064d      	lsls	r5, r1, #25
 8008b68:	bf48      	it	mi
 8008b6a:	b29b      	uxthmi	r3, r3
 8008b6c:	e7ef      	b.n	8008b4e <_printf_i+0x14a>
 8008b6e:	4665      	mov	r5, ip
 8008b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b74:	fb02 3311 	mls	r3, r2, r1, r3
 8008b78:	5cc3      	ldrb	r3, [r0, r3]
 8008b7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008b7e:	460b      	mov	r3, r1
 8008b80:	2900      	cmp	r1, #0
 8008b82:	d1f5      	bne.n	8008b70 <_printf_i+0x16c>
 8008b84:	e7b9      	b.n	8008afa <_printf_i+0xf6>
 8008b86:	6813      	ldr	r3, [r2, #0]
 8008b88:	6825      	ldr	r5, [r4, #0]
 8008b8a:	6961      	ldr	r1, [r4, #20]
 8008b8c:	1d18      	adds	r0, r3, #4
 8008b8e:	6010      	str	r0, [r2, #0]
 8008b90:	0628      	lsls	r0, r5, #24
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	d501      	bpl.n	8008b9a <_printf_i+0x196>
 8008b96:	6019      	str	r1, [r3, #0]
 8008b98:	e002      	b.n	8008ba0 <_printf_i+0x19c>
 8008b9a:	066a      	lsls	r2, r5, #25
 8008b9c:	d5fb      	bpl.n	8008b96 <_printf_i+0x192>
 8008b9e:	8019      	strh	r1, [r3, #0]
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	6123      	str	r3, [r4, #16]
 8008ba4:	4665      	mov	r5, ip
 8008ba6:	e7b9      	b.n	8008b1c <_printf_i+0x118>
 8008ba8:	6813      	ldr	r3, [r2, #0]
 8008baa:	1d19      	adds	r1, r3, #4
 8008bac:	6011      	str	r1, [r2, #0]
 8008bae:	681d      	ldr	r5, [r3, #0]
 8008bb0:	6862      	ldr	r2, [r4, #4]
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	f7f7 fb43 	bl	8000240 <memchr>
 8008bba:	b108      	cbz	r0, 8008bc0 <_printf_i+0x1bc>
 8008bbc:	1b40      	subs	r0, r0, r5
 8008bbe:	6060      	str	r0, [r4, #4]
 8008bc0:	6863      	ldr	r3, [r4, #4]
 8008bc2:	6123      	str	r3, [r4, #16]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bca:	e7a7      	b.n	8008b1c <_printf_i+0x118>
 8008bcc:	6923      	ldr	r3, [r4, #16]
 8008bce:	462a      	mov	r2, r5
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	47c0      	blx	r8
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d0aa      	beq.n	8008b30 <_printf_i+0x12c>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	079b      	lsls	r3, r3, #30
 8008bde:	d413      	bmi.n	8008c08 <_printf_i+0x204>
 8008be0:	68e0      	ldr	r0, [r4, #12]
 8008be2:	9b03      	ldr	r3, [sp, #12]
 8008be4:	4298      	cmp	r0, r3
 8008be6:	bfb8      	it	lt
 8008be8:	4618      	movlt	r0, r3
 8008bea:	e7a3      	b.n	8008b34 <_printf_i+0x130>
 8008bec:	2301      	movs	r3, #1
 8008bee:	464a      	mov	r2, r9
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	47c0      	blx	r8
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	d09a      	beq.n	8008b30 <_printf_i+0x12c>
 8008bfa:	3501      	adds	r5, #1
 8008bfc:	68e3      	ldr	r3, [r4, #12]
 8008bfe:	9a03      	ldr	r2, [sp, #12]
 8008c00:	1a9b      	subs	r3, r3, r2
 8008c02:	42ab      	cmp	r3, r5
 8008c04:	dcf2      	bgt.n	8008bec <_printf_i+0x1e8>
 8008c06:	e7eb      	b.n	8008be0 <_printf_i+0x1dc>
 8008c08:	2500      	movs	r5, #0
 8008c0a:	f104 0919 	add.w	r9, r4, #25
 8008c0e:	e7f5      	b.n	8008bfc <_printf_i+0x1f8>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1ac      	bne.n	8008b6e <_printf_i+0x16a>
 8008c14:	7803      	ldrb	r3, [r0, #0]
 8008c16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c1e:	e76c      	b.n	8008afa <_printf_i+0xf6>
 8008c20:	08009535 	.word	0x08009535
 8008c24:	08009546 	.word	0x08009546

08008c28 <_scanf_chars>:
 8008c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2c:	4615      	mov	r5, r2
 8008c2e:	688a      	ldr	r2, [r1, #8]
 8008c30:	4680      	mov	r8, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	b932      	cbnz	r2, 8008c44 <_scanf_chars+0x1c>
 8008c36:	698a      	ldr	r2, [r1, #24]
 8008c38:	2a00      	cmp	r2, #0
 8008c3a:	bf14      	ite	ne
 8008c3c:	f04f 32ff 	movne.w	r2, #4294967295
 8008c40:	2201      	moveq	r2, #1
 8008c42:	608a      	str	r2, [r1, #8]
 8008c44:	6822      	ldr	r2, [r4, #0]
 8008c46:	06d1      	lsls	r1, r2, #27
 8008c48:	bf5f      	itttt	pl
 8008c4a:	681a      	ldrpl	r2, [r3, #0]
 8008c4c:	1d11      	addpl	r1, r2, #4
 8008c4e:	6019      	strpl	r1, [r3, #0]
 8008c50:	6817      	ldrpl	r7, [r2, #0]
 8008c52:	2600      	movs	r6, #0
 8008c54:	69a3      	ldr	r3, [r4, #24]
 8008c56:	b1db      	cbz	r3, 8008c90 <_scanf_chars+0x68>
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d107      	bne.n	8008c6c <_scanf_chars+0x44>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	6962      	ldr	r2, [r4, #20]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	5cd3      	ldrb	r3, [r2, r3]
 8008c64:	b9a3      	cbnz	r3, 8008c90 <_scanf_chars+0x68>
 8008c66:	2e00      	cmp	r6, #0
 8008c68:	d132      	bne.n	8008cd0 <_scanf_chars+0xa8>
 8008c6a:	e006      	b.n	8008c7a <_scanf_chars+0x52>
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d007      	beq.n	8008c80 <_scanf_chars+0x58>
 8008c70:	2e00      	cmp	r6, #0
 8008c72:	d12d      	bne.n	8008cd0 <_scanf_chars+0xa8>
 8008c74:	69a3      	ldr	r3, [r4, #24]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d12a      	bne.n	8008cd0 <_scanf_chars+0xa8>
 8008c7a:	2001      	movs	r0, #1
 8008c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c80:	f000 fab4 	bl	80091ec <__locale_ctype_ptr>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	4418      	add	r0, r3
 8008c8a:	7843      	ldrb	r3, [r0, #1]
 8008c8c:	071b      	lsls	r3, r3, #28
 8008c8e:	d4ef      	bmi.n	8008c70 <_scanf_chars+0x48>
 8008c90:	6823      	ldr	r3, [r4, #0]
 8008c92:	06da      	lsls	r2, r3, #27
 8008c94:	bf5e      	ittt	pl
 8008c96:	682b      	ldrpl	r3, [r5, #0]
 8008c98:	781b      	ldrbpl	r3, [r3, #0]
 8008c9a:	703b      	strbpl	r3, [r7, #0]
 8008c9c:	682a      	ldr	r2, [r5, #0]
 8008c9e:	686b      	ldr	r3, [r5, #4]
 8008ca0:	f102 0201 	add.w	r2, r2, #1
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	68a2      	ldr	r2, [r4, #8]
 8008ca8:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cac:	f102 32ff 	add.w	r2, r2, #4294967295
 8008cb0:	606b      	str	r3, [r5, #4]
 8008cb2:	f106 0601 	add.w	r6, r6, #1
 8008cb6:	bf58      	it	pl
 8008cb8:	3701      	addpl	r7, #1
 8008cba:	60a2      	str	r2, [r4, #8]
 8008cbc:	b142      	cbz	r2, 8008cd0 <_scanf_chars+0xa8>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	dcc8      	bgt.n	8008c54 <_scanf_chars+0x2c>
 8008cc2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	4640      	mov	r0, r8
 8008cca:	4798      	blx	r3
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d0c1      	beq.n	8008c54 <_scanf_chars+0x2c>
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	f013 0310 	ands.w	r3, r3, #16
 8008cd6:	d105      	bne.n	8008ce4 <_scanf_chars+0xbc>
 8008cd8:	68e2      	ldr	r2, [r4, #12]
 8008cda:	3201      	adds	r2, #1
 8008cdc:	60e2      	str	r2, [r4, #12]
 8008cde:	69a2      	ldr	r2, [r4, #24]
 8008ce0:	b102      	cbz	r2, 8008ce4 <_scanf_chars+0xbc>
 8008ce2:	703b      	strb	r3, [r7, #0]
 8008ce4:	6923      	ldr	r3, [r4, #16]
 8008ce6:	441e      	add	r6, r3
 8008ce8:	6126      	str	r6, [r4, #16]
 8008cea:	2000      	movs	r0, #0
 8008cec:	e7c6      	b.n	8008c7c <_scanf_chars+0x54>
	...

08008cf0 <_scanf_i>:
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	469a      	mov	sl, r3
 8008cf6:	4b74      	ldr	r3, [pc, #464]	; (8008ec8 <_scanf_i+0x1d8>)
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	4683      	mov	fp, r0
 8008cfc:	4616      	mov	r6, r2
 8008cfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d02:	b087      	sub	sp, #28
 8008d04:	ab03      	add	r3, sp, #12
 8008d06:	68a7      	ldr	r7, [r4, #8]
 8008d08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008d0c:	4b6f      	ldr	r3, [pc, #444]	; (8008ecc <_scanf_i+0x1dc>)
 8008d0e:	69a1      	ldr	r1, [r4, #24]
 8008d10:	4a6f      	ldr	r2, [pc, #444]	; (8008ed0 <_scanf_i+0x1e0>)
 8008d12:	2903      	cmp	r1, #3
 8008d14:	bf08      	it	eq
 8008d16:	461a      	moveq	r2, r3
 8008d18:	1e7b      	subs	r3, r7, #1
 8008d1a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008d1e:	bf84      	itt	hi
 8008d20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d24:	60a3      	strhi	r3, [r4, #8]
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	9200      	str	r2, [sp, #0]
 8008d2a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008d2e:	bf88      	it	hi
 8008d30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d34:	f104 091c 	add.w	r9, r4, #28
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	bf8c      	ite	hi
 8008d3c:	197f      	addhi	r7, r7, r5
 8008d3e:	2700      	movls	r7, #0
 8008d40:	464b      	mov	r3, r9
 8008d42:	f04f 0800 	mov.w	r8, #0
 8008d46:	9301      	str	r3, [sp, #4]
 8008d48:	6831      	ldr	r1, [r6, #0]
 8008d4a:	ab03      	add	r3, sp, #12
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008d52:	7809      	ldrb	r1, [r1, #0]
 8008d54:	f7f7 fa74 	bl	8000240 <memchr>
 8008d58:	9b01      	ldr	r3, [sp, #4]
 8008d5a:	b330      	cbz	r0, 8008daa <_scanf_i+0xba>
 8008d5c:	f1b8 0f01 	cmp.w	r8, #1
 8008d60:	d15a      	bne.n	8008e18 <_scanf_i+0x128>
 8008d62:	6862      	ldr	r2, [r4, #4]
 8008d64:	b92a      	cbnz	r2, 8008d72 <_scanf_i+0x82>
 8008d66:	6822      	ldr	r2, [r4, #0]
 8008d68:	2108      	movs	r1, #8
 8008d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d6e:	6061      	str	r1, [r4, #4]
 8008d70:	6022      	str	r2, [r4, #0]
 8008d72:	6822      	ldr	r2, [r4, #0]
 8008d74:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008d78:	6022      	str	r2, [r4, #0]
 8008d7a:	68a2      	ldr	r2, [r4, #8]
 8008d7c:	1e51      	subs	r1, r2, #1
 8008d7e:	60a1      	str	r1, [r4, #8]
 8008d80:	b19a      	cbz	r2, 8008daa <_scanf_i+0xba>
 8008d82:	6832      	ldr	r2, [r6, #0]
 8008d84:	1c51      	adds	r1, r2, #1
 8008d86:	6031      	str	r1, [r6, #0]
 8008d88:	7812      	ldrb	r2, [r2, #0]
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	1c5d      	adds	r5, r3, #1
 8008d8e:	6873      	ldr	r3, [r6, #4]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	6073      	str	r3, [r6, #4]
 8008d96:	dc07      	bgt.n	8008da8 <_scanf_i+0xb8>
 8008d98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	4658      	mov	r0, fp
 8008da0:	4798      	blx	r3
 8008da2:	2800      	cmp	r0, #0
 8008da4:	f040 8086 	bne.w	8008eb4 <_scanf_i+0x1c4>
 8008da8:	462b      	mov	r3, r5
 8008daa:	f108 0801 	add.w	r8, r8, #1
 8008dae:	f1b8 0f03 	cmp.w	r8, #3
 8008db2:	d1c8      	bne.n	8008d46 <_scanf_i+0x56>
 8008db4:	6862      	ldr	r2, [r4, #4]
 8008db6:	b90a      	cbnz	r2, 8008dbc <_scanf_i+0xcc>
 8008db8:	220a      	movs	r2, #10
 8008dba:	6062      	str	r2, [r4, #4]
 8008dbc:	6862      	ldr	r2, [r4, #4]
 8008dbe:	4945      	ldr	r1, [pc, #276]	; (8008ed4 <_scanf_i+0x1e4>)
 8008dc0:	6960      	ldr	r0, [r4, #20]
 8008dc2:	9301      	str	r3, [sp, #4]
 8008dc4:	1a89      	subs	r1, r1, r2
 8008dc6:	f000 f887 	bl	8008ed8 <__sccl>
 8008dca:	9b01      	ldr	r3, [sp, #4]
 8008dcc:	f04f 0800 	mov.w	r8, #0
 8008dd0:	461d      	mov	r5, r3
 8008dd2:	68a3      	ldr	r3, [r4, #8]
 8008dd4:	6822      	ldr	r2, [r4, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d03a      	beq.n	8008e50 <_scanf_i+0x160>
 8008dda:	6831      	ldr	r1, [r6, #0]
 8008ddc:	6960      	ldr	r0, [r4, #20]
 8008dde:	f891 c000 	ldrb.w	ip, [r1]
 8008de2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d032      	beq.n	8008e50 <_scanf_i+0x160>
 8008dea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008dee:	d121      	bne.n	8008e34 <_scanf_i+0x144>
 8008df0:	0510      	lsls	r0, r2, #20
 8008df2:	d51f      	bpl.n	8008e34 <_scanf_i+0x144>
 8008df4:	f108 0801 	add.w	r8, r8, #1
 8008df8:	b117      	cbz	r7, 8008e00 <_scanf_i+0x110>
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	3f01      	subs	r7, #1
 8008dfe:	60a3      	str	r3, [r4, #8]
 8008e00:	6873      	ldr	r3, [r6, #4]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	6073      	str	r3, [r6, #4]
 8008e08:	dd1b      	ble.n	8008e42 <_scanf_i+0x152>
 8008e0a:	6833      	ldr	r3, [r6, #0]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	6033      	str	r3, [r6, #0]
 8008e10:	68a3      	ldr	r3, [r4, #8]
 8008e12:	3b01      	subs	r3, #1
 8008e14:	60a3      	str	r3, [r4, #8]
 8008e16:	e7dc      	b.n	8008dd2 <_scanf_i+0xe2>
 8008e18:	f1b8 0f02 	cmp.w	r8, #2
 8008e1c:	d1ad      	bne.n	8008d7a <_scanf_i+0x8a>
 8008e1e:	6822      	ldr	r2, [r4, #0]
 8008e20:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008e24:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008e28:	d1bf      	bne.n	8008daa <_scanf_i+0xba>
 8008e2a:	2110      	movs	r1, #16
 8008e2c:	6061      	str	r1, [r4, #4]
 8008e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e32:	e7a1      	b.n	8008d78 <_scanf_i+0x88>
 8008e34:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	780b      	ldrb	r3, [r1, #0]
 8008e3c:	702b      	strb	r3, [r5, #0]
 8008e3e:	3501      	adds	r5, #1
 8008e40:	e7de      	b.n	8008e00 <_scanf_i+0x110>
 8008e42:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e46:	4631      	mov	r1, r6
 8008e48:	4658      	mov	r0, fp
 8008e4a:	4798      	blx	r3
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d0df      	beq.n	8008e10 <_scanf_i+0x120>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	05d9      	lsls	r1, r3, #23
 8008e54:	d50c      	bpl.n	8008e70 <_scanf_i+0x180>
 8008e56:	454d      	cmp	r5, r9
 8008e58:	d908      	bls.n	8008e6c <_scanf_i+0x17c>
 8008e5a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e62:	4632      	mov	r2, r6
 8008e64:	4658      	mov	r0, fp
 8008e66:	4798      	blx	r3
 8008e68:	1e6f      	subs	r7, r5, #1
 8008e6a:	463d      	mov	r5, r7
 8008e6c:	454d      	cmp	r5, r9
 8008e6e:	d029      	beq.n	8008ec4 <_scanf_i+0x1d4>
 8008e70:	6822      	ldr	r2, [r4, #0]
 8008e72:	f012 0210 	ands.w	r2, r2, #16
 8008e76:	d113      	bne.n	8008ea0 <_scanf_i+0x1b0>
 8008e78:	702a      	strb	r2, [r5, #0]
 8008e7a:	6863      	ldr	r3, [r4, #4]
 8008e7c:	9e00      	ldr	r6, [sp, #0]
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4658      	mov	r0, fp
 8008e82:	47b0      	blx	r6
 8008e84:	f8da 3000 	ldr.w	r3, [sl]
 8008e88:	6821      	ldr	r1, [r4, #0]
 8008e8a:	1d1a      	adds	r2, r3, #4
 8008e8c:	f8ca 2000 	str.w	r2, [sl]
 8008e90:	f011 0f20 	tst.w	r1, #32
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	d010      	beq.n	8008eba <_scanf_i+0x1ca>
 8008e98:	6018      	str	r0, [r3, #0]
 8008e9a:	68e3      	ldr	r3, [r4, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60e3      	str	r3, [r4, #12]
 8008ea0:	eba5 0509 	sub.w	r5, r5, r9
 8008ea4:	44a8      	add	r8, r5
 8008ea6:	6925      	ldr	r5, [r4, #16]
 8008ea8:	4445      	add	r5, r8
 8008eaa:	6125      	str	r5, [r4, #16]
 8008eac:	2000      	movs	r0, #0
 8008eae:	b007      	add	sp, #28
 8008eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb4:	f04f 0800 	mov.w	r8, #0
 8008eb8:	e7ca      	b.n	8008e50 <_scanf_i+0x160>
 8008eba:	07ca      	lsls	r2, r1, #31
 8008ebc:	bf4c      	ite	mi
 8008ebe:	8018      	strhmi	r0, [r3, #0]
 8008ec0:	6018      	strpl	r0, [r3, #0]
 8008ec2:	e7ea      	b.n	8008e9a <_scanf_i+0x1aa>
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	e7f2      	b.n	8008eae <_scanf_i+0x1be>
 8008ec8:	080094f4 	.word	0x080094f4
 8008ecc:	08009035 	.word	0x08009035
 8008ed0:	0800914d 	.word	0x0800914d
 8008ed4:	08009567 	.word	0x08009567

08008ed8 <__sccl>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	780b      	ldrb	r3, [r1, #0]
 8008edc:	2b5e      	cmp	r3, #94	; 0x5e
 8008ede:	bf13      	iteet	ne
 8008ee0:	1c4a      	addne	r2, r1, #1
 8008ee2:	1c8a      	addeq	r2, r1, #2
 8008ee4:	784b      	ldrbeq	r3, [r1, #1]
 8008ee6:	2100      	movne	r1, #0
 8008ee8:	bf08      	it	eq
 8008eea:	2101      	moveq	r1, #1
 8008eec:	1e44      	subs	r4, r0, #1
 8008eee:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8008ef2:	f804 1f01 	strb.w	r1, [r4, #1]!
 8008ef6:	42ac      	cmp	r4, r5
 8008ef8:	d1fb      	bne.n	8008ef2 <__sccl+0x1a>
 8008efa:	b913      	cbnz	r3, 8008f02 <__sccl+0x2a>
 8008efc:	3a01      	subs	r2, #1
 8008efe:	4610      	mov	r0, r2
 8008f00:	bd70      	pop	{r4, r5, r6, pc}
 8008f02:	f081 0401 	eor.w	r4, r1, #1
 8008f06:	54c4      	strb	r4, [r0, r3]
 8008f08:	1c51      	adds	r1, r2, #1
 8008f0a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8008f0e:	2d2d      	cmp	r5, #45	; 0x2d
 8008f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8008f14:	460a      	mov	r2, r1
 8008f16:	d006      	beq.n	8008f26 <__sccl+0x4e>
 8008f18:	2d5d      	cmp	r5, #93	; 0x5d
 8008f1a:	d0f0      	beq.n	8008efe <__sccl+0x26>
 8008f1c:	b90d      	cbnz	r5, 8008f22 <__sccl+0x4a>
 8008f1e:	4632      	mov	r2, r6
 8008f20:	e7ed      	b.n	8008efe <__sccl+0x26>
 8008f22:	462b      	mov	r3, r5
 8008f24:	e7ef      	b.n	8008f06 <__sccl+0x2e>
 8008f26:	780e      	ldrb	r6, [r1, #0]
 8008f28:	2e5d      	cmp	r6, #93	; 0x5d
 8008f2a:	d0fa      	beq.n	8008f22 <__sccl+0x4a>
 8008f2c:	42b3      	cmp	r3, r6
 8008f2e:	dcf8      	bgt.n	8008f22 <__sccl+0x4a>
 8008f30:	3301      	adds	r3, #1
 8008f32:	429e      	cmp	r6, r3
 8008f34:	54c4      	strb	r4, [r0, r3]
 8008f36:	dcfb      	bgt.n	8008f30 <__sccl+0x58>
 8008f38:	3102      	adds	r1, #2
 8008f3a:	e7e6      	b.n	8008f0a <__sccl+0x32>

08008f3c <_strtol_l.isra.0>:
 8008f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f40:	4680      	mov	r8, r0
 8008f42:	4689      	mov	r9, r1
 8008f44:	4692      	mov	sl, r2
 8008f46:	461e      	mov	r6, r3
 8008f48:	460f      	mov	r7, r1
 8008f4a:	463d      	mov	r5, r7
 8008f4c:	9808      	ldr	r0, [sp, #32]
 8008f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f52:	f000 f947 	bl	80091e4 <__locale_ctype_ptr_l>
 8008f56:	4420      	add	r0, r4
 8008f58:	7843      	ldrb	r3, [r0, #1]
 8008f5a:	f013 0308 	ands.w	r3, r3, #8
 8008f5e:	d132      	bne.n	8008fc6 <_strtol_l.isra.0+0x8a>
 8008f60:	2c2d      	cmp	r4, #45	; 0x2d
 8008f62:	d132      	bne.n	8008fca <_strtol_l.isra.0+0x8e>
 8008f64:	787c      	ldrb	r4, [r7, #1]
 8008f66:	1cbd      	adds	r5, r7, #2
 8008f68:	2201      	movs	r2, #1
 8008f6a:	2e00      	cmp	r6, #0
 8008f6c:	d05d      	beq.n	800902a <_strtol_l.isra.0+0xee>
 8008f6e:	2e10      	cmp	r6, #16
 8008f70:	d109      	bne.n	8008f86 <_strtol_l.isra.0+0x4a>
 8008f72:	2c30      	cmp	r4, #48	; 0x30
 8008f74:	d107      	bne.n	8008f86 <_strtol_l.isra.0+0x4a>
 8008f76:	782b      	ldrb	r3, [r5, #0]
 8008f78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f7c:	2b58      	cmp	r3, #88	; 0x58
 8008f7e:	d14f      	bne.n	8009020 <_strtol_l.isra.0+0xe4>
 8008f80:	786c      	ldrb	r4, [r5, #1]
 8008f82:	2610      	movs	r6, #16
 8008f84:	3502      	adds	r5, #2
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	bf14      	ite	ne
 8008f8a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008f8e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008f92:	2700      	movs	r7, #0
 8008f94:	fbb1 fcf6 	udiv	ip, r1, r6
 8008f98:	4638      	mov	r0, r7
 8008f9a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008f9e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008fa2:	2b09      	cmp	r3, #9
 8008fa4:	d817      	bhi.n	8008fd6 <_strtol_l.isra.0+0x9a>
 8008fa6:	461c      	mov	r4, r3
 8008fa8:	42a6      	cmp	r6, r4
 8008faa:	dd23      	ble.n	8008ff4 <_strtol_l.isra.0+0xb8>
 8008fac:	1c7b      	adds	r3, r7, #1
 8008fae:	d007      	beq.n	8008fc0 <_strtol_l.isra.0+0x84>
 8008fb0:	4584      	cmp	ip, r0
 8008fb2:	d31c      	bcc.n	8008fee <_strtol_l.isra.0+0xb2>
 8008fb4:	d101      	bne.n	8008fba <_strtol_l.isra.0+0x7e>
 8008fb6:	45a6      	cmp	lr, r4
 8008fb8:	db19      	blt.n	8008fee <_strtol_l.isra.0+0xb2>
 8008fba:	fb00 4006 	mla	r0, r0, r6, r4
 8008fbe:	2701      	movs	r7, #1
 8008fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fc4:	e7eb      	b.n	8008f9e <_strtol_l.isra.0+0x62>
 8008fc6:	462f      	mov	r7, r5
 8008fc8:	e7bf      	b.n	8008f4a <_strtol_l.isra.0+0xe>
 8008fca:	2c2b      	cmp	r4, #43	; 0x2b
 8008fcc:	bf04      	itt	eq
 8008fce:	1cbd      	addeq	r5, r7, #2
 8008fd0:	787c      	ldrbeq	r4, [r7, #1]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	e7c9      	b.n	8008f6a <_strtol_l.isra.0+0x2e>
 8008fd6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008fda:	2b19      	cmp	r3, #25
 8008fdc:	d801      	bhi.n	8008fe2 <_strtol_l.isra.0+0xa6>
 8008fde:	3c37      	subs	r4, #55	; 0x37
 8008fe0:	e7e2      	b.n	8008fa8 <_strtol_l.isra.0+0x6c>
 8008fe2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008fe6:	2b19      	cmp	r3, #25
 8008fe8:	d804      	bhi.n	8008ff4 <_strtol_l.isra.0+0xb8>
 8008fea:	3c57      	subs	r4, #87	; 0x57
 8008fec:	e7dc      	b.n	8008fa8 <_strtol_l.isra.0+0x6c>
 8008fee:	f04f 37ff 	mov.w	r7, #4294967295
 8008ff2:	e7e5      	b.n	8008fc0 <_strtol_l.isra.0+0x84>
 8008ff4:	1c7b      	adds	r3, r7, #1
 8008ff6:	d108      	bne.n	800900a <_strtol_l.isra.0+0xce>
 8008ff8:	2322      	movs	r3, #34	; 0x22
 8008ffa:	f8c8 3000 	str.w	r3, [r8]
 8008ffe:	4608      	mov	r0, r1
 8009000:	f1ba 0f00 	cmp.w	sl, #0
 8009004:	d107      	bne.n	8009016 <_strtol_l.isra.0+0xda>
 8009006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900a:	b102      	cbz	r2, 800900e <_strtol_l.isra.0+0xd2>
 800900c:	4240      	negs	r0, r0
 800900e:	f1ba 0f00 	cmp.w	sl, #0
 8009012:	d0f8      	beq.n	8009006 <_strtol_l.isra.0+0xca>
 8009014:	b10f      	cbz	r7, 800901a <_strtol_l.isra.0+0xde>
 8009016:	f105 39ff 	add.w	r9, r5, #4294967295
 800901a:	f8ca 9000 	str.w	r9, [sl]
 800901e:	e7f2      	b.n	8009006 <_strtol_l.isra.0+0xca>
 8009020:	2430      	movs	r4, #48	; 0x30
 8009022:	2e00      	cmp	r6, #0
 8009024:	d1af      	bne.n	8008f86 <_strtol_l.isra.0+0x4a>
 8009026:	2608      	movs	r6, #8
 8009028:	e7ad      	b.n	8008f86 <_strtol_l.isra.0+0x4a>
 800902a:	2c30      	cmp	r4, #48	; 0x30
 800902c:	d0a3      	beq.n	8008f76 <_strtol_l.isra.0+0x3a>
 800902e:	260a      	movs	r6, #10
 8009030:	e7a9      	b.n	8008f86 <_strtol_l.isra.0+0x4a>
	...

08009034 <_strtol_r>:
 8009034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009036:	4c06      	ldr	r4, [pc, #24]	; (8009050 <_strtol_r+0x1c>)
 8009038:	4d06      	ldr	r5, [pc, #24]	; (8009054 <_strtol_r+0x20>)
 800903a:	6824      	ldr	r4, [r4, #0]
 800903c:	6a24      	ldr	r4, [r4, #32]
 800903e:	2c00      	cmp	r4, #0
 8009040:	bf08      	it	eq
 8009042:	462c      	moveq	r4, r5
 8009044:	9400      	str	r4, [sp, #0]
 8009046:	f7ff ff79 	bl	8008f3c <_strtol_l.isra.0>
 800904a:	b003      	add	sp, #12
 800904c:	bd30      	pop	{r4, r5, pc}
 800904e:	bf00      	nop
 8009050:	200000f8 	.word	0x200000f8
 8009054:	2000015c 	.word	0x2000015c

08009058 <_strtoul_l.isra.0>:
 8009058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800905c:	4680      	mov	r8, r0
 800905e:	4689      	mov	r9, r1
 8009060:	4692      	mov	sl, r2
 8009062:	461e      	mov	r6, r3
 8009064:	460f      	mov	r7, r1
 8009066:	463d      	mov	r5, r7
 8009068:	9808      	ldr	r0, [sp, #32]
 800906a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800906e:	f000 f8b9 	bl	80091e4 <__locale_ctype_ptr_l>
 8009072:	4420      	add	r0, r4
 8009074:	7843      	ldrb	r3, [r0, #1]
 8009076:	f013 0308 	ands.w	r3, r3, #8
 800907a:	d130      	bne.n	80090de <_strtoul_l.isra.0+0x86>
 800907c:	2c2d      	cmp	r4, #45	; 0x2d
 800907e:	d130      	bne.n	80090e2 <_strtoul_l.isra.0+0x8a>
 8009080:	787c      	ldrb	r4, [r7, #1]
 8009082:	1cbd      	adds	r5, r7, #2
 8009084:	2101      	movs	r1, #1
 8009086:	2e00      	cmp	r6, #0
 8009088:	d05c      	beq.n	8009144 <_strtoul_l.isra.0+0xec>
 800908a:	2e10      	cmp	r6, #16
 800908c:	d109      	bne.n	80090a2 <_strtoul_l.isra.0+0x4a>
 800908e:	2c30      	cmp	r4, #48	; 0x30
 8009090:	d107      	bne.n	80090a2 <_strtoul_l.isra.0+0x4a>
 8009092:	782b      	ldrb	r3, [r5, #0]
 8009094:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009098:	2b58      	cmp	r3, #88	; 0x58
 800909a:	d14e      	bne.n	800913a <_strtoul_l.isra.0+0xe2>
 800909c:	786c      	ldrb	r4, [r5, #1]
 800909e:	2610      	movs	r6, #16
 80090a0:	3502      	adds	r5, #2
 80090a2:	f04f 32ff 	mov.w	r2, #4294967295
 80090a6:	2300      	movs	r3, #0
 80090a8:	fbb2 f2f6 	udiv	r2, r2, r6
 80090ac:	fb06 fc02 	mul.w	ip, r6, r2
 80090b0:	ea6f 0c0c 	mvn.w	ip, ip
 80090b4:	4618      	mov	r0, r3
 80090b6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80090ba:	2f09      	cmp	r7, #9
 80090bc:	d817      	bhi.n	80090ee <_strtoul_l.isra.0+0x96>
 80090be:	463c      	mov	r4, r7
 80090c0:	42a6      	cmp	r6, r4
 80090c2:	dd23      	ble.n	800910c <_strtoul_l.isra.0+0xb4>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	db1e      	blt.n	8009106 <_strtoul_l.isra.0+0xae>
 80090c8:	4282      	cmp	r2, r0
 80090ca:	d31c      	bcc.n	8009106 <_strtoul_l.isra.0+0xae>
 80090cc:	d101      	bne.n	80090d2 <_strtoul_l.isra.0+0x7a>
 80090ce:	45a4      	cmp	ip, r4
 80090d0:	db19      	blt.n	8009106 <_strtoul_l.isra.0+0xae>
 80090d2:	fb00 4006 	mla	r0, r0, r6, r4
 80090d6:	2301      	movs	r3, #1
 80090d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090dc:	e7eb      	b.n	80090b6 <_strtoul_l.isra.0+0x5e>
 80090de:	462f      	mov	r7, r5
 80090e0:	e7c1      	b.n	8009066 <_strtoul_l.isra.0+0xe>
 80090e2:	2c2b      	cmp	r4, #43	; 0x2b
 80090e4:	bf04      	itt	eq
 80090e6:	1cbd      	addeq	r5, r7, #2
 80090e8:	787c      	ldrbeq	r4, [r7, #1]
 80090ea:	4619      	mov	r1, r3
 80090ec:	e7cb      	b.n	8009086 <_strtoul_l.isra.0+0x2e>
 80090ee:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80090f2:	2f19      	cmp	r7, #25
 80090f4:	d801      	bhi.n	80090fa <_strtoul_l.isra.0+0xa2>
 80090f6:	3c37      	subs	r4, #55	; 0x37
 80090f8:	e7e2      	b.n	80090c0 <_strtoul_l.isra.0+0x68>
 80090fa:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80090fe:	2f19      	cmp	r7, #25
 8009100:	d804      	bhi.n	800910c <_strtoul_l.isra.0+0xb4>
 8009102:	3c57      	subs	r4, #87	; 0x57
 8009104:	e7dc      	b.n	80090c0 <_strtoul_l.isra.0+0x68>
 8009106:	f04f 33ff 	mov.w	r3, #4294967295
 800910a:	e7e5      	b.n	80090d8 <_strtoul_l.isra.0+0x80>
 800910c:	2b00      	cmp	r3, #0
 800910e:	da09      	bge.n	8009124 <_strtoul_l.isra.0+0xcc>
 8009110:	2322      	movs	r3, #34	; 0x22
 8009112:	f8c8 3000 	str.w	r3, [r8]
 8009116:	f04f 30ff 	mov.w	r0, #4294967295
 800911a:	f1ba 0f00 	cmp.w	sl, #0
 800911e:	d107      	bne.n	8009130 <_strtoul_l.isra.0+0xd8>
 8009120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009124:	b101      	cbz	r1, 8009128 <_strtoul_l.isra.0+0xd0>
 8009126:	4240      	negs	r0, r0
 8009128:	f1ba 0f00 	cmp.w	sl, #0
 800912c:	d0f8      	beq.n	8009120 <_strtoul_l.isra.0+0xc8>
 800912e:	b10b      	cbz	r3, 8009134 <_strtoul_l.isra.0+0xdc>
 8009130:	f105 39ff 	add.w	r9, r5, #4294967295
 8009134:	f8ca 9000 	str.w	r9, [sl]
 8009138:	e7f2      	b.n	8009120 <_strtoul_l.isra.0+0xc8>
 800913a:	2430      	movs	r4, #48	; 0x30
 800913c:	2e00      	cmp	r6, #0
 800913e:	d1b0      	bne.n	80090a2 <_strtoul_l.isra.0+0x4a>
 8009140:	2608      	movs	r6, #8
 8009142:	e7ae      	b.n	80090a2 <_strtoul_l.isra.0+0x4a>
 8009144:	2c30      	cmp	r4, #48	; 0x30
 8009146:	d0a4      	beq.n	8009092 <_strtoul_l.isra.0+0x3a>
 8009148:	260a      	movs	r6, #10
 800914a:	e7aa      	b.n	80090a2 <_strtoul_l.isra.0+0x4a>

0800914c <_strtoul_r>:
 800914c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800914e:	4c06      	ldr	r4, [pc, #24]	; (8009168 <_strtoul_r+0x1c>)
 8009150:	4d06      	ldr	r5, [pc, #24]	; (800916c <_strtoul_r+0x20>)
 8009152:	6824      	ldr	r4, [r4, #0]
 8009154:	6a24      	ldr	r4, [r4, #32]
 8009156:	2c00      	cmp	r4, #0
 8009158:	bf08      	it	eq
 800915a:	462c      	moveq	r4, r5
 800915c:	9400      	str	r4, [sp, #0]
 800915e:	f7ff ff7b 	bl	8009058 <_strtoul_l.isra.0>
 8009162:	b003      	add	sp, #12
 8009164:	bd30      	pop	{r4, r5, pc}
 8009166:	bf00      	nop
 8009168:	200000f8 	.word	0x200000f8
 800916c:	2000015c 	.word	0x2000015c

08009170 <__submore>:
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	460c      	mov	r4, r1
 8009176:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800917c:	4299      	cmp	r1, r3
 800917e:	d11d      	bne.n	80091bc <__submore+0x4c>
 8009180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009184:	f000 f8c4 	bl	8009310 <_malloc_r>
 8009188:	b918      	cbnz	r0, 8009192 <__submore+0x22>
 800918a:	f04f 30ff 	mov.w	r0, #4294967295
 800918e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009196:	63a3      	str	r3, [r4, #56]	; 0x38
 8009198:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800919c:	6360      	str	r0, [r4, #52]	; 0x34
 800919e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80091a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80091a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80091aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80091ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80091b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80091b6:	6020      	str	r0, [r4, #0]
 80091b8:	2000      	movs	r0, #0
 80091ba:	e7e8      	b.n	800918e <__submore+0x1e>
 80091bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80091be:	0077      	lsls	r7, r6, #1
 80091c0:	463a      	mov	r2, r7
 80091c2:	f000 f8ff 	bl	80093c4 <_realloc_r>
 80091c6:	4605      	mov	r5, r0
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d0de      	beq.n	800918a <__submore+0x1a>
 80091cc:	eb00 0806 	add.w	r8, r0, r6
 80091d0:	4601      	mov	r1, r0
 80091d2:	4632      	mov	r2, r6
 80091d4:	4640      	mov	r0, r8
 80091d6:	f000 f829 	bl	800922c <memcpy>
 80091da:	f8c4 8000 	str.w	r8, [r4]
 80091de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80091e2:	e7e9      	b.n	80091b8 <__submore+0x48>

080091e4 <__locale_ctype_ptr_l>:
 80091e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80091e8:	4770      	bx	lr
	...

080091ec <__locale_ctype_ptr>:
 80091ec:	4b04      	ldr	r3, [pc, #16]	; (8009200 <__locale_ctype_ptr+0x14>)
 80091ee:	4a05      	ldr	r2, [pc, #20]	; (8009204 <__locale_ctype_ptr+0x18>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6a1b      	ldr	r3, [r3, #32]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bf08      	it	eq
 80091f8:	4613      	moveq	r3, r2
 80091fa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80091fe:	4770      	bx	lr
 8009200:	200000f8 	.word	0x200000f8
 8009204:	2000015c 	.word	0x2000015c

08009208 <__ascii_mbtowc>:
 8009208:	b082      	sub	sp, #8
 800920a:	b901      	cbnz	r1, 800920e <__ascii_mbtowc+0x6>
 800920c:	a901      	add	r1, sp, #4
 800920e:	b142      	cbz	r2, 8009222 <__ascii_mbtowc+0x1a>
 8009210:	b14b      	cbz	r3, 8009226 <__ascii_mbtowc+0x1e>
 8009212:	7813      	ldrb	r3, [r2, #0]
 8009214:	600b      	str	r3, [r1, #0]
 8009216:	7812      	ldrb	r2, [r2, #0]
 8009218:	1c10      	adds	r0, r2, #0
 800921a:	bf18      	it	ne
 800921c:	2001      	movne	r0, #1
 800921e:	b002      	add	sp, #8
 8009220:	4770      	bx	lr
 8009222:	4610      	mov	r0, r2
 8009224:	e7fb      	b.n	800921e <__ascii_mbtowc+0x16>
 8009226:	f06f 0001 	mvn.w	r0, #1
 800922a:	e7f8      	b.n	800921e <__ascii_mbtowc+0x16>

0800922c <memcpy>:
 800922c:	b510      	push	{r4, lr}
 800922e:	1e43      	subs	r3, r0, #1
 8009230:	440a      	add	r2, r1
 8009232:	4291      	cmp	r1, r2
 8009234:	d100      	bne.n	8009238 <memcpy+0xc>
 8009236:	bd10      	pop	{r4, pc}
 8009238:	f811 4b01 	ldrb.w	r4, [r1], #1
 800923c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009240:	e7f7      	b.n	8009232 <memcpy+0x6>

08009242 <memmove>:
 8009242:	4288      	cmp	r0, r1
 8009244:	b510      	push	{r4, lr}
 8009246:	eb01 0302 	add.w	r3, r1, r2
 800924a:	d807      	bhi.n	800925c <memmove+0x1a>
 800924c:	1e42      	subs	r2, r0, #1
 800924e:	4299      	cmp	r1, r3
 8009250:	d00a      	beq.n	8009268 <memmove+0x26>
 8009252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009256:	f802 4f01 	strb.w	r4, [r2, #1]!
 800925a:	e7f8      	b.n	800924e <memmove+0xc>
 800925c:	4283      	cmp	r3, r0
 800925e:	d9f5      	bls.n	800924c <memmove+0xa>
 8009260:	1881      	adds	r1, r0, r2
 8009262:	1ad2      	subs	r2, r2, r3
 8009264:	42d3      	cmn	r3, r2
 8009266:	d100      	bne.n	800926a <memmove+0x28>
 8009268:	bd10      	pop	{r4, pc}
 800926a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800926e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009272:	e7f7      	b.n	8009264 <memmove+0x22>

08009274 <_free_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4605      	mov	r5, r0
 8009278:	2900      	cmp	r1, #0
 800927a:	d045      	beq.n	8009308 <_free_r+0x94>
 800927c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009280:	1f0c      	subs	r4, r1, #4
 8009282:	2b00      	cmp	r3, #0
 8009284:	bfb8      	it	lt
 8009286:	18e4      	addlt	r4, r4, r3
 8009288:	f000 f8df 	bl	800944a <__malloc_lock>
 800928c:	4a1f      	ldr	r2, [pc, #124]	; (800930c <_free_r+0x98>)
 800928e:	6813      	ldr	r3, [r2, #0]
 8009290:	4610      	mov	r0, r2
 8009292:	b933      	cbnz	r3, 80092a2 <_free_r+0x2e>
 8009294:	6063      	str	r3, [r4, #4]
 8009296:	6014      	str	r4, [r2, #0]
 8009298:	4628      	mov	r0, r5
 800929a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800929e:	f000 b8d5 	b.w	800944c <__malloc_unlock>
 80092a2:	42a3      	cmp	r3, r4
 80092a4:	d90c      	bls.n	80092c0 <_free_r+0x4c>
 80092a6:	6821      	ldr	r1, [r4, #0]
 80092a8:	1862      	adds	r2, r4, r1
 80092aa:	4293      	cmp	r3, r2
 80092ac:	bf04      	itt	eq
 80092ae:	681a      	ldreq	r2, [r3, #0]
 80092b0:	685b      	ldreq	r3, [r3, #4]
 80092b2:	6063      	str	r3, [r4, #4]
 80092b4:	bf04      	itt	eq
 80092b6:	1852      	addeq	r2, r2, r1
 80092b8:	6022      	streq	r2, [r4, #0]
 80092ba:	6004      	str	r4, [r0, #0]
 80092bc:	e7ec      	b.n	8009298 <_free_r+0x24>
 80092be:	4613      	mov	r3, r2
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	b10a      	cbz	r2, 80092c8 <_free_r+0x54>
 80092c4:	42a2      	cmp	r2, r4
 80092c6:	d9fa      	bls.n	80092be <_free_r+0x4a>
 80092c8:	6819      	ldr	r1, [r3, #0]
 80092ca:	1858      	adds	r0, r3, r1
 80092cc:	42a0      	cmp	r0, r4
 80092ce:	d10b      	bne.n	80092e8 <_free_r+0x74>
 80092d0:	6820      	ldr	r0, [r4, #0]
 80092d2:	4401      	add	r1, r0
 80092d4:	1858      	adds	r0, r3, r1
 80092d6:	4282      	cmp	r2, r0
 80092d8:	6019      	str	r1, [r3, #0]
 80092da:	d1dd      	bne.n	8009298 <_free_r+0x24>
 80092dc:	6810      	ldr	r0, [r2, #0]
 80092de:	6852      	ldr	r2, [r2, #4]
 80092e0:	605a      	str	r2, [r3, #4]
 80092e2:	4401      	add	r1, r0
 80092e4:	6019      	str	r1, [r3, #0]
 80092e6:	e7d7      	b.n	8009298 <_free_r+0x24>
 80092e8:	d902      	bls.n	80092f0 <_free_r+0x7c>
 80092ea:	230c      	movs	r3, #12
 80092ec:	602b      	str	r3, [r5, #0]
 80092ee:	e7d3      	b.n	8009298 <_free_r+0x24>
 80092f0:	6820      	ldr	r0, [r4, #0]
 80092f2:	1821      	adds	r1, r4, r0
 80092f4:	428a      	cmp	r2, r1
 80092f6:	bf04      	itt	eq
 80092f8:	6811      	ldreq	r1, [r2, #0]
 80092fa:	6852      	ldreq	r2, [r2, #4]
 80092fc:	6062      	str	r2, [r4, #4]
 80092fe:	bf04      	itt	eq
 8009300:	1809      	addeq	r1, r1, r0
 8009302:	6021      	streq	r1, [r4, #0]
 8009304:	605c      	str	r4, [r3, #4]
 8009306:	e7c7      	b.n	8009298 <_free_r+0x24>
 8009308:	bd38      	pop	{r3, r4, r5, pc}
 800930a:	bf00      	nop
 800930c:	2000031c 	.word	0x2000031c

08009310 <_malloc_r>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	1ccd      	adds	r5, r1, #3
 8009314:	f025 0503 	bic.w	r5, r5, #3
 8009318:	3508      	adds	r5, #8
 800931a:	2d0c      	cmp	r5, #12
 800931c:	bf38      	it	cc
 800931e:	250c      	movcc	r5, #12
 8009320:	2d00      	cmp	r5, #0
 8009322:	4606      	mov	r6, r0
 8009324:	db01      	blt.n	800932a <_malloc_r+0x1a>
 8009326:	42a9      	cmp	r1, r5
 8009328:	d903      	bls.n	8009332 <_malloc_r+0x22>
 800932a:	230c      	movs	r3, #12
 800932c:	6033      	str	r3, [r6, #0]
 800932e:	2000      	movs	r0, #0
 8009330:	bd70      	pop	{r4, r5, r6, pc}
 8009332:	f000 f88a 	bl	800944a <__malloc_lock>
 8009336:	4a21      	ldr	r2, [pc, #132]	; (80093bc <_malloc_r+0xac>)
 8009338:	6814      	ldr	r4, [r2, #0]
 800933a:	4621      	mov	r1, r4
 800933c:	b991      	cbnz	r1, 8009364 <_malloc_r+0x54>
 800933e:	4c20      	ldr	r4, [pc, #128]	; (80093c0 <_malloc_r+0xb0>)
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	b91b      	cbnz	r3, 800934c <_malloc_r+0x3c>
 8009344:	4630      	mov	r0, r6
 8009346:	f000 f863 	bl	8009410 <_sbrk_r>
 800934a:	6020      	str	r0, [r4, #0]
 800934c:	4629      	mov	r1, r5
 800934e:	4630      	mov	r0, r6
 8009350:	f000 f85e 	bl	8009410 <_sbrk_r>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d124      	bne.n	80093a2 <_malloc_r+0x92>
 8009358:	230c      	movs	r3, #12
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	4630      	mov	r0, r6
 800935e:	f000 f875 	bl	800944c <__malloc_unlock>
 8009362:	e7e4      	b.n	800932e <_malloc_r+0x1e>
 8009364:	680b      	ldr	r3, [r1, #0]
 8009366:	1b5b      	subs	r3, r3, r5
 8009368:	d418      	bmi.n	800939c <_malloc_r+0x8c>
 800936a:	2b0b      	cmp	r3, #11
 800936c:	d90f      	bls.n	800938e <_malloc_r+0x7e>
 800936e:	600b      	str	r3, [r1, #0]
 8009370:	50cd      	str	r5, [r1, r3]
 8009372:	18cc      	adds	r4, r1, r3
 8009374:	4630      	mov	r0, r6
 8009376:	f000 f869 	bl	800944c <__malloc_unlock>
 800937a:	f104 000b 	add.w	r0, r4, #11
 800937e:	1d23      	adds	r3, r4, #4
 8009380:	f020 0007 	bic.w	r0, r0, #7
 8009384:	1ac3      	subs	r3, r0, r3
 8009386:	d0d3      	beq.n	8009330 <_malloc_r+0x20>
 8009388:	425a      	negs	r2, r3
 800938a:	50e2      	str	r2, [r4, r3]
 800938c:	e7d0      	b.n	8009330 <_malloc_r+0x20>
 800938e:	428c      	cmp	r4, r1
 8009390:	684b      	ldr	r3, [r1, #4]
 8009392:	bf16      	itet	ne
 8009394:	6063      	strne	r3, [r4, #4]
 8009396:	6013      	streq	r3, [r2, #0]
 8009398:	460c      	movne	r4, r1
 800939a:	e7eb      	b.n	8009374 <_malloc_r+0x64>
 800939c:	460c      	mov	r4, r1
 800939e:	6849      	ldr	r1, [r1, #4]
 80093a0:	e7cc      	b.n	800933c <_malloc_r+0x2c>
 80093a2:	1cc4      	adds	r4, r0, #3
 80093a4:	f024 0403 	bic.w	r4, r4, #3
 80093a8:	42a0      	cmp	r0, r4
 80093aa:	d005      	beq.n	80093b8 <_malloc_r+0xa8>
 80093ac:	1a21      	subs	r1, r4, r0
 80093ae:	4630      	mov	r0, r6
 80093b0:	f000 f82e 	bl	8009410 <_sbrk_r>
 80093b4:	3001      	adds	r0, #1
 80093b6:	d0cf      	beq.n	8009358 <_malloc_r+0x48>
 80093b8:	6025      	str	r5, [r4, #0]
 80093ba:	e7db      	b.n	8009374 <_malloc_r+0x64>
 80093bc:	2000031c 	.word	0x2000031c
 80093c0:	20000320 	.word	0x20000320

080093c4 <_realloc_r>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	4607      	mov	r7, r0
 80093c8:	4614      	mov	r4, r2
 80093ca:	460e      	mov	r6, r1
 80093cc:	b921      	cbnz	r1, 80093d8 <_realloc_r+0x14>
 80093ce:	4611      	mov	r1, r2
 80093d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093d4:	f7ff bf9c 	b.w	8009310 <_malloc_r>
 80093d8:	b922      	cbnz	r2, 80093e4 <_realloc_r+0x20>
 80093da:	f7ff ff4b 	bl	8009274 <_free_r>
 80093de:	4625      	mov	r5, r4
 80093e0:	4628      	mov	r0, r5
 80093e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e4:	f000 f833 	bl	800944e <_malloc_usable_size_r>
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d20f      	bcs.n	800940c <_realloc_r+0x48>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4638      	mov	r0, r7
 80093f0:	f7ff ff8e 	bl	8009310 <_malloc_r>
 80093f4:	4605      	mov	r5, r0
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d0f2      	beq.n	80093e0 <_realloc_r+0x1c>
 80093fa:	4631      	mov	r1, r6
 80093fc:	4622      	mov	r2, r4
 80093fe:	f7ff ff15 	bl	800922c <memcpy>
 8009402:	4631      	mov	r1, r6
 8009404:	4638      	mov	r0, r7
 8009406:	f7ff ff35 	bl	8009274 <_free_r>
 800940a:	e7e9      	b.n	80093e0 <_realloc_r+0x1c>
 800940c:	4635      	mov	r5, r6
 800940e:	e7e7      	b.n	80093e0 <_realloc_r+0x1c>

08009410 <_sbrk_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4c06      	ldr	r4, [pc, #24]	; (800942c <_sbrk_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4605      	mov	r5, r0
 8009418:	4608      	mov	r0, r1
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	f7f8 fde4 	bl	8001fe8 <_sbrk>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_sbrk_r+0x1a>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	b103      	cbz	r3, 800942a <_sbrk_r+0x1a>
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000b38 	.word	0x20000b38

08009430 <__ascii_wctomb>:
 8009430:	b149      	cbz	r1, 8009446 <__ascii_wctomb+0x16>
 8009432:	2aff      	cmp	r2, #255	; 0xff
 8009434:	bf85      	ittet	hi
 8009436:	238a      	movhi	r3, #138	; 0x8a
 8009438:	6003      	strhi	r3, [r0, #0]
 800943a:	700a      	strbls	r2, [r1, #0]
 800943c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009440:	bf98      	it	ls
 8009442:	2001      	movls	r0, #1
 8009444:	4770      	bx	lr
 8009446:	4608      	mov	r0, r1
 8009448:	4770      	bx	lr

0800944a <__malloc_lock>:
 800944a:	4770      	bx	lr

0800944c <__malloc_unlock>:
 800944c:	4770      	bx	lr

0800944e <_malloc_usable_size_r>:
 800944e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009452:	1f18      	subs	r0, r3, #4
 8009454:	2b00      	cmp	r3, #0
 8009456:	bfbc      	itt	lt
 8009458:	580b      	ldrlt	r3, [r1, r0]
 800945a:	18c0      	addlt	r0, r0, r3
 800945c:	4770      	bx	lr
	...

08009460 <_init>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr

0800946c <_fini>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr
