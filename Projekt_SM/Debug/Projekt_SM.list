
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009024  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080091f8  080091f8  000191f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009450  08009450  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08009450  08009450  00019450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009458  08009458  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009458  08009458  00019458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800945c  0800945c  0001945c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08009460  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  200000a0  08009500  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  08009500  00020848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019adb  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003955  00000000  00000000  00039bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  0003d500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d0  00000000  00000000  0003e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000299db  00000000  00000000  0003fc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000144c1  00000000  00000000  00069673  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdc01  00000000  00000000  0007db34  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017b735  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c28  00000000  00000000  0017b7b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080091dc 	.word	0x080091dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	080091dc 	.word	0x080091dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b972 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4688      	mov	r8, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14b      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	d967      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0720 	rsb	r7, r2, #32
 8000c0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c12:	4095      	lsls	r5, r2
 8000c14:	ea47 0803 	orr.w	r8, r7, r3
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c24:	fa1f fc85 	uxth.w	ip, r5
 8000c28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c30:	fb07 f10c 	mul.w	r1, r7, ip
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18eb      	adds	r3, r5, r3
 8000c3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3e:	f080 811b 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8118 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c48:	3f02      	subs	r7, #2
 8000c4a:	442b      	add	r3, r5
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	192c      	adds	r4, r5, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c6e:	45a4      	cmp	ip, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c74:	3802      	subs	r0, #2
 8000c76:	442c      	add	r4, r5
 8000c78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c7c:	eba4 040c 	sub.w	r4, r4, ip
 8000c80:	2700      	movs	r7, #0
 8000c82:	b11e      	cbz	r6, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xbe>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80eb 	beq.w	8000e72 <__udivmoddi4+0x286>
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	4639      	mov	r1, r7
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f783 	clz	r7, r3
 8000cae:	2f00      	cmp	r7, #0
 8000cb0:	d147      	bne.n	8000d42 <__udivmoddi4+0x156>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd0>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2c4>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000cca:	e9c6 4800 	strd	r4, r8, [r6]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xe8>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 808f 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cde:	1b49      	subs	r1, r1, r5
 8000ce0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce4:	fa1f f885 	uxth.w	r8, r5
 8000ce8:	2701      	movs	r7, #1
 8000cea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cee:	0c23      	lsrs	r3, r4, #16
 8000cf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000d00:	18eb      	adds	r3, r5, r3
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	f200 80cd 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x14c>
 8000d28:	192c      	adds	r4, r5, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x14a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80b6 	bhi.w	8000ea2 <__udivmoddi4+0x2b6>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e79f      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d42:	f1c7 0c20 	rsb	ip, r7, #32
 8000d46:	40bb      	lsls	r3, r7
 8000d48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d50:	fa01 f407 	lsl.w	r4, r1, r7
 8000d54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d60:	4325      	orrs	r5, r4
 8000d62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d66:	0c2c      	lsrs	r4, r5, #16
 8000d68:	fb08 3319 	mls	r3, r8, r9, r3
 8000d6c:	fa1f fa8e 	uxth.w	sl, lr
 8000d70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d74:	fb09 f40a 	mul.w	r4, r9, sl
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1e 0303 	adds.w	r3, lr, r3
 8000d88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d8c:	f080 8087 	bcs.w	8000e9e <__udivmoddi4+0x2b2>
 8000d90:	429c      	cmp	r4, r3
 8000d92:	f240 8084 	bls.w	8000e9e <__udivmoddi4+0x2b2>
 8000d96:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9a:	4473      	add	r3, lr
 8000d9c:	1b1b      	subs	r3, r3, r4
 8000d9e:	b2ad      	uxth	r5, r5
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000db0:	45a2      	cmp	sl, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1e 0404 	adds.w	r4, lr, r4
 8000db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbc:	d26b      	bcs.n	8000e96 <__udivmoddi4+0x2aa>
 8000dbe:	45a2      	cmp	sl, r4
 8000dc0:	d969      	bls.n	8000e96 <__udivmoddi4+0x2aa>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4474      	add	r4, lr
 8000dc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dca:	fba0 8902 	umull	r8, r9, r0, r2
 8000dce:	eba4 040a 	sub.w	r4, r4, sl
 8000dd2:	454c      	cmp	r4, r9
 8000dd4:	46c2      	mov	sl, r8
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	d354      	bcc.n	8000e84 <__udivmoddi4+0x298>
 8000dda:	d051      	beq.n	8000e80 <__udivmoddi4+0x294>
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d069      	beq.n	8000eb4 <__udivmoddi4+0x2c8>
 8000de0:	ebb1 050a 	subs.w	r5, r1, sl
 8000de4:	eb64 0403 	sbc.w	r4, r4, r3
 8000de8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dec:	40fd      	lsrs	r5, r7
 8000dee:	40fc      	lsrs	r4, r7
 8000df0:	ea4c 0505 	orr.w	r5, ip, r5
 8000df4:	e9c6 5400 	strd	r5, r4, [r6]
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f703 	lsr.w	r7, r0, r3
 8000e04:	4095      	lsls	r5, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e12:	4338      	orrs	r0, r7
 8000e14:	0c01      	lsrs	r1, r0, #16
 8000e16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e1a:	fa1f f885 	uxth.w	r8, r5
 8000e1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e26:	fb07 f308 	mul.w	r3, r7, r8
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x256>
 8000e32:	1869      	adds	r1, r5, r1
 8000e34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e38:	d22f      	bcs.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d92d      	bls.n	8000e9a <__udivmoddi4+0x2ae>
 8000e3e:	3f02      	subs	r7, #2
 8000e40:	4429      	add	r1, r5
 8000e42:	1acb      	subs	r3, r1, r3
 8000e44:	b281      	uxth	r1, r0
 8000e46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb00 f308 	mul.w	r3, r0, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x27e>
 8000e5a:	1869      	adds	r1, r5, r1
 8000e5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e60:	d217      	bcs.n	8000e92 <__udivmoddi4+0x2a6>
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d915      	bls.n	8000e92 <__udivmoddi4+0x2a6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4429      	add	r1, r5
 8000e6a:	1ac9      	subs	r1, r1, r3
 8000e6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e70:	e73b      	b.n	8000cea <__udivmoddi4+0xfe>
 8000e72:	4637      	mov	r7, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e709      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e6e7      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e80:	4541      	cmp	r1, r8
 8000e82:	d2ab      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e88:	eb69 020e 	sbc.w	r2, r9, lr
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	4613      	mov	r3, r2
 8000e90:	e7a4      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e92:	4660      	mov	r0, ip
 8000e94:	e7e9      	b.n	8000e6a <__udivmoddi4+0x27e>
 8000e96:	4618      	mov	r0, r3
 8000e98:	e795      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9a:	4667      	mov	r7, ip
 8000e9c:	e7d1      	b.n	8000e42 <__udivmoddi4+0x256>
 8000e9e:	4681      	mov	r9, r0
 8000ea0:	e77c      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	442c      	add	r4, r5
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0x14c>
 8000ea8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eac:	442b      	add	r3, r5
 8000eae:	e72f      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xda>
 8000eb4:	4637      	mov	r7, r6
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0xa0>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ed0:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <MX_ADC1_Init+0x9c>)
 8000ed2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000efc:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <MX_ADC1_Init+0xa0>)
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f1c:	f001 fc58 	bl	80027d0 <HAL_ADC_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 fef9 	bl	8001d1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f32:	2307      	movs	r3, #7
 8000f34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f3c:	f001 fd98 	bl	8002a70 <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f46:	f000 fee9 	bl	8001d1c <Error_Handler>
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000130 	.word	0x20000130
 8000f58:	40012000 	.word	0x40012000
 8000f5c:	0f000001 	.word	0x0f000001

08000f60 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <MX_ADC2_Init+0x9c>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <MX_ADC2_Init+0xa0>)
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fbe:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fc0:	f001 fc06 	bl	80027d0 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000fca:	f000 fea7 	bl	8001d1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <MX_ADC2_Init+0x98>)
 8000fe0:	f001 fd46 	bl	8002a70 <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000fea:	f000 fe97 	bl	8001d1c <Error_Handler>
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000e8 	.word	0x200000e8
 8000ffc:	40012100 	.word	0x40012100
 8001000:	0f000001 	.word	0x0f000001

08001004 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a5a      	ldr	r2, [pc, #360]	; (800118c <HAL_ADC_MspInit+0x188>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d154      	bne.n	80010d0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001026:	4b5a      	ldr	r3, [pc, #360]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a59      	ldr	r2, [pc, #356]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b57      	ldr	r3, [pc, #348]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b54      	ldr	r3, [pc, #336]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a53      	ldr	r2, [pc, #332]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b51      	ldr	r3, [pc, #324]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001056:	2308      	movs	r3, #8
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105a:	2303      	movs	r3, #3
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	484a      	ldr	r0, [pc, #296]	; (8001194 <HAL_ADC_MspInit+0x190>)
 800106a:	f003 f99f 	bl	80043ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800106e:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <HAL_ADC_MspInit+0x194>)
 8001070:	4a4a      	ldr	r2, [pc, #296]	; (800119c <HAL_ADC_MspInit+0x198>)
 8001072:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001074:	4b48      	ldr	r3, [pc, #288]	; (8001198 <HAL_ADC_MspInit+0x194>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107a:	4b47      	ldr	r3, [pc, #284]	; (8001198 <HAL_ADC_MspInit+0x194>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001080:	4b45      	ldr	r3, [pc, #276]	; (8001198 <HAL_ADC_MspInit+0x194>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001086:	4b44      	ldr	r3, [pc, #272]	; (8001198 <HAL_ADC_MspInit+0x194>)
 8001088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800108c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800108e:	4b42      	ldr	r3, [pc, #264]	; (8001198 <HAL_ADC_MspInit+0x194>)
 8001090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001094:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001096:	4b40      	ldr	r3, [pc, #256]	; (8001198 <HAL_ADC_MspInit+0x194>)
 8001098:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800109c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800109e:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <HAL_ADC_MspInit+0x194>)
 80010a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010a6:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <HAL_ADC_MspInit+0x194>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <HAL_ADC_MspInit+0x194>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010b2:	4839      	ldr	r0, [pc, #228]	; (8001198 <HAL_ADC_MspInit+0x194>)
 80010b4:	f002 f998 	bl	80033e8 <HAL_DMA_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80010be:	f000 fe2d 	bl	8001d1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a34      	ldr	r2, [pc, #208]	; (8001198 <HAL_ADC_MspInit+0x194>)
 80010c6:	639a      	str	r2, [r3, #56]	; 0x38
 80010c8:	4a33      	ldr	r2, [pc, #204]	; (8001198 <HAL_ADC_MspInit+0x194>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80010ce:	e059      	b.n	8001184 <HAL_ADC_MspInit+0x180>
  else if(adcHandle->Instance==ADC2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <HAL_ADC_MspInit+0x19c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d154      	bne.n	8001184 <HAL_ADC_MspInit+0x180>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a2c      	ldr	r2, [pc, #176]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 80010e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b27      	ldr	r3, [pc, #156]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a26      	ldr	r2, [pc, #152]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_ADC_MspInit+0x18c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800110a:	2310      	movs	r3, #16
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	481d      	ldr	r0, [pc, #116]	; (8001194 <HAL_ADC_MspInit+0x190>)
 800111e:	f003 f945 	bl	80043ac <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 8001124:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <HAL_ADC_MspInit+0x1a4>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 800112a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800112e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 800113e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001142:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 8001146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800114a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 800114e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001152:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 8001156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001168:	480e      	ldr	r0, [pc, #56]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 800116a:	f002 f93d 	bl	80033e8 <HAL_DMA_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_ADC_MspInit+0x174>
      Error_Handler();
 8001174:	f000 fdd2 	bl	8001d1c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
 800117e:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <HAL_ADC_MspInit+0x1a0>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001184:	bf00      	nop
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40012000 	.word	0x40012000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	20000178 	.word	0x20000178
 800119c:	40026410 	.word	0x40026410
 80011a0:	40012100 	.word	0x40012100
 80011a4:	200001d8 	.word	0x200001d8
 80011a8:	40026440 	.word	0x40026440

080011ac <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_DAC_Init+0x4c>)
 80011bc:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <MX_DAC_Init+0x50>)
 80011be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_DAC_Init+0x4c>)
 80011c2:	f002 f816 	bl	80031f2 <HAL_DAC_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011cc:	f000 fda6 	bl	8001d1c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 80011d0:	232c      	movs	r3, #44	; 0x2c
 80011d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011d8:	463b      	mov	r3, r7
 80011da:	2210      	movs	r2, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_DAC_Init+0x4c>)
 80011e0:	f002 f88f 	bl	8003302 <HAL_DAC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ea:	f000 fd97 	bl	8001d1c <Error_Handler>
  }

}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000238 	.word	0x20000238
 80011fc:	40007400 	.word	0x40007400

08001200 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_DAC_MspInit+0x74>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d123      	bne.n	800126a <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_DAC_MspInit+0x78>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <HAL_DAC_MspInit+0x78>)
 8001228:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_DAC_MspInit+0x78>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_DAC_MspInit+0x78>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_DAC_MspInit+0x78>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_DAC_MspInit+0x78>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001252:	2320      	movs	r3, #32
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001256:	2303      	movs	r3, #3
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_DAC_MspInit+0x7c>)
 8001266:	f003 f8a1 	bl	80043ac <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40007400 	.word	0x40007400
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000

08001280 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <MX_DMA_Init+0x48>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <MX_DMA_Init+0x48>)
 800128c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <MX_DMA_Init+0x48>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	2038      	movs	r0, #56	; 0x38
 80012a4:	f001 ff6f 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012a8:	2038      	movs	r0, #56	; 0x38
 80012aa:	f001 ff88 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	203a      	movs	r0, #58	; 0x3a
 80012b4:	f001 ff67 	bl	8003186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012b8:	203a      	movs	r0, #58	; 0x3a
 80012ba:	f001 ff80 	bl	80031be <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80012d0:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_ETH_Init+0x78>)
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <MX_ETH_Init+0x7c>)
 80012d4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_ETH_Init+0x78>)
 80012d8:	2201      	movs	r2, #1
 80012da:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_ETH_Init+0x78>)
 80012de:	2200      	movs	r2, #0
 80012e0:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_ETH_Init+0x78>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_ETH_Init+0x78>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_ETH_Init+0x78>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	3302      	adds	r3, #2
 80012fa:	22e1      	movs	r2, #225	; 0xe1
 80012fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_ETH_Init+0x78>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	3303      	adds	r3, #3
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_ETH_Init+0x78>)
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	3304      	adds	r3, #4
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_ETH_Init+0x78>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	3305      	adds	r3, #5
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_ETH_Init+0x78>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_ETH_Init+0x78>)
 8001324:	2200      	movs	r2, #0
 8001326:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_ETH_Init+0x78>)
 800132a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800132e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_ETH_Init+0x78>)
 8001332:	f002 fbcf 	bl	8003ad4 <HAL_ETH_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 800133c:	f000 fcee 	bl	8001d1c <Error_Handler>
  }

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000024c 	.word	0x2000024c
 8001348:	40028000 	.word	0x40028000

0800134c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a4e      	ldr	r2, [pc, #312]	; (80014a4 <HAL_ETH_MspInit+0x158>)
 800136a:	4293      	cmp	r3, r2
 800136c:	f040 8096 	bne.w	800149c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001370:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a4c      	ldr	r2, [pc, #304]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 8001376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001384:	623b      	str	r3, [r7, #32]
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a46      	ldr	r2, [pc, #280]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 800138e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001392:	6313      	str	r3, [r2, #48]	; 0x30
 8001394:	4b44      	ldr	r3, [pc, #272]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	4b41      	ldr	r3, [pc, #260]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30
 80013ac:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b8:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4a3a      	ldr	r2, [pc, #232]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6313      	str	r3, [r2, #48]	; 0x30
 80013c4:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a34      	ldr	r2, [pc, #208]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
 80013dc:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a2e      	ldr	r2, [pc, #184]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 8001406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800140a:	6313      	str	r3, [r2, #48]	; 0x30
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <HAL_ETH_MspInit+0x15c>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001418:	2332      	movs	r3, #50	; 0x32
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001428:	230b      	movs	r3, #11
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	481e      	ldr	r0, [pc, #120]	; (80014ac <HAL_ETH_MspInit+0x160>)
 8001434:	f002 ffba 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001438:	2386      	movs	r3, #134	; 0x86
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001448:	230b      	movs	r3, #11
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	4817      	ldr	r0, [pc, #92]	; (80014b0 <HAL_ETH_MspInit+0x164>)
 8001454:	f002 ffaa 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800146a:	230b      	movs	r3, #11
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	480f      	ldr	r0, [pc, #60]	; (80014b4 <HAL_ETH_MspInit+0x168>)
 8001476:	f002 ff99 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800147a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800148c:	230b      	movs	r3, #11
 800148e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4619      	mov	r1, r3
 8001496:	4808      	ldr	r0, [pc, #32]	; (80014b8 <HAL_ETH_MspInit+0x16c>)
 8001498:	f002 ff88 	bl	80043ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800149c:	bf00      	nop
 800149e:	3738      	adds	r7, #56	; 0x38
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40028000 	.word	0x40028000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40021800 	.word	0x40021800

080014bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	; 0x30
 80014c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d2:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <MX_GPIO_Init+0x194>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a5e      	ldr	r2, [pc, #376]	; (8001650 <MX_GPIO_Init+0x194>)
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b5c      	ldr	r3, [pc, #368]	; (8001650 <MX_GPIO_Init+0x194>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	4b59      	ldr	r3, [pc, #356]	; (8001650 <MX_GPIO_Init+0x194>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a58      	ldr	r2, [pc, #352]	; (8001650 <MX_GPIO_Init+0x194>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b56      	ldr	r3, [pc, #344]	; (8001650 <MX_GPIO_Init+0x194>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001502:	4b53      	ldr	r3, [pc, #332]	; (8001650 <MX_GPIO_Init+0x194>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a52      	ldr	r2, [pc, #328]	; (8001650 <MX_GPIO_Init+0x194>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b50      	ldr	r3, [pc, #320]	; (8001650 <MX_GPIO_Init+0x194>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b4d      	ldr	r3, [pc, #308]	; (8001650 <MX_GPIO_Init+0x194>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a4c      	ldr	r2, [pc, #304]	; (8001650 <MX_GPIO_Init+0x194>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <MX_GPIO_Init+0x194>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <MX_GPIO_Init+0x194>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a46      	ldr	r2, [pc, #280]	; (8001650 <MX_GPIO_Init+0x194>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b44      	ldr	r3, [pc, #272]	; (8001650 <MX_GPIO_Init+0x194>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <MX_GPIO_Init+0x194>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a40      	ldr	r2, [pc, #256]	; (8001650 <MX_GPIO_Init+0x194>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <MX_GPIO_Init+0x194>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <MX_GPIO_Init+0x194>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a3a      	ldr	r2, [pc, #232]	; (8001650 <MX_GPIO_Init+0x194>)
 8001568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b38      	ldr	r3, [pc, #224]	; (8001650 <MX_GPIO_Init+0x194>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|Enable_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2114      	movs	r1, #20
 800157e:	4835      	ldr	r0, [pc, #212]	; (8001654 <MX_GPIO_Init+0x198>)
 8001580:	f003 f8be 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f244 0181 	movw	r1, #16513	; 0x4081
 800158a:	4833      	ldr	r0, [pc, #204]	; (8001658 <MX_GPIO_Init+0x19c>)
 800158c:	f003 f8b8 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	2140      	movs	r1, #64	; 0x40
 8001594:	4831      	ldr	r0, [pc, #196]	; (800165c <MX_GPIO_Init+0x1a0>)
 8001596:	f003 f8b3 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	21f0      	movs	r1, #240	; 0xf0
 800159e:	4830      	ldr	r0, [pc, #192]	; (8001660 <MX_GPIO_Init+0x1a4>)
 80015a0:	f003 f8ae 	bl	8004700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = RS_Pin|Enable_Pin;
 80015a4:	2314      	movs	r3, #20
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4619      	mov	r1, r3
 80015ba:	4826      	ldr	r0, [pc, #152]	; (8001654 <MX_GPIO_Init+0x198>)
 80015bc:	f002 fef6 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <MX_GPIO_Init+0x1a8>)
 80015c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	4824      	ldr	r0, [pc, #144]	; (8001668 <MX_GPIO_Init+0x1ac>)
 80015d6:	f002 fee9 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015da:	f244 0381 	movw	r3, #16513	; 0x4081
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	4819      	ldr	r0, [pc, #100]	; (8001658 <MX_GPIO_Init+0x19c>)
 80015f4:	f002 feda 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015f8:	2340      	movs	r3, #64	; 0x40
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	4619      	mov	r1, r3
 800160e:	4813      	ldr	r0, [pc, #76]	; (800165c <MX_GPIO_Init+0x1a0>)
 8001610:	f002 fecc 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <MX_GPIO_Init+0x1a0>)
 8001628:	f002 fec0 	bl	80043ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 800162c:	23f0      	movs	r3, #240	; 0xf0
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <MX_GPIO_Init+0x1a4>)
 8001644:	f002 feb2 	bl	80043ac <HAL_GPIO_Init>

}
 8001648:	bf00      	nop
 800164a:	3730      	adds	r7, #48	; 0x30
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	40021000 	.word	0x40021000
 8001658:	40020400 	.word	0x40020400
 800165c:	40021800 	.word	0x40021800
 8001660:	40020c00 	.word	0x40020c00
 8001664:	10110000 	.word	0x10110000
 8001668:	40020800 	.word	0x40020800

0800166c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800166c:	b5b0      	push	{r4, r5, r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800167a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800167e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8001682:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001686:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8001688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800168a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800168c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800168e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f80e 	bl	80016c2 <Lcd_init>

	return lcd;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	461d      	mov	r5, r3
 80016aa:	f107 0410 	add.w	r4, r7, #16
 80016ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016b6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	3728      	adds	r7, #40	; 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdb0      	pop	{r4, r5, r7, pc}

080016c2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7d9b      	ldrb	r3, [r3, #22]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10c      	bne.n	80016ec <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80016d2:	2133      	movs	r1, #51	; 0x33
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f86d 	bl	80017b4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80016da:	2132      	movs	r1, #50	; 0x32
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f869 	bl	80017b4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80016e2:	2128      	movs	r1, #40	; 0x28
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f865 	bl	80017b4 <lcd_write_command>
 80016ea:	e003      	b.n	80016f4 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80016ec:	2138      	movs	r1, #56	; 0x38
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f860 	bl	80017b4 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80016f4:	2101      	movs	r1, #1
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f85c 	bl	80017b4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80016fc:	210c      	movs	r1, #12
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f858 	bl	80017b4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001704:	2106      	movs	r1, #6
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f854 	bl	80017b4 <lcd_write_command>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	4906      	ldr	r1, [pc, #24]	; (8001740 <Lcd_int+0x2c>)
 8001726:	4618      	mov	r0, r3
 8001728:	f006 f93e 	bl	80079a8 <siprintf>

	Lcd_string(lcd, buffer);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f806 	bl	8001744 <Lcd_string>
}
 8001738:	bf00      	nop
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	080091f8 	.word	0x080091f8

08001744 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e00a      	b.n	800176a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f856 	bl	8001810 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	3301      	adds	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	7bfc      	ldrb	r4, [r7, #15]
 800176c:	6838      	ldr	r0, [r7, #0]
 800176e:	f7fe fd4f 	bl	8000210 <strlen>
 8001772:	4603      	mov	r3, r0
 8001774:	429c      	cmp	r4, r3
 8001776:	d3ed      	bcc.n	8001754 <Lcd_string+0x10>
	}
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bd90      	pop	{r4, r7, pc}

08001780 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
 800178c:	4613      	mov	r3, r2
 800178e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <Lcd_cursor+0x30>)
 8001794:	5cd2      	ldrb	r2, [r2, r3]
 8001796:	78bb      	ldrb	r3, [r7, #2]
 8001798:	4413      	add	r3, r2
 800179a:	b2db      	uxtb	r3, r3
 800179c:	3b80      	subs	r3, #128	; 0x80
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4619      	mov	r1, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f806 	bl	80017b4 <lcd_write_command>
	#endif
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	08009220 	.word	0x08009220

080017b4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6898      	ldr	r0, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	899b      	ldrh	r3, [r3, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	f002 ff98 	bl	8004700 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7d9b      	ldrb	r3, [r3, #22]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d111      	bne.n	80017fc <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	091b      	lsrs	r3, r3, #4
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2204      	movs	r2, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f842 	bl	800186c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2204      	movs	r2, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 f839 	bl	800186c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80017fa:	e005      	b.n	8001808 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	2208      	movs	r2, #8
 8001800:	4619      	mov	r1, r3
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f832 	bl	800186c <lcd_write>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6898      	ldr	r0, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	899b      	ldrh	r3, [r3, #12]
 8001824:	2201      	movs	r2, #1
 8001826:	4619      	mov	r1, r3
 8001828:	f002 ff6a 	bl	8004700 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7d9b      	ldrb	r3, [r3, #22]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d111      	bne.n	8001858 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2204      	movs	r2, #4
 800183c:	4619      	mov	r1, r3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f814 	bl	800186c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2204      	movs	r2, #4
 800184e:	4619      	mov	r1, r3
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f80b 	bl	800186c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001856:	e005      	b.n	8001864 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	2208      	movs	r2, #8
 800185c:	4619      	mov	r1, r3
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f804 	bl	800186c <lcd_write>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
 8001878:	4613      	mov	r3, r2
 800187a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e019      	b.n	80018b6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	8819      	ldrh	r1, [r3, #0]
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	fa42 f303 	asr.w	r3, r2, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	f002 ff28 	bl	8004700 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	3301      	adds	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	78bb      	ldrb	r3, [r7, #2]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3e1      	bcc.n	8001882 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6918      	ldr	r0, [r3, #16]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	8a9b      	ldrh	r3, [r3, #20]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4619      	mov	r1, r3
 80018ca:	f002 ff19 	bl	8004700 <HAL_GPIO_WritePin>
	DELAY(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f000 ff5c 	bl	800278c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6918      	ldr	r0, [r3, #16]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	8a9b      	ldrh	r3, [r3, #20]
 80018dc:	2200      	movs	r2, #0
 80018de:	4619      	mov	r1, r3
 80018e0:	f002 ff0e 	bl	8004700 <HAL_GPIO_WritePin>
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	0000      	movs	r0, r0
	...

080018f0 <DAC_SetValue>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void DAC_SetValue(DAC_HandleTypeDef* hdac, double voltage)
{
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	ed87 0b00 	vstr	d0, [r7]
	int value = voltage * 4095 / 3.3;
 80018fc:	a310      	add	r3, pc, #64	; (adr r3, 8001940 <DAC_SetValue+0x50>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001906:	f7fe fe97 	bl	8000638 <__aeabi_dmul>
 800190a:	4603      	mov	r3, r0
 800190c:	460c      	mov	r4, r1
 800190e:	4618      	mov	r0, r3
 8001910:	4621      	mov	r1, r4
 8001912:	a30d      	add	r3, pc, #52	; (adr r3, 8001948 <DAC_SetValue+0x58>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe ffb8 	bl	800088c <__aeabi_ddiv>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	4618      	mov	r0, r3
 8001922:	4621      	mov	r1, r4
 8001924:	f7ff f922 	bl	8000b6c <__aeabi_d2iz>
 8001928:	4603      	mov	r3, r0
 800192a:	617b      	str	r3, [r7, #20]
	HAL_DAC_SetValue(hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2200      	movs	r2, #0
 8001930:	2110      	movs	r1, #16
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f001 fd32 	bl	800339c <HAL_DAC_SetValue>
}
 8001938:	bf00      	nop
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}
 8001940:	00000000 	.word	0x00000000
 8001944:	40affe00 	.word	0x40affe00
 8001948:	66666666 	.word	0x66666666
 800194c:	400a6666 	.word	0x400a6666

08001950 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) { //If interrupt comes from timer 3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a36      	ldr	r2, [pc, #216]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d102      	bne.n	8001968 <HAL_TIM_PeriodElapsedCallback+0x18>
		ifServo=1;
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM2) { //If interrupt comes from timer 2
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001970:	d102      	bne.n	8001978 <HAL_TIM_PeriodElapsedCallback+0x28>
		ifDisplay = 1;
 8001972:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM4){ // Jeżeli przerwanie pochodzi od timera 2
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a31      	ldr	r2, [pc, #196]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d14c      	bne.n	8001a1c <HAL_TIM_PeriodElapsedCallback+0xcc>
		t += 0.0002;
 8001982:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001988:	a327      	add	r3, pc, #156	; (adr r3, 8001a28 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe fc9d 	bl	80002cc <__adddf3>
 8001992:	4603      	mov	r3, r0
 8001994:	460c      	mov	r4, r1
 8001996:	4a2c      	ldr	r2, [pc, #176]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001998:	e9c2 3400 	strd	r3, r4, [r2]
		y = A*sin(2*PI*t*f)+A0;
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800199e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a2:	a323      	add	r3, pc, #140	; (adr r3, 8001a30 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fe46 	bl	8000638 <__aeabi_dmul>
 80019ac:	4603      	mov	r3, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	4618      	mov	r0, r3
 80019b2:	4621      	mov	r1, r4
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80019b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4623      	mov	r3, r4
 80019be:	f7fe fe3b 	bl	8000638 <__aeabi_dmul>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	ec44 3b17 	vmov	d7, r3, r4
 80019ca:	eeb0 0a47 	vmov.f32	s0, s14
 80019ce:	eef0 0a67 	vmov.f32	s1, s15
 80019d2:	f006 fbf1 	bl	80081b8 <sin>
 80019d6:	ec51 0b10 	vmov	r0, r1, d0
 80019da:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80019dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4623      	mov	r3, r4
 80019e4:	f7fe fe28 	bl	8000638 <__aeabi_dmul>
 80019e8:	4603      	mov	r3, r0
 80019ea:	460c      	mov	r4, r1
 80019ec:	4618      	mov	r0, r3
 80019ee:	4621      	mov	r1, r4
 80019f0:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80019f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019f6:	461a      	mov	r2, r3
 80019f8:	4623      	mov	r3, r4
 80019fa:	f7fe fc67 	bl	80002cc <__adddf3>
 80019fe:	4603      	mov	r3, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a04:	e9c2 3400 	strd	r3, r4, [r2]
		DAC_SetValue(&hdac, y);
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001a0a:	ed93 7b00 	vldr	d7, [r3]
 8001a0e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a12:	eef0 0a67 	vmov.f32	s1, s15
 8001a16:	4811      	ldr	r0, [pc, #68]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001a18:	f7ff ff6a 	bl	80018f0 <DAC_SetValue>
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd90      	pop	{r4, r7, pc}
 8001a24:	f3af 8000 	nop.w
 8001a28:	eb1c432d 	.word	0xeb1c432d
 8001a2c:	3f2a36e2 	.word	0x3f2a36e2
 8001a30:	54411744 	.word	0x54411744
 8001a34:	401921fb 	.word	0x401921fb
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	200000d4 	.word	0x200000d4
 8001a40:	200000d0 	.word	0x200000d0
 8001a44:	40000800 	.word	0x40000800
 8001a48:	200000c0 	.word	0x200000c0
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000010 	.word	0x20000010
 8001a58:	200000c8 	.word	0x200000c8
 8001a5c:	20000238 	.word	0x20000238

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a66:	f000 fe34 	bl	80026d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6a:	f000 f8c7 	bl	8001bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6e:	f7ff fd25 	bl	80014bc <MX_GPIO_Init>
  MX_ETH_Init();
 8001a72:	f7ff fc2b 	bl	80012cc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001a76:	f000 fd05 	bl	8002484 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001a7a:	f000 fd77 	bl	800256c <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8001a7e:	f7ff fbff 	bl	8001280 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a82:	f7ff fa1b 	bl	8000ebc <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a86:	f000 fabd 	bl	8002004 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a8a:	f000 fb67 	bl	800215c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a8e:	f000 fbb3 	bl	80021f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a92:	f000 fc01 	bl	8002298 <MX_TIM4_Init>
  MX_DAC_Init();
 8001a96:	f7ff fb89 	bl	80011ac <MX_DAC_Init>
  MX_ADC2_Init();
 8001a9a:	f7ff fa61 	bl	8000f60 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  //Start tim2 to write data from joystick to the lcd display
  HAL_TIM_Base_Start_IT(&htim2);
 8001a9e:	4842      	ldr	r0, [pc, #264]	; (8001ba8 <main+0x148>)
 8001aa0:	f004 f812 	bl	8005ac8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001aa4:	4841      	ldr	r0, [pc, #260]	; (8001bac <main+0x14c>)
 8001aa6:	f004 f80f 	bl	8005ac8 <HAL_TIM_Base_Start_IT>

  //Create lcd
  my_lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, Enable_GPIO_Port, Enable_Pin, LCD_4_BIT_MODE);
 8001aaa:	4c41      	ldr	r4, [pc, #260]	; (8001bb0 <main+0x150>)
 8001aac:	4638      	mov	r0, r7
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9303      	str	r3, [sp, #12]
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <main+0x154>)
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	2304      	movs	r3, #4
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <main+0x154>)
 8001ac0:	4a3d      	ldr	r2, [pc, #244]	; (8001bb8 <main+0x158>)
 8001ac2:	493e      	ldr	r1, [pc, #248]	; (8001bbc <main+0x15c>)
 8001ac4:	f7ff fdd2 	bl	800166c <Lcd_create>
 8001ac8:	4625      	mov	r5, r4
 8001aca:	463c      	mov	r4, r7
 8001acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ad4:	e885 0003 	stmia.w	r5, {r0, r1}

  //Initialize micro servo sg90
  Servo_Init(&servo1, &htim1, TIM_CHANNEL_4);
 8001ad8:	220c      	movs	r2, #12
 8001ada:	4939      	ldr	r1, [pc, #228]	; (8001bc0 <main+0x160>)
 8001adc:	4839      	ldr	r0, [pc, #228]	; (8001bc4 <main+0x164>)
 8001ade:	f000 f924 	bl	8001d2a <Servo_Init>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	4838      	ldr	r0, [pc, #224]	; (8001bc8 <main+0x168>)
 8001ae6:	f001 fba6 	bl	8003236 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001aea:	4838      	ldr	r0, [pc, #224]	; (8001bcc <main+0x16c>)
 8001aec:	f003 ffec 	bl	8005ac8 <HAL_TIM_Base_Start_IT>

  //Start ADC conversion from the potentiometer and sensor
    HAL_ADC_Start_DMA(&hadc1, &pot_value, 1);
 8001af0:	2201      	movs	r2, #1
 8001af2:	4937      	ldr	r1, [pc, #220]	; (8001bd0 <main+0x170>)
 8001af4:	4837      	ldr	r0, [pc, #220]	; (8001bd4 <main+0x174>)
 8001af6:	f000 feaf 	bl	8002858 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, &sensor_value, 1);
 8001afa:	2201      	movs	r2, #1
 8001afc:	4936      	ldr	r1, [pc, #216]	; (8001bd8 <main+0x178>)
 8001afe:	4837      	ldr	r0, [pc, #220]	; (8001bdc <main+0x17c>)
 8001b00:	f000 feaa 	bl	8002858 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ifDisplay == 1) {
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <main+0x180>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d132      	bne.n	8001b72 <main+0x112>
		  Lcd_cursor(&my_lcd, 0, 0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4827      	ldr	r0, [pc, #156]	; (8001bb0 <main+0x150>)
 8001b12:	f7ff fe35 	bl	8001780 <Lcd_cursor>
		  Lcd_string(&my_lcd, "                ");
 8001b16:	4933      	ldr	r1, [pc, #204]	; (8001be4 <main+0x184>)
 8001b18:	4825      	ldr	r0, [pc, #148]	; (8001bb0 <main+0x150>)
 8001b1a:	f7ff fe13 	bl	8001744 <Lcd_string>
		  Lcd_cursor(&my_lcd, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	4823      	ldr	r0, [pc, #140]	; (8001bb0 <main+0x150>)
 8001b24:	f7ff fe2c 	bl	8001780 <Lcd_cursor>
		  Lcd_string(&my_lcd, "Sens: ");
 8001b28:	492f      	ldr	r1, [pc, #188]	; (8001be8 <main+0x188>)
 8001b2a:	4821      	ldr	r0, [pc, #132]	; (8001bb0 <main+0x150>)
 8001b2c:	f7ff fe0a 	bl	8001744 <Lcd_string>
		  Lcd_int(&my_lcd, sensor_value);
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <main+0x178>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	481e      	ldr	r0, [pc, #120]	; (8001bb0 <main+0x150>)
 8001b38:	f7ff fdec 	bl	8001714 <Lcd_int>
		  Lcd_cursor(&my_lcd, 1, 0);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2101      	movs	r1, #1
 8001b40:	481b      	ldr	r0, [pc, #108]	; (8001bb0 <main+0x150>)
 8001b42:	f7ff fe1d 	bl	8001780 <Lcd_cursor>
		  Lcd_string(&my_lcd, "                ");
 8001b46:	4927      	ldr	r1, [pc, #156]	; (8001be4 <main+0x184>)
 8001b48:	4819      	ldr	r0, [pc, #100]	; (8001bb0 <main+0x150>)
 8001b4a:	f7ff fdfb 	bl	8001744 <Lcd_string>
		  Lcd_cursor(&my_lcd, 1, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2101      	movs	r1, #1
 8001b52:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <main+0x150>)
 8001b54:	f7ff fe14 	bl	8001780 <Lcd_cursor>
		  Lcd_string(&my_lcd, "Pot: ");
 8001b58:	4924      	ldr	r1, [pc, #144]	; (8001bec <main+0x18c>)
 8001b5a:	4815      	ldr	r0, [pc, #84]	; (8001bb0 <main+0x150>)
 8001b5c:	f7ff fdf2 	bl	8001744 <Lcd_string>
		  Lcd_int(&my_lcd, pot_value);
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <main+0x170>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4812      	ldr	r0, [pc, #72]	; (8001bb0 <main+0x150>)
 8001b68:	f7ff fdd4 	bl	8001714 <Lcd_int>
		  ifDisplay = 0;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <main+0x180>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
	  }
	  if(ifServo)
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <main+0x190>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0c4      	beq.n	8001b04 <main+0xa4>
	  {
		  angle = pot_value*180/4095;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <main+0x170>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	22b4      	movs	r2, #180	; 0xb4
 8001b80:	fb02 f203 	mul.w	r2, r2, r3
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <main+0x194>)
 8001b86:	fba3 1302 	umull	r1, r3, r3, r2
 8001b8a:	1ad2      	subs	r2, r2, r3
 8001b8c:	0852      	lsrs	r2, r2, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	0adb      	lsrs	r3, r3, #11
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <main+0x198>)
 8001b96:	601a      	str	r2, [r3, #0]
		  Servo_SetAngle(&servo1, angle);
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <main+0x198>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4808      	ldr	r0, [pc, #32]	; (8001bc4 <main+0x164>)
 8001ba2:	f000 f8f6 	bl	8001d92 <Servo_SetAngle>
	  if(ifDisplay == 1) {
 8001ba6:	e7ad      	b.n	8001b04 <main+0xa4>
 8001ba8:	2000037c 	.word	0x2000037c
 8001bac:	200002fc 	.word	0x200002fc
 8001bb0:	200002a4 	.word	0x200002a4
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	20000028 	.word	0x20000028
 8001bbc:	20000018 	.word	0x20000018
 8001bc0:	2000033c 	.word	0x2000033c
 8001bc4:	20000298 	.word	0x20000298
 8001bc8:	20000238 	.word	0x20000238
 8001bcc:	200002bc 	.word	0x200002bc
 8001bd0:	20000294 	.word	0x20000294
 8001bd4:	20000130 	.word	0x20000130
 8001bd8:	200002a0 	.word	0x200002a0
 8001bdc:	200000e8 	.word	0x200000e8
 8001be0:	200000d0 	.word	0x200000d0
 8001be4:	080091fc 	.word	0x080091fc
 8001be8:	08009210 	.word	0x08009210
 8001bec:	08009218 	.word	0x08009218
 8001bf0:	200000d4 	.word	0x200000d4
 8001bf4:	00100101 	.word	0x00100101
 8001bf8:	200000d8 	.word	0x200000d8

08001bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b0b4      	sub	sp, #208	; 0xd0
 8001c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c06:	2230      	movs	r2, #48	; 0x30
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 fec4 	bl	8007998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c10:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	2284      	movs	r2, #132	; 0x84
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f005 feb5 	bl	8007998 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001c2e:	f002 febd 	bl	80049ac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <SystemClock_Config+0x114>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a36      	ldr	r2, [pc, #216]	; (8001d10 <SystemClock_Config+0x114>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <SystemClock_Config+0x114>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c4a:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <SystemClock_Config+0x118>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c52:	4a30      	ldr	r2, [pc, #192]	; (8001d14 <SystemClock_Config+0x118>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <SystemClock_Config+0x118>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c74:	2302      	movs	r3, #2
 8001c76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c82:	2304      	movs	r3, #4
 8001c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c88:	2348      	movs	r3, #72	; 0x48
 8001c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c94:	2303      	movs	r3, #3
 8001c96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f002 fe94 	bl	80049cc <HAL_RCC_OscConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001caa:	f000 f837 	bl	8001d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cae:	230f      	movs	r3, #15
 8001cb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 f8e9 	bl	8004eac <HAL_RCC_ClockConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001ce0:	f000 f81c 	bl	8001d1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <SystemClock_Config+0x11c>)
 8001ce6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 facc 	bl	8005294 <HAL_RCCEx_PeriphCLKConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8001d02:	f000 f80b 	bl	8001d1c <Error_Handler>
  }
}
 8001d06:	bf00      	nop
 8001d08:	37d0      	adds	r7, #208	; 0xd0
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000
 8001d18:	00200100 	.word	0x00200100

08001d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <Servo_Init>:

//
//	Servo innitialization
//
void Servo_Init(servo_t *servo, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
	servo->htim = _htim;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	601a      	str	r2, [r3, #0]
	servo->channel = _channel;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_Start(servo->htim, servo->channel);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f003 ff1b 	bl	8005b88 <HAL_TIM_PWM_Start>
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <map>:

//
//	map help function
//
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	1a8a      	subs	r2, r1, r2
 8001d74:	fb02 f203 	mul.w	r2, r2, r3
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1acb      	subs	r3, r1, r3
 8001d7e:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	4413      	add	r3, r2
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <Servo_SetAngle>:

//
//	Servo set angle function
//
void Servo_SetAngle(servo_t *servo, uint16_t angle)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af02      	add	r7, sp, #8
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	807b      	strh	r3, [r7, #2]
	if(angle < 0) angle = 0;
	if(angle > 180) angle = 180;
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	2bb4      	cmp	r3, #180	; 0xb4
 8001da2:	d901      	bls.n	8001da8 <Servo_SetAngle+0x16>
 8001da4:	23b4      	movs	r3, #180	; 0xb4
 8001da6:	807b      	strh	r3, [r7, #2]

	  uint16_t tmp = map(angle, ANGLE_MIN, ANGLE_MAX, SERVO_MIN, SERVO_MAX);
 8001da8:	8878      	ldrh	r0, [r7, #2]
 8001daa:	f640 137e 	movw	r3, #2430	; 0x97e
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f240 2326 	movw	r3, #550	; 0x226
 8001db4:	22b4      	movs	r2, #180	; 0xb4
 8001db6:	2100      	movs	r1, #0
 8001db8:	f7ff ffcf 	bl	8001d5a <map>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <Servo_SetAngle+0x42>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	89fa      	ldrh	r2, [r7, #14]
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001dd2:	e02c      	b.n	8001e2e <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d105      	bne.n	8001de8 <Servo_SetAngle+0x56>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	89fa      	ldrh	r2, [r7, #14]
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001de6:	e022      	b.n	8001e2e <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d105      	bne.n	8001dfc <Servo_SetAngle+0x6a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	89fa      	ldrh	r2, [r7, #14]
 8001df8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001dfa:	e018      	b.n	8001e2e <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d105      	bne.n	8001e10 <Servo_SetAngle+0x7e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	89fa      	ldrh	r2, [r7, #14]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e0e:	e00e      	b.n	8001e2e <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d105      	bne.n	8001e24 <Servo_SetAngle+0x92>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	89fa      	ldrh	r2, [r7, #14]
 8001e20:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001e22:	e004      	b.n	8001e2e <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	89fa      	ldrh	r2, [r7, #14]
 8001e2c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_MspInit+0x44>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_MspInit+0x44>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_MspInit+0x44>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_MspInit+0x44>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_MspInit+0x44>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_MspInit+0x44>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <HardFault_Handler+0x4>

08001e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <MemManage_Handler+0x4>

08001e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <BusFault_Handler+0x4>

08001ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <UsageFault_Handler+0x4>

08001ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed4:	f000 fc3a 	bl	800274c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}

08001edc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <TIM2_IRQHandler+0x10>)
 8001ee2:	f003 fe95 	bl	8005c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000037c 	.word	0x2000037c

08001ef0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <TIM3_IRQHandler+0x10>)
 8001ef6:	f003 fe8b 	bl	8005c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200002fc 	.word	0x200002fc

08001f04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <TIM4_IRQHandler+0x10>)
 8001f0a:	f003 fe81 	bl	8005c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200002bc 	.word	0x200002bc

08001f18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <DMA2_Stream0_IRQHandler+0x10>)
 8001f1e:	f001 fb71 	bl	8003604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000178 	.word	0x20000178

08001f2c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <DMA2_Stream2_IRQHandler+0x10>)
 8001f32:	f001 fb67 	bl	8003604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200001d8 	.word	0x200001d8

08001f40 <_sbrk>:
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <_sbrk+0x50>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <_sbrk+0x16>
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <_sbrk+0x50>)
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <_sbrk+0x54>)
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <_sbrk+0x50>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <_sbrk+0x50>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4413      	add	r3, r2
 8001f64:	466a      	mov	r2, sp
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d907      	bls.n	8001f7a <_sbrk+0x3a>
 8001f6a:	f005 fceb 	bl	8007944 <__errno>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	230c      	movs	r3, #12
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	f04f 33ff 	mov.w	r3, #4294967295
 8001f78:	e006      	b.n	8001f88 <_sbrk+0x48>
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <_sbrk+0x50>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a03      	ldr	r2, [pc, #12]	; (8001f90 <_sbrk+0x50>)
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200000dc 	.word	0x200000dc
 8001f94:	20000848 	.word	0x20000848

08001f98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f9c:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <SystemInit+0x5c>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <SystemInit+0x5c>)
 8001fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <SystemInit+0x60>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <SystemInit+0x60>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <SystemInit+0x60>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <SystemInit+0x60>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	490d      	ldr	r1, [pc, #52]	; (8001ff8 <SystemInit+0x60>)
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <SystemInit+0x64>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <SystemInit+0x60>)
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <SystemInit+0x68>)
 8001fce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <SystemInit+0x60>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <SystemInit+0x60>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <SystemInit+0x60>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SystemInit+0x5c>)
 8001fe4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fe8:	609a      	str	r2, [r3, #8]
#endif
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	fef6ffff 	.word	0xfef6ffff
 8002000:	24003010 	.word	0x24003010

08002004 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b09a      	sub	sp, #104	; 0x68
 8002008:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800200a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002018:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002024:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
 8002034:	615a      	str	r2, [r3, #20]
 8002036:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	222c      	movs	r2, #44	; 0x2c
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f005 fcaa 	bl	8007998 <memset>

  htim1.Instance = TIM1;
 8002044:	4b43      	ldr	r3, [pc, #268]	; (8002154 <MX_TIM1_Init+0x150>)
 8002046:	4a44      	ldr	r2, [pc, #272]	; (8002158 <MX_TIM1_Init+0x154>)
 8002048:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800204a:	4b42      	ldr	r3, [pc, #264]	; (8002154 <MX_TIM1_Init+0x150>)
 800204c:	2247      	movs	r2, #71	; 0x47
 800204e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b40      	ldr	r3, [pc, #256]	; (8002154 <MX_TIM1_Init+0x150>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002056:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <MX_TIM1_Init+0x150>)
 8002058:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800205c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205e:	4b3d      	ldr	r3, [pc, #244]	; (8002154 <MX_TIM1_Init+0x150>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002064:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <MX_TIM1_Init+0x150>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <MX_TIM1_Init+0x150>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002070:	4838      	ldr	r0, [pc, #224]	; (8002154 <MX_TIM1_Init+0x150>)
 8002072:	f003 fcfd 	bl	8005a70 <HAL_TIM_Base_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800207c:	f7ff fe4e 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002084:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002086:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800208a:	4619      	mov	r1, r3
 800208c:	4831      	ldr	r0, [pc, #196]	; (8002154 <MX_TIM1_Init+0x150>)
 800208e:	f003 fff7 	bl	8006080 <HAL_TIM_ConfigClockSource>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002098:	f7ff fe40 	bl	8001d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800209c:	482d      	ldr	r0, [pc, #180]	; (8002154 <MX_TIM1_Init+0x150>)
 800209e:	f003 fd3d 	bl	8005b1c <HAL_TIM_PWM_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80020a8:	f7ff fe38 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020b0:	2300      	movs	r3, #0
 80020b2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020bc:	4619      	mov	r1, r3
 80020be:	4825      	ldr	r0, [pc, #148]	; (8002154 <MX_TIM1_Init+0x150>)
 80020c0:	f004 fc7e 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80020ca:	f7ff fe27 	bl	8001d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ce:	2360      	movs	r3, #96	; 0x60
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 80020d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d8:	2300      	movs	r3, #0
 80020da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020e4:	2300      	movs	r3, #0
 80020e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020ec:	220c      	movs	r2, #12
 80020ee:	4619      	mov	r1, r3
 80020f0:	4818      	ldr	r0, [pc, #96]	; (8002154 <MX_TIM1_Init+0x150>)
 80020f2:	f003 fead 	bl	8005e50 <HAL_TIM_PWM_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80020fc:	f7ff fe0e 	bl	8001d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002118:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	4619      	mov	r1, r3
 8002134:	4807      	ldr	r0, [pc, #28]	; (8002154 <MX_TIM1_Init+0x150>)
 8002136:	f004 fc9f 	bl	8006a78 <HAL_TIMEx_ConfigBreakDeadTime>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002140:	f7ff fdec 	bl	8001d1c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <MX_TIM1_Init+0x150>)
 8002146:	f000 f965 	bl	8002414 <HAL_TIM_MspPostInit>

}
 800214a:	bf00      	nop
 800214c:	3768      	adds	r7, #104	; 0x68
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000033c 	.word	0x2000033c
 8002158:	40010000 	.word	0x40010000

0800215c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <MX_TIM2_Init+0x98>)
 800217c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002180:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <MX_TIM2_Init+0x98>)
 8002184:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002188:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_TIM2_Init+0x98>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <MX_TIM2_Init+0x98>)
 8002192:	f241 3287 	movw	r2, #4999	; 0x1387
 8002196:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <MX_TIM2_Init+0x98>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <MX_TIM2_Init+0x98>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021a4:	4813      	ldr	r0, [pc, #76]	; (80021f4 <MX_TIM2_Init+0x98>)
 80021a6:	f003 fc63 	bl	8005a70 <HAL_TIM_Base_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80021b0:	f7ff fdb4 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ba:	f107 0310 	add.w	r3, r7, #16
 80021be:	4619      	mov	r1, r3
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <MX_TIM2_Init+0x98>)
 80021c2:	f003 ff5d 	bl	8006080 <HAL_TIM_ConfigClockSource>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80021cc:	f7ff fda6 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_TIM2_Init+0x98>)
 80021de:	f004 fbef 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80021e8:	f7ff fd98 	bl	8001d1c <Error_Handler>
  }

}
 80021ec:	bf00      	nop
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	2000037c 	.word	0x2000037c

080021f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8002216:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <MX_TIM3_Init+0x98>)
 8002218:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <MX_TIM3_Init+0x9c>)
 800221a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <MX_TIM3_Init+0x98>)
 800221e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002222:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <MX_TIM3_Init+0x98>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <MX_TIM3_Init+0x98>)
 800222c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002230:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <MX_TIM3_Init+0x98>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <MX_TIM3_Init+0x98>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800223e:	4814      	ldr	r0, [pc, #80]	; (8002290 <MX_TIM3_Init+0x98>)
 8002240:	f003 fc16 	bl	8005a70 <HAL_TIM_Base_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800224a:	f7ff fd67 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002252:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	4619      	mov	r1, r3
 800225a:	480d      	ldr	r0, [pc, #52]	; (8002290 <MX_TIM3_Init+0x98>)
 800225c:	f003 ff10 	bl	8006080 <HAL_TIM_ConfigClockSource>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002266:	f7ff fd59 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4806      	ldr	r0, [pc, #24]	; (8002290 <MX_TIM3_Init+0x98>)
 8002278:	f004 fba2 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002282:	f7ff fd4b 	bl	8001d1c <Error_Handler>
  }

}
 8002286:	bf00      	nop
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200002fc 	.word	0x200002fc
 8002294:	40000400 	.word	0x40000400

08002298 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <MX_TIM4_Init+0x94>)
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <MX_TIM4_Init+0x98>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <MX_TIM4_Init+0x94>)
 80022be:	f240 22cf 	movw	r2, #719	; 0x2cf
 80022c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <MX_TIM4_Init+0x94>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19;
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <MX_TIM4_Init+0x94>)
 80022cc:	2213      	movs	r2, #19
 80022ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <MX_TIM4_Init+0x94>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <MX_TIM4_Init+0x94>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022dc:	4813      	ldr	r0, [pc, #76]	; (800232c <MX_TIM4_Init+0x94>)
 80022de:	f003 fbc7 	bl	8005a70 <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80022e8:	f7ff fd18 	bl	8001d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022f2:	f107 0310 	add.w	r3, r7, #16
 80022f6:	4619      	mov	r1, r3
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <MX_TIM4_Init+0x94>)
 80022fa:	f003 fec1 	bl	8006080 <HAL_TIM_ConfigClockSource>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002304:	f7ff fd0a 	bl	8001d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002308:	2320      	movs	r3, #32
 800230a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <MX_TIM4_Init+0x94>)
 8002316:	f004 fb53 	bl	80069c0 <HAL_TIMEx_MasterConfigSynchronization>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002320:	f7ff fcfc 	bl	8001d1c <Error_Handler>
  }

}
 8002324:	bf00      	nop
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200002bc 	.word	0x200002bc
 8002330:	40000800 	.word	0x40000800

08002334 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a30      	ldr	r2, [pc, #192]	; (8002404 <HAL_TIM_Base_MspInit+0xd0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10c      	bne.n	8002360 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002346:	4b30      	ldr	r3, [pc, #192]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800235e:	e04c      	b.n	80023fa <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002368:	d114      	bne.n	8002394 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800236a:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a26      	ldr	r2, [pc, #152]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	201c      	movs	r0, #28
 8002388:	f000 fefd 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800238c:	201c      	movs	r0, #28
 800238e:	f000 ff16 	bl	80031be <HAL_NVIC_EnableIRQ>
}
 8002392:	e032      	b.n	80023fa <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_TIM_Base_MspInit+0xd8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d114      	bne.n	80023c8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800239e:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a19      	ldr	r2, [pc, #100]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	201d      	movs	r0, #29
 80023bc:	f000 fee3 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023c0:	201d      	movs	r0, #29
 80023c2:	f000 fefc 	bl	80031be <HAL_NVIC_EnableIRQ>
}
 80023c6:	e018      	b.n	80023fa <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_TIM_Base_MspInit+0xdc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d113      	bne.n	80023fa <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_TIM_Base_MspInit+0xd4>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	201e      	movs	r0, #30
 80023f0:	f000 fec9 	bl	8003186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023f4:	201e      	movs	r0, #30
 80023f6:	f000 fee2 	bl	80031be <HAL_NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000
 8002408:	40023800 	.word	0x40023800
 800240c:	40000400 	.word	0x40000400
 8002410:	40000800 	.word	0x40000800

08002414 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_TIM_MspPostInit+0x64>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d11c      	bne.n	8002470 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_TIM_MspPostInit+0x68>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a10      	ldr	r2, [pc, #64]	; (800247c <HAL_TIM_MspPostInit+0x68>)
 800243c:	f043 0310 	orr.w	r3, r3, #16
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <HAL_TIM_MspPostInit+0x68>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800244e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002452:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002460:	2301      	movs	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	4619      	mov	r1, r3
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <HAL_TIM_MspPostInit+0x6c>)
 800246c:	f001 ff9e 	bl	80043ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002470:	bf00      	nop
 8002472:	3720      	adds	r7, #32
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40010000 	.word	0x40010000
 800247c:	40023800 	.word	0x40023800
 8002480:	40021000 	.word	0x40021000

08002484 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <MX_USART3_UART_Init+0x58>)
 800248a:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <MX_USART3_UART_Init+0x5c>)
 800248c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <MX_USART3_UART_Init+0x58>)
 8002490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002494:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <MX_USART3_UART_Init+0x58>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <MX_USART3_UART_Init+0x58>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <MX_USART3_UART_Init+0x58>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <MX_USART3_UART_Init+0x58>)
 80024aa:	220c      	movs	r2, #12
 80024ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <MX_USART3_UART_Init+0x58>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <MX_USART3_UART_Init+0x58>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <MX_USART3_UART_Init+0x58>)
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <MX_USART3_UART_Init+0x58>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024c6:	4805      	ldr	r0, [pc, #20]	; (80024dc <MX_USART3_UART_Init+0x58>)
 80024c8:	f004 fb72 	bl	8006bb0 <HAL_UART_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024d2:	f7ff fc23 	bl	8001d1c <Error_Handler>
  }

}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200003bc 	.word	0x200003bc
 80024e0:	40004800 	.word	0x40004800

080024e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a17      	ldr	r2, [pc, #92]	; (8002560 <HAL_UART_MspInit+0x7c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d128      	bne.n	8002558 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_UART_MspInit+0x80>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a16      	ldr	r2, [pc, #88]	; (8002564 <HAL_UART_MspInit+0x80>)
 800250c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <HAL_UART_MspInit+0x80>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_UART_MspInit+0x80>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_UART_MspInit+0x80>)
 8002524:	f043 0308 	orr.w	r3, r3, #8
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_UART_MspInit+0x80>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002536:	f44f 7340 	mov.w	r3, #768	; 0x300
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002548:	2307      	movs	r3, #7
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4619      	mov	r1, r3
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <HAL_UART_MspInit+0x84>)
 8002554:	f001 ff2a 	bl	80043ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002558:	bf00      	nop
 800255a:	3728      	adds	r7, #40	; 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40004800 	.word	0x40004800
 8002564:	40023800 	.word	0x40023800
 8002568:	40020c00 	.word	0x40020c00

0800256c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002572:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002576:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800257a:	2206      	movs	r2, #6
 800257c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002580:	2202      	movs	r2, #2
 8002582:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800258c:	2202      	movs	r2, #2
 800258e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002592:	2201      	movs	r2, #1
 8002594:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800259e:	2200      	movs	r2, #0
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025b0:	f002 f8bf 	bl	8004732 <HAL_PCD_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80025ba:	f7ff fbaf 	bl	8001d1c <Error_Handler>
  }

}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000043c 	.word	0x2000043c

080025c8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e8:	d141      	bne.n	800266e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002602:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002614:	230a      	movs	r3, #10
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	4817      	ldr	r0, [pc, #92]	; (800267c <HAL_PCD_MspInit+0xb4>)
 8002620:	f001 fec4 	bl	80043ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4810      	ldr	r0, [pc, #64]	; (800267c <HAL_PCD_MspInit+0xb4>)
 800263a:	f001 feb7 	bl	80043ac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 8002644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002648:	6353      	str	r3, [r2, #52]	; 0x34
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	; 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40020000 	.word	0x40020000

08002680 <Reset_Handler>:
 8002680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b8 <LoopFillZerobss+0x14>
 8002684:	2100      	movs	r1, #0
 8002686:	e003      	b.n	8002690 <LoopCopyDataInit>

08002688 <CopyDataInit>:
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <LoopFillZerobss+0x18>)
 800268a:	585b      	ldr	r3, [r3, r1]
 800268c:	5043      	str	r3, [r0, r1]
 800268e:	3104      	adds	r1, #4

08002690 <LoopCopyDataInit>:
 8002690:	480b      	ldr	r0, [pc, #44]	; (80026c0 <LoopFillZerobss+0x1c>)
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <LoopFillZerobss+0x20>)
 8002694:	1842      	adds	r2, r0, r1
 8002696:	429a      	cmp	r2, r3
 8002698:	d3f6      	bcc.n	8002688 <CopyDataInit>
 800269a:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <LoopFillZerobss+0x24>)
 800269c:	e002      	b.n	80026a4 <LoopFillZerobss>

0800269e <FillZerobss>:
 800269e:	2300      	movs	r3, #0
 80026a0:	f842 3b04 	str.w	r3, [r2], #4

080026a4 <LoopFillZerobss>:
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <LoopFillZerobss+0x28>)
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d3f9      	bcc.n	800269e <FillZerobss>
 80026aa:	f7ff fc75 	bl	8001f98 <SystemInit>
 80026ae:	f005 f94f 	bl	8007950 <__libc_init_array>
 80026b2:	f7ff f9d5 	bl	8001a60 <main>
 80026b6:	4770      	bx	lr
 80026b8:	20050000 	.word	0x20050000
 80026bc:	08009460 	.word	0x08009460
 80026c0:	20000000 	.word	0x20000000
 80026c4:	200000a0 	.word	0x200000a0
 80026c8:	200000a0 	.word	0x200000a0
 80026cc:	20000848 	.word	0x20000848

080026d0 <ADC_IRQHandler>:
 80026d0:	e7fe      	b.n	80026d0 <ADC_IRQHandler>

080026d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d6:	2003      	movs	r0, #3
 80026d8:	f000 fd4a 	bl	8003170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026dc:	2000      	movs	r0, #0
 80026de:	f000 f805 	bl	80026ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80026e2:	f7ff fba9 	bl	8001e38 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_InitTick+0x54>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_InitTick+0x58>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002702:	fbb3 f3f1 	udiv	r3, r3, r1
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fd65 	bl	80031da <HAL_SYSTICK_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00e      	b.n	8002738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d80a      	bhi.n	8002736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f000 fd2d 	bl	8003186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800272c:	4a06      	ldr	r2, [pc, #24]	; (8002748 <HAL_InitTick+0x5c>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000030 	.word	0x20000030
 8002744:	20000038 	.word	0x20000038
 8002748:	20000034 	.word	0x20000034

0800274c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_IncTick+0x20>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_IncTick+0x24>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4413      	add	r3, r2
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <HAL_IncTick+0x24>)
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000038 	.word	0x20000038
 8002770:	20000840 	.word	0x20000840

08002774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return uwTick;
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_GetTick+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000840 	.word	0x20000840

0800278c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff ffee 	bl	8002774 <HAL_GetTick>
 8002798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d005      	beq.n	80027b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_Delay+0x40>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027b2:	bf00      	nop
 80027b4:	f7ff ffde 	bl	8002774 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d8f7      	bhi.n	80027b4 <HAL_Delay+0x28>
  {
  }
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000038 	.word	0x20000038

080027d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e031      	b.n	800284a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fc08 	bl	8001004 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_ADC_Init+0x84>)
 8002814:	4013      	ands	r3, r2
 8002816:	f043 0202 	orr.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa5a 	bl	8002cd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f023 0303 	bic.w	r3, r3, #3
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
 800283a:	e001      	b.n	8002840 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	ffffeefd 	.word	0xffffeefd

08002858 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_ADC_Start_DMA+0x1e>
 8002872:	2302      	movs	r3, #2
 8002874:	e0c7      	b.n	8002a06 <HAL_ADC_Start_DMA+0x1ae>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	d018      	beq.n	80028be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800289c:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <HAL_ADC_Start_DMA+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5c      	ldr	r2, [pc, #368]	; (8002a14 <HAL_ADC_Start_DMA+0x1bc>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0c9a      	lsrs	r2, r3, #18
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80028b0:	e002      	b.n	80028b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f9      	bne.n	80028b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	f040 809b 	bne.w	8002a04 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d2:	4b51      	ldr	r3, [pc, #324]	; (8002a18 <HAL_ADC_Start_DMA+0x1c0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002908:	d106      	bne.n	8002918 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f023 0206 	bic.w	r2, r3, #6
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	645a      	str	r2, [r3, #68]	; 0x44
 8002916:	e002      	b.n	800291e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	4a3c      	ldr	r2, [pc, #240]	; (8002a1c <HAL_ADC_Start_DMA+0x1c4>)
 800292c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <HAL_ADC_Start_DMA+0x1c8>)
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	4a3a      	ldr	r2, [pc, #232]	; (8002a24 <HAL_ADC_Start_DMA+0x1cc>)
 800293c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002946:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002956:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002966:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	334c      	adds	r3, #76	; 0x4c
 8002972:	4619      	mov	r1, r3
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f000 fde4 	bl	8003544 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800297c:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <HAL_ADC_Start_DMA+0x1d0>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10f      	bne.n	80029a8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d136      	bne.n	8002a04 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	e02d      	b.n	8002a04 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_ADC_Start_DMA+0x1d4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10e      	bne.n	80029d0 <HAL_ADC_Start_DMA+0x178>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ce:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_ADC_Start_DMA+0x1d0>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d113      	bne.n	8002a04 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <HAL_ADC_Start_DMA+0x1d8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10e      	bne.n	8002a04 <HAL_ADC_Start_DMA+0x1ac>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a02:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000030 	.word	0x20000030
 8002a14:	431bde83 	.word	0x431bde83
 8002a18:	fffff8fe 	.word	0xfffff8fe
 8002a1c:	08002ecd 	.word	0x08002ecd
 8002a20:	08002f87 	.word	0x08002f87
 8002a24:	08002fa3 	.word	0x08002fa3
 8002a28:	40012300 	.word	0x40012300
 8002a2c:	40012000 	.word	0x40012000
 8002a30:	40012200 	.word	0x40012200

08002a34 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x1c>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e115      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x248>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	d935      	bls.n	8002b08 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68d9      	ldr	r1, [r3, #12]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b1e      	subs	r3, #30
 8002ab2:	2207      	movs	r2, #7
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43da      	mvns	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	400a      	ands	r2, r1
 8002ac0:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7f      	ldr	r2, [pc, #508]	; (8002cc4 <HAL_ADC_ConfigChannel+0x254>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10a      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68d9      	ldr	r1, [r3, #12]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	061a      	lsls	r2, r3, #24
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	60da      	str	r2, [r3, #12]
 8002ae0:	e035      	b.n	8002b4e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68d9      	ldr	r1, [r3, #12]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	4603      	mov	r3, r0
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4403      	add	r3, r0
 8002afa:	3b1e      	subs	r3, #30
 8002afc:	409a      	lsls	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	e022      	b.n	8002b4e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6919      	ldr	r1, [r3, #16]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	400a      	ands	r2, r1
 8002b2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6919      	ldr	r1, [r3, #16]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4403      	add	r3, r0
 8002b44:	409a      	lsls	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d824      	bhi.n	8002ba0 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	3b05      	subs	r3, #5
 8002b68:	221f      	movs	r2, #31
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	400a      	ands	r2, r1
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4618      	mov	r0, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	3b05      	subs	r3, #5
 8002b92:	fa00 f203 	lsl.w	r2, r0, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b9e:	e04c      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b0c      	cmp	r3, #12
 8002ba6:	d824      	bhi.n	8002bf2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b23      	subs	r3, #35	; 0x23
 8002bba:	221f      	movs	r2, #31
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	3b23      	subs	r3, #35	; 0x23
 8002be4:	fa00 f203 	lsl.w	r2, r0, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf0:	e023      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	3b41      	subs	r3, #65	; 0x41
 8002c04:	221f      	movs	r2, #31
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	400a      	ands	r2, r1
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b41      	subs	r3, #65	; 0x41
 8002c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a22      	ldr	r2, [pc, #136]	; (8002cc8 <HAL_ADC_ConfigChannel+0x258>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d109      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1e8>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b12      	cmp	r3, #18
 8002c4a:	d105      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002c4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ccc <HAL_ADC_ConfigChannel+0x25c>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a1e      	ldr	r2, [pc, #120]	; (8002ccc <HAL_ADC_ConfigChannel+0x25c>)
 8002c52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c56:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <HAL_ADC_ConfigChannel+0x258>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d125      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x23e>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a17      	ldr	r2, [pc, #92]	; (8002cc4 <HAL_ADC_ConfigChannel+0x254>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x204>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b11      	cmp	r3, #17
 8002c72:	d11c      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c74:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_ADC_ConfigChannel+0x25c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <HAL_ADC_ConfigChannel+0x25c>)
 8002c7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c7e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0f      	ldr	r2, [pc, #60]	; (8002cc4 <HAL_ADC_ConfigChannel+0x254>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d111      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_ADC_ConfigChannel+0x260>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_ADC_ConfigChannel+0x264>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	0c9a      	lsrs	r2, r3, #18
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ca0:	e002      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f9      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	10000012 	.word	0x10000012
 8002cc8:	40012000 	.word	0x40012000
 8002ccc:	40012300 	.word	0x40012300
 8002cd0:	20000030 	.word	0x20000030
 8002cd4:	431bde83 	.word	0x431bde83

08002cd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ce0:	4b78      	ldr	r3, [pc, #480]	; (8002ec4 <ADC_Init+0x1ec>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a77      	ldr	r2, [pc, #476]	; (8002ec4 <ADC_Init+0x1ec>)
 8002ce6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002cec:	4b75      	ldr	r3, [pc, #468]	; (8002ec4 <ADC_Init+0x1ec>)
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4973      	ldr	r1, [pc, #460]	; (8002ec4 <ADC_Init+0x1ec>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	021a      	lsls	r2, r3, #8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6899      	ldr	r1, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	4a58      	ldr	r2, [pc, #352]	; (8002ec8 <ADC_Init+0x1f0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d022      	beq.n	8002db2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6899      	ldr	r1, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6899      	ldr	r1, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	e00f      	b.n	8002dd2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0202 	bic.w	r2, r2, #2
 8002de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	005a      	lsls	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01b      	beq.n	8002e38 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	035a      	lsls	r2, r3, #13
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	e007      	b.n	8002e48 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	051a      	lsls	r2, r3, #20
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6899      	ldr	r1, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e8a:	025a      	lsls	r2, r3, #9
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6899      	ldr	r1, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	029a      	lsls	r2, r3, #10
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40012300 	.word	0x40012300
 8002ec8:	0f000001 	.word	0x0f000001

08002ecc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d13c      	bne.n	8002f60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d12b      	bne.n	8002f58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d127      	bne.n	8002f58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d119      	bne.n	8002f58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0220 	bic.w	r2, r2, #32
 8002f32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff fd6b 	bl	8002a34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f5e:	e00e      	b.n	8002f7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7ff fd75 	bl	8002a5c <HAL_ADC_ErrorCallback>
}
 8002f72:	e004      	b.n	8002f7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f92:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff fd57 	bl	8002a48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2240      	movs	r2, #64	; 0x40
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f043 0204 	orr.w	r2, r3, #4
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fd4a 	bl	8002a5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <__NVIC_SetPriorityGrouping+0x40>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fec:	4013      	ands	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffe:	4a04      	ldr	r2, [pc, #16]	; (8003010 <__NVIC_SetPriorityGrouping+0x40>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60d3      	str	r3, [r2, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00
 8003014:	05fa0000 	.word	0x05fa0000

08003018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <__NVIC_GetPriorityGrouping+0x18>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	f003 0307 	and.w	r3, r3, #7
}
 8003026:	4618      	mov	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	2b00      	cmp	r3, #0
 8003044:	db0b      	blt.n	800305e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	f003 021f 	and.w	r2, r3, #31
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <__NVIC_EnableIRQ+0x38>)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2001      	movs	r0, #1
 8003056:	fa00 f202 	lsl.w	r2, r0, r2
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000e100 	.word	0xe000e100

08003070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	6039      	str	r1, [r7, #0]
 800307a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	2b00      	cmp	r3, #0
 8003082:	db0a      	blt.n	800309a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	490c      	ldr	r1, [pc, #48]	; (80030bc <__NVIC_SetPriority+0x4c>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	440b      	add	r3, r1
 8003094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003098:	e00a      	b.n	80030b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4908      	ldr	r1, [pc, #32]	; (80030c0 <__NVIC_SetPriority+0x50>)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	3b04      	subs	r3, #4
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	440b      	add	r3, r1
 80030ae:	761a      	strb	r2, [r3, #24]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000e100 	.word	0xe000e100
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f1c3 0307 	rsb	r3, r3, #7
 80030de:	2b04      	cmp	r3, #4
 80030e0:	bf28      	it	cs
 80030e2:	2304      	movcs	r3, #4
 80030e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2b06      	cmp	r3, #6
 80030ec:	d902      	bls.n	80030f4 <NVIC_EncodePriority+0x30>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3b03      	subs	r3, #3
 80030f2:	e000      	b.n	80030f6 <NVIC_EncodePriority+0x32>
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	401a      	ands	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800310c:	f04f 31ff 	mov.w	r1, #4294967295
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	43d9      	mvns	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	4313      	orrs	r3, r2
         );
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313c:	d301      	bcc.n	8003142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800313e:	2301      	movs	r3, #1
 8003140:	e00f      	b.n	8003162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003142:	4a0a      	ldr	r2, [pc, #40]	; (800316c <SysTick_Config+0x40>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314a:	210f      	movs	r1, #15
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f7ff ff8e 	bl	8003070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <SysTick_Config+0x40>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315a:	4b04      	ldr	r3, [pc, #16]	; (800316c <SysTick_Config+0x40>)
 800315c:	2207      	movs	r2, #7
 800315e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000e010 	.word	0xe000e010

08003170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff29 	bl	8002fd0 <__NVIC_SetPriorityGrouping>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff ff3e 	bl	8003018 <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff8e 	bl	80030c4 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5d 	bl	8003070 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff31 	bl	8003034 <__NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffa2 	bl	800312c <SysTick_Config>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e014      	b.n	800322e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	791b      	ldrb	r3, [r3, #4]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7fd fff3 	bl	8001200 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003236:	b480      	push	{r7}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	795b      	ldrb	r3, [r3, #5]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_DAC_Start+0x1e>
 8003250:	2302      	movs	r3, #2
 8003252:	e050      	b.n	80032f6 <HAL_DAC_Start+0xc0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	2201      	movs	r2, #1
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	409a      	lsls	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11a      	bne.n	80032b0 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003290:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d127      	bne.n	80032e8 <HAL_DAC_Start+0xb2>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b38      	cmp	r3, #56	; 0x38
 800329c:	d124      	bne.n	80032e8 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	e01b      	b.n	80032e8 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ba:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80032c6:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032ce:	d10b      	bne.n	80032e8 <HAL_DAC_Start+0xb2>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80032d6:	d107      	bne.n	80032e8 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0202 	orr.w	r2, r2, #2
 80032e6:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003302:	b480      	push	{r7}
 8003304:	b087      	sub	sp, #28
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	795b      	ldrb	r3, [r3, #5]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_DAC_ConfigChannel+0x20>
 800331e:	2302      	movs	r3, #2
 8003320:	e036      	b.n	8003390 <HAL_DAC_ConfigChannel+0x8e>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2202      	movs	r2, #2
 800332c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003336:	f640 72fe 	movw	r2, #4094	; 0xffe
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4013      	ands	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	22c0      	movs	r2, #192	; 0xc0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43da      	mvns	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	400a      	ands	r2, r1
 8003380:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4413      	add	r3, r2
 80033c0:	3308      	adds	r3, #8
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e004      	b.n	80033d0 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	3314      	adds	r3, #20
 80033ce:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	461a      	mov	r2, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033f4:	f7ff f9be 	bl	8002774 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e099      	b.n	8003538 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003424:	e00f      	b.n	8003446 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003426:	f7ff f9a5 	bl	8002774 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b05      	cmp	r3, #5
 8003432:	d908      	bls.n	8003446 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2203      	movs	r2, #3
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e078      	b.n	8003538 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e8      	bne.n	8003426 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4b38      	ldr	r3, [pc, #224]	; (8003540 <HAL_DMA_Init+0x158>)
 8003460:	4013      	ands	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003472:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	2b04      	cmp	r3, #4
 800349e:	d107      	bne.n	80034b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	4313      	orrs	r3, r2
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f023 0307 	bic.w	r3, r3, #7
 80034c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d117      	bne.n	800350a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fa77 	bl	80039e0 <DMA_CheckFifoParam>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2240      	movs	r2, #64	; 0x40
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003506:	2301      	movs	r3, #1
 8003508:	e016      	b.n	8003538 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa2e 	bl	8003974 <DMA_CalcBaseAndBitshift>
 8003518:	4603      	mov	r3, r0
 800351a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	223f      	movs	r2, #63	; 0x3f
 8003522:	409a      	lsls	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	f010803f 	.word	0xf010803f

08003544 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_DMA_Start_IT+0x26>
 8003566:	2302      	movs	r3, #2
 8003568:	e048      	b.n	80035fc <HAL_DMA_Start_IT+0xb8>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d137      	bne.n	80035ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f9c0 	bl	8003918 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	223f      	movs	r2, #63	; 0x3f
 800359e:	409a      	lsls	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0216 	orr.w	r2, r2, #22
 80035b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0208 	orr.w	r2, r2, #8
 80035da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e005      	b.n	80035fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035f6:	2302      	movs	r3, #2
 80035f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003610:	4b92      	ldr	r3, [pc, #584]	; (800385c <HAL_DMA_IRQHandler+0x258>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a92      	ldr	r2, [pc, #584]	; (8003860 <HAL_DMA_IRQHandler+0x25c>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0a9b      	lsrs	r3, r3, #10
 800361c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	2208      	movs	r2, #8
 8003630:	409a      	lsls	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01a      	beq.n	8003670 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0204 	bic.w	r2, r2, #4
 8003656:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	2208      	movs	r2, #8
 800365e:	409a      	lsls	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	2201      	movs	r2, #1
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d012      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	2201      	movs	r2, #1
 8003694:	409a      	lsls	r2, r3
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	f043 0202 	orr.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	2204      	movs	r2, #4
 80036ac:	409a      	lsls	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d012      	beq.n	80036dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00b      	beq.n	80036dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	2204      	movs	r2, #4
 80036ca:	409a      	lsls	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	f043 0204 	orr.w	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	2210      	movs	r2, #16
 80036e2:	409a      	lsls	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d043      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d03c      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	2210      	movs	r2, #16
 8003700:	409a      	lsls	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d018      	beq.n	8003746 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d024      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
 8003732:	e01f      	b.n	8003774 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01b      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4798      	blx	r3
 8003744:	e016      	b.n	8003774 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d107      	bne.n	8003764 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0208 	bic.w	r2, r2, #8
 8003762:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003778:	2220      	movs	r2, #32
 800377a:	409a      	lsls	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 808e 	beq.w	80038a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8086 	beq.w	80038a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379a:	2220      	movs	r2, #32
 800379c:	409a      	lsls	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b05      	cmp	r3, #5
 80037ac:	d136      	bne.n	800381c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0216 	bic.w	r2, r2, #22
 80037bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d103      	bne.n	80037de <HAL_DMA_IRQHandler+0x1da>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0208 	bic.w	r2, r2, #8
 80037ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f2:	223f      	movs	r2, #63	; 0x3f
 80037f4:	409a      	lsls	r2, r3
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380e:	2b00      	cmp	r3, #0
 8003810:	d07d      	beq.n	800390e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
        }
        return;
 800381a:	e078      	b.n	800390e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d01c      	beq.n	8003864 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d108      	bne.n	800384a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	2b00      	cmp	r3, #0
 800383e:	d030      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
 8003848:	e02b      	b.n	80038a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d027      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
 800385a:	e022      	b.n	80038a2 <HAL_DMA_IRQHandler+0x29e>
 800385c:	20000030 	.word	0x20000030
 8003860:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10f      	bne.n	8003892 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0210 	bic.w	r2, r2, #16
 8003880:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d032      	beq.n	8003910 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d022      	beq.n	80038fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2205      	movs	r2, #5
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3301      	adds	r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d307      	bcc.n	80038ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f2      	bne.n	80038ce <HAL_DMA_IRQHandler+0x2ca>
 80038e8:	e000      	b.n	80038ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
 800390c:	e000      	b.n	8003910 <HAL_DMA_IRQHandler+0x30c>
        return;
 800390e:	bf00      	nop
    }
  }
}
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop

08003918 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003934:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d108      	bne.n	8003958 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003956:	e007      	b.n	8003968 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	3b10      	subs	r3, #16
 8003984:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <DMA_CalcBaseAndBitshift+0x60>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800398e:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d908      	bls.n	80039b4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <DMA_CalcBaseAndBitshift+0x68>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	1d1a      	adds	r2, r3, #4
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	659a      	str	r2, [r3, #88]	; 0x58
 80039b2:	e006      	b.n	80039c2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <DMA_CalcBaseAndBitshift+0x68>)
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	aaaaaaab 	.word	0xaaaaaaab
 80039d8:	0800923c 	.word	0x0800923c
 80039dc:	fffffc00 	.word	0xfffffc00

080039e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11f      	bne.n	8003a3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d855      	bhi.n	8003aac <DMA_CheckFifoParam+0xcc>
 8003a00:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <DMA_CheckFifoParam+0x28>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a2b 	.word	0x08003a2b
 8003a10:	08003a19 	.word	0x08003a19
 8003a14:	08003aad 	.word	0x08003aad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d045      	beq.n	8003ab0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a28:	e042      	b.n	8003ab0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a32:	d13f      	bne.n	8003ab4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a38:	e03c      	b.n	8003ab4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a42:	d121      	bne.n	8003a88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d836      	bhi.n	8003ab8 <DMA_CheckFifoParam+0xd8>
 8003a4a:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <DMA_CheckFifoParam+0x70>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a61 	.word	0x08003a61
 8003a54:	08003a67 	.word	0x08003a67
 8003a58:	08003a61 	.word	0x08003a61
 8003a5c:	08003a79 	.word	0x08003a79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
      break;
 8003a64:	e02f      	b.n	8003ac6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d024      	beq.n	8003abc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a76:	e021      	b.n	8003abc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a80:	d11e      	bne.n	8003ac0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a86:	e01b      	b.n	8003ac0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d902      	bls.n	8003a94 <DMA_CheckFifoParam+0xb4>
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d003      	beq.n	8003a9a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a92:	e018      	b.n	8003ac6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      break;
 8003a98:	e015      	b.n	8003ac6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00e      	beq.n	8003ac4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8003aaa:	e00b      	b.n	8003ac4 <DMA_CheckFifoParam+0xe4>
      break;
 8003aac:	bf00      	nop
 8003aae:	e00a      	b.n	8003ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ab0:	bf00      	nop
 8003ab2:	e008      	b.n	8003ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ab4:	bf00      	nop
 8003ab6:	e006      	b.n	8003ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ab8:	bf00      	nop
 8003aba:	e004      	b.n	8003ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8003abc:	bf00      	nop
 8003abe:	e002      	b.n	8003ac6 <DMA_CheckFifoParam+0xe6>
      break;   
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ac4:	bf00      	nop
    }
  } 
  
  return status; 
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003ae4:	4ba9      	ldr	r3, [pc, #676]	; (8003d8c <HAL_ETH_Init+0x2b8>)
 8003ae6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e183      	b.n	8003e02 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd fc1c 	bl	800134c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b14:	4b9e      	ldr	r3, [pc, #632]	; (8003d90 <HAL_ETH_Init+0x2bc>)
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	4a9d      	ldr	r2, [pc, #628]	; (8003d90 <HAL_ETH_Init+0x2bc>)
 8003b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b1e:	6453      	str	r3, [r2, #68]	; 0x44
 8003b20:	4b9b      	ldr	r3, [pc, #620]	; (8003d90 <HAL_ETH_Init+0x2bc>)
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003b2c:	4b99      	ldr	r3, [pc, #612]	; (8003d94 <HAL_ETH_Init+0x2c0>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a98      	ldr	r2, [pc, #608]	; (8003d94 <HAL_ETH_Init+0x2c0>)
 8003b32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b36:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003b38:	4b96      	ldr	r3, [pc, #600]	; (8003d94 <HAL_ETH_Init+0x2c0>)
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4994      	ldr	r1, [pc, #592]	; (8003d94 <HAL_ETH_Init+0x2c0>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b5e:	f7fe fe09 	bl	8002774 <HAL_GetTick>
 8003b62:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003b64:	e011      	b.n	8003b8a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003b66:	f7fe fe05 	bl	8002774 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b74:	d909      	bls.n	8003b8a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2203      	movs	r2, #3
 8003b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e13b      	b.n	8003e02 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e4      	bne.n	8003b66 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f023 031c 	bic.w	r3, r3, #28
 8003baa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003bac:	f001 fb3e 	bl	800522c <HAL_RCC_GetHCLKFreq>
 8003bb0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	4a78      	ldr	r2, [pc, #480]	; (8003d98 <HAL_ETH_Init+0x2c4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d908      	bls.n	8003bcc <HAL_ETH_Init+0xf8>
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	4a77      	ldr	r2, [pc, #476]	; (8003d9c <HAL_ETH_Init+0x2c8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d804      	bhi.n	8003bcc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f043 0308 	orr.w	r3, r3, #8
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	e027      	b.n	8003c1c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	4a73      	ldr	r2, [pc, #460]	; (8003d9c <HAL_ETH_Init+0x2c8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d908      	bls.n	8003be6 <HAL_ETH_Init+0x112>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	4a72      	ldr	r2, [pc, #456]	; (8003da0 <HAL_ETH_Init+0x2cc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d804      	bhi.n	8003be6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f043 030c 	orr.w	r3, r3, #12
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	e01a      	b.n	8003c1c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	4a6d      	ldr	r2, [pc, #436]	; (8003da0 <HAL_ETH_Init+0x2cc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d903      	bls.n	8003bf6 <HAL_ETH_Init+0x122>
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	4a6c      	ldr	r2, [pc, #432]	; (8003da4 <HAL_ETH_Init+0x2d0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d911      	bls.n	8003c1a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	4a6a      	ldr	r2, [pc, #424]	; (8003da4 <HAL_ETH_Init+0x2d0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d908      	bls.n	8003c10 <HAL_ETH_Init+0x13c>
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4a69      	ldr	r2, [pc, #420]	; (8003da8 <HAL_ETH_Init+0x2d4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d804      	bhi.n	8003c10 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	e005      	b.n	8003c1c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f043 0310 	orr.w	r3, r3, #16
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	e000      	b.n	8003c1c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003c1a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003c24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c28:	2100      	movs	r1, #0
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f956 	bl	8003edc <HAL_ETH_WritePHYRegister>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00b      	beq.n	8003c4e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003c3a:	6939      	ldr	r1, [r7, #16]
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f9b3 	bl	8003fa8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e0d9      	b.n	8003e02 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003c4e:	20ff      	movs	r0, #255	; 0xff
 8003c50:	f7fe fd9c 	bl	800278c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 80a7 	beq.w	8003dac <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c5e:	f7fe fd89 	bl	8002774 <HAL_GetTick>
 8003c62:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f8cd 	bl	8003e0c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003c72:	f7fe fd7f 	bl	8002774 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d90f      	bls.n	8003ca4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003c88:	6939      	ldr	r1, [r7, #16]
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f98c 	bl	8003fa8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e0ae      	b.n	8003e02 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0da      	beq.n	8003c64 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003cae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f911 	bl	8003edc <HAL_ETH_WritePHYRegister>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003cc4:	6939      	ldr	r1, [r7, #16]
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f96e 	bl	8003fa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e094      	b.n	8003e02 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd8:	f7fe fd4c 	bl	8002774 <HAL_GetTick>
 8003cdc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003cde:	f107 030c 	add.w	r3, r7, #12
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f890 	bl	8003e0c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003cec:	f7fe fd42 	bl	8002774 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d90f      	bls.n	8003d1e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003d02:	6939      	ldr	r1, [r7, #16]
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f94f 	bl	8003fa8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e071      	b.n	8003e02 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0da      	beq.n	8003cde <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	211f      	movs	r1, #31
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f86b 	bl	8003e0c <HAL_ETH_ReadPHYRegister>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00b      	beq.n	8003d54 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003d40:	6939      	ldr	r1, [r7, #16]
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f930 	bl	8003fa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003d50:	2301      	movs	r3, #1
 8003d52:	e056      	b.n	8003e02 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d004      	beq.n	8003d68 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	e002      	b.n	8003d6e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	609a      	str	r2, [r3, #8]
 8003d7e:	e037      	b.n	8003df0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	e032      	b.n	8003df0 <HAL_ETH_Init+0x31c>
 8003d8a:	bf00      	nop
 8003d8c:	03938700 	.word	0x03938700
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40013800 	.word	0x40013800
 8003d98:	01312cff 	.word	0x01312cff
 8003d9c:	02160ebf 	.word	0x02160ebf
 8003da0:	039386ff 	.word	0x039386ff
 8003da4:	05f5e0ff 	.word	0x05f5e0ff
 8003da8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	08db      	lsrs	r3, r3, #3
 8003db2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f889 	bl	8003edc <HAL_ETH_WritePHYRegister>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00b      	beq.n	8003de8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003dd4:	6939      	ldr	r1, [r7, #16]
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8e6 	bl	8003fa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e00c      	b.n	8003e02 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003de8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003dec:	f7fe fcce 	bl	800278c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003df0:	6939      	ldr	r1, [r7, #16]
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f8d8 	bl	8003fa8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop

08003e0c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	460b      	mov	r3, r1
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b82      	cmp	r3, #130	; 0x82
 8003e2c:	d101      	bne.n	8003e32 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e050      	b.n	8003ed4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2282      	movs	r2, #130	; 0x82
 8003e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 031c 	and.w	r3, r3, #28
 8003e48:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8a1b      	ldrh	r3, [r3, #16]
 8003e4e:	02db      	lsls	r3, r3, #11
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003e58:	897b      	ldrh	r3, [r7, #10]
 8003e5a:	019b      	lsls	r3, r3, #6
 8003e5c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 0302 	bic.w	r3, r3, #2
 8003e6c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003e7e:	f7fe fc79 	bl	8002774 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e84:	e015      	b.n	8003eb2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003e86:	f7fe fc75 	bl	8002774 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e94:	d309      	bcc.n	8003eaa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e014      	b.n	8003ed4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e4      	bne.n	8003e86 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b42      	cmp	r3, #66	; 0x42
 8003efc:	d101      	bne.n	8003f02 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
 8003f00:	e04e      	b.n	8003fa0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2242      	movs	r2, #66	; 0x42
 8003f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f003 031c 	and.w	r3, r3, #28
 8003f18:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8a1b      	ldrh	r3, [r3, #16]
 8003f1e:	02db      	lsls	r3, r3, #11
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003f28:	897b      	ldrh	r3, [r7, #10]
 8003f2a:	019b      	lsls	r3, r3, #6
 8003f2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f043 0302 	orr.w	r3, r3, #2
 8003f3c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f58:	f7fe fc0c 	bl	8002774 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f5e:	e015      	b.n	8003f8c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003f60:	f7fe fc08 	bl	8002774 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6e:	d309      	bcc.n	8003f84 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e00d      	b.n	8003fa0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e4      	bne.n	8003f60 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b0b0      	sub	sp, #192	; 0xc0
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff4:	e001      	b.n	8003ffa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ffe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004000:	2300      	movs	r3, #0
 8004002:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004004:	2300      	movs	r3, #0
 8004006:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004008:	2300      	movs	r3, #0
 800400a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800400c:	2300      	movs	r3, #0
 800400e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004010:	2300      	movs	r3, #0
 8004012:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004014:	2340      	movs	r3, #64	; 0x40
 8004016:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800401e:	2300      	movs	r3, #0
 8004020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004042:	2300      	movs	r3, #0
 8004044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004060:	2300      	movs	r3, #0
 8004062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004066:	2300      	movs	r3, #0
 8004068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800407c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004080:	4bab      	ldr	r3, [pc, #684]	; (8004330 <ETH_MACDMAConfig+0x388>)
 8004082:	4013      	ands	r3, r2
 8004084:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004088:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800408a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800408c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800408e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004090:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004094:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800409a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800409c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800409e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80040a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80040a2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80040a8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80040aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80040ac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80040ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80040b0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80040b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80040b4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80040b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80040b8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80040ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80040bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80040be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040dc:	2001      	movs	r0, #1
 80040de:	f7fe fb55 	bl	800278c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040ea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80040ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80040ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80040f0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80040f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80040f4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80040f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80040fa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80040fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004100:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004106:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004108:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800410c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004110:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004118:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800411a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004126:	2001      	movs	r0, #1
 8004128:	f7fe fb30 	bl	800278c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004134:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800413e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004148:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004154:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004158:	f64f 7341 	movw	r3, #65345	; 0xff41
 800415c:	4013      	ands	r3, r2
 800415e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004166:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004168:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800416c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800416e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004172:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004178:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800417a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800417e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004180:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004184:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004186:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004198:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80041a4:	2001      	movs	r0, #1
 80041a6:	f7fe faf1 	bl	800278c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041b2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80041b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80041b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80041ce:	2001      	movs	r0, #1
 80041d0:	f7fe fadc 	bl	800278c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041dc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80041e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80041ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041f0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80041fe:	2300      	movs	r3, #0
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004202:	2304      	movs	r3, #4
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800420c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004212:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004216:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800421c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004222:	2300      	movs	r3, #0
 8004224:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004226:	2300      	movs	r3, #0
 8004228:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004232:	4413      	add	r3, r2
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800423a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800423e:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <ETH_MACDMAConfig+0x38c>)
 8004240:	4013      	ands	r3, r2
 8004242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004246:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004248:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800424a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800424c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800424e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004250:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004252:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004254:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004256:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004258:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800425a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800425c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800425e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004262:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004266:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004268:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	f241 0318 	movw	r3, #4120	; 0x1018
 800427a:	4413      	add	r3, r2
 800427c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004280:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	f241 0318 	movw	r3, #4120	; 0x1018
 800428a:	4413      	add	r3, r2
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004292:	2001      	movs	r0, #1
 8004294:	f7fe fa7a 	bl	800278c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	f241 0318 	movw	r3, #4120	; 0x1018
 80042a0:	4413      	add	r3, r2
 80042a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042a6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80042a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80042ac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80042b0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80042b4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80042b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80042b8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80042ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042bc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80042be:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80042c2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80042cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80042e0:	2001      	movs	r0, #1
 80042e2:	f7fe fa53 	bl	800278c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042f2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d10d      	bne.n	8004318 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	f241 031c 	movw	r3, #4124	; 0x101c
 8004304:	4413      	add	r3, r2
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6811      	ldr	r1, [r2, #0]
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <ETH_MACDMAConfig+0x390>)
 800430e:	431a      	orrs	r2, r3
 8004310:	f241 031c 	movw	r3, #4124	; 0x101c
 8004314:	440b      	add	r3, r1
 8004316:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	461a      	mov	r2, r3
 800431e:	2100      	movs	r1, #0
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f80b 	bl	800433c <ETH_MACAddressConfig>
}
 8004326:	bf00      	nop
 8004328:	37c0      	adds	r7, #192	; 0xc0
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	ff20810f 	.word	0xff20810f
 8004334:	f8de3f23 	.word	0xf8de3f23
 8004338:	00010040 	.word	0x00010040

0800433c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3305      	adds	r3, #5
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	3204      	adds	r2, #4
 8004354:	7812      	ldrb	r2, [r2, #0]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <ETH_MACAddressConfig+0x68>)
 800435e:	4413      	add	r3, r2
 8004360:	461a      	mov	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3303      	adds	r3, #3
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	061a      	lsls	r2, r3, #24
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3302      	adds	r3, #2
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3301      	adds	r3, #1
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	4313      	orrs	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	7812      	ldrb	r2, [r2, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <ETH_MACAddressConfig+0x6c>)
 800438e:	4413      	add	r3, r2
 8004390:	461a      	mov	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	6013      	str	r3, [r2, #0]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40028040 	.word	0x40028040
 80043a8:	40028044 	.word	0x40028044

080043ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b089      	sub	sp, #36	; 0x24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	e175      	b.n	80046b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80043cc:	2201      	movs	r2, #1
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4013      	ands	r3, r2
 80043de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	f040 8164 	bne.w	80046b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d003      	beq.n	80043fa <HAL_GPIO_Init+0x4e>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b12      	cmp	r3, #18
 80043f8:	d123      	bne.n	8004442 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	08da      	lsrs	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3208      	adds	r2, #8
 8004402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	220f      	movs	r2, #15
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	08da      	lsrs	r2, r3, #3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3208      	adds	r2, #8
 800443c:	69b9      	ldr	r1, [r7, #24]
 800443e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	2203      	movs	r2, #3
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43db      	mvns	r3, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4013      	ands	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 0203 	and.w	r2, r3, #3
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d00b      	beq.n	8004496 <HAL_GPIO_Init+0xea>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d007      	beq.n	8004496 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800448a:	2b11      	cmp	r3, #17
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b12      	cmp	r3, #18
 8004494:	d130      	bne.n	80044f8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	2203      	movs	r2, #3
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43db      	mvns	r3, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4013      	ands	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044cc:	2201      	movs	r2, #1
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4013      	ands	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 0201 	and.w	r2, r3, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	2203      	movs	r2, #3
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80be 	beq.w	80046b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004536:	4b65      	ldr	r3, [pc, #404]	; (80046cc <HAL_GPIO_Init+0x320>)
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	4a64      	ldr	r2, [pc, #400]	; (80046cc <HAL_GPIO_Init+0x320>)
 800453c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004540:	6453      	str	r3, [r2, #68]	; 0x44
 8004542:	4b62      	ldr	r3, [pc, #392]	; (80046cc <HAL_GPIO_Init+0x320>)
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800454e:	4a60      	ldr	r2, [pc, #384]	; (80046d0 <HAL_GPIO_Init+0x324>)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	3302      	adds	r3, #2
 8004556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800455a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	220f      	movs	r2, #15
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a57      	ldr	r2, [pc, #348]	; (80046d4 <HAL_GPIO_Init+0x328>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d037      	beq.n	80045ea <HAL_GPIO_Init+0x23e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a56      	ldr	r2, [pc, #344]	; (80046d8 <HAL_GPIO_Init+0x32c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d031      	beq.n	80045e6 <HAL_GPIO_Init+0x23a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a55      	ldr	r2, [pc, #340]	; (80046dc <HAL_GPIO_Init+0x330>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d02b      	beq.n	80045e2 <HAL_GPIO_Init+0x236>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a54      	ldr	r2, [pc, #336]	; (80046e0 <HAL_GPIO_Init+0x334>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d025      	beq.n	80045de <HAL_GPIO_Init+0x232>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a53      	ldr	r2, [pc, #332]	; (80046e4 <HAL_GPIO_Init+0x338>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01f      	beq.n	80045da <HAL_GPIO_Init+0x22e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a52      	ldr	r2, [pc, #328]	; (80046e8 <HAL_GPIO_Init+0x33c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d019      	beq.n	80045d6 <HAL_GPIO_Init+0x22a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a51      	ldr	r2, [pc, #324]	; (80046ec <HAL_GPIO_Init+0x340>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d013      	beq.n	80045d2 <HAL_GPIO_Init+0x226>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a50      	ldr	r2, [pc, #320]	; (80046f0 <HAL_GPIO_Init+0x344>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00d      	beq.n	80045ce <HAL_GPIO_Init+0x222>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a4f      	ldr	r2, [pc, #316]	; (80046f4 <HAL_GPIO_Init+0x348>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <HAL_GPIO_Init+0x21e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a4e      	ldr	r2, [pc, #312]	; (80046f8 <HAL_GPIO_Init+0x34c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d101      	bne.n	80045c6 <HAL_GPIO_Init+0x21a>
 80045c2:	2309      	movs	r3, #9
 80045c4:	e012      	b.n	80045ec <HAL_GPIO_Init+0x240>
 80045c6:	230a      	movs	r3, #10
 80045c8:	e010      	b.n	80045ec <HAL_GPIO_Init+0x240>
 80045ca:	2308      	movs	r3, #8
 80045cc:	e00e      	b.n	80045ec <HAL_GPIO_Init+0x240>
 80045ce:	2307      	movs	r3, #7
 80045d0:	e00c      	b.n	80045ec <HAL_GPIO_Init+0x240>
 80045d2:	2306      	movs	r3, #6
 80045d4:	e00a      	b.n	80045ec <HAL_GPIO_Init+0x240>
 80045d6:	2305      	movs	r3, #5
 80045d8:	e008      	b.n	80045ec <HAL_GPIO_Init+0x240>
 80045da:	2304      	movs	r3, #4
 80045dc:	e006      	b.n	80045ec <HAL_GPIO_Init+0x240>
 80045de:	2303      	movs	r3, #3
 80045e0:	e004      	b.n	80045ec <HAL_GPIO_Init+0x240>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e002      	b.n	80045ec <HAL_GPIO_Init+0x240>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <HAL_GPIO_Init+0x240>
 80045ea:	2300      	movs	r3, #0
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	f002 0203 	and.w	r2, r2, #3
 80045f2:	0092      	lsls	r2, r2, #2
 80045f4:	4093      	lsls	r3, r2
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80045fc:	4934      	ldr	r1, [pc, #208]	; (80046d0 <HAL_GPIO_Init+0x324>)
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	3302      	adds	r3, #2
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800460a:	4b3c      	ldr	r3, [pc, #240]	; (80046fc <HAL_GPIO_Init+0x350>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800462e:	4a33      	ldr	r2, [pc, #204]	; (80046fc <HAL_GPIO_Init+0x350>)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004634:	4b31      	ldr	r3, [pc, #196]	; (80046fc <HAL_GPIO_Init+0x350>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	43db      	mvns	r3, r3
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004658:	4a28      	ldr	r2, [pc, #160]	; (80046fc <HAL_GPIO_Init+0x350>)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800465e:	4b27      	ldr	r3, [pc, #156]	; (80046fc <HAL_GPIO_Init+0x350>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004682:	4a1e      	ldr	r2, [pc, #120]	; (80046fc <HAL_GPIO_Init+0x350>)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004688:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <HAL_GPIO_Init+0x350>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	43db      	mvns	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046ac:	4a13      	ldr	r2, [pc, #76]	; (80046fc <HAL_GPIO_Init+0x350>)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3301      	adds	r3, #1
 80046b6:	61fb      	str	r3, [r7, #28]
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	2b0f      	cmp	r3, #15
 80046bc:	f67f ae86 	bls.w	80043cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80046c0:	bf00      	nop
 80046c2:	3724      	adds	r7, #36	; 0x24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40013800 	.word	0x40013800
 80046d4:	40020000 	.word	0x40020000
 80046d8:	40020400 	.word	0x40020400
 80046dc:	40020800 	.word	0x40020800
 80046e0:	40020c00 	.word	0x40020c00
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40021400 	.word	0x40021400
 80046ec:	40021800 	.word	0x40021800
 80046f0:	40021c00 	.word	0x40021c00
 80046f4:	40022000 	.word	0x40022000
 80046f8:	40022400 	.word	0x40022400
 80046fc:	40013c00 	.word	0x40013c00

08004700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	807b      	strh	r3, [r7, #2]
 800470c:	4613      	mov	r3, r2
 800470e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004710:	787b      	ldrb	r3, [r7, #1]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004716:	887a      	ldrh	r2, [r7, #2]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800471c:	e003      	b.n	8004726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800471e:	887b      	ldrh	r3, [r7, #2]
 8004720:	041a      	lsls	r2, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	619a      	str	r2, [r3, #24]
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004732:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004734:	b08f      	sub	sp, #60	; 0x3c
 8004736:	af0a      	add	r7, sp, #40	; 0x28
 8004738:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e10a      	b.n	800495a <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fd ff35 	bl	80025c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2203      	movs	r2, #3
 8004762:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f002 fe84 	bl	8007478 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	687e      	ldr	r6, [r7, #4]
 8004778:	466d      	mov	r5, sp
 800477a:	f106 0410 	add.w	r4, r6, #16
 800477e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004786:	e894 0003 	ldmia.w	r4, {r0, r1}
 800478a:	e885 0003 	stmia.w	r5, {r0, r1}
 800478e:	1d33      	adds	r3, r6, #4
 8004790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004792:	6838      	ldr	r0, [r7, #0]
 8004794:	f002 fe18 	bl	80073c8 <USB_CoreInit>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0d7      	b.n	800495a <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2100      	movs	r1, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f002 fe72 	bl	800749a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
 80047ba:	e04a      	b.n	8004852 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047bc:	7bfa      	ldrb	r2, [r7, #15]
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	333d      	adds	r3, #61	; 0x3d
 80047cc:	2201      	movs	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	333c      	adds	r3, #60	; 0x3c
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047e4:	7bfa      	ldrb	r2, [r7, #15]
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	b298      	uxth	r0, r3
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	3342      	adds	r3, #66	; 0x42
 80047f8:	4602      	mov	r2, r0
 80047fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047fc:	7bfa      	ldrb	r2, [r7, #15]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	333f      	adds	r3, #63	; 0x3f
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004810:	7bfa      	ldrb	r2, [r7, #15]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	3344      	adds	r3, #68	; 0x44
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004824:	7bfa      	ldrb	r2, [r7, #15]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	3348      	adds	r3, #72	; 0x48
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	3350      	adds	r3, #80	; 0x50
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	3301      	adds	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
 8004852:	7bfa      	ldrb	r2, [r7, #15]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	429a      	cmp	r2, r3
 800485a:	d3af      	bcc.n	80047bc <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800485c:	2300      	movs	r3, #0
 800485e:	73fb      	strb	r3, [r7, #15]
 8004860:	e044      	b.n	80048ec <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004862:	7bfa      	ldrb	r2, [r7, #15]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004878:	7bfa      	ldrb	r2, [r7, #15]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800488a:	7bfa      	ldrb	r2, [r7, #15]
 800488c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800488e:	7bfa      	ldrb	r2, [r7, #15]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80048a0:	2200      	movs	r2, #0
 80048a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048a4:	7bfa      	ldrb	r2, [r7, #15]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048d0:	7bfa      	ldrb	r2, [r7, #15]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	3301      	adds	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
 80048ec:	7bfa      	ldrb	r2, [r7, #15]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d3b5      	bcc.n	8004862 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	687e      	ldr	r6, [r7, #4]
 80048fe:	466d      	mov	r5, sp
 8004900:	f106 0410 	add.w	r4, r6, #16
 8004904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800490a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800490c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004910:	e885 0003 	stmia.w	r5, {r0, r1}
 8004914:	1d33      	adds	r3, r6, #4
 8004916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004918:	6838      	ldr	r0, [r7, #0]
 800491a:	f002 fde9 	bl	80074f0 <USB_DevInit>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e014      	b.n	800495a <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	2b01      	cmp	r3, #1
 8004946:	d102      	bne.n	800494e <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f80b 	bl	8004964 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f002 ffa9 	bl	80078aa <USB_DevDisconnect>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004964 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8004994:	4313      	orrs	r3, r2
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	10000003 	.word	0x10000003

080049ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ba:	6013      	str	r3, [r2, #0]
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40007000 	.word	0x40007000

080049cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80049d4:	2300      	movs	r3, #0
 80049d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e25c      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8087 	beq.w	8004afe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049f0:	4b96      	ldr	r3, [pc, #600]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d00c      	beq.n	8004a16 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fc:	4b93      	ldr	r3, [pc, #588]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d112      	bne.n	8004a2e <HAL_RCC_OscConfig+0x62>
 8004a08:	4b90      	ldr	r3, [pc, #576]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a14:	d10b      	bne.n	8004a2e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a16:	4b8d      	ldr	r3, [pc, #564]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d06c      	beq.n	8004afc <HAL_RCC_OscConfig+0x130>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d168      	bne.n	8004afc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e236      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a36:	d106      	bne.n	8004a46 <HAL_RCC_OscConfig+0x7a>
 8004a38:	4b84      	ldr	r3, [pc, #528]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a83      	ldr	r2, [pc, #524]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	e02e      	b.n	8004aa4 <HAL_RCC_OscConfig+0xd8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x9c>
 8004a4e:	4b7f      	ldr	r3, [pc, #508]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a7e      	ldr	r2, [pc, #504]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b7c      	ldr	r3, [pc, #496]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a7b      	ldr	r2, [pc, #492]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e01d      	b.n	8004aa4 <HAL_RCC_OscConfig+0xd8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCC_OscConfig+0xc0>
 8004a72:	4b76      	ldr	r3, [pc, #472]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a75      	ldr	r2, [pc, #468]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	4b73      	ldr	r3, [pc, #460]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a72      	ldr	r2, [pc, #456]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e00b      	b.n	8004aa4 <HAL_RCC_OscConfig+0xd8>
 8004a8c:	4b6f      	ldr	r3, [pc, #444]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6e      	ldr	r2, [pc, #440]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	4b6c      	ldr	r3, [pc, #432]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a6b      	ldr	r2, [pc, #428]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d013      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fd fe62 	bl	8002774 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab4:	f7fd fe5e 	bl	8002774 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	; 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e1ea      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b61      	ldr	r3, [pc, #388]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xe8>
 8004ad2:	e014      	b.n	8004afe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fd fe4e 	bl	8002774 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004adc:	f7fd fe4a 	bl	8002774 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e1d6      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aee:	4b57      	ldr	r3, [pc, #348]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x110>
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d069      	beq.n	8004bde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b0a:	4b50      	ldr	r3, [pc, #320]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b16:	4b4d      	ldr	r3, [pc, #308]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d11c      	bne.n	8004b5c <HAL_RCC_OscConfig+0x190>
 8004b22:	4b4a      	ldr	r3, [pc, #296]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d116      	bne.n	8004b5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2e:	4b47      	ldr	r3, [pc, #284]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <HAL_RCC_OscConfig+0x17a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d001      	beq.n	8004b46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e1aa      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b46:	4b41      	ldr	r3, [pc, #260]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	493d      	ldr	r1, [pc, #244]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5a:	e040      	b.n	8004bde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d023      	beq.n	8004bac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b64:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a38      	ldr	r2, [pc, #224]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fd fe00 	bl	8002774 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b78:	f7fd fdfc 	bl	8002774 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e188      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8a:	4b30      	ldr	r3, [pc, #192]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	4b2d      	ldr	r3, [pc, #180]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4929      	ldr	r1, [pc, #164]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
 8004baa:	e018      	b.n	8004bde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bac:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a26      	ldr	r2, [pc, #152]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fd fddc 	bl	8002774 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc0:	f7fd fdd8 	bl	8002774 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e164      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	4b1e      	ldr	r3, [pc, #120]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d038      	beq.n	8004c5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d019      	beq.n	8004c26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf2:	4b16      	ldr	r3, [pc, #88]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf6:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfe:	f7fd fdb9 	bl	8002774 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c06:	f7fd fdb5 	bl	8002774 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e141      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c18:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x23a>
 8004c24:	e01a      	b.n	8004c5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c26:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2a:	4a08      	ldr	r2, [pc, #32]	; (8004c4c <HAL_RCC_OscConfig+0x280>)
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c32:	f7fd fd9f 	bl	8002774 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	e00a      	b.n	8004c50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c3a:	f7fd fd9b 	bl	8002774 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d903      	bls.n	8004c50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e127      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
 8004c4c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c50:	4b94      	ldr	r3, [pc, #592]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1ee      	bne.n	8004c3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80a4 	beq.w	8004db2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c6a:	4b8e      	ldr	r3, [pc, #568]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10d      	bne.n	8004c92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c76:	4b8b      	ldr	r3, [pc, #556]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	4a8a      	ldr	r2, [pc, #552]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c80:	6413      	str	r3, [r2, #64]	; 0x40
 8004c82:	4b88      	ldr	r3, [pc, #544]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c92:	4b85      	ldr	r3, [pc, #532]	; (8004ea8 <HAL_RCC_OscConfig+0x4dc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d118      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004c9e:	4b82      	ldr	r3, [pc, #520]	; (8004ea8 <HAL_RCC_OscConfig+0x4dc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a81      	ldr	r2, [pc, #516]	; (8004ea8 <HAL_RCC_OscConfig+0x4dc>)
 8004ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004caa:	f7fd fd63 	bl	8002774 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cb2:	f7fd fd5f 	bl	8002774 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b64      	cmp	r3, #100	; 0x64
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e0eb      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc4:	4b78      	ldr	r3, [pc, #480]	; (8004ea8 <HAL_RCC_OscConfig+0x4dc>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d106      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x31a>
 8004cd8:	4b72      	ldr	r3, [pc, #456]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	4a71      	ldr	r2, [pc, #452]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce4:	e02d      	b.n	8004d42 <HAL_RCC_OscConfig+0x376>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x33c>
 8004cee:	4b6d      	ldr	r3, [pc, #436]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf2:	4a6c      	ldr	r2, [pc, #432]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cfa:	4b6a      	ldr	r3, [pc, #424]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfe:	4a69      	ldr	r2, [pc, #420]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004d00:	f023 0304 	bic.w	r3, r3, #4
 8004d04:	6713      	str	r3, [r2, #112]	; 0x70
 8004d06:	e01c      	b.n	8004d42 <HAL_RCC_OscConfig+0x376>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b05      	cmp	r3, #5
 8004d0e:	d10c      	bne.n	8004d2a <HAL_RCC_OscConfig+0x35e>
 8004d10:	4b64      	ldr	r3, [pc, #400]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	4a63      	ldr	r2, [pc, #396]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004d16:	f043 0304 	orr.w	r3, r3, #4
 8004d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1c:	4b61      	ldr	r3, [pc, #388]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	4a60      	ldr	r2, [pc, #384]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	6713      	str	r3, [r2, #112]	; 0x70
 8004d28:	e00b      	b.n	8004d42 <HAL_RCC_OscConfig+0x376>
 8004d2a:	4b5e      	ldr	r3, [pc, #376]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	4a5d      	ldr	r2, [pc, #372]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004d30:	f023 0301 	bic.w	r3, r3, #1
 8004d34:	6713      	str	r3, [r2, #112]	; 0x70
 8004d36:	4b5b      	ldr	r3, [pc, #364]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a5a      	ldr	r2, [pc, #360]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004d3c:	f023 0304 	bic.w	r3, r3, #4
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d015      	beq.n	8004d76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4a:	f7fd fd13 	bl	8002774 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d50:	e00a      	b.n	8004d68 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d52:	f7fd fd0f 	bl	8002774 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e099      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d68:	4b4e      	ldr	r3, [pc, #312]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0ee      	beq.n	8004d52 <HAL_RCC_OscConfig+0x386>
 8004d74:	e014      	b.n	8004da0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d76:	f7fd fcfd 	bl	8002774 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7c:	e00a      	b.n	8004d94 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7e:	f7fd fcf9 	bl	8002774 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e083      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d94:	4b43      	ldr	r3, [pc, #268]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1ee      	bne.n	8004d7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d105      	bne.n	8004db2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da6:	4b3f      	ldr	r3, [pc, #252]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	4a3e      	ldr	r2, [pc, #248]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d06f      	beq.n	8004e9a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dba:	4b3a      	ldr	r3, [pc, #232]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d067      	beq.n	8004e96 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d149      	bne.n	8004e62 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dce:	4b35      	ldr	r3, [pc, #212]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a34      	ldr	r2, [pc, #208]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004dd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fd fccb 	bl	8002774 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de2:	f7fd fcc7 	bl	8002774 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e053      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df4:	4b2b      	ldr	r3, [pc, #172]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f0      	bne.n	8004de2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	019b      	lsls	r3, r3, #6
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	041b      	lsls	r3, r3, #16
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	061b      	lsls	r3, r3, #24
 8004e24:	4313      	orrs	r3, r2
 8004e26:	4a1f      	ldr	r2, [pc, #124]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004e28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e2c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1c      	ldr	r2, [pc, #112]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004e34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3a:	f7fd fc9b 	bl	8002774 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e42:	f7fd fc97 	bl	8002774 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e023      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e54:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f0      	beq.n	8004e42 <HAL_RCC_OscConfig+0x476>
 8004e60:	e01b      	b.n	8004e9a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e62:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a0f      	ldr	r2, [pc, #60]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6e:	f7fd fc81 	bl	8002774 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e76:	f7fd fc7d 	bl	8002774 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e009      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_RCC_OscConfig+0x4d8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f0      	bne.n	8004e76 <HAL_RCC_OscConfig+0x4aa>
 8004e94:	e001      	b.n	8004e9a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40007000 	.word	0x40007000

08004eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0ce      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b69      	ldr	r3, [pc, #420]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d910      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b66      	ldr	r3, [pc, #408]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 020f 	bic.w	r2, r3, #15
 8004eda:	4964      	ldr	r1, [pc, #400]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b62      	ldr	r3, [pc, #392]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0b6      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d020      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f0c:	4b58      	ldr	r3, [pc, #352]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a57      	ldr	r2, [pc, #348]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f24:	4b52      	ldr	r3, [pc, #328]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4a51      	ldr	r2, [pc, #324]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f30:	4b4f      	ldr	r3, [pc, #316]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	494c      	ldr	r1, [pc, #304]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d040      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	4b46      	ldr	r3, [pc, #280]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d115      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e07d      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6e:	4b40      	ldr	r3, [pc, #256]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e071      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7e:	4b3c      	ldr	r3, [pc, #240]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e069      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f8e:	4b38      	ldr	r3, [pc, #224]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4935      	ldr	r1, [pc, #212]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa0:	f7fd fbe8 	bl	8002774 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7fd fbe4 	bl	8002774 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e051      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	4b2c      	ldr	r3, [pc, #176]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 020c 	and.w	r2, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d1eb      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b26      	ldr	r3, [pc, #152]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d210      	bcs.n	8005000 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b23      	ldr	r3, [pc, #140]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 020f 	bic.w	r2, r3, #15
 8004fe6:	4921      	ldr	r1, [pc, #132]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	4b1f      	ldr	r3, [pc, #124]	; (800506c <HAL_RCC_ClockConfig+0x1c0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e030      	b.n	8005062 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800500c:	4b18      	ldr	r3, [pc, #96]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4915      	ldr	r1, [pc, #84]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	490d      	ldr	r1, [pc, #52]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800503e:	f000 f81d 	bl	800507c <HAL_RCC_GetSysClockFreq>
 8005042:	4601      	mov	r1, r0
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <HAL_RCC_ClockConfig+0x1c4>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	4a09      	ldr	r2, [pc, #36]	; (8005074 <HAL_RCC_ClockConfig+0x1c8>)
 8005050:	5cd3      	ldrb	r3, [r2, r3]
 8005052:	fa21 f303 	lsr.w	r3, r1, r3
 8005056:	4a08      	ldr	r2, [pc, #32]	; (8005078 <HAL_RCC_ClockConfig+0x1cc>)
 8005058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800505a:	2000      	movs	r0, #0
 800505c:	f7fd fb46 	bl	80026ec <HAL_InitTick>

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40023c00 	.word	0x40023c00
 8005070:	40023800 	.word	0x40023800
 8005074:	08009224 	.word	0x08009224
 8005078:	20000030 	.word	0x20000030

0800507c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800507c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	607b      	str	r3, [r7, #4]
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	2300      	movs	r3, #0
 800508c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005092:	4b63      	ldr	r3, [pc, #396]	; (8005220 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b04      	cmp	r3, #4
 800509c:	d007      	beq.n	80050ae <HAL_RCC_GetSysClockFreq+0x32>
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d008      	beq.n	80050b4 <HAL_RCC_GetSysClockFreq+0x38>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f040 80b4 	bne.w	8005210 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a8:	4b5e      	ldr	r3, [pc, #376]	; (8005224 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050aa:	60bb      	str	r3, [r7, #8]
       break;
 80050ac:	e0b3      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050ae:	4b5e      	ldr	r3, [pc, #376]	; (8005228 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80050b0:	60bb      	str	r3, [r7, #8]
      break;
 80050b2:	e0b0      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050b4:	4b5a      	ldr	r3, [pc, #360]	; (8005220 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80050be:	4b58      	ldr	r3, [pc, #352]	; (8005220 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d04a      	beq.n	8005160 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ca:	4b55      	ldr	r3, [pc, #340]	; (8005220 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	099b      	lsrs	r3, r3, #6
 80050d0:	f04f 0400 	mov.w	r4, #0
 80050d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	ea03 0501 	and.w	r5, r3, r1
 80050e0:	ea04 0602 	and.w	r6, r4, r2
 80050e4:	4629      	mov	r1, r5
 80050e6:	4632      	mov	r2, r6
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	f04f 0400 	mov.w	r4, #0
 80050f0:	0154      	lsls	r4, r2, #5
 80050f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050f6:	014b      	lsls	r3, r1, #5
 80050f8:	4619      	mov	r1, r3
 80050fa:	4622      	mov	r2, r4
 80050fc:	1b49      	subs	r1, r1, r5
 80050fe:	eb62 0206 	sbc.w	r2, r2, r6
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	f04f 0400 	mov.w	r4, #0
 800510a:	0194      	lsls	r4, r2, #6
 800510c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005110:	018b      	lsls	r3, r1, #6
 8005112:	1a5b      	subs	r3, r3, r1
 8005114:	eb64 0402 	sbc.w	r4, r4, r2
 8005118:	f04f 0100 	mov.w	r1, #0
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	00e2      	lsls	r2, r4, #3
 8005122:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005126:	00d9      	lsls	r1, r3, #3
 8005128:	460b      	mov	r3, r1
 800512a:	4614      	mov	r4, r2
 800512c:	195b      	adds	r3, r3, r5
 800512e:	eb44 0406 	adc.w	r4, r4, r6
 8005132:	f04f 0100 	mov.w	r1, #0
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	0262      	lsls	r2, r4, #9
 800513c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005140:	0259      	lsls	r1, r3, #9
 8005142:	460b      	mov	r3, r1
 8005144:	4614      	mov	r4, r2
 8005146:	4618      	mov	r0, r3
 8005148:	4621      	mov	r1, r4
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f04f 0400 	mov.w	r4, #0
 8005150:	461a      	mov	r2, r3
 8005152:	4623      	mov	r3, r4
 8005154:	f7fb fd32 	bl	8000bbc <__aeabi_uldivmod>
 8005158:	4603      	mov	r3, r0
 800515a:	460c      	mov	r4, r1
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	e049      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005160:	4b2f      	ldr	r3, [pc, #188]	; (8005220 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	099b      	lsrs	r3, r3, #6
 8005166:	f04f 0400 	mov.w	r4, #0
 800516a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	ea03 0501 	and.w	r5, r3, r1
 8005176:	ea04 0602 	and.w	r6, r4, r2
 800517a:	4629      	mov	r1, r5
 800517c:	4632      	mov	r2, r6
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	f04f 0400 	mov.w	r4, #0
 8005186:	0154      	lsls	r4, r2, #5
 8005188:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800518c:	014b      	lsls	r3, r1, #5
 800518e:	4619      	mov	r1, r3
 8005190:	4622      	mov	r2, r4
 8005192:	1b49      	subs	r1, r1, r5
 8005194:	eb62 0206 	sbc.w	r2, r2, r6
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	f04f 0400 	mov.w	r4, #0
 80051a0:	0194      	lsls	r4, r2, #6
 80051a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051a6:	018b      	lsls	r3, r1, #6
 80051a8:	1a5b      	subs	r3, r3, r1
 80051aa:	eb64 0402 	sbc.w	r4, r4, r2
 80051ae:	f04f 0100 	mov.w	r1, #0
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	00e2      	lsls	r2, r4, #3
 80051b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051bc:	00d9      	lsls	r1, r3, #3
 80051be:	460b      	mov	r3, r1
 80051c0:	4614      	mov	r4, r2
 80051c2:	195b      	adds	r3, r3, r5
 80051c4:	eb44 0406 	adc.w	r4, r4, r6
 80051c8:	f04f 0100 	mov.w	r1, #0
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	02a2      	lsls	r2, r4, #10
 80051d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051d6:	0299      	lsls	r1, r3, #10
 80051d8:	460b      	mov	r3, r1
 80051da:	4614      	mov	r4, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	4621      	mov	r1, r4
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f04f 0400 	mov.w	r4, #0
 80051e6:	461a      	mov	r2, r3
 80051e8:	4623      	mov	r3, r4
 80051ea:	f7fb fce7 	bl	8000bbc <__aeabi_uldivmod>
 80051ee:	4603      	mov	r3, r0
 80051f0:	460c      	mov	r4, r1
 80051f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	3301      	adds	r3, #1
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	60bb      	str	r3, [r7, #8]
      break;
 800520e:	e002      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005212:	60bb      	str	r3, [r7, #8]
      break;
 8005214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005216:	68bb      	ldr	r3, [r7, #8]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005220:	40023800 	.word	0x40023800
 8005224:	00f42400 	.word	0x00f42400
 8005228:	007a1200 	.word	0x007a1200

0800522c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005230:	4b03      	ldr	r3, [pc, #12]	; (8005240 <HAL_RCC_GetHCLKFreq+0x14>)
 8005232:	681b      	ldr	r3, [r3, #0]
}
 8005234:	4618      	mov	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	20000030 	.word	0x20000030

08005244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005248:	f7ff fff0 	bl	800522c <HAL_RCC_GetHCLKFreq>
 800524c:	4601      	mov	r1, r0
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	0a9b      	lsrs	r3, r3, #10
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4a03      	ldr	r2, [pc, #12]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800525a:	5cd3      	ldrb	r3, [r2, r3]
 800525c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40023800 	.word	0x40023800
 8005268:	08009234 	.word	0x08009234

0800526c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005270:	f7ff ffdc 	bl	800522c <HAL_RCC_GetHCLKFreq>
 8005274:	4601      	mov	r1, r0
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	0b5b      	lsrs	r3, r3, #13
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	4a03      	ldr	r2, [pc, #12]	; (8005290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005282:	5cd3      	ldrb	r3, [r2, r3]
 8005284:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40023800 	.word	0x40023800
 8005290:	08009234 	.word	0x08009234

08005294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d012      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052bc:	4b69      	ldr	r3, [pc, #420]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4a68      	ldr	r2, [pc, #416]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80052c6:	6093      	str	r3, [r2, #8]
 80052c8:	4b66      	ldr	r3, [pc, #408]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d0:	4964      	ldr	r1, [pc, #400]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80052de:	2301      	movs	r3, #1
 80052e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d017      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052ee:	4b5d      	ldr	r3, [pc, #372]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fc:	4959      	ldr	r1, [pc, #356]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800530c:	d101      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800530e:	2301      	movs	r3, #1
 8005310:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800531a:	2301      	movs	r3, #1
 800531c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d017      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800532a:	4b4e      	ldr	r3, [pc, #312]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005330:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	494a      	ldr	r1, [pc, #296]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005348:	d101      	bne.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800534a:	2301      	movs	r3, #1
 800534c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005356:	2301      	movs	r3, #1
 8005358:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005366:	2301      	movs	r3, #1
 8005368:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 808b 	beq.w	800548e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005378:	4b3a      	ldr	r3, [pc, #232]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	4a39      	ldr	r2, [pc, #228]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005382:	6413      	str	r3, [r2, #64]	; 0x40
 8005384:	4b37      	ldr	r3, [pc, #220]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005390:	4b35      	ldr	r3, [pc, #212]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a34      	ldr	r2, [pc, #208]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539c:	f7fd f9ea 	bl	8002774 <HAL_GetTick>
 80053a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a4:	f7fd f9e6 	bl	8002774 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e355      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053b6:	4b2c      	ldr	r3, [pc, #176]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053c2:	4b28      	ldr	r3, [pc, #160]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d035      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d02e      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053e0:	4b20      	ldr	r3, [pc, #128]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053ea:	4b1e      	ldr	r3, [pc, #120]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053f6:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fa:	4a1a      	ldr	r2, [pc, #104]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005400:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005402:	4a18      	ldr	r2, [pc, #96]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005408:	4b16      	ldr	r3, [pc, #88]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	d114      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7fd f9ae 	bl	8002774 <HAL_GetTick>
 8005418:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541a:	e00a      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800541c:	f7fd f9aa 	bl	8002774 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	f241 3288 	movw	r2, #5000	; 0x1388
 800542a:	4293      	cmp	r3, r2
 800542c:	d901      	bls.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e317      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0ee      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800544a:	d111      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005458:	4b04      	ldr	r3, [pc, #16]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800545a:	400b      	ands	r3, r1
 800545c:	4901      	ldr	r1, [pc, #4]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
 8005462:	e00b      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005464:	40023800 	.word	0x40023800
 8005468:	40007000 	.word	0x40007000
 800546c:	0ffffcff 	.word	0x0ffffcff
 8005470:	4bb0      	ldr	r3, [pc, #704]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4aaf      	ldr	r2, [pc, #700]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005476:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800547a:	6093      	str	r3, [r2, #8]
 800547c:	4bad      	ldr	r3, [pc, #692]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800547e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005488:	49aa      	ldr	r1, [pc, #680]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800548a:	4313      	orrs	r3, r2
 800548c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b00      	cmp	r3, #0
 8005498:	d010      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800549a:	4ba6      	ldr	r3, [pc, #664]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800549c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a0:	4aa4      	ldr	r2, [pc, #656]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054aa:	4ba2      	ldr	r3, [pc, #648]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	499f      	ldr	r1, [pc, #636]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054c8:	4b9a      	ldr	r3, [pc, #616]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d6:	4997      	ldr	r1, [pc, #604]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054ea:	4b92      	ldr	r3, [pc, #584]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054f8:	498e      	ldr	r1, [pc, #568]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800550c:	4b89      	ldr	r3, [pc, #548]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551a:	4986      	ldr	r1, [pc, #536]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800552e:	4b81      	ldr	r3, [pc, #516]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005534:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553c:	497d      	ldr	r1, [pc, #500]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005550:	4b78      	ldr	r3, [pc, #480]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f023 0203 	bic.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	4975      	ldr	r1, [pc, #468]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005572:	4b70      	ldr	r3, [pc, #448]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005578:	f023 020c 	bic.w	r2, r3, #12
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005580:	496c      	ldr	r1, [pc, #432]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005594:	4b67      	ldr	r3, [pc, #412]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a2:	4964      	ldr	r1, [pc, #400]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055b6:	4b5f      	ldr	r3, [pc, #380]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c4:	495b      	ldr	r1, [pc, #364]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055d8:	4b56      	ldr	r3, [pc, #344]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	4953      	ldr	r1, [pc, #332]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80055fa:	4b4e      	ldr	r3, [pc, #312]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005608:	494a      	ldr	r1, [pc, #296]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800561c:	4b45      	ldr	r3, [pc, #276]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562a:	4942      	ldr	r1, [pc, #264]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800563e:	4b3d      	ldr	r3, [pc, #244]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005644:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564c:	4939      	ldr	r1, [pc, #228]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005660:	4b34      	ldr	r3, [pc, #208]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005666:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800566e:	4931      	ldr	r1, [pc, #196]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d011      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005682:	4b2c      	ldr	r3, [pc, #176]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005688:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005690:	4928      	ldr	r1, [pc, #160]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800569c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a0:	d101      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80056a2:	2301      	movs	r3, #1
 80056a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056c2:	4b1c      	ldr	r3, [pc, #112]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d0:	4918      	ldr	r1, [pc, #96]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00b      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056e4:	4b13      	ldr	r3, [pc, #76]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056f4:	490f      	ldr	r1, [pc, #60]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d005      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800570a:	f040 80d8 	bne.w	80058be <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800570e:	4b09      	ldr	r3, [pc, #36]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a08      	ldr	r2, [pc, #32]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005714:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800571a:	f7fd f82b 	bl	8002774 <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005720:	e00a      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005722:	f7fd f827 	bl	8002774 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b64      	cmp	r3, #100	; 0x64
 800572e:	d903      	bls.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e196      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005734:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005738:	4b6c      	ldr	r3, [pc, #432]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1ee      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d021      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005754:	2b00      	cmp	r3, #0
 8005756:	d11d      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005758:	4b64      	ldr	r3, [pc, #400]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800575a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800575e:	0c1b      	lsrs	r3, r3, #16
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005766:	4b61      	ldr	r3, [pc, #388]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800576c:	0e1b      	lsrs	r3, r3, #24
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	019a      	lsls	r2, r3, #6
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	431a      	orrs	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	061b      	lsls	r3, r3, #24
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	071b      	lsls	r3, r3, #28
 800578c:	4957      	ldr	r1, [pc, #348]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x516>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d02e      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057be:	d129      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057c0:	4b4a      	ldr	r3, [pc, #296]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c6:	0c1b      	lsrs	r3, r3, #16
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057ce:	4b47      	ldr	r3, [pc, #284]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d4:	0f1b      	lsrs	r3, r3, #28
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	019a      	lsls	r2, r3, #6
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	041b      	lsls	r3, r3, #16
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	061b      	lsls	r3, r3, #24
 80057ee:	431a      	orrs	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	071b      	lsls	r3, r3, #28
 80057f4:	493d      	ldr	r1, [pc, #244]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80057fc:	4b3b      	ldr	r3, [pc, #236]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80057fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005802:	f023 021f 	bic.w	r2, r3, #31
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	3b01      	subs	r3, #1
 800580c:	4937      	ldr	r1, [pc, #220]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01d      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005820:	4b32      	ldr	r3, [pc, #200]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005826:	0e1b      	lsrs	r3, r3, #24
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800582e:	4b2f      	ldr	r3, [pc, #188]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005834:	0f1b      	lsrs	r3, r3, #28
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	019a      	lsls	r2, r3, #6
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	041b      	lsls	r3, r3, #16
 8005848:	431a      	orrs	r2, r3
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	061b      	lsls	r3, r3, #24
 800584e:	431a      	orrs	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	071b      	lsls	r3, r3, #28
 8005854:	4925      	ldr	r1, [pc, #148]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d011      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	019a      	lsls	r2, r3, #6
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	061b      	lsls	r3, r3, #24
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	071b      	lsls	r3, r3, #28
 8005884:	4919      	ldr	r1, [pc, #100]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800588c:	4b17      	ldr	r3, [pc, #92]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a16      	ldr	r2, [pc, #88]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005898:	f7fc ff6c 	bl	8002774 <HAL_GetTick>
 800589c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058a0:	f7fc ff68 	bl	8002774 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	; 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e0d7      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058b2:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f0      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	f040 80cd 	bne.w	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058c6:	4b09      	ldr	r3, [pc, #36]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a08      	ldr	r2, [pc, #32]	; (80058ec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80058cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d2:	f7fc ff4f 	bl	8002774 <HAL_GetTick>
 80058d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058da:	f7fc ff4b 	bl	8002774 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b64      	cmp	r3, #100	; 0x64
 80058e6:	d903      	bls.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e0ba      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80058ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058f0:	4b5e      	ldr	r3, [pc, #376]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fc:	d0ed      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800591a:	2b00      	cmp	r3, #0
 800591c:	d02e      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d12a      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005926:	4b51      	ldr	r3, [pc, #324]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592c:	0c1b      	lsrs	r3, r3, #16
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005934:	4b4d      	ldr	r3, [pc, #308]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	0f1b      	lsrs	r3, r3, #28
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	019a      	lsls	r2, r3, #6
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	061b      	lsls	r3, r3, #24
 8005954:	431a      	orrs	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	071b      	lsls	r3, r3, #28
 800595a:	4944      	ldr	r1, [pc, #272]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005962:	4b42      	ldr	r3, [pc, #264]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005968:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	3b01      	subs	r3, #1
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	493d      	ldr	r1, [pc, #244]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d022      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005990:	d11d      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005992:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005998:	0e1b      	lsrs	r3, r3, #24
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059a0:	4b32      	ldr	r3, [pc, #200]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	0f1b      	lsrs	r3, r3, #28
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	019a      	lsls	r2, r3, #6
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	431a      	orrs	r2, r3
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	061b      	lsls	r3, r3, #24
 80059c0:	431a      	orrs	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	071b      	lsls	r3, r3, #28
 80059c6:	4929      	ldr	r1, [pc, #164]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d028      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059da:	4b24      	ldr	r3, [pc, #144]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	0e1b      	lsrs	r3, r3, #24
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059e8:	4b20      	ldr	r3, [pc, #128]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ee:	0c1b      	lsrs	r3, r3, #16
 80059f0:	f003 0303 	and.w	r3, r3, #3
 80059f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	019a      	lsls	r2, r3, #6
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	041b      	lsls	r3, r3, #16
 8005a00:	431a      	orrs	r2, r3
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	061b      	lsls	r3, r3, #24
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	071b      	lsls	r3, r3, #28
 8005a0e:	4917      	ldr	r1, [pc, #92]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a16:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	4911      	ldr	r1, [pc, #68]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0e      	ldr	r2, [pc, #56]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a38:	f7fc fe9c 	bl	8002774 <HAL_GetTick>
 8005a3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a40:	f7fc fe98 	bl	8002774 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b64      	cmp	r3, #100	; 0x64
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e007      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a52:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5e:	d1ef      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40023800 	.word	0x40023800

08005a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e01d      	b.n	8005abe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fc fc4c 	bl	8002334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f000 fbc8 	bl	8006244 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <HAL_TIM_Base_Start_IT+0x50>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b06      	cmp	r3, #6
 8005af0:	d00b      	beq.n	8005b0a <HAL_TIM_Base_Start_IT+0x42>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af8:	d007      	beq.n	8005b0a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	00010007 	.word	0x00010007

08005b1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e01d      	b.n	8005b6a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f815 	bl	8005b72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f000 fb72 	bl	8006244 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2201      	movs	r2, #1
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 feea 	bl	8006974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a17      	ldr	r2, [pc, #92]	; (8005c04 <HAL_TIM_PWM_Start+0x7c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_TIM_PWM_Start+0x2c>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <HAL_TIM_PWM_Start+0x80>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_TIM_PWM_Start+0x30>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <HAL_TIM_PWM_Start+0x32>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	4b0d      	ldr	r3, [pc, #52]	; (8005c0c <HAL_TIM_PWM_Start+0x84>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b06      	cmp	r3, #6
 8005bde:	d00b      	beq.n	8005bf8 <HAL_TIM_PWM_Start+0x70>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be6:	d007      	beq.n	8005bf8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40010400 	.word	0x40010400
 8005c0c:	00010007 	.word	0x00010007

08005c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d122      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0202 	mvn.w	r2, #2
 8005c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fad8 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 faca 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fadb 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d122      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d11b      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0204 	mvn.w	r2, #4
 8005c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2202      	movs	r2, #2
 8005c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 faae 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 8005cac:	e005      	b.n	8005cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 faa0 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fab1 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d122      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d11b      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0208 	mvn.w	r2, #8
 8005ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2204      	movs	r2, #4
 8005cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa84 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 8005d00:	e005      	b.n	8005d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa76 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fa87 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b10      	cmp	r3, #16
 8005d20:	d122      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d11b      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0210 	mvn.w	r2, #16
 8005d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa5a 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 8005d54:	e005      	b.n	8005d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa4c 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fa5d 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d10e      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d107      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0201 	mvn.w	r2, #1
 8005d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7fb fdde 	bl	8001950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9e:	2b80      	cmp	r3, #128	; 0x80
 8005da0:	d10e      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dac:	2b80      	cmp	r3, #128	; 0x80
 8005dae:	d107      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fee4 	bl	8006b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dce:	d10e      	bne.n	8005dee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dda:	2b80      	cmp	r3, #128	; 0x80
 8005ddc:	d107      	bne.n	8005dee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fed7 	bl	8006b9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d10e      	bne.n	8005e1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d107      	bne.n	8005e1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fa0b 	bl	8006230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d10e      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b20      	cmp	r3, #32
 8005e34:	d107      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f06f 0220 	mvn.w	r2, #32
 8005e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fe97 	bl	8006b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e46:	bf00      	nop
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e105      	b.n	8006076 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b14      	cmp	r3, #20
 8005e7e:	f200 80f0 	bhi.w	8006062 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005e82:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005edd 	.word	0x08005edd
 8005e8c:	08006063 	.word	0x08006063
 8005e90:	08006063 	.word	0x08006063
 8005e94:	08006063 	.word	0x08006063
 8005e98:	08005f1d 	.word	0x08005f1d
 8005e9c:	08006063 	.word	0x08006063
 8005ea0:	08006063 	.word	0x08006063
 8005ea4:	08006063 	.word	0x08006063
 8005ea8:	08005f5f 	.word	0x08005f5f
 8005eac:	08006063 	.word	0x08006063
 8005eb0:	08006063 	.word	0x08006063
 8005eb4:	08006063 	.word	0x08006063
 8005eb8:	08005f9f 	.word	0x08005f9f
 8005ebc:	08006063 	.word	0x08006063
 8005ec0:	08006063 	.word	0x08006063
 8005ec4:	08006063 	.word	0x08006063
 8005ec8:	08005fe1 	.word	0x08005fe1
 8005ecc:	08006063 	.word	0x08006063
 8005ed0:	08006063 	.word	0x08006063
 8005ed4:	08006063 	.word	0x08006063
 8005ed8:	08006021 	.word	0x08006021
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fa4e 	bl	8006384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0208 	orr.w	r2, r2, #8
 8005ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0204 	bic.w	r2, r2, #4
 8005f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6999      	ldr	r1, [r3, #24]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	619a      	str	r2, [r3, #24]
      break;
 8005f1a:	e0a3      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 faa0 	bl	8006468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6999      	ldr	r1, [r3, #24]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	619a      	str	r2, [r3, #24]
      break;
 8005f5c:	e082      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 faf7 	bl	8006558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0208 	orr.w	r2, r2, #8
 8005f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0204 	bic.w	r2, r2, #4
 8005f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69d9      	ldr	r1, [r3, #28]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	61da      	str	r2, [r3, #28]
      break;
 8005f9c:	e062      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fb4d 	bl	8006644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69d9      	ldr	r1, [r3, #28]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	021a      	lsls	r2, r3, #8
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	61da      	str	r2, [r3, #28]
      break;
 8005fde:	e041      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fb84 	bl	80066f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0204 	bic.w	r2, r2, #4
 800600a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800601e:	e021      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fbb6 	bl	8006798 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800603a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800604a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	021a      	lsls	r2, r3, #8
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006060:	e000      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006062:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop

08006080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_TIM_ConfigClockSource+0x18>
 8006094:	2302      	movs	r3, #2
 8006096:	e0a6      	b.n	80061e6 <HAL_TIM_ConfigClockSource+0x166>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4b4f      	ldr	r3, [pc, #316]	; (80061f0 <HAL_TIM_ConfigClockSource+0x170>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b40      	cmp	r3, #64	; 0x40
 80060ce:	d067      	beq.n	80061a0 <HAL_TIM_ConfigClockSource+0x120>
 80060d0:	2b40      	cmp	r3, #64	; 0x40
 80060d2:	d80b      	bhi.n	80060ec <HAL_TIM_ConfigClockSource+0x6c>
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d073      	beq.n	80061c0 <HAL_TIM_ConfigClockSource+0x140>
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d802      	bhi.n	80060e2 <HAL_TIM_ConfigClockSource+0x62>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d06f      	beq.n	80061c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80060e0:	e078      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d06c      	beq.n	80061c0 <HAL_TIM_ConfigClockSource+0x140>
 80060e6:	2b30      	cmp	r3, #48	; 0x30
 80060e8:	d06a      	beq.n	80061c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80060ea:	e073      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060ec:	2b70      	cmp	r3, #112	; 0x70
 80060ee:	d00d      	beq.n	800610c <HAL_TIM_ConfigClockSource+0x8c>
 80060f0:	2b70      	cmp	r3, #112	; 0x70
 80060f2:	d804      	bhi.n	80060fe <HAL_TIM_ConfigClockSource+0x7e>
 80060f4:	2b50      	cmp	r3, #80	; 0x50
 80060f6:	d033      	beq.n	8006160 <HAL_TIM_ConfigClockSource+0xe0>
 80060f8:	2b60      	cmp	r3, #96	; 0x60
 80060fa:	d041      	beq.n	8006180 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80060fc:	e06a      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006102:	d066      	beq.n	80061d2 <HAL_TIM_ConfigClockSource+0x152>
 8006104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006108:	d017      	beq.n	800613a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800610a:	e063      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	6899      	ldr	r1, [r3, #8]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f000 fc0a 	bl	8006934 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800612e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	609a      	str	r2, [r3, #8]
      break;
 8006138:	e04c      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6899      	ldr	r1, [r3, #8]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f000 fbf3 	bl	8006934 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800615c:	609a      	str	r2, [r3, #8]
      break;
 800615e:	e039      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	6859      	ldr	r1, [r3, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	461a      	mov	r2, r3
 800616e:	f000 fb67 	bl	8006840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2150      	movs	r1, #80	; 0x50
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fbc0 	bl	80068fe <TIM_ITRx_SetConfig>
      break;
 800617e:	e029      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	6859      	ldr	r1, [r3, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	461a      	mov	r2, r3
 800618e:	f000 fb86 	bl	800689e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2160      	movs	r1, #96	; 0x60
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fbb0 	bl	80068fe <TIM_ITRx_SetConfig>
      break;
 800619e:	e019      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	6859      	ldr	r1, [r3, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	461a      	mov	r2, r3
 80061ae:	f000 fb47 	bl	8006840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2140      	movs	r1, #64	; 0x40
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fba0 	bl	80068fe <TIM_ITRx_SetConfig>
      break;
 80061be:	e009      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f000 fb97 	bl	80068fe <TIM_ITRx_SetConfig>
      break;
 80061d0:	e000      	b.n	80061d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80061d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	fffeff88 	.word	0xfffeff88

080061f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a40      	ldr	r2, [pc, #256]	; (8006358 <TIM_Base_SetConfig+0x114>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d013      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006262:	d00f      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a3d      	ldr	r2, [pc, #244]	; (800635c <TIM_Base_SetConfig+0x118>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a3c      	ldr	r2, [pc, #240]	; (8006360 <TIM_Base_SetConfig+0x11c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3b      	ldr	r2, [pc, #236]	; (8006364 <TIM_Base_SetConfig+0x120>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3a      	ldr	r2, [pc, #232]	; (8006368 <TIM_Base_SetConfig+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d108      	bne.n	8006296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2f      	ldr	r2, [pc, #188]	; (8006358 <TIM_Base_SetConfig+0x114>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d02b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d027      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2c      	ldr	r2, [pc, #176]	; (800635c <TIM_Base_SetConfig+0x118>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d023      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2b      	ldr	r2, [pc, #172]	; (8006360 <TIM_Base_SetConfig+0x11c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01f      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2a      	ldr	r2, [pc, #168]	; (8006364 <TIM_Base_SetConfig+0x120>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a29      	ldr	r2, [pc, #164]	; (8006368 <TIM_Base_SetConfig+0x124>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a28      	ldr	r2, [pc, #160]	; (800636c <TIM_Base_SetConfig+0x128>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a27      	ldr	r2, [pc, #156]	; (8006370 <TIM_Base_SetConfig+0x12c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a26      	ldr	r2, [pc, #152]	; (8006374 <TIM_Base_SetConfig+0x130>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a25      	ldr	r2, [pc, #148]	; (8006378 <TIM_Base_SetConfig+0x134>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a24      	ldr	r2, [pc, #144]	; (800637c <TIM_Base_SetConfig+0x138>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a23      	ldr	r2, [pc, #140]	; (8006380 <TIM_Base_SetConfig+0x13c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <TIM_Base_SetConfig+0x114>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_Base_SetConfig+0xf8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a0c      	ldr	r2, [pc, #48]	; (8006368 <TIM_Base_SetConfig+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d103      	bne.n	8006344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	615a      	str	r2, [r3, #20]
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40010000 	.word	0x40010000
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40000c00 	.word	0x40000c00
 8006368:	40010400 	.word	0x40010400
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800
 8006378:	40001800 	.word	0x40001800
 800637c:	40001c00 	.word	0x40001c00
 8006380:	40002000 	.word	0x40002000

08006384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f023 0201 	bic.w	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4b2b      	ldr	r3, [pc, #172]	; (800645c <TIM_OC1_SetConfig+0xd8>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f023 0302 	bic.w	r3, r3, #2
 80063cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a21      	ldr	r2, [pc, #132]	; (8006460 <TIM_OC1_SetConfig+0xdc>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_OC1_SetConfig+0x64>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a20      	ldr	r2, [pc, #128]	; (8006464 <TIM_OC1_SetConfig+0xe0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d10c      	bne.n	8006402 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f023 0308 	bic.w	r3, r3, #8
 80063ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f023 0304 	bic.w	r3, r3, #4
 8006400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a16      	ldr	r2, [pc, #88]	; (8006460 <TIM_OC1_SetConfig+0xdc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_OC1_SetConfig+0x8e>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a15      	ldr	r2, [pc, #84]	; (8006464 <TIM_OC1_SetConfig+0xe0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d111      	bne.n	8006436 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	621a      	str	r2, [r3, #32]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	fffeff8f 	.word	0xfffeff8f
 8006460:	40010000 	.word	0x40010000
 8006464:	40010400 	.word	0x40010400

08006468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	f023 0210 	bic.w	r2, r3, #16
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4b2e      	ldr	r3, [pc, #184]	; (800654c <TIM_OC2_SetConfig+0xe4>)
 8006494:	4013      	ands	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f023 0320 	bic.w	r3, r3, #32
 80064b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a23      	ldr	r2, [pc, #140]	; (8006550 <TIM_OC2_SetConfig+0xe8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_OC2_SetConfig+0x68>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a22      	ldr	r2, [pc, #136]	; (8006554 <TIM_OC2_SetConfig+0xec>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d10d      	bne.n	80064ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a18      	ldr	r2, [pc, #96]	; (8006550 <TIM_OC2_SetConfig+0xe8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d003      	beq.n	80064fc <TIM_OC2_SetConfig+0x94>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a17      	ldr	r2, [pc, #92]	; (8006554 <TIM_OC2_SetConfig+0xec>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d113      	bne.n	8006524 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006502:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800650a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	feff8fff 	.word	0xfeff8fff
 8006550:	40010000 	.word	0x40010000
 8006554:	40010400 	.word	0x40010400

08006558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4b2d      	ldr	r3, [pc, #180]	; (8006638 <TIM_OC3_SetConfig+0xe0>)
 8006584:	4013      	ands	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0303 	bic.w	r3, r3, #3
 800658e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a22      	ldr	r2, [pc, #136]	; (800663c <TIM_OC3_SetConfig+0xe4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_OC3_SetConfig+0x66>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a21      	ldr	r2, [pc, #132]	; (8006640 <TIM_OC3_SetConfig+0xe8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d10d      	bne.n	80065da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	021b      	lsls	r3, r3, #8
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a17      	ldr	r2, [pc, #92]	; (800663c <TIM_OC3_SetConfig+0xe4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d003      	beq.n	80065ea <TIM_OC3_SetConfig+0x92>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a16      	ldr	r2, [pc, #88]	; (8006640 <TIM_OC3_SetConfig+0xe8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d113      	bne.n	8006612 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	621a      	str	r2, [r3, #32]
}
 800662c:	bf00      	nop
 800662e:	371c      	adds	r7, #28
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	fffeff8f 	.word	0xfffeff8f
 800663c:	40010000 	.word	0x40010000
 8006640:	40010400 	.word	0x40010400

08006644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4b1e      	ldr	r3, [pc, #120]	; (80066e8 <TIM_OC4_SetConfig+0xa4>)
 8006670:	4013      	ands	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800667a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800668e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	031b      	lsls	r3, r3, #12
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a13      	ldr	r2, [pc, #76]	; (80066ec <TIM_OC4_SetConfig+0xa8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_OC4_SetConfig+0x68>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <TIM_OC4_SetConfig+0xac>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d109      	bne.n	80066c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	019b      	lsls	r3, r3, #6
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	621a      	str	r2, [r3, #32]
}
 80066da:	bf00      	nop
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	feff8fff 	.word	0xfeff8fff
 80066ec:	40010000 	.word	0x40010000
 80066f0:	40010400 	.word	0x40010400

080066f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4b1b      	ldr	r3, [pc, #108]	; (800678c <TIM_OC5_SetConfig+0x98>)
 8006720:	4013      	ands	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006734:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a12      	ldr	r2, [pc, #72]	; (8006790 <TIM_OC5_SetConfig+0x9c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d003      	beq.n	8006752 <TIM_OC5_SetConfig+0x5e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a11      	ldr	r2, [pc, #68]	; (8006794 <TIM_OC5_SetConfig+0xa0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d109      	bne.n	8006766 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006758:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	021b      	lsls	r3, r3, #8
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	621a      	str	r2, [r3, #32]
}
 8006780:	bf00      	nop
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	fffeff8f 	.word	0xfffeff8f
 8006790:	40010000 	.word	0x40010000
 8006794:	40010400 	.word	0x40010400

08006798 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <TIM_OC6_SetConfig+0x9c>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	051b      	lsls	r3, r3, #20
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <TIM_OC6_SetConfig+0xa0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_OC6_SetConfig+0x60>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a12      	ldr	r2, [pc, #72]	; (800683c <TIM_OC6_SetConfig+0xa4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d109      	bne.n	800680c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	029b      	lsls	r3, r3, #10
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	feff8fff 	.word	0xfeff8fff
 8006838:	40010000 	.word	0x40010000
 800683c:	40010400 	.word	0x40010400

08006840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f023 0201 	bic.w	r2, r3, #1
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800686a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f023 030a 	bic.w	r3, r3, #10
 800687c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800689e:	b480      	push	{r7}
 80068a0:	b087      	sub	sp, #28
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f023 0210 	bic.w	r2, r3, #16
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	031b      	lsls	r3, r3, #12
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	011b      	lsls	r3, r3, #4
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	621a      	str	r2, [r3, #32]
}
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	f043 0307 	orr.w	r3, r3, #7
 8006920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	609a      	str	r2, [r3, #8]
}
 8006928:	bf00      	nop
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800694e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	021a      	lsls	r2, r3, #8
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	431a      	orrs	r2, r3
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4313      	orrs	r3, r2
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	609a      	str	r2, [r3, #8]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	2201      	movs	r2, #1
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a1a      	ldr	r2, [r3, #32]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	43db      	mvns	r3, r3
 8006996:	401a      	ands	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a1a      	ldr	r2, [r3, #32]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	fa01 f303 	lsl.w	r3, r1, r3
 80069ac:	431a      	orrs	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	621a      	str	r2, [r3, #32]
}
 80069b2:	bf00      	nop
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
	...

080069c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e045      	b.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1b      	ldr	r2, [pc, #108]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d108      	bne.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a36:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	40010000 	.word	0x40010000
 8006a74:	40010400 	.word	0x40010400

08006a78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e065      	b.n	8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a16      	ldr	r2, [pc, #88]	; (8006b6c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a14      	ldr	r2, [pc, #80]	; (8006b70 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d115      	bne.n	8006b4e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	051b      	lsls	r3, r3, #20
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40010400 	.word	0x40010400

08006b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e040      	b.n	8006c44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fb fc86 	bl	80024e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2224      	movs	r2, #36	; 0x24
 8006bdc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f82c 	bl	8006c4c <UART_SetConfig>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e022      	b.n	8006c44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fac4 	bl	8007194 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c2a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fb4b 	bl	80072d8 <UART_CheckIdleState>
 8006c42:	4603      	mov	r3, r0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4bb1      	ldr	r3, [pc, #708]	; (8006f40 <UART_SetConfig+0x2f4>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	6939      	ldr	r1, [r7, #16]
 8006c84:	430b      	orrs	r3, r1
 8006c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a9f      	ldr	r2, [pc, #636]	; (8006f44 <UART_SetConfig+0x2f8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d121      	bne.n	8006d10 <UART_SetConfig+0xc4>
 8006ccc:	4b9e      	ldr	r3, [pc, #632]	; (8006f48 <UART_SetConfig+0x2fc>)
 8006cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d816      	bhi.n	8006d08 <UART_SetConfig+0xbc>
 8006cda:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <UART_SetConfig+0x94>)
 8006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce0:	08006cf1 	.word	0x08006cf1
 8006ce4:	08006cfd 	.word	0x08006cfd
 8006ce8:	08006cf7 	.word	0x08006cf7
 8006cec:	08006d03 	.word	0x08006d03
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	77fb      	strb	r3, [r7, #31]
 8006cf4:	e151      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	77fb      	strb	r3, [r7, #31]
 8006cfa:	e14e      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	77fb      	strb	r3, [r7, #31]
 8006d00:	e14b      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006d02:	2308      	movs	r3, #8
 8006d04:	77fb      	strb	r3, [r7, #31]
 8006d06:	e148      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006d08:	2310      	movs	r3, #16
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	bf00      	nop
 8006d0e:	e144      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a8d      	ldr	r2, [pc, #564]	; (8006f4c <UART_SetConfig+0x300>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d134      	bne.n	8006d84 <UART_SetConfig+0x138>
 8006d1a:	4b8b      	ldr	r3, [pc, #556]	; (8006f48 <UART_SetConfig+0x2fc>)
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d20:	f003 030c 	and.w	r3, r3, #12
 8006d24:	2b0c      	cmp	r3, #12
 8006d26:	d829      	bhi.n	8006d7c <UART_SetConfig+0x130>
 8006d28:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <UART_SetConfig+0xe4>)
 8006d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2e:	bf00      	nop
 8006d30:	08006d65 	.word	0x08006d65
 8006d34:	08006d7d 	.word	0x08006d7d
 8006d38:	08006d7d 	.word	0x08006d7d
 8006d3c:	08006d7d 	.word	0x08006d7d
 8006d40:	08006d71 	.word	0x08006d71
 8006d44:	08006d7d 	.word	0x08006d7d
 8006d48:	08006d7d 	.word	0x08006d7d
 8006d4c:	08006d7d 	.word	0x08006d7d
 8006d50:	08006d6b 	.word	0x08006d6b
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d7d 	.word	0x08006d7d
 8006d5c:	08006d7d 	.word	0x08006d7d
 8006d60:	08006d77 	.word	0x08006d77
 8006d64:	2300      	movs	r3, #0
 8006d66:	77fb      	strb	r3, [r7, #31]
 8006d68:	e117      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e114      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006d70:	2304      	movs	r3, #4
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e111      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006d76:	2308      	movs	r3, #8
 8006d78:	77fb      	strb	r3, [r7, #31]
 8006d7a:	e10e      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	bf00      	nop
 8006d82:	e10a      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a71      	ldr	r2, [pc, #452]	; (8006f50 <UART_SetConfig+0x304>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d120      	bne.n	8006dd0 <UART_SetConfig+0x184>
 8006d8e:	4b6e      	ldr	r3, [pc, #440]	; (8006f48 <UART_SetConfig+0x2fc>)
 8006d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d98:	2b10      	cmp	r3, #16
 8006d9a:	d00f      	beq.n	8006dbc <UART_SetConfig+0x170>
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d802      	bhi.n	8006da6 <UART_SetConfig+0x15a>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <UART_SetConfig+0x164>
 8006da4:	e010      	b.n	8006dc8 <UART_SetConfig+0x17c>
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d005      	beq.n	8006db6 <UART_SetConfig+0x16a>
 8006daa:	2b30      	cmp	r3, #48	; 0x30
 8006dac:	d009      	beq.n	8006dc2 <UART_SetConfig+0x176>
 8006dae:	e00b      	b.n	8006dc8 <UART_SetConfig+0x17c>
 8006db0:	2300      	movs	r3, #0
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e0f1      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006db6:	2302      	movs	r3, #2
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e0ee      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e0eb      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e0e8      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	bf00      	nop
 8006dce:	e0e4      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a5f      	ldr	r2, [pc, #380]	; (8006f54 <UART_SetConfig+0x308>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d120      	bne.n	8006e1c <UART_SetConfig+0x1d0>
 8006dda:	4b5b      	ldr	r3, [pc, #364]	; (8006f48 <UART_SetConfig+0x2fc>)
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006de4:	2b40      	cmp	r3, #64	; 0x40
 8006de6:	d00f      	beq.n	8006e08 <UART_SetConfig+0x1bc>
 8006de8:	2b40      	cmp	r3, #64	; 0x40
 8006dea:	d802      	bhi.n	8006df2 <UART_SetConfig+0x1a6>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <UART_SetConfig+0x1b0>
 8006df0:	e010      	b.n	8006e14 <UART_SetConfig+0x1c8>
 8006df2:	2b80      	cmp	r3, #128	; 0x80
 8006df4:	d005      	beq.n	8006e02 <UART_SetConfig+0x1b6>
 8006df6:	2bc0      	cmp	r3, #192	; 0xc0
 8006df8:	d009      	beq.n	8006e0e <UART_SetConfig+0x1c2>
 8006dfa:	e00b      	b.n	8006e14 <UART_SetConfig+0x1c8>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e0cb      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006e02:	2302      	movs	r3, #2
 8006e04:	77fb      	strb	r3, [r7, #31]
 8006e06:	e0c8      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e0c5      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006e0e:	2308      	movs	r3, #8
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e0c2      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006e14:	2310      	movs	r3, #16
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	bf00      	nop
 8006e1a:	e0be      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a4d      	ldr	r2, [pc, #308]	; (8006f58 <UART_SetConfig+0x30c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d124      	bne.n	8006e70 <UART_SetConfig+0x224>
 8006e26:	4b48      	ldr	r3, [pc, #288]	; (8006f48 <UART_SetConfig+0x2fc>)
 8006e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e34:	d012      	beq.n	8006e5c <UART_SetConfig+0x210>
 8006e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3a:	d802      	bhi.n	8006e42 <UART_SetConfig+0x1f6>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <UART_SetConfig+0x204>
 8006e40:	e012      	b.n	8006e68 <UART_SetConfig+0x21c>
 8006e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e46:	d006      	beq.n	8006e56 <UART_SetConfig+0x20a>
 8006e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e4c:	d009      	beq.n	8006e62 <UART_SetConfig+0x216>
 8006e4e:	e00b      	b.n	8006e68 <UART_SetConfig+0x21c>
 8006e50:	2300      	movs	r3, #0
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e0a1      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006e56:	2302      	movs	r3, #2
 8006e58:	77fb      	strb	r3, [r7, #31]
 8006e5a:	e09e      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e09b      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006e62:	2308      	movs	r3, #8
 8006e64:	77fb      	strb	r3, [r7, #31]
 8006e66:	e098      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006e68:	2310      	movs	r3, #16
 8006e6a:	77fb      	strb	r3, [r7, #31]
 8006e6c:	bf00      	nop
 8006e6e:	e094      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a39      	ldr	r2, [pc, #228]	; (8006f5c <UART_SetConfig+0x310>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d124      	bne.n	8006ec4 <UART_SetConfig+0x278>
 8006e7a:	4b33      	ldr	r3, [pc, #204]	; (8006f48 <UART_SetConfig+0x2fc>)
 8006e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e88:	d012      	beq.n	8006eb0 <UART_SetConfig+0x264>
 8006e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8e:	d802      	bhi.n	8006e96 <UART_SetConfig+0x24a>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <UART_SetConfig+0x258>
 8006e94:	e012      	b.n	8006ebc <UART_SetConfig+0x270>
 8006e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e9a:	d006      	beq.n	8006eaa <UART_SetConfig+0x25e>
 8006e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ea0:	d009      	beq.n	8006eb6 <UART_SetConfig+0x26a>
 8006ea2:	e00b      	b.n	8006ebc <UART_SetConfig+0x270>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	77fb      	strb	r3, [r7, #31]
 8006ea8:	e077      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	77fb      	strb	r3, [r7, #31]
 8006eae:	e074      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	77fb      	strb	r3, [r7, #31]
 8006eb4:	e071      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006eb6:	2308      	movs	r3, #8
 8006eb8:	77fb      	strb	r3, [r7, #31]
 8006eba:	e06e      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	77fb      	strb	r3, [r7, #31]
 8006ec0:	bf00      	nop
 8006ec2:	e06a      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a25      	ldr	r2, [pc, #148]	; (8006f60 <UART_SetConfig+0x314>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d124      	bne.n	8006f18 <UART_SetConfig+0x2cc>
 8006ece:	4b1e      	ldr	r3, [pc, #120]	; (8006f48 <UART_SetConfig+0x2fc>)
 8006ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006edc:	d012      	beq.n	8006f04 <UART_SetConfig+0x2b8>
 8006ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee2:	d802      	bhi.n	8006eea <UART_SetConfig+0x29e>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d007      	beq.n	8006ef8 <UART_SetConfig+0x2ac>
 8006ee8:	e012      	b.n	8006f10 <UART_SetConfig+0x2c4>
 8006eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eee:	d006      	beq.n	8006efe <UART_SetConfig+0x2b2>
 8006ef0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ef4:	d009      	beq.n	8006f0a <UART_SetConfig+0x2be>
 8006ef6:	e00b      	b.n	8006f10 <UART_SetConfig+0x2c4>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e04d      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006efe:	2302      	movs	r3, #2
 8006f00:	77fb      	strb	r3, [r7, #31]
 8006f02:	e04a      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006f04:	2304      	movs	r3, #4
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e047      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006f0a:	2308      	movs	r3, #8
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e044      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006f10:	2310      	movs	r3, #16
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	bf00      	nop
 8006f16:	e040      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a11      	ldr	r2, [pc, #68]	; (8006f64 <UART_SetConfig+0x318>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d139      	bne.n	8006f96 <UART_SetConfig+0x34a>
 8006f22:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <UART_SetConfig+0x2fc>)
 8006f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f30:	d027      	beq.n	8006f82 <UART_SetConfig+0x336>
 8006f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f36:	d817      	bhi.n	8006f68 <UART_SetConfig+0x31c>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d01c      	beq.n	8006f76 <UART_SetConfig+0x32a>
 8006f3c:	e027      	b.n	8006f8e <UART_SetConfig+0x342>
 8006f3e:	bf00      	nop
 8006f40:	efff69f3 	.word	0xefff69f3
 8006f44:	40011000 	.word	0x40011000
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	40004400 	.word	0x40004400
 8006f50:	40004800 	.word	0x40004800
 8006f54:	40004c00 	.word	0x40004c00
 8006f58:	40005000 	.word	0x40005000
 8006f5c:	40011400 	.word	0x40011400
 8006f60:	40007800 	.word	0x40007800
 8006f64:	40007c00 	.word	0x40007c00
 8006f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6c:	d006      	beq.n	8006f7c <UART_SetConfig+0x330>
 8006f6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f72:	d009      	beq.n	8006f88 <UART_SetConfig+0x33c>
 8006f74:	e00b      	b.n	8006f8e <UART_SetConfig+0x342>
 8006f76:	2300      	movs	r3, #0
 8006f78:	77fb      	strb	r3, [r7, #31]
 8006f7a:	e00e      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	77fb      	strb	r3, [r7, #31]
 8006f80:	e00b      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006f82:	2304      	movs	r3, #4
 8006f84:	77fb      	strb	r3, [r7, #31]
 8006f86:	e008      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006f88:	2308      	movs	r3, #8
 8006f8a:	77fb      	strb	r3, [r7, #31]
 8006f8c:	e005      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006f8e:	2310      	movs	r3, #16
 8006f90:	77fb      	strb	r3, [r7, #31]
 8006f92:	bf00      	nop
 8006f94:	e001      	b.n	8006f9a <UART_SetConfig+0x34e>
 8006f96:	2310      	movs	r3, #16
 8006f98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa2:	d17c      	bne.n	800709e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8006fa4:	7ffb      	ldrb	r3, [r7, #31]
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	d859      	bhi.n	800705e <UART_SetConfig+0x412>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <UART_SetConfig+0x364>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fd5 	.word	0x08006fd5
 8006fb4:	08006ff3 	.word	0x08006ff3
 8006fb8:	08007011 	.word	0x08007011
 8006fbc:	0800705f 	.word	0x0800705f
 8006fc0:	08007029 	.word	0x08007029
 8006fc4:	0800705f 	.word	0x0800705f
 8006fc8:	0800705f 	.word	0x0800705f
 8006fcc:	0800705f 	.word	0x0800705f
 8006fd0:	08007047 	.word	0x08007047
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006fd4:	f7fe f936 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	005a      	lsls	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	085b      	lsrs	r3, r3, #1
 8006fe2:	441a      	add	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	61bb      	str	r3, [r7, #24]
        break;
 8006ff0:	e038      	b.n	8007064 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006ff2:	f7fe f93b 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	005a      	lsls	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	085b      	lsrs	r3, r3, #1
 8007000:	441a      	add	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	fbb2 f3f3 	udiv	r3, r2, r3
 800700a:	b29b      	uxth	r3, r3
 800700c:	61bb      	str	r3, [r7, #24]
        break;
 800700e:	e029      	b.n	8007064 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	085a      	lsrs	r2, r3, #1
 8007016:	4b5d      	ldr	r3, [pc, #372]	; (800718c <UART_SetConfig+0x540>)
 8007018:	4413      	add	r3, r2
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6852      	ldr	r2, [r2, #4]
 800701e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	61bb      	str	r3, [r7, #24]
        break;
 8007026:	e01d      	b.n	8007064 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007028:	f7fe f828 	bl	800507c <HAL_RCC_GetSysClockFreq>
 800702c:	4603      	mov	r3, r0
 800702e:	005a      	lsls	r2, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	085b      	lsrs	r3, r3, #1
 8007036:	441a      	add	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007040:	b29b      	uxth	r3, r3
 8007042:	61bb      	str	r3, [r7, #24]
        break;
 8007044:	e00e      	b.n	8007064 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	085b      	lsrs	r3, r3, #1
 800704c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	fbb2 f3f3 	udiv	r3, r2, r3
 8007058:	b29b      	uxth	r3, r3
 800705a:	61bb      	str	r3, [r7, #24]
        break;
 800705c:	e002      	b.n	8007064 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	75fb      	strb	r3, [r7, #23]
        break;
 8007062:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d916      	bls.n	8007098 <UART_SetConfig+0x44c>
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007070:	d212      	bcs.n	8007098 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f023 030f 	bic.w	r3, r3, #15
 800707a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	b29b      	uxth	r3, r3
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	b29a      	uxth	r2, r3
 8007088:	89fb      	ldrh	r3, [r7, #14]
 800708a:	4313      	orrs	r3, r2
 800708c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	89fa      	ldrh	r2, [r7, #14]
 8007094:	60da      	str	r2, [r3, #12]
 8007096:	e06e      	b.n	8007176 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	75fb      	strb	r3, [r7, #23]
 800709c:	e06b      	b.n	8007176 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800709e:	7ffb      	ldrb	r3, [r7, #31]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d857      	bhi.n	8007154 <UART_SetConfig+0x508>
 80070a4:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <UART_SetConfig+0x460>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	080070d1 	.word	0x080070d1
 80070b0:	080070ed 	.word	0x080070ed
 80070b4:	08007109 	.word	0x08007109
 80070b8:	08007155 	.word	0x08007155
 80070bc:	08007121 	.word	0x08007121
 80070c0:	08007155 	.word	0x08007155
 80070c4:	08007155 	.word	0x08007155
 80070c8:	08007155 	.word	0x08007155
 80070cc:	0800713d 	.word	0x0800713d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80070d0:	f7fe f8b8 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 80070d4:	4602      	mov	r2, r0
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	085b      	lsrs	r3, r3, #1
 80070dc:	441a      	add	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	61bb      	str	r3, [r7, #24]
        break;
 80070ea:	e036      	b.n	800715a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80070ec:	f7fe f8be 	bl	800526c <HAL_RCC_GetPCLK2Freq>
 80070f0:	4602      	mov	r2, r0
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	441a      	add	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	b29b      	uxth	r3, r3
 8007104:	61bb      	str	r3, [r7, #24]
        break;
 8007106:	e028      	b.n	800715a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	085a      	lsrs	r2, r3, #1
 800710e:	4b20      	ldr	r3, [pc, #128]	; (8007190 <UART_SetConfig+0x544>)
 8007110:	4413      	add	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6852      	ldr	r2, [r2, #4]
 8007116:	fbb3 f3f2 	udiv	r3, r3, r2
 800711a:	b29b      	uxth	r3, r3
 800711c:	61bb      	str	r3, [r7, #24]
        break;
 800711e:	e01c      	b.n	800715a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007120:	f7fd ffac 	bl	800507c <HAL_RCC_GetSysClockFreq>
 8007124:	4602      	mov	r2, r0
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	441a      	add	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	fbb2 f3f3 	udiv	r3, r2, r3
 8007136:	b29b      	uxth	r3, r3
 8007138:	61bb      	str	r3, [r7, #24]
        break;
 800713a:	e00e      	b.n	800715a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	085b      	lsrs	r3, r3, #1
 8007142:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	fbb2 f3f3 	udiv	r3, r2, r3
 800714e:	b29b      	uxth	r3, r3
 8007150:	61bb      	str	r3, [r7, #24]
        break;
 8007152:	e002      	b.n	800715a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	75fb      	strb	r3, [r7, #23]
        break;
 8007158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b0f      	cmp	r3, #15
 800715e:	d908      	bls.n	8007172 <UART_SetConfig+0x526>
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007166:	d204      	bcs.n	8007172 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	60da      	str	r2, [r3, #12]
 8007170:	e001      	b.n	8007176 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007182:	7dfb      	ldrb	r3, [r7, #23]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3720      	adds	r7, #32
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	01e84800 	.word	0x01e84800
 8007190:	00f42400 	.word	0x00f42400

08007194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00a      	beq.n	80071be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	f003 0308 	and.w	r3, r3, #8
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01a      	beq.n	80072aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007292:	d10a      	bne.n	80072aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	430a      	orrs	r2, r1
 80072ca:	605a      	str	r2, [r3, #4]
  }
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af02      	add	r7, sp, #8
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80072e6:	f7fb fa45 	bl	8002774 <HAL_GetTick>
 80072ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0308 	and.w	r3, r3, #8
 80072f6:	2b08      	cmp	r3, #8
 80072f8:	d10e      	bne.n	8007318 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f814 	bl	8007336 <UART_WaitOnFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e00a      	b.n	800732e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2220      	movs	r2, #32
 800731c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	603b      	str	r3, [r7, #0]
 8007342:	4613      	mov	r3, r2
 8007344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007346:	e02a      	b.n	800739e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734e:	d026      	beq.n	800739e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007350:	f7fb fa10 	bl	8002774 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	429a      	cmp	r2, r3
 800735e:	d302      	bcc.n	8007366 <UART_WaitOnFlagUntilTimeout+0x30>
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d11b      	bne.n	800739e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007374:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0201 	bic.w	r2, r2, #1
 8007384:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2220      	movs	r2, #32
 800738a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e00f      	b.n	80073be <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69da      	ldr	r2, [r3, #28]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4013      	ands	r3, r2
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	bf0c      	ite	eq
 80073ae:	2301      	moveq	r3, #1
 80073b0:	2300      	movne	r3, #0
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d0c5      	beq.n	8007348 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073c8:	b084      	sub	sp, #16
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	f107 001c 	add.w	r0, r7, #28
 80073d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d120      	bne.n	8007422 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	4b20      	ldr	r3, [pc, #128]	; (8007474 <USB_CoreInit+0xac>)
 80073f2:	4013      	ands	r3, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007406:	2b01      	cmp	r3, #1
 8007408:	d105      	bne.n	8007416 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa60 	bl	80078dc <USB_CoreReset>
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]
 8007420:	e010      	b.n	8007444 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fa54 	bl	80078dc <USB_CoreReset>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	2b01      	cmp	r3, #1
 8007448:	d10b      	bne.n	8007462 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f043 0206 	orr.w	r2, r3, #6
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f043 0220 	orr.w	r2, r3, #32
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007462:	7bfb      	ldrb	r3, [r7, #15]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800746e:	b004      	add	sp, #16
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	ffbdffbf 	.word	0xffbdffbf

08007478 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f023 0201 	bic.w	r2, r3, #1
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b082      	sub	sp, #8
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d106      	bne.n	80074c6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	60da      	str	r2, [r3, #12]
 80074c4:	e00b      	b.n	80074de <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d106      	bne.n	80074da <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60da      	str	r2, [r3, #12]
 80074d8:	e001      	b.n	80074de <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e003      	b.n	80074e6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80074de:	2032      	movs	r0, #50	; 0x32
 80074e0:	f7fb f954 	bl	800278c <HAL_Delay>

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
	...

080074f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074f0:	b084      	sub	sp, #16
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b086      	sub	sp, #24
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80074fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800750a:	2300      	movs	r3, #0
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	e009      	b.n	8007524 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	3340      	adds	r3, #64	; 0x40
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	2200      	movs	r2, #0
 800751c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	3301      	adds	r3, #1
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	2b0e      	cmp	r3, #14
 8007528:	d9f2      	bls.n	8007510 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800752a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d112      	bne.n	8007556 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e005      	b.n	8007562 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007568:	461a      	mov	r2, r3
 800756a:	2300      	movs	r3, #0
 800756c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007574:	4619      	mov	r1, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757c:	461a      	mov	r2, r3
 800757e:	680b      	ldr	r3, [r1, #0]
 8007580:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007584:	2b01      	cmp	r3, #1
 8007586:	d10c      	bne.n	80075a2 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800758e:	2100      	movs	r1, #0
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f971 	bl	8007878 <USB_SetDevSpeed>
 8007596:	e018      	b.n	80075ca <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007598:	2101      	movs	r1, #1
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f96c 	bl	8007878 <USB_SetDevSpeed>
 80075a0:	e013      	b.n	80075ca <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d10c      	bne.n	80075c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d104      	bne.n	80075b8 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075ae:	2100      	movs	r1, #0
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f961 	bl	8007878 <USB_SetDevSpeed>
 80075b6:	e008      	b.n	80075ca <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075b8:	2101      	movs	r1, #1
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f95c 	bl	8007878 <USB_SetDevSpeed>
 80075c0:	e003      	b.n	80075ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075c2:	2103      	movs	r1, #3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f957 	bl	8007878 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075ca:	2110      	movs	r1, #16
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f90b 	bl	80077e8 <USB_FlushTxFifo>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f929 	bl	8007834 <USB_FlushRxFifo>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f2:	461a      	mov	r2, r3
 80075f4:	2300      	movs	r3, #0
 80075f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fe:	461a      	mov	r2, r3
 8007600:	2300      	movs	r3, #0
 8007602:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760a:	461a      	mov	r2, r3
 800760c:	2300      	movs	r3, #0
 800760e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007610:	2300      	movs	r3, #0
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	e043      	b.n	800769e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800762c:	d118      	bne.n	8007660 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007640:	461a      	mov	r2, r3
 8007642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	e013      	b.n	8007672 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007656:	461a      	mov	r2, r3
 8007658:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	e008      	b.n	8007672 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766c:	461a      	mov	r2, r3
 800766e:	2300      	movs	r3, #0
 8007670:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767e:	461a      	mov	r2, r3
 8007680:	2300      	movs	r3, #0
 8007682:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	461a      	mov	r2, r3
 8007692:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007696:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	3301      	adds	r3, #1
 800769c:	613b      	str	r3, [r7, #16]
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d3b7      	bcc.n	8007616 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	e043      	b.n	8007734 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076c2:	d118      	bne.n	80076f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d6:	461a      	mov	r2, r3
 80076d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e013      	b.n	8007708 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ec:	461a      	mov	r2, r3
 80076ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	e008      	b.n	8007708 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007702:	461a      	mov	r2, r3
 8007704:	2300      	movs	r3, #0
 8007706:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007714:	461a      	mov	r2, r3
 8007716:	2300      	movs	r3, #0
 8007718:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007726:	461a      	mov	r2, r3
 8007728:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800772c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	3301      	adds	r3, #1
 8007732:	613b      	str	r3, [r7, #16]
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	429a      	cmp	r2, r3
 800773a:	d3b7      	bcc.n	80076ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800774a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800774e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	2b01      	cmp	r3, #1
 8007754:	d110      	bne.n	8007778 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775c:	461a      	mov	r2, r3
 800775e:	4b1e      	ldr	r3, [pc, #120]	; (80077d8 <USB_DevInit+0x2e8>)
 8007760:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007770:	4619      	mov	r1, r3
 8007772:	4b1a      	ldr	r3, [pc, #104]	; (80077dc <USB_DevInit+0x2ec>)
 8007774:	4313      	orrs	r3, r2
 8007776:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007784:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	2b00      	cmp	r3, #0
 800778a:	d105      	bne.n	8007798 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	f043 0210 	orr.w	r2, r3, #16
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <USB_DevInit+0x2f0>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f043 0208 	orr.w	r2, r3, #8
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d105      	bne.n	80077c8 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699a      	ldr	r2, [r3, #24]
 80077c0:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <USB_DevInit+0x2f4>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077d4:	b004      	add	sp, #16
 80077d6:	4770      	bx	lr
 80077d8:	00800100 	.word	0x00800100
 80077dc:	00010003 	.word	0x00010003
 80077e0:	803c3800 	.word	0x803c3800
 80077e4:	40000004 	.word	0x40000004

080077e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	019b      	lsls	r3, r3, #6
 80077fa:	f043 0220 	orr.w	r2, r3, #32
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3301      	adds	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4a09      	ldr	r2, [pc, #36]	; (8007830 <USB_FlushTxFifo+0x48>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d901      	bls.n	8007814 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e006      	b.n	8007822 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f003 0320 	and.w	r3, r3, #32
 800781c:	2b20      	cmp	r3, #32
 800781e:	d0f0      	beq.n	8007802 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	00030d40 	.word	0x00030d40

08007834 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2210      	movs	r2, #16
 8007844:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3301      	adds	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4a09      	ldr	r2, [pc, #36]	; (8007874 <USB_FlushRxFifo+0x40>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d901      	bls.n	8007858 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e006      	b.n	8007866 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f003 0310 	and.w	r3, r3, #16
 8007860:	2b10      	cmp	r3, #16
 8007862:	d0f0      	beq.n	8007846 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	00030d40 	.word	0x00030d40

08007878 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	68f9      	ldr	r1, [r7, #12]
 8007894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007898:	4313      	orrs	r3, r2
 800789a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078c4:	f043 0302 	orr.w	r3, r3, #2
 80078c8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80078ca:	2003      	movs	r0, #3
 80078cc:	f7fa ff5e 	bl	800278c <HAL_Delay>

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3301      	adds	r3, #1
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4a13      	ldr	r2, [pc, #76]	; (8007940 <USB_CoreReset+0x64>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d901      	bls.n	80078fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e01b      	b.n	8007932 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	daf2      	bge.n	80078e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f043 0201 	orr.w	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3301      	adds	r3, #1
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4a09      	ldr	r2, [pc, #36]	; (8007940 <USB_CoreReset+0x64>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d901      	bls.n	8007924 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e006      	b.n	8007932 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b01      	cmp	r3, #1
 800792e:	d0f0      	beq.n	8007912 <USB_CoreReset+0x36>

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	00030d40 	.word	0x00030d40

08007944 <__errno>:
 8007944:	4b01      	ldr	r3, [pc, #4]	; (800794c <__errno+0x8>)
 8007946:	6818      	ldr	r0, [r3, #0]
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	2000003c 	.word	0x2000003c

08007950 <__libc_init_array>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	4e0d      	ldr	r6, [pc, #52]	; (8007988 <__libc_init_array+0x38>)
 8007954:	4c0d      	ldr	r4, [pc, #52]	; (800798c <__libc_init_array+0x3c>)
 8007956:	1ba4      	subs	r4, r4, r6
 8007958:	10a4      	asrs	r4, r4, #2
 800795a:	2500      	movs	r5, #0
 800795c:	42a5      	cmp	r5, r4
 800795e:	d109      	bne.n	8007974 <__libc_init_array+0x24>
 8007960:	4e0b      	ldr	r6, [pc, #44]	; (8007990 <__libc_init_array+0x40>)
 8007962:	4c0c      	ldr	r4, [pc, #48]	; (8007994 <__libc_init_array+0x44>)
 8007964:	f001 fc3a 	bl	80091dc <_init>
 8007968:	1ba4      	subs	r4, r4, r6
 800796a:	10a4      	asrs	r4, r4, #2
 800796c:	2500      	movs	r5, #0
 800796e:	42a5      	cmp	r5, r4
 8007970:	d105      	bne.n	800797e <__libc_init_array+0x2e>
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007978:	4798      	blx	r3
 800797a:	3501      	adds	r5, #1
 800797c:	e7ee      	b.n	800795c <__libc_init_array+0xc>
 800797e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007982:	4798      	blx	r3
 8007984:	3501      	adds	r5, #1
 8007986:	e7f2      	b.n	800796e <__libc_init_array+0x1e>
 8007988:	08009458 	.word	0x08009458
 800798c:	08009458 	.word	0x08009458
 8007990:	08009458 	.word	0x08009458
 8007994:	0800945c 	.word	0x0800945c

08007998 <memset>:
 8007998:	4402      	add	r2, r0
 800799a:	4603      	mov	r3, r0
 800799c:	4293      	cmp	r3, r2
 800799e:	d100      	bne.n	80079a2 <memset+0xa>
 80079a0:	4770      	bx	lr
 80079a2:	f803 1b01 	strb.w	r1, [r3], #1
 80079a6:	e7f9      	b.n	800799c <memset+0x4>

080079a8 <siprintf>:
 80079a8:	b40e      	push	{r1, r2, r3}
 80079aa:	b500      	push	{lr}
 80079ac:	b09c      	sub	sp, #112	; 0x70
 80079ae:	ab1d      	add	r3, sp, #116	; 0x74
 80079b0:	9002      	str	r0, [sp, #8]
 80079b2:	9006      	str	r0, [sp, #24]
 80079b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079b8:	4809      	ldr	r0, [pc, #36]	; (80079e0 <siprintf+0x38>)
 80079ba:	9107      	str	r1, [sp, #28]
 80079bc:	9104      	str	r1, [sp, #16]
 80079be:	4909      	ldr	r1, [pc, #36]	; (80079e4 <siprintf+0x3c>)
 80079c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c4:	9105      	str	r1, [sp, #20]
 80079c6:	6800      	ldr	r0, [r0, #0]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	a902      	add	r1, sp, #8
 80079cc:	f000 f866 	bl	8007a9c <_svfiprintf_r>
 80079d0:	9b02      	ldr	r3, [sp, #8]
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	b01c      	add	sp, #112	; 0x70
 80079d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079dc:	b003      	add	sp, #12
 80079de:	4770      	bx	lr
 80079e0:	2000003c 	.word	0x2000003c
 80079e4:	ffff0208 	.word	0xffff0208

080079e8 <__ssputs_r>:
 80079e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	688e      	ldr	r6, [r1, #8]
 80079ee:	429e      	cmp	r6, r3
 80079f0:	4682      	mov	sl, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	4690      	mov	r8, r2
 80079f6:	4699      	mov	r9, r3
 80079f8:	d837      	bhi.n	8007a6a <__ssputs_r+0x82>
 80079fa:	898a      	ldrh	r2, [r1, #12]
 80079fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a00:	d031      	beq.n	8007a66 <__ssputs_r+0x7e>
 8007a02:	6825      	ldr	r5, [r4, #0]
 8007a04:	6909      	ldr	r1, [r1, #16]
 8007a06:	1a6f      	subs	r7, r5, r1
 8007a08:	6965      	ldr	r5, [r4, #20]
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a10:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a14:	f109 0301 	add.w	r3, r9, #1
 8007a18:	443b      	add	r3, r7
 8007a1a:	429d      	cmp	r5, r3
 8007a1c:	bf38      	it	cc
 8007a1e:	461d      	movcc	r5, r3
 8007a20:	0553      	lsls	r3, r2, #21
 8007a22:	d530      	bpl.n	8007a86 <__ssputs_r+0x9e>
 8007a24:	4629      	mov	r1, r5
 8007a26:	f000 fb2b 	bl	8008080 <_malloc_r>
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	b950      	cbnz	r0, 8007a44 <__ssputs_r+0x5c>
 8007a2e:	230c      	movs	r3, #12
 8007a30:	f8ca 3000 	str.w	r3, [sl]
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a44:	463a      	mov	r2, r7
 8007a46:	6921      	ldr	r1, [r4, #16]
 8007a48:	f000 faa8 	bl	8007f9c <memcpy>
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a56:	81a3      	strh	r3, [r4, #12]
 8007a58:	6126      	str	r6, [r4, #16]
 8007a5a:	6165      	str	r5, [r4, #20]
 8007a5c:	443e      	add	r6, r7
 8007a5e:	1bed      	subs	r5, r5, r7
 8007a60:	6026      	str	r6, [r4, #0]
 8007a62:	60a5      	str	r5, [r4, #8]
 8007a64:	464e      	mov	r6, r9
 8007a66:	454e      	cmp	r6, r9
 8007a68:	d900      	bls.n	8007a6c <__ssputs_r+0x84>
 8007a6a:	464e      	mov	r6, r9
 8007a6c:	4632      	mov	r2, r6
 8007a6e:	4641      	mov	r1, r8
 8007a70:	6820      	ldr	r0, [r4, #0]
 8007a72:	f000 fa9e 	bl	8007fb2 <memmove>
 8007a76:	68a3      	ldr	r3, [r4, #8]
 8007a78:	1b9b      	subs	r3, r3, r6
 8007a7a:	60a3      	str	r3, [r4, #8]
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	441e      	add	r6, r3
 8007a80:	6026      	str	r6, [r4, #0]
 8007a82:	2000      	movs	r0, #0
 8007a84:	e7dc      	b.n	8007a40 <__ssputs_r+0x58>
 8007a86:	462a      	mov	r2, r5
 8007a88:	f000 fb54 	bl	8008134 <_realloc_r>
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d1e2      	bne.n	8007a58 <__ssputs_r+0x70>
 8007a92:	6921      	ldr	r1, [r4, #16]
 8007a94:	4650      	mov	r0, sl
 8007a96:	f000 faa5 	bl	8007fe4 <_free_r>
 8007a9a:	e7c8      	b.n	8007a2e <__ssputs_r+0x46>

08007a9c <_svfiprintf_r>:
 8007a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa0:	461d      	mov	r5, r3
 8007aa2:	898b      	ldrh	r3, [r1, #12]
 8007aa4:	061f      	lsls	r7, r3, #24
 8007aa6:	b09d      	sub	sp, #116	; 0x74
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	4616      	mov	r6, r2
 8007aae:	d50f      	bpl.n	8007ad0 <_svfiprintf_r+0x34>
 8007ab0:	690b      	ldr	r3, [r1, #16]
 8007ab2:	b96b      	cbnz	r3, 8007ad0 <_svfiprintf_r+0x34>
 8007ab4:	2140      	movs	r1, #64	; 0x40
 8007ab6:	f000 fae3 	bl	8008080 <_malloc_r>
 8007aba:	6020      	str	r0, [r4, #0]
 8007abc:	6120      	str	r0, [r4, #16]
 8007abe:	b928      	cbnz	r0, 8007acc <_svfiprintf_r+0x30>
 8007ac0:	230c      	movs	r3, #12
 8007ac2:	f8c8 3000 	str.w	r3, [r8]
 8007ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aca:	e0c8      	b.n	8007c5e <_svfiprintf_r+0x1c2>
 8007acc:	2340      	movs	r3, #64	; 0x40
 8007ace:	6163      	str	r3, [r4, #20]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad4:	2320      	movs	r3, #32
 8007ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ada:	2330      	movs	r3, #48	; 0x30
 8007adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ae0:	9503      	str	r5, [sp, #12]
 8007ae2:	f04f 0b01 	mov.w	fp, #1
 8007ae6:	4637      	mov	r7, r6
 8007ae8:	463d      	mov	r5, r7
 8007aea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007aee:	b10b      	cbz	r3, 8007af4 <_svfiprintf_r+0x58>
 8007af0:	2b25      	cmp	r3, #37	; 0x25
 8007af2:	d13e      	bne.n	8007b72 <_svfiprintf_r+0xd6>
 8007af4:	ebb7 0a06 	subs.w	sl, r7, r6
 8007af8:	d00b      	beq.n	8007b12 <_svfiprintf_r+0x76>
 8007afa:	4653      	mov	r3, sl
 8007afc:	4632      	mov	r2, r6
 8007afe:	4621      	mov	r1, r4
 8007b00:	4640      	mov	r0, r8
 8007b02:	f7ff ff71 	bl	80079e8 <__ssputs_r>
 8007b06:	3001      	adds	r0, #1
 8007b08:	f000 80a4 	beq.w	8007c54 <_svfiprintf_r+0x1b8>
 8007b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0e:	4453      	add	r3, sl
 8007b10:	9309      	str	r3, [sp, #36]	; 0x24
 8007b12:	783b      	ldrb	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 809d 	beq.w	8007c54 <_svfiprintf_r+0x1b8>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b24:	9304      	str	r3, [sp, #16]
 8007b26:	9307      	str	r3, [sp, #28]
 8007b28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b2c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b2e:	462f      	mov	r7, r5
 8007b30:	2205      	movs	r2, #5
 8007b32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b36:	4850      	ldr	r0, [pc, #320]	; (8007c78 <_svfiprintf_r+0x1dc>)
 8007b38:	f7f8 fb72 	bl	8000220 <memchr>
 8007b3c:	9b04      	ldr	r3, [sp, #16]
 8007b3e:	b9d0      	cbnz	r0, 8007b76 <_svfiprintf_r+0xda>
 8007b40:	06d9      	lsls	r1, r3, #27
 8007b42:	bf44      	itt	mi
 8007b44:	2220      	movmi	r2, #32
 8007b46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b4a:	071a      	lsls	r2, r3, #28
 8007b4c:	bf44      	itt	mi
 8007b4e:	222b      	movmi	r2, #43	; 0x2b
 8007b50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b54:	782a      	ldrb	r2, [r5, #0]
 8007b56:	2a2a      	cmp	r2, #42	; 0x2a
 8007b58:	d015      	beq.n	8007b86 <_svfiprintf_r+0xea>
 8007b5a:	9a07      	ldr	r2, [sp, #28]
 8007b5c:	462f      	mov	r7, r5
 8007b5e:	2000      	movs	r0, #0
 8007b60:	250a      	movs	r5, #10
 8007b62:	4639      	mov	r1, r7
 8007b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b68:	3b30      	subs	r3, #48	; 0x30
 8007b6a:	2b09      	cmp	r3, #9
 8007b6c:	d94d      	bls.n	8007c0a <_svfiprintf_r+0x16e>
 8007b6e:	b1b8      	cbz	r0, 8007ba0 <_svfiprintf_r+0x104>
 8007b70:	e00f      	b.n	8007b92 <_svfiprintf_r+0xf6>
 8007b72:	462f      	mov	r7, r5
 8007b74:	e7b8      	b.n	8007ae8 <_svfiprintf_r+0x4c>
 8007b76:	4a40      	ldr	r2, [pc, #256]	; (8007c78 <_svfiprintf_r+0x1dc>)
 8007b78:	1a80      	subs	r0, r0, r2
 8007b7a:	fa0b f000 	lsl.w	r0, fp, r0
 8007b7e:	4318      	orrs	r0, r3
 8007b80:	9004      	str	r0, [sp, #16]
 8007b82:	463d      	mov	r5, r7
 8007b84:	e7d3      	b.n	8007b2e <_svfiprintf_r+0x92>
 8007b86:	9a03      	ldr	r2, [sp, #12]
 8007b88:	1d11      	adds	r1, r2, #4
 8007b8a:	6812      	ldr	r2, [r2, #0]
 8007b8c:	9103      	str	r1, [sp, #12]
 8007b8e:	2a00      	cmp	r2, #0
 8007b90:	db01      	blt.n	8007b96 <_svfiprintf_r+0xfa>
 8007b92:	9207      	str	r2, [sp, #28]
 8007b94:	e004      	b.n	8007ba0 <_svfiprintf_r+0x104>
 8007b96:	4252      	negs	r2, r2
 8007b98:	f043 0302 	orr.w	r3, r3, #2
 8007b9c:	9207      	str	r2, [sp, #28]
 8007b9e:	9304      	str	r3, [sp, #16]
 8007ba0:	783b      	ldrb	r3, [r7, #0]
 8007ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ba4:	d10c      	bne.n	8007bc0 <_svfiprintf_r+0x124>
 8007ba6:	787b      	ldrb	r3, [r7, #1]
 8007ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8007baa:	d133      	bne.n	8007c14 <_svfiprintf_r+0x178>
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	1d1a      	adds	r2, r3, #4
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	9203      	str	r2, [sp, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	bfb8      	it	lt
 8007bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bbc:	3702      	adds	r7, #2
 8007bbe:	9305      	str	r3, [sp, #20]
 8007bc0:	4d2e      	ldr	r5, [pc, #184]	; (8007c7c <_svfiprintf_r+0x1e0>)
 8007bc2:	7839      	ldrb	r1, [r7, #0]
 8007bc4:	2203      	movs	r2, #3
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f7f8 fb2a 	bl	8000220 <memchr>
 8007bcc:	b138      	cbz	r0, 8007bde <_svfiprintf_r+0x142>
 8007bce:	2340      	movs	r3, #64	; 0x40
 8007bd0:	1b40      	subs	r0, r0, r5
 8007bd2:	fa03 f000 	lsl.w	r0, r3, r0
 8007bd6:	9b04      	ldr	r3, [sp, #16]
 8007bd8:	4303      	orrs	r3, r0
 8007bda:	3701      	adds	r7, #1
 8007bdc:	9304      	str	r3, [sp, #16]
 8007bde:	7839      	ldrb	r1, [r7, #0]
 8007be0:	4827      	ldr	r0, [pc, #156]	; (8007c80 <_svfiprintf_r+0x1e4>)
 8007be2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007be6:	2206      	movs	r2, #6
 8007be8:	1c7e      	adds	r6, r7, #1
 8007bea:	f7f8 fb19 	bl	8000220 <memchr>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d038      	beq.n	8007c64 <_svfiprintf_r+0x1c8>
 8007bf2:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <_svfiprintf_r+0x1e8>)
 8007bf4:	bb13      	cbnz	r3, 8007c3c <_svfiprintf_r+0x1a0>
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	3307      	adds	r3, #7
 8007bfa:	f023 0307 	bic.w	r3, r3, #7
 8007bfe:	3308      	adds	r3, #8
 8007c00:	9303      	str	r3, [sp, #12]
 8007c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c04:	444b      	add	r3, r9
 8007c06:	9309      	str	r3, [sp, #36]	; 0x24
 8007c08:	e76d      	b.n	8007ae6 <_svfiprintf_r+0x4a>
 8007c0a:	fb05 3202 	mla	r2, r5, r2, r3
 8007c0e:	2001      	movs	r0, #1
 8007c10:	460f      	mov	r7, r1
 8007c12:	e7a6      	b.n	8007b62 <_svfiprintf_r+0xc6>
 8007c14:	2300      	movs	r3, #0
 8007c16:	3701      	adds	r7, #1
 8007c18:	9305      	str	r3, [sp, #20]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	250a      	movs	r5, #10
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c24:	3a30      	subs	r2, #48	; 0x30
 8007c26:	2a09      	cmp	r2, #9
 8007c28:	d903      	bls.n	8007c32 <_svfiprintf_r+0x196>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0c8      	beq.n	8007bc0 <_svfiprintf_r+0x124>
 8007c2e:	9105      	str	r1, [sp, #20]
 8007c30:	e7c6      	b.n	8007bc0 <_svfiprintf_r+0x124>
 8007c32:	fb05 2101 	mla	r1, r5, r1, r2
 8007c36:	2301      	movs	r3, #1
 8007c38:	4607      	mov	r7, r0
 8007c3a:	e7f0      	b.n	8007c1e <_svfiprintf_r+0x182>
 8007c3c:	ab03      	add	r3, sp, #12
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	4622      	mov	r2, r4
 8007c42:	4b11      	ldr	r3, [pc, #68]	; (8007c88 <_svfiprintf_r+0x1ec>)
 8007c44:	a904      	add	r1, sp, #16
 8007c46:	4640      	mov	r0, r8
 8007c48:	f3af 8000 	nop.w
 8007c4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c50:	4681      	mov	r9, r0
 8007c52:	d1d6      	bne.n	8007c02 <_svfiprintf_r+0x166>
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	065b      	lsls	r3, r3, #25
 8007c58:	f53f af35 	bmi.w	8007ac6 <_svfiprintf_r+0x2a>
 8007c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c5e:	b01d      	add	sp, #116	; 0x74
 8007c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c64:	ab03      	add	r3, sp, #12
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	4622      	mov	r2, r4
 8007c6a:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <_svfiprintf_r+0x1ec>)
 8007c6c:	a904      	add	r1, sp, #16
 8007c6e:	4640      	mov	r0, r8
 8007c70:	f000 f882 	bl	8007d78 <_printf_i>
 8007c74:	e7ea      	b.n	8007c4c <_svfiprintf_r+0x1b0>
 8007c76:	bf00      	nop
 8007c78:	08009244 	.word	0x08009244
 8007c7c:	0800924a 	.word	0x0800924a
 8007c80:	0800924e 	.word	0x0800924e
 8007c84:	00000000 	.word	0x00000000
 8007c88:	080079e9 	.word	0x080079e9

08007c8c <_printf_common>:
 8007c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	4691      	mov	r9, r2
 8007c92:	461f      	mov	r7, r3
 8007c94:	688a      	ldr	r2, [r1, #8]
 8007c96:	690b      	ldr	r3, [r1, #16]
 8007c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	bfb8      	it	lt
 8007ca0:	4613      	movlt	r3, r2
 8007ca2:	f8c9 3000 	str.w	r3, [r9]
 8007ca6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007caa:	4606      	mov	r6, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	b112      	cbz	r2, 8007cb6 <_printf_common+0x2a>
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c9 3000 	str.w	r3, [r9]
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	0699      	lsls	r1, r3, #26
 8007cba:	bf42      	ittt	mi
 8007cbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007cc0:	3302      	addmi	r3, #2
 8007cc2:	f8c9 3000 	strmi.w	r3, [r9]
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	f015 0506 	ands.w	r5, r5, #6
 8007ccc:	d107      	bne.n	8007cde <_printf_common+0x52>
 8007cce:	f104 0a19 	add.w	sl, r4, #25
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	42ab      	cmp	r3, r5
 8007cdc:	dc28      	bgt.n	8007d30 <_printf_common+0xa4>
 8007cde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ce2:	6822      	ldr	r2, [r4, #0]
 8007ce4:	3300      	adds	r3, #0
 8007ce6:	bf18      	it	ne
 8007ce8:	2301      	movne	r3, #1
 8007cea:	0692      	lsls	r2, r2, #26
 8007cec:	d42d      	bmi.n	8007d4a <_printf_common+0xbe>
 8007cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	47c0      	blx	r8
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d020      	beq.n	8007d3e <_printf_common+0xb2>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	68e5      	ldr	r5, [r4, #12]
 8007d00:	f8d9 2000 	ldr.w	r2, [r9]
 8007d04:	f003 0306 	and.w	r3, r3, #6
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	bf08      	it	eq
 8007d0c:	1aad      	subeq	r5, r5, r2
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	bf0c      	ite	eq
 8007d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d18:	2500      	movne	r5, #0
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	bfc4      	itt	gt
 8007d1e:	1a9b      	subgt	r3, r3, r2
 8007d20:	18ed      	addgt	r5, r5, r3
 8007d22:	f04f 0900 	mov.w	r9, #0
 8007d26:	341a      	adds	r4, #26
 8007d28:	454d      	cmp	r5, r9
 8007d2a:	d11a      	bne.n	8007d62 <_printf_common+0xd6>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e008      	b.n	8007d42 <_printf_common+0xb6>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4652      	mov	r2, sl
 8007d34:	4639      	mov	r1, r7
 8007d36:	4630      	mov	r0, r6
 8007d38:	47c0      	blx	r8
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d103      	bne.n	8007d46 <_printf_common+0xba>
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	3501      	adds	r5, #1
 8007d48:	e7c3      	b.n	8007cd2 <_printf_common+0x46>
 8007d4a:	18e1      	adds	r1, r4, r3
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	2030      	movs	r0, #48	; 0x30
 8007d50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d54:	4422      	add	r2, r4
 8007d56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d5e:	3302      	adds	r3, #2
 8007d60:	e7c5      	b.n	8007cee <_printf_common+0x62>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4622      	mov	r2, r4
 8007d66:	4639      	mov	r1, r7
 8007d68:	4630      	mov	r0, r6
 8007d6a:	47c0      	blx	r8
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d0e6      	beq.n	8007d3e <_printf_common+0xb2>
 8007d70:	f109 0901 	add.w	r9, r9, #1
 8007d74:	e7d8      	b.n	8007d28 <_printf_common+0x9c>
	...

08007d78 <_printf_i>:
 8007d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d80:	460c      	mov	r4, r1
 8007d82:	7e09      	ldrb	r1, [r1, #24]
 8007d84:	b085      	sub	sp, #20
 8007d86:	296e      	cmp	r1, #110	; 0x6e
 8007d88:	4617      	mov	r7, r2
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	4698      	mov	r8, r3
 8007d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d90:	f000 80b3 	beq.w	8007efa <_printf_i+0x182>
 8007d94:	d822      	bhi.n	8007ddc <_printf_i+0x64>
 8007d96:	2963      	cmp	r1, #99	; 0x63
 8007d98:	d036      	beq.n	8007e08 <_printf_i+0x90>
 8007d9a:	d80a      	bhi.n	8007db2 <_printf_i+0x3a>
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	f000 80b9 	beq.w	8007f14 <_printf_i+0x19c>
 8007da2:	2958      	cmp	r1, #88	; 0x58
 8007da4:	f000 8083 	beq.w	8007eae <_printf_i+0x136>
 8007da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007db0:	e032      	b.n	8007e18 <_printf_i+0xa0>
 8007db2:	2964      	cmp	r1, #100	; 0x64
 8007db4:	d001      	beq.n	8007dba <_printf_i+0x42>
 8007db6:	2969      	cmp	r1, #105	; 0x69
 8007db8:	d1f6      	bne.n	8007da8 <_printf_i+0x30>
 8007dba:	6820      	ldr	r0, [r4, #0]
 8007dbc:	6813      	ldr	r3, [r2, #0]
 8007dbe:	0605      	lsls	r5, r0, #24
 8007dc0:	f103 0104 	add.w	r1, r3, #4
 8007dc4:	d52a      	bpl.n	8007e1c <_printf_i+0xa4>
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6011      	str	r1, [r2, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	da03      	bge.n	8007dd6 <_printf_i+0x5e>
 8007dce:	222d      	movs	r2, #45	; 0x2d
 8007dd0:	425b      	negs	r3, r3
 8007dd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007dd6:	486f      	ldr	r0, [pc, #444]	; (8007f94 <_printf_i+0x21c>)
 8007dd8:	220a      	movs	r2, #10
 8007dda:	e039      	b.n	8007e50 <_printf_i+0xd8>
 8007ddc:	2973      	cmp	r1, #115	; 0x73
 8007dde:	f000 809d 	beq.w	8007f1c <_printf_i+0x1a4>
 8007de2:	d808      	bhi.n	8007df6 <_printf_i+0x7e>
 8007de4:	296f      	cmp	r1, #111	; 0x6f
 8007de6:	d020      	beq.n	8007e2a <_printf_i+0xb2>
 8007de8:	2970      	cmp	r1, #112	; 0x70
 8007dea:	d1dd      	bne.n	8007da8 <_printf_i+0x30>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	f043 0320 	orr.w	r3, r3, #32
 8007df2:	6023      	str	r3, [r4, #0]
 8007df4:	e003      	b.n	8007dfe <_printf_i+0x86>
 8007df6:	2975      	cmp	r1, #117	; 0x75
 8007df8:	d017      	beq.n	8007e2a <_printf_i+0xb2>
 8007dfa:	2978      	cmp	r1, #120	; 0x78
 8007dfc:	d1d4      	bne.n	8007da8 <_printf_i+0x30>
 8007dfe:	2378      	movs	r3, #120	; 0x78
 8007e00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e04:	4864      	ldr	r0, [pc, #400]	; (8007f98 <_printf_i+0x220>)
 8007e06:	e055      	b.n	8007eb4 <_printf_i+0x13c>
 8007e08:	6813      	ldr	r3, [r2, #0]
 8007e0a:	1d19      	adds	r1, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6011      	str	r1, [r2, #0]
 8007e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e08c      	b.n	8007f36 <_printf_i+0x1be>
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6011      	str	r1, [r2, #0]
 8007e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e24:	bf18      	it	ne
 8007e26:	b21b      	sxthne	r3, r3
 8007e28:	e7cf      	b.n	8007dca <_printf_i+0x52>
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	6825      	ldr	r5, [r4, #0]
 8007e2e:	1d18      	adds	r0, r3, #4
 8007e30:	6010      	str	r0, [r2, #0]
 8007e32:	0628      	lsls	r0, r5, #24
 8007e34:	d501      	bpl.n	8007e3a <_printf_i+0xc2>
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	e002      	b.n	8007e40 <_printf_i+0xc8>
 8007e3a:	0668      	lsls	r0, r5, #25
 8007e3c:	d5fb      	bpl.n	8007e36 <_printf_i+0xbe>
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	4854      	ldr	r0, [pc, #336]	; (8007f94 <_printf_i+0x21c>)
 8007e42:	296f      	cmp	r1, #111	; 0x6f
 8007e44:	bf14      	ite	ne
 8007e46:	220a      	movne	r2, #10
 8007e48:	2208      	moveq	r2, #8
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e50:	6865      	ldr	r5, [r4, #4]
 8007e52:	60a5      	str	r5, [r4, #8]
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	f2c0 8095 	blt.w	8007f84 <_printf_i+0x20c>
 8007e5a:	6821      	ldr	r1, [r4, #0]
 8007e5c:	f021 0104 	bic.w	r1, r1, #4
 8007e60:	6021      	str	r1, [r4, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d13d      	bne.n	8007ee2 <_printf_i+0x16a>
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	f040 808e 	bne.w	8007f88 <_printf_i+0x210>
 8007e6c:	4665      	mov	r5, ip
 8007e6e:	2a08      	cmp	r2, #8
 8007e70:	d10b      	bne.n	8007e8a <_printf_i+0x112>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	07db      	lsls	r3, r3, #31
 8007e76:	d508      	bpl.n	8007e8a <_printf_i+0x112>
 8007e78:	6923      	ldr	r3, [r4, #16]
 8007e7a:	6862      	ldr	r2, [r4, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	bfde      	ittt	le
 8007e80:	2330      	movle	r3, #48	; 0x30
 8007e82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e8a:	ebac 0305 	sub.w	r3, ip, r5
 8007e8e:	6123      	str	r3, [r4, #16]
 8007e90:	f8cd 8000 	str.w	r8, [sp]
 8007e94:	463b      	mov	r3, r7
 8007e96:	aa03      	add	r2, sp, #12
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff fef6 	bl	8007c8c <_printf_common>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d14d      	bne.n	8007f40 <_printf_i+0x1c8>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	b005      	add	sp, #20
 8007eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eae:	4839      	ldr	r0, [pc, #228]	; (8007f94 <_printf_i+0x21c>)
 8007eb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007eb4:	6813      	ldr	r3, [r2, #0]
 8007eb6:	6821      	ldr	r1, [r4, #0]
 8007eb8:	1d1d      	adds	r5, r3, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6015      	str	r5, [r2, #0]
 8007ebe:	060a      	lsls	r2, r1, #24
 8007ec0:	d50b      	bpl.n	8007eda <_printf_i+0x162>
 8007ec2:	07ca      	lsls	r2, r1, #31
 8007ec4:	bf44      	itt	mi
 8007ec6:	f041 0120 	orrmi.w	r1, r1, #32
 8007eca:	6021      	strmi	r1, [r4, #0]
 8007ecc:	b91b      	cbnz	r3, 8007ed6 <_printf_i+0x15e>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	f022 0220 	bic.w	r2, r2, #32
 8007ed4:	6022      	str	r2, [r4, #0]
 8007ed6:	2210      	movs	r2, #16
 8007ed8:	e7b7      	b.n	8007e4a <_printf_i+0xd2>
 8007eda:	064d      	lsls	r5, r1, #25
 8007edc:	bf48      	it	mi
 8007ede:	b29b      	uxthmi	r3, r3
 8007ee0:	e7ef      	b.n	8007ec2 <_printf_i+0x14a>
 8007ee2:	4665      	mov	r5, ip
 8007ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ee8:	fb02 3311 	mls	r3, r2, r1, r3
 8007eec:	5cc3      	ldrb	r3, [r0, r3]
 8007eee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	d1f5      	bne.n	8007ee4 <_printf_i+0x16c>
 8007ef8:	e7b9      	b.n	8007e6e <_printf_i+0xf6>
 8007efa:	6813      	ldr	r3, [r2, #0]
 8007efc:	6825      	ldr	r5, [r4, #0]
 8007efe:	6961      	ldr	r1, [r4, #20]
 8007f00:	1d18      	adds	r0, r3, #4
 8007f02:	6010      	str	r0, [r2, #0]
 8007f04:	0628      	lsls	r0, r5, #24
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	d501      	bpl.n	8007f0e <_printf_i+0x196>
 8007f0a:	6019      	str	r1, [r3, #0]
 8007f0c:	e002      	b.n	8007f14 <_printf_i+0x19c>
 8007f0e:	066a      	lsls	r2, r5, #25
 8007f10:	d5fb      	bpl.n	8007f0a <_printf_i+0x192>
 8007f12:	8019      	strh	r1, [r3, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	4665      	mov	r5, ip
 8007f1a:	e7b9      	b.n	8007e90 <_printf_i+0x118>
 8007f1c:	6813      	ldr	r3, [r2, #0]
 8007f1e:	1d19      	adds	r1, r3, #4
 8007f20:	6011      	str	r1, [r2, #0]
 8007f22:	681d      	ldr	r5, [r3, #0]
 8007f24:	6862      	ldr	r2, [r4, #4]
 8007f26:	2100      	movs	r1, #0
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f7f8 f979 	bl	8000220 <memchr>
 8007f2e:	b108      	cbz	r0, 8007f34 <_printf_i+0x1bc>
 8007f30:	1b40      	subs	r0, r0, r5
 8007f32:	6060      	str	r0, [r4, #4]
 8007f34:	6863      	ldr	r3, [r4, #4]
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3e:	e7a7      	b.n	8007e90 <_printf_i+0x118>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	462a      	mov	r2, r5
 8007f44:	4639      	mov	r1, r7
 8007f46:	4630      	mov	r0, r6
 8007f48:	47c0      	blx	r8
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d0aa      	beq.n	8007ea4 <_printf_i+0x12c>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	079b      	lsls	r3, r3, #30
 8007f52:	d413      	bmi.n	8007f7c <_printf_i+0x204>
 8007f54:	68e0      	ldr	r0, [r4, #12]
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	4298      	cmp	r0, r3
 8007f5a:	bfb8      	it	lt
 8007f5c:	4618      	movlt	r0, r3
 8007f5e:	e7a3      	b.n	8007ea8 <_printf_i+0x130>
 8007f60:	2301      	movs	r3, #1
 8007f62:	464a      	mov	r2, r9
 8007f64:	4639      	mov	r1, r7
 8007f66:	4630      	mov	r0, r6
 8007f68:	47c0      	blx	r8
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d09a      	beq.n	8007ea4 <_printf_i+0x12c>
 8007f6e:	3501      	adds	r5, #1
 8007f70:	68e3      	ldr	r3, [r4, #12]
 8007f72:	9a03      	ldr	r2, [sp, #12]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	42ab      	cmp	r3, r5
 8007f78:	dcf2      	bgt.n	8007f60 <_printf_i+0x1e8>
 8007f7a:	e7eb      	b.n	8007f54 <_printf_i+0x1dc>
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	f104 0919 	add.w	r9, r4, #25
 8007f82:	e7f5      	b.n	8007f70 <_printf_i+0x1f8>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1ac      	bne.n	8007ee2 <_printf_i+0x16a>
 8007f88:	7803      	ldrb	r3, [r0, #0]
 8007f8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f92:	e76c      	b.n	8007e6e <_printf_i+0xf6>
 8007f94:	08009255 	.word	0x08009255
 8007f98:	08009266 	.word	0x08009266

08007f9c <memcpy>:
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	1e43      	subs	r3, r0, #1
 8007fa0:	440a      	add	r2, r1
 8007fa2:	4291      	cmp	r1, r2
 8007fa4:	d100      	bne.n	8007fa8 <memcpy+0xc>
 8007fa6:	bd10      	pop	{r4, pc}
 8007fa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fb0:	e7f7      	b.n	8007fa2 <memcpy+0x6>

08007fb2 <memmove>:
 8007fb2:	4288      	cmp	r0, r1
 8007fb4:	b510      	push	{r4, lr}
 8007fb6:	eb01 0302 	add.w	r3, r1, r2
 8007fba:	d807      	bhi.n	8007fcc <memmove+0x1a>
 8007fbc:	1e42      	subs	r2, r0, #1
 8007fbe:	4299      	cmp	r1, r3
 8007fc0:	d00a      	beq.n	8007fd8 <memmove+0x26>
 8007fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fc6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007fca:	e7f8      	b.n	8007fbe <memmove+0xc>
 8007fcc:	4283      	cmp	r3, r0
 8007fce:	d9f5      	bls.n	8007fbc <memmove+0xa>
 8007fd0:	1881      	adds	r1, r0, r2
 8007fd2:	1ad2      	subs	r2, r2, r3
 8007fd4:	42d3      	cmn	r3, r2
 8007fd6:	d100      	bne.n	8007fda <memmove+0x28>
 8007fd8:	bd10      	pop	{r4, pc}
 8007fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fde:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007fe2:	e7f7      	b.n	8007fd4 <memmove+0x22>

08007fe4 <_free_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	d045      	beq.n	8008078 <_free_r+0x94>
 8007fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff0:	1f0c      	subs	r4, r1, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	bfb8      	it	lt
 8007ff6:	18e4      	addlt	r4, r4, r3
 8007ff8:	f000 f8d2 	bl	80081a0 <__malloc_lock>
 8007ffc:	4a1f      	ldr	r2, [pc, #124]	; (800807c <_free_r+0x98>)
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	4610      	mov	r0, r2
 8008002:	b933      	cbnz	r3, 8008012 <_free_r+0x2e>
 8008004:	6063      	str	r3, [r4, #4]
 8008006:	6014      	str	r4, [r2, #0]
 8008008:	4628      	mov	r0, r5
 800800a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800800e:	f000 b8c8 	b.w	80081a2 <__malloc_unlock>
 8008012:	42a3      	cmp	r3, r4
 8008014:	d90c      	bls.n	8008030 <_free_r+0x4c>
 8008016:	6821      	ldr	r1, [r4, #0]
 8008018:	1862      	adds	r2, r4, r1
 800801a:	4293      	cmp	r3, r2
 800801c:	bf04      	itt	eq
 800801e:	681a      	ldreq	r2, [r3, #0]
 8008020:	685b      	ldreq	r3, [r3, #4]
 8008022:	6063      	str	r3, [r4, #4]
 8008024:	bf04      	itt	eq
 8008026:	1852      	addeq	r2, r2, r1
 8008028:	6022      	streq	r2, [r4, #0]
 800802a:	6004      	str	r4, [r0, #0]
 800802c:	e7ec      	b.n	8008008 <_free_r+0x24>
 800802e:	4613      	mov	r3, r2
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	b10a      	cbz	r2, 8008038 <_free_r+0x54>
 8008034:	42a2      	cmp	r2, r4
 8008036:	d9fa      	bls.n	800802e <_free_r+0x4a>
 8008038:	6819      	ldr	r1, [r3, #0]
 800803a:	1858      	adds	r0, r3, r1
 800803c:	42a0      	cmp	r0, r4
 800803e:	d10b      	bne.n	8008058 <_free_r+0x74>
 8008040:	6820      	ldr	r0, [r4, #0]
 8008042:	4401      	add	r1, r0
 8008044:	1858      	adds	r0, r3, r1
 8008046:	4282      	cmp	r2, r0
 8008048:	6019      	str	r1, [r3, #0]
 800804a:	d1dd      	bne.n	8008008 <_free_r+0x24>
 800804c:	6810      	ldr	r0, [r2, #0]
 800804e:	6852      	ldr	r2, [r2, #4]
 8008050:	605a      	str	r2, [r3, #4]
 8008052:	4401      	add	r1, r0
 8008054:	6019      	str	r1, [r3, #0]
 8008056:	e7d7      	b.n	8008008 <_free_r+0x24>
 8008058:	d902      	bls.n	8008060 <_free_r+0x7c>
 800805a:	230c      	movs	r3, #12
 800805c:	602b      	str	r3, [r5, #0]
 800805e:	e7d3      	b.n	8008008 <_free_r+0x24>
 8008060:	6820      	ldr	r0, [r4, #0]
 8008062:	1821      	adds	r1, r4, r0
 8008064:	428a      	cmp	r2, r1
 8008066:	bf04      	itt	eq
 8008068:	6811      	ldreq	r1, [r2, #0]
 800806a:	6852      	ldreq	r2, [r2, #4]
 800806c:	6062      	str	r2, [r4, #4]
 800806e:	bf04      	itt	eq
 8008070:	1809      	addeq	r1, r1, r0
 8008072:	6021      	streq	r1, [r4, #0]
 8008074:	605c      	str	r4, [r3, #4]
 8008076:	e7c7      	b.n	8008008 <_free_r+0x24>
 8008078:	bd38      	pop	{r3, r4, r5, pc}
 800807a:	bf00      	nop
 800807c:	200000e0 	.word	0x200000e0

08008080 <_malloc_r>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	1ccd      	adds	r5, r1, #3
 8008084:	f025 0503 	bic.w	r5, r5, #3
 8008088:	3508      	adds	r5, #8
 800808a:	2d0c      	cmp	r5, #12
 800808c:	bf38      	it	cc
 800808e:	250c      	movcc	r5, #12
 8008090:	2d00      	cmp	r5, #0
 8008092:	4606      	mov	r6, r0
 8008094:	db01      	blt.n	800809a <_malloc_r+0x1a>
 8008096:	42a9      	cmp	r1, r5
 8008098:	d903      	bls.n	80080a2 <_malloc_r+0x22>
 800809a:	230c      	movs	r3, #12
 800809c:	6033      	str	r3, [r6, #0]
 800809e:	2000      	movs	r0, #0
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
 80080a2:	f000 f87d 	bl	80081a0 <__malloc_lock>
 80080a6:	4a21      	ldr	r2, [pc, #132]	; (800812c <_malloc_r+0xac>)
 80080a8:	6814      	ldr	r4, [r2, #0]
 80080aa:	4621      	mov	r1, r4
 80080ac:	b991      	cbnz	r1, 80080d4 <_malloc_r+0x54>
 80080ae:	4c20      	ldr	r4, [pc, #128]	; (8008130 <_malloc_r+0xb0>)
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	b91b      	cbnz	r3, 80080bc <_malloc_r+0x3c>
 80080b4:	4630      	mov	r0, r6
 80080b6:	f000 f863 	bl	8008180 <_sbrk_r>
 80080ba:	6020      	str	r0, [r4, #0]
 80080bc:	4629      	mov	r1, r5
 80080be:	4630      	mov	r0, r6
 80080c0:	f000 f85e 	bl	8008180 <_sbrk_r>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d124      	bne.n	8008112 <_malloc_r+0x92>
 80080c8:	230c      	movs	r3, #12
 80080ca:	6033      	str	r3, [r6, #0]
 80080cc:	4630      	mov	r0, r6
 80080ce:	f000 f868 	bl	80081a2 <__malloc_unlock>
 80080d2:	e7e4      	b.n	800809e <_malloc_r+0x1e>
 80080d4:	680b      	ldr	r3, [r1, #0]
 80080d6:	1b5b      	subs	r3, r3, r5
 80080d8:	d418      	bmi.n	800810c <_malloc_r+0x8c>
 80080da:	2b0b      	cmp	r3, #11
 80080dc:	d90f      	bls.n	80080fe <_malloc_r+0x7e>
 80080de:	600b      	str	r3, [r1, #0]
 80080e0:	50cd      	str	r5, [r1, r3]
 80080e2:	18cc      	adds	r4, r1, r3
 80080e4:	4630      	mov	r0, r6
 80080e6:	f000 f85c 	bl	80081a2 <__malloc_unlock>
 80080ea:	f104 000b 	add.w	r0, r4, #11
 80080ee:	1d23      	adds	r3, r4, #4
 80080f0:	f020 0007 	bic.w	r0, r0, #7
 80080f4:	1ac3      	subs	r3, r0, r3
 80080f6:	d0d3      	beq.n	80080a0 <_malloc_r+0x20>
 80080f8:	425a      	negs	r2, r3
 80080fa:	50e2      	str	r2, [r4, r3]
 80080fc:	e7d0      	b.n	80080a0 <_malloc_r+0x20>
 80080fe:	428c      	cmp	r4, r1
 8008100:	684b      	ldr	r3, [r1, #4]
 8008102:	bf16      	itet	ne
 8008104:	6063      	strne	r3, [r4, #4]
 8008106:	6013      	streq	r3, [r2, #0]
 8008108:	460c      	movne	r4, r1
 800810a:	e7eb      	b.n	80080e4 <_malloc_r+0x64>
 800810c:	460c      	mov	r4, r1
 800810e:	6849      	ldr	r1, [r1, #4]
 8008110:	e7cc      	b.n	80080ac <_malloc_r+0x2c>
 8008112:	1cc4      	adds	r4, r0, #3
 8008114:	f024 0403 	bic.w	r4, r4, #3
 8008118:	42a0      	cmp	r0, r4
 800811a:	d005      	beq.n	8008128 <_malloc_r+0xa8>
 800811c:	1a21      	subs	r1, r4, r0
 800811e:	4630      	mov	r0, r6
 8008120:	f000 f82e 	bl	8008180 <_sbrk_r>
 8008124:	3001      	adds	r0, #1
 8008126:	d0cf      	beq.n	80080c8 <_malloc_r+0x48>
 8008128:	6025      	str	r5, [r4, #0]
 800812a:	e7db      	b.n	80080e4 <_malloc_r+0x64>
 800812c:	200000e0 	.word	0x200000e0
 8008130:	200000e4 	.word	0x200000e4

08008134 <_realloc_r>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	4607      	mov	r7, r0
 8008138:	4614      	mov	r4, r2
 800813a:	460e      	mov	r6, r1
 800813c:	b921      	cbnz	r1, 8008148 <_realloc_r+0x14>
 800813e:	4611      	mov	r1, r2
 8008140:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008144:	f7ff bf9c 	b.w	8008080 <_malloc_r>
 8008148:	b922      	cbnz	r2, 8008154 <_realloc_r+0x20>
 800814a:	f7ff ff4b 	bl	8007fe4 <_free_r>
 800814e:	4625      	mov	r5, r4
 8008150:	4628      	mov	r0, r5
 8008152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008154:	f000 f826 	bl	80081a4 <_malloc_usable_size_r>
 8008158:	42a0      	cmp	r0, r4
 800815a:	d20f      	bcs.n	800817c <_realloc_r+0x48>
 800815c:	4621      	mov	r1, r4
 800815e:	4638      	mov	r0, r7
 8008160:	f7ff ff8e 	bl	8008080 <_malloc_r>
 8008164:	4605      	mov	r5, r0
 8008166:	2800      	cmp	r0, #0
 8008168:	d0f2      	beq.n	8008150 <_realloc_r+0x1c>
 800816a:	4631      	mov	r1, r6
 800816c:	4622      	mov	r2, r4
 800816e:	f7ff ff15 	bl	8007f9c <memcpy>
 8008172:	4631      	mov	r1, r6
 8008174:	4638      	mov	r0, r7
 8008176:	f7ff ff35 	bl	8007fe4 <_free_r>
 800817a:	e7e9      	b.n	8008150 <_realloc_r+0x1c>
 800817c:	4635      	mov	r5, r6
 800817e:	e7e7      	b.n	8008150 <_realloc_r+0x1c>

08008180 <_sbrk_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4c06      	ldr	r4, [pc, #24]	; (800819c <_sbrk_r+0x1c>)
 8008184:	2300      	movs	r3, #0
 8008186:	4605      	mov	r5, r0
 8008188:	4608      	mov	r0, r1
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	f7f9 fed8 	bl	8001f40 <_sbrk>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d102      	bne.n	800819a <_sbrk_r+0x1a>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	b103      	cbz	r3, 800819a <_sbrk_r+0x1a>
 8008198:	602b      	str	r3, [r5, #0]
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	20000844 	.word	0x20000844

080081a0 <__malloc_lock>:
 80081a0:	4770      	bx	lr

080081a2 <__malloc_unlock>:
 80081a2:	4770      	bx	lr

080081a4 <_malloc_usable_size_r>:
 80081a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a8:	1f18      	subs	r0, r3, #4
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bfbc      	itt	lt
 80081ae:	580b      	ldrlt	r3, [r1, r0]
 80081b0:	18c0      	addlt	r0, r0, r3
 80081b2:	4770      	bx	lr
 80081b4:	0000      	movs	r0, r0
	...

080081b8 <sin>:
 80081b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081ba:	ec51 0b10 	vmov	r0, r1, d0
 80081be:	4a20      	ldr	r2, [pc, #128]	; (8008240 <sin+0x88>)
 80081c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081c4:	4293      	cmp	r3, r2
 80081c6:	dc07      	bgt.n	80081d8 <sin+0x20>
 80081c8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8008238 <sin+0x80>
 80081cc:	2000      	movs	r0, #0
 80081ce:	f000 fe37 	bl	8008e40 <__kernel_sin>
 80081d2:	ec51 0b10 	vmov	r0, r1, d0
 80081d6:	e007      	b.n	80081e8 <sin+0x30>
 80081d8:	4a1a      	ldr	r2, [pc, #104]	; (8008244 <sin+0x8c>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	dd09      	ble.n	80081f2 <sin+0x3a>
 80081de:	ee10 2a10 	vmov	r2, s0
 80081e2:	460b      	mov	r3, r1
 80081e4:	f7f8 f870 	bl	80002c8 <__aeabi_dsub>
 80081e8:	ec41 0b10 	vmov	d0, r0, r1
 80081ec:	b005      	add	sp, #20
 80081ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80081f2:	4668      	mov	r0, sp
 80081f4:	f000 f828 	bl	8008248 <__ieee754_rem_pio2>
 80081f8:	f000 0003 	and.w	r0, r0, #3
 80081fc:	2801      	cmp	r0, #1
 80081fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008202:	ed9d 0b00 	vldr	d0, [sp]
 8008206:	d004      	beq.n	8008212 <sin+0x5a>
 8008208:	2802      	cmp	r0, #2
 800820a:	d005      	beq.n	8008218 <sin+0x60>
 800820c:	b970      	cbnz	r0, 800822c <sin+0x74>
 800820e:	2001      	movs	r0, #1
 8008210:	e7dd      	b.n	80081ce <sin+0x16>
 8008212:	f000 fa0d 	bl	8008630 <__kernel_cos>
 8008216:	e7dc      	b.n	80081d2 <sin+0x1a>
 8008218:	2001      	movs	r0, #1
 800821a:	f000 fe11 	bl	8008e40 <__kernel_sin>
 800821e:	ec53 2b10 	vmov	r2, r3, d0
 8008222:	ee10 0a10 	vmov	r0, s0
 8008226:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800822a:	e7dd      	b.n	80081e8 <sin+0x30>
 800822c:	f000 fa00 	bl	8008630 <__kernel_cos>
 8008230:	e7f5      	b.n	800821e <sin+0x66>
 8008232:	bf00      	nop
 8008234:	f3af 8000 	nop.w
	...
 8008240:	3fe921fb 	.word	0x3fe921fb
 8008244:	7fefffff 	.word	0x7fefffff

08008248 <__ieee754_rem_pio2>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	ec57 6b10 	vmov	r6, r7, d0
 8008250:	4bc3      	ldr	r3, [pc, #780]	; (8008560 <__ieee754_rem_pio2+0x318>)
 8008252:	b08d      	sub	sp, #52	; 0x34
 8008254:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008258:	4598      	cmp	r8, r3
 800825a:	4604      	mov	r4, r0
 800825c:	9704      	str	r7, [sp, #16]
 800825e:	dc07      	bgt.n	8008270 <__ieee754_rem_pio2+0x28>
 8008260:	2200      	movs	r2, #0
 8008262:	2300      	movs	r3, #0
 8008264:	ed84 0b00 	vstr	d0, [r4]
 8008268:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800826c:	2500      	movs	r5, #0
 800826e:	e027      	b.n	80082c0 <__ieee754_rem_pio2+0x78>
 8008270:	4bbc      	ldr	r3, [pc, #752]	; (8008564 <__ieee754_rem_pio2+0x31c>)
 8008272:	4598      	cmp	r8, r3
 8008274:	dc75      	bgt.n	8008362 <__ieee754_rem_pio2+0x11a>
 8008276:	9b04      	ldr	r3, [sp, #16]
 8008278:	4dbb      	ldr	r5, [pc, #748]	; (8008568 <__ieee754_rem_pio2+0x320>)
 800827a:	2b00      	cmp	r3, #0
 800827c:	ee10 0a10 	vmov	r0, s0
 8008280:	a3a9      	add	r3, pc, #676	; (adr r3, 8008528 <__ieee754_rem_pio2+0x2e0>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	4639      	mov	r1, r7
 8008288:	dd36      	ble.n	80082f8 <__ieee754_rem_pio2+0xb0>
 800828a:	f7f8 f81d 	bl	80002c8 <__aeabi_dsub>
 800828e:	45a8      	cmp	r8, r5
 8008290:	4606      	mov	r6, r0
 8008292:	460f      	mov	r7, r1
 8008294:	d018      	beq.n	80082c8 <__ieee754_rem_pio2+0x80>
 8008296:	a3a6      	add	r3, pc, #664	; (adr r3, 8008530 <__ieee754_rem_pio2+0x2e8>)
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f7f8 f814 	bl	80002c8 <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	e9c4 2300 	strd	r2, r3, [r4]
 80082a8:	4630      	mov	r0, r6
 80082aa:	4639      	mov	r1, r7
 80082ac:	f7f8 f80c 	bl	80002c8 <__aeabi_dsub>
 80082b0:	a39f      	add	r3, pc, #636	; (adr r3, 8008530 <__ieee754_rem_pio2+0x2e8>)
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f7f8 f807 	bl	80002c8 <__aeabi_dsub>
 80082ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80082be:	2501      	movs	r5, #1
 80082c0:	4628      	mov	r0, r5
 80082c2:	b00d      	add	sp, #52	; 0x34
 80082c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c8:	a39b      	add	r3, pc, #620	; (adr r3, 8008538 <__ieee754_rem_pio2+0x2f0>)
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	f7f7 fffb 	bl	80002c8 <__aeabi_dsub>
 80082d2:	a39b      	add	r3, pc, #620	; (adr r3, 8008540 <__ieee754_rem_pio2+0x2f8>)
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	4606      	mov	r6, r0
 80082da:	460f      	mov	r7, r1
 80082dc:	f7f7 fff4 	bl	80002c8 <__aeabi_dsub>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	e9c4 2300 	strd	r2, r3, [r4]
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f7 ffec 	bl	80002c8 <__aeabi_dsub>
 80082f0:	a393      	add	r3, pc, #588	; (adr r3, 8008540 <__ieee754_rem_pio2+0x2f8>)
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	e7de      	b.n	80082b6 <__ieee754_rem_pio2+0x6e>
 80082f8:	f7f7 ffe8 	bl	80002cc <__adddf3>
 80082fc:	45a8      	cmp	r8, r5
 80082fe:	4606      	mov	r6, r0
 8008300:	460f      	mov	r7, r1
 8008302:	d016      	beq.n	8008332 <__ieee754_rem_pio2+0xea>
 8008304:	a38a      	add	r3, pc, #552	; (adr r3, 8008530 <__ieee754_rem_pio2+0x2e8>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f7 ffdf 	bl	80002cc <__adddf3>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	e9c4 2300 	strd	r2, r3, [r4]
 8008316:	4630      	mov	r0, r6
 8008318:	4639      	mov	r1, r7
 800831a:	f7f7 ffd5 	bl	80002c8 <__aeabi_dsub>
 800831e:	a384      	add	r3, pc, #528	; (adr r3, 8008530 <__ieee754_rem_pio2+0x2e8>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f7f7 ffd2 	bl	80002cc <__adddf3>
 8008328:	f04f 35ff 	mov.w	r5, #4294967295
 800832c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008330:	e7c6      	b.n	80082c0 <__ieee754_rem_pio2+0x78>
 8008332:	a381      	add	r3, pc, #516	; (adr r3, 8008538 <__ieee754_rem_pio2+0x2f0>)
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	f7f7 ffc8 	bl	80002cc <__adddf3>
 800833c:	a380      	add	r3, pc, #512	; (adr r3, 8008540 <__ieee754_rem_pio2+0x2f8>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	4606      	mov	r6, r0
 8008344:	460f      	mov	r7, r1
 8008346:	f7f7 ffc1 	bl	80002cc <__adddf3>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	e9c4 2300 	strd	r2, r3, [r4]
 8008352:	4630      	mov	r0, r6
 8008354:	4639      	mov	r1, r7
 8008356:	f7f7 ffb7 	bl	80002c8 <__aeabi_dsub>
 800835a:	a379      	add	r3, pc, #484	; (adr r3, 8008540 <__ieee754_rem_pio2+0x2f8>)
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	e7e0      	b.n	8008324 <__ieee754_rem_pio2+0xdc>
 8008362:	4b82      	ldr	r3, [pc, #520]	; (800856c <__ieee754_rem_pio2+0x324>)
 8008364:	4598      	cmp	r8, r3
 8008366:	f300 80d0 	bgt.w	800850a <__ieee754_rem_pio2+0x2c2>
 800836a:	f000 fe23 	bl	8008fb4 <fabs>
 800836e:	ec57 6b10 	vmov	r6, r7, d0
 8008372:	ee10 0a10 	vmov	r0, s0
 8008376:	a374      	add	r3, pc, #464	; (adr r3, 8008548 <__ieee754_rem_pio2+0x300>)
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	4639      	mov	r1, r7
 800837e:	f7f8 f95b 	bl	8000638 <__aeabi_dmul>
 8008382:	2200      	movs	r2, #0
 8008384:	4b7a      	ldr	r3, [pc, #488]	; (8008570 <__ieee754_rem_pio2+0x328>)
 8008386:	f7f7 ffa1 	bl	80002cc <__adddf3>
 800838a:	f7f8 fbef 	bl	8000b6c <__aeabi_d2iz>
 800838e:	4605      	mov	r5, r0
 8008390:	f7f8 f8e8 	bl	8000564 <__aeabi_i2d>
 8008394:	a364      	add	r3, pc, #400	; (adr r3, 8008528 <__ieee754_rem_pio2+0x2e0>)
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800839e:	f7f8 f94b 	bl	8000638 <__aeabi_dmul>
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	4630      	mov	r0, r6
 80083a8:	4639      	mov	r1, r7
 80083aa:	f7f7 ff8d 	bl	80002c8 <__aeabi_dsub>
 80083ae:	a360      	add	r3, pc, #384	; (adr r3, 8008530 <__ieee754_rem_pio2+0x2e8>)
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	4682      	mov	sl, r0
 80083b6:	468b      	mov	fp, r1
 80083b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083bc:	f7f8 f93c 	bl	8000638 <__aeabi_dmul>
 80083c0:	2d1f      	cmp	r5, #31
 80083c2:	4606      	mov	r6, r0
 80083c4:	460f      	mov	r7, r1
 80083c6:	dc0c      	bgt.n	80083e2 <__ieee754_rem_pio2+0x19a>
 80083c8:	1e6a      	subs	r2, r5, #1
 80083ca:	4b6a      	ldr	r3, [pc, #424]	; (8008574 <__ieee754_rem_pio2+0x32c>)
 80083cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d0:	4543      	cmp	r3, r8
 80083d2:	d006      	beq.n	80083e2 <__ieee754_rem_pio2+0x19a>
 80083d4:	4632      	mov	r2, r6
 80083d6:	463b      	mov	r3, r7
 80083d8:	4650      	mov	r0, sl
 80083da:	4659      	mov	r1, fp
 80083dc:	f7f7 ff74 	bl	80002c8 <__aeabi_dsub>
 80083e0:	e00e      	b.n	8008400 <__ieee754_rem_pio2+0x1b8>
 80083e2:	4632      	mov	r2, r6
 80083e4:	463b      	mov	r3, r7
 80083e6:	4650      	mov	r0, sl
 80083e8:	4659      	mov	r1, fp
 80083ea:	f7f7 ff6d 	bl	80002c8 <__aeabi_dsub>
 80083ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 80083f2:	9305      	str	r3, [sp, #20]
 80083f4:	9a05      	ldr	r2, [sp, #20]
 80083f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b10      	cmp	r3, #16
 80083fe:	dc02      	bgt.n	8008406 <__ieee754_rem_pio2+0x1be>
 8008400:	e9c4 0100 	strd	r0, r1, [r4]
 8008404:	e039      	b.n	800847a <__ieee754_rem_pio2+0x232>
 8008406:	a34c      	add	r3, pc, #304	; (adr r3, 8008538 <__ieee754_rem_pio2+0x2f0>)
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008410:	f7f8 f912 	bl	8000638 <__aeabi_dmul>
 8008414:	4606      	mov	r6, r0
 8008416:	460f      	mov	r7, r1
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4650      	mov	r0, sl
 800841e:	4659      	mov	r1, fp
 8008420:	f7f7 ff52 	bl	80002c8 <__aeabi_dsub>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4680      	mov	r8, r0
 800842a:	4689      	mov	r9, r1
 800842c:	4650      	mov	r0, sl
 800842e:	4659      	mov	r1, fp
 8008430:	f7f7 ff4a 	bl	80002c8 <__aeabi_dsub>
 8008434:	4632      	mov	r2, r6
 8008436:	463b      	mov	r3, r7
 8008438:	f7f7 ff46 	bl	80002c8 <__aeabi_dsub>
 800843c:	a340      	add	r3, pc, #256	; (adr r3, 8008540 <__ieee754_rem_pio2+0x2f8>)
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	4606      	mov	r6, r0
 8008444:	460f      	mov	r7, r1
 8008446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800844a:	f7f8 f8f5 	bl	8000638 <__aeabi_dmul>
 800844e:	4632      	mov	r2, r6
 8008450:	463b      	mov	r3, r7
 8008452:	f7f7 ff39 	bl	80002c8 <__aeabi_dsub>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4606      	mov	r6, r0
 800845c:	460f      	mov	r7, r1
 800845e:	4640      	mov	r0, r8
 8008460:	4649      	mov	r1, r9
 8008462:	f7f7 ff31 	bl	80002c8 <__aeabi_dsub>
 8008466:	9a05      	ldr	r2, [sp, #20]
 8008468:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b31      	cmp	r3, #49	; 0x31
 8008470:	dc20      	bgt.n	80084b4 <__ieee754_rem_pio2+0x26c>
 8008472:	e9c4 0100 	strd	r0, r1, [r4]
 8008476:	46c2      	mov	sl, r8
 8008478:	46cb      	mov	fp, r9
 800847a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800847e:	4650      	mov	r0, sl
 8008480:	4642      	mov	r2, r8
 8008482:	464b      	mov	r3, r9
 8008484:	4659      	mov	r1, fp
 8008486:	f7f7 ff1f 	bl	80002c8 <__aeabi_dsub>
 800848a:	463b      	mov	r3, r7
 800848c:	4632      	mov	r2, r6
 800848e:	f7f7 ff1b 	bl	80002c8 <__aeabi_dsub>
 8008492:	9b04      	ldr	r3, [sp, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800849a:	f6bf af11 	bge.w	80082c0 <__ieee754_rem_pio2+0x78>
 800849e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80084a2:	6063      	str	r3, [r4, #4]
 80084a4:	f8c4 8000 	str.w	r8, [r4]
 80084a8:	60a0      	str	r0, [r4, #8]
 80084aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084ae:	60e3      	str	r3, [r4, #12]
 80084b0:	426d      	negs	r5, r5
 80084b2:	e705      	b.n	80082c0 <__ieee754_rem_pio2+0x78>
 80084b4:	a326      	add	r3, pc, #152	; (adr r3, 8008550 <__ieee754_rem_pio2+0x308>)
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084be:	f7f8 f8bb 	bl	8000638 <__aeabi_dmul>
 80084c2:	4606      	mov	r6, r0
 80084c4:	460f      	mov	r7, r1
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4640      	mov	r0, r8
 80084cc:	4649      	mov	r1, r9
 80084ce:	f7f7 fefb 	bl	80002c8 <__aeabi_dsub>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	4682      	mov	sl, r0
 80084d8:	468b      	mov	fp, r1
 80084da:	4640      	mov	r0, r8
 80084dc:	4649      	mov	r1, r9
 80084de:	f7f7 fef3 	bl	80002c8 <__aeabi_dsub>
 80084e2:	4632      	mov	r2, r6
 80084e4:	463b      	mov	r3, r7
 80084e6:	f7f7 feef 	bl	80002c8 <__aeabi_dsub>
 80084ea:	a31b      	add	r3, pc, #108	; (adr r3, 8008558 <__ieee754_rem_pio2+0x310>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	4606      	mov	r6, r0
 80084f2:	460f      	mov	r7, r1
 80084f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084f8:	f7f8 f89e 	bl	8000638 <__aeabi_dmul>
 80084fc:	4632      	mov	r2, r6
 80084fe:	463b      	mov	r3, r7
 8008500:	f7f7 fee2 	bl	80002c8 <__aeabi_dsub>
 8008504:	4606      	mov	r6, r0
 8008506:	460f      	mov	r7, r1
 8008508:	e764      	b.n	80083d4 <__ieee754_rem_pio2+0x18c>
 800850a:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <__ieee754_rem_pio2+0x330>)
 800850c:	4598      	cmp	r8, r3
 800850e:	dd35      	ble.n	800857c <__ieee754_rem_pio2+0x334>
 8008510:	ee10 2a10 	vmov	r2, s0
 8008514:	463b      	mov	r3, r7
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f7 fed5 	bl	80002c8 <__aeabi_dsub>
 800851e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008522:	e9c4 0100 	strd	r0, r1, [r4]
 8008526:	e6a1      	b.n	800826c <__ieee754_rem_pio2+0x24>
 8008528:	54400000 	.word	0x54400000
 800852c:	3ff921fb 	.word	0x3ff921fb
 8008530:	1a626331 	.word	0x1a626331
 8008534:	3dd0b461 	.word	0x3dd0b461
 8008538:	1a600000 	.word	0x1a600000
 800853c:	3dd0b461 	.word	0x3dd0b461
 8008540:	2e037073 	.word	0x2e037073
 8008544:	3ba3198a 	.word	0x3ba3198a
 8008548:	6dc9c883 	.word	0x6dc9c883
 800854c:	3fe45f30 	.word	0x3fe45f30
 8008550:	2e000000 	.word	0x2e000000
 8008554:	3ba3198a 	.word	0x3ba3198a
 8008558:	252049c1 	.word	0x252049c1
 800855c:	397b839a 	.word	0x397b839a
 8008560:	3fe921fb 	.word	0x3fe921fb
 8008564:	4002d97b 	.word	0x4002d97b
 8008568:	3ff921fb 	.word	0x3ff921fb
 800856c:	413921fb 	.word	0x413921fb
 8008570:	3fe00000 	.word	0x3fe00000
 8008574:	08009278 	.word	0x08009278
 8008578:	7fefffff 	.word	0x7fefffff
 800857c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008580:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008584:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008588:	4630      	mov	r0, r6
 800858a:	460f      	mov	r7, r1
 800858c:	f7f8 faee 	bl	8000b6c <__aeabi_d2iz>
 8008590:	f7f7 ffe8 	bl	8000564 <__aeabi_i2d>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80085a0:	f7f7 fe92 	bl	80002c8 <__aeabi_dsub>
 80085a4:	2200      	movs	r2, #0
 80085a6:	4b1f      	ldr	r3, [pc, #124]	; (8008624 <__ieee754_rem_pio2+0x3dc>)
 80085a8:	f7f8 f846 	bl	8000638 <__aeabi_dmul>
 80085ac:	460f      	mov	r7, r1
 80085ae:	4606      	mov	r6, r0
 80085b0:	f7f8 fadc 	bl	8000b6c <__aeabi_d2iz>
 80085b4:	f7f7 ffd6 	bl	8000564 <__aeabi_i2d>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4630      	mov	r0, r6
 80085be:	4639      	mov	r1, r7
 80085c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085c4:	f7f7 fe80 	bl	80002c8 <__aeabi_dsub>
 80085c8:	2200      	movs	r2, #0
 80085ca:	4b16      	ldr	r3, [pc, #88]	; (8008624 <__ieee754_rem_pio2+0x3dc>)
 80085cc:	f7f8 f834 	bl	8000638 <__aeabi_dmul>
 80085d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80085d4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80085d8:	f04f 0803 	mov.w	r8, #3
 80085dc:	2600      	movs	r6, #0
 80085de:	2700      	movs	r7, #0
 80085e0:	4632      	mov	r2, r6
 80085e2:	463b      	mov	r3, r7
 80085e4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80085e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80085ec:	f7f8 fa8c 	bl	8000b08 <__aeabi_dcmpeq>
 80085f0:	b9b0      	cbnz	r0, 8008620 <__ieee754_rem_pio2+0x3d8>
 80085f2:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <__ieee754_rem_pio2+0x3e0>)
 80085f4:	9301      	str	r3, [sp, #4]
 80085f6:	2302      	movs	r3, #2
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	462a      	mov	r2, r5
 80085fc:	4643      	mov	r3, r8
 80085fe:	4621      	mov	r1, r4
 8008600:	a806      	add	r0, sp, #24
 8008602:	f000 f8dd 	bl	80087c0 <__kernel_rem_pio2>
 8008606:	9b04      	ldr	r3, [sp, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	4605      	mov	r5, r0
 800860c:	f6bf ae58 	bge.w	80082c0 <__ieee754_rem_pio2+0x78>
 8008610:	6863      	ldr	r3, [r4, #4]
 8008612:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008616:	6063      	str	r3, [r4, #4]
 8008618:	68e3      	ldr	r3, [r4, #12]
 800861a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800861e:	e746      	b.n	80084ae <__ieee754_rem_pio2+0x266>
 8008620:	46d0      	mov	r8, sl
 8008622:	e7dd      	b.n	80085e0 <__ieee754_rem_pio2+0x398>
 8008624:	41700000 	.word	0x41700000
 8008628:	080092f8 	.word	0x080092f8
 800862c:	00000000 	.word	0x00000000

08008630 <__kernel_cos>:
 8008630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	ec59 8b10 	vmov	r8, r9, d0
 8008638:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800863c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008640:	ed2d 8b02 	vpush	{d8}
 8008644:	eeb0 8a41 	vmov.f32	s16, s2
 8008648:	eef0 8a61 	vmov.f32	s17, s3
 800864c:	da07      	bge.n	800865e <__kernel_cos+0x2e>
 800864e:	ee10 0a10 	vmov	r0, s0
 8008652:	4649      	mov	r1, r9
 8008654:	f7f8 fa8a 	bl	8000b6c <__aeabi_d2iz>
 8008658:	2800      	cmp	r0, #0
 800865a:	f000 8089 	beq.w	8008770 <__kernel_cos+0x140>
 800865e:	4642      	mov	r2, r8
 8008660:	464b      	mov	r3, r9
 8008662:	4640      	mov	r0, r8
 8008664:	4649      	mov	r1, r9
 8008666:	f7f7 ffe7 	bl	8000638 <__aeabi_dmul>
 800866a:	2200      	movs	r2, #0
 800866c:	4b4e      	ldr	r3, [pc, #312]	; (80087a8 <__kernel_cos+0x178>)
 800866e:	4604      	mov	r4, r0
 8008670:	460d      	mov	r5, r1
 8008672:	f7f7 ffe1 	bl	8000638 <__aeabi_dmul>
 8008676:	a340      	add	r3, pc, #256	; (adr r3, 8008778 <__kernel_cos+0x148>)
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	4682      	mov	sl, r0
 800867e:	468b      	mov	fp, r1
 8008680:	4620      	mov	r0, r4
 8008682:	4629      	mov	r1, r5
 8008684:	f7f7 ffd8 	bl	8000638 <__aeabi_dmul>
 8008688:	a33d      	add	r3, pc, #244	; (adr r3, 8008780 <__kernel_cos+0x150>)
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	f7f7 fe1d 	bl	80002cc <__adddf3>
 8008692:	4622      	mov	r2, r4
 8008694:	462b      	mov	r3, r5
 8008696:	f7f7 ffcf 	bl	8000638 <__aeabi_dmul>
 800869a:	a33b      	add	r3, pc, #236	; (adr r3, 8008788 <__kernel_cos+0x158>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	f7f7 fe12 	bl	80002c8 <__aeabi_dsub>
 80086a4:	4622      	mov	r2, r4
 80086a6:	462b      	mov	r3, r5
 80086a8:	f7f7 ffc6 	bl	8000638 <__aeabi_dmul>
 80086ac:	a338      	add	r3, pc, #224	; (adr r3, 8008790 <__kernel_cos+0x160>)
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	f7f7 fe0b 	bl	80002cc <__adddf3>
 80086b6:	4622      	mov	r2, r4
 80086b8:	462b      	mov	r3, r5
 80086ba:	f7f7 ffbd 	bl	8000638 <__aeabi_dmul>
 80086be:	a336      	add	r3, pc, #216	; (adr r3, 8008798 <__kernel_cos+0x168>)
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	f7f7 fe00 	bl	80002c8 <__aeabi_dsub>
 80086c8:	4622      	mov	r2, r4
 80086ca:	462b      	mov	r3, r5
 80086cc:	f7f7 ffb4 	bl	8000638 <__aeabi_dmul>
 80086d0:	a333      	add	r3, pc, #204	; (adr r3, 80087a0 <__kernel_cos+0x170>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 fdf9 	bl	80002cc <__adddf3>
 80086da:	4622      	mov	r2, r4
 80086dc:	462b      	mov	r3, r5
 80086de:	f7f7 ffab 	bl	8000638 <__aeabi_dmul>
 80086e2:	4622      	mov	r2, r4
 80086e4:	462b      	mov	r3, r5
 80086e6:	f7f7 ffa7 	bl	8000638 <__aeabi_dmul>
 80086ea:	ec53 2b18 	vmov	r2, r3, d8
 80086ee:	4604      	mov	r4, r0
 80086f0:	460d      	mov	r5, r1
 80086f2:	4640      	mov	r0, r8
 80086f4:	4649      	mov	r1, r9
 80086f6:	f7f7 ff9f 	bl	8000638 <__aeabi_dmul>
 80086fa:	460b      	mov	r3, r1
 80086fc:	4602      	mov	r2, r0
 80086fe:	4629      	mov	r1, r5
 8008700:	4620      	mov	r0, r4
 8008702:	f7f7 fde1 	bl	80002c8 <__aeabi_dsub>
 8008706:	4b29      	ldr	r3, [pc, #164]	; (80087ac <__kernel_cos+0x17c>)
 8008708:	429e      	cmp	r6, r3
 800870a:	4680      	mov	r8, r0
 800870c:	4689      	mov	r9, r1
 800870e:	dc11      	bgt.n	8008734 <__kernel_cos+0x104>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4650      	mov	r0, sl
 8008716:	4659      	mov	r1, fp
 8008718:	f7f7 fdd6 	bl	80002c8 <__aeabi_dsub>
 800871c:	460b      	mov	r3, r1
 800871e:	4924      	ldr	r1, [pc, #144]	; (80087b0 <__kernel_cos+0x180>)
 8008720:	4602      	mov	r2, r0
 8008722:	2000      	movs	r0, #0
 8008724:	f7f7 fdd0 	bl	80002c8 <__aeabi_dsub>
 8008728:	ecbd 8b02 	vpop	{d8}
 800872c:	ec41 0b10 	vmov	d0, r0, r1
 8008730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008734:	4b1f      	ldr	r3, [pc, #124]	; (80087b4 <__kernel_cos+0x184>)
 8008736:	491e      	ldr	r1, [pc, #120]	; (80087b0 <__kernel_cos+0x180>)
 8008738:	429e      	cmp	r6, r3
 800873a:	bfcc      	ite	gt
 800873c:	4d1e      	ldrgt	r5, [pc, #120]	; (80087b8 <__kernel_cos+0x188>)
 800873e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008742:	2400      	movs	r4, #0
 8008744:	4622      	mov	r2, r4
 8008746:	462b      	mov	r3, r5
 8008748:	2000      	movs	r0, #0
 800874a:	f7f7 fdbd 	bl	80002c8 <__aeabi_dsub>
 800874e:	4622      	mov	r2, r4
 8008750:	4606      	mov	r6, r0
 8008752:	460f      	mov	r7, r1
 8008754:	462b      	mov	r3, r5
 8008756:	4650      	mov	r0, sl
 8008758:	4659      	mov	r1, fp
 800875a:	f7f7 fdb5 	bl	80002c8 <__aeabi_dsub>
 800875e:	4642      	mov	r2, r8
 8008760:	464b      	mov	r3, r9
 8008762:	f7f7 fdb1 	bl	80002c8 <__aeabi_dsub>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4630      	mov	r0, r6
 800876c:	4639      	mov	r1, r7
 800876e:	e7d9      	b.n	8008724 <__kernel_cos+0xf4>
 8008770:	2000      	movs	r0, #0
 8008772:	490f      	ldr	r1, [pc, #60]	; (80087b0 <__kernel_cos+0x180>)
 8008774:	e7d8      	b.n	8008728 <__kernel_cos+0xf8>
 8008776:	bf00      	nop
 8008778:	be8838d4 	.word	0xbe8838d4
 800877c:	bda8fae9 	.word	0xbda8fae9
 8008780:	bdb4b1c4 	.word	0xbdb4b1c4
 8008784:	3e21ee9e 	.word	0x3e21ee9e
 8008788:	809c52ad 	.word	0x809c52ad
 800878c:	3e927e4f 	.word	0x3e927e4f
 8008790:	19cb1590 	.word	0x19cb1590
 8008794:	3efa01a0 	.word	0x3efa01a0
 8008798:	16c15177 	.word	0x16c15177
 800879c:	3f56c16c 	.word	0x3f56c16c
 80087a0:	5555554c 	.word	0x5555554c
 80087a4:	3fa55555 	.word	0x3fa55555
 80087a8:	3fe00000 	.word	0x3fe00000
 80087ac:	3fd33332 	.word	0x3fd33332
 80087b0:	3ff00000 	.word	0x3ff00000
 80087b4:	3fe90000 	.word	0x3fe90000
 80087b8:	3fd20000 	.word	0x3fd20000
 80087bc:	00000000 	.word	0x00000000

080087c0 <__kernel_rem_pio2>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	ed2d 8b02 	vpush	{d8}
 80087c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80087cc:	1ed4      	subs	r4, r2, #3
 80087ce:	9308      	str	r3, [sp, #32]
 80087d0:	9101      	str	r1, [sp, #4]
 80087d2:	4bc5      	ldr	r3, [pc, #788]	; (8008ae8 <__kernel_rem_pio2+0x328>)
 80087d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80087d6:	9009      	str	r0, [sp, #36]	; 0x24
 80087d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087dc:	9304      	str	r3, [sp, #16]
 80087de:	9b08      	ldr	r3, [sp, #32]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	9307      	str	r3, [sp, #28]
 80087e4:	2318      	movs	r3, #24
 80087e6:	fb94 f4f3 	sdiv	r4, r4, r3
 80087ea:	f06f 0317 	mvn.w	r3, #23
 80087ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80087f2:	fb04 3303 	mla	r3, r4, r3, r3
 80087f6:	eb03 0a02 	add.w	sl, r3, r2
 80087fa:	9b04      	ldr	r3, [sp, #16]
 80087fc:	9a07      	ldr	r2, [sp, #28]
 80087fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008ad8 <__kernel_rem_pio2+0x318>
 8008802:	eb03 0802 	add.w	r8, r3, r2
 8008806:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008808:	1aa7      	subs	r7, r4, r2
 800880a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800880e:	ae22      	add	r6, sp, #136	; 0x88
 8008810:	2500      	movs	r5, #0
 8008812:	4545      	cmp	r5, r8
 8008814:	dd13      	ble.n	800883e <__kernel_rem_pio2+0x7e>
 8008816:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8008ad8 <__kernel_rem_pio2+0x318>
 800881a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800881e:	2600      	movs	r6, #0
 8008820:	9b04      	ldr	r3, [sp, #16]
 8008822:	429e      	cmp	r6, r3
 8008824:	dc32      	bgt.n	800888c <__kernel_rem_pio2+0xcc>
 8008826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008828:	9302      	str	r3, [sp, #8]
 800882a:	9b08      	ldr	r3, [sp, #32]
 800882c:	199d      	adds	r5, r3, r6
 800882e:	ab22      	add	r3, sp, #136	; 0x88
 8008830:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008834:	9306      	str	r3, [sp, #24]
 8008836:	ec59 8b18 	vmov	r8, r9, d8
 800883a:	2700      	movs	r7, #0
 800883c:	e01f      	b.n	800887e <__kernel_rem_pio2+0xbe>
 800883e:	42ef      	cmn	r7, r5
 8008840:	d407      	bmi.n	8008852 <__kernel_rem_pio2+0x92>
 8008842:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008846:	f7f7 fe8d 	bl	8000564 <__aeabi_i2d>
 800884a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800884e:	3501      	adds	r5, #1
 8008850:	e7df      	b.n	8008812 <__kernel_rem_pio2+0x52>
 8008852:	ec51 0b18 	vmov	r0, r1, d8
 8008856:	e7f8      	b.n	800884a <__kernel_rem_pio2+0x8a>
 8008858:	9906      	ldr	r1, [sp, #24]
 800885a:	9d02      	ldr	r5, [sp, #8]
 800885c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008860:	9106      	str	r1, [sp, #24]
 8008862:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008866:	9502      	str	r5, [sp, #8]
 8008868:	f7f7 fee6 	bl	8000638 <__aeabi_dmul>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4640      	mov	r0, r8
 8008872:	4649      	mov	r1, r9
 8008874:	f7f7 fd2a 	bl	80002cc <__adddf3>
 8008878:	3701      	adds	r7, #1
 800887a:	4680      	mov	r8, r0
 800887c:	4689      	mov	r9, r1
 800887e:	9b07      	ldr	r3, [sp, #28]
 8008880:	429f      	cmp	r7, r3
 8008882:	dde9      	ble.n	8008858 <__kernel_rem_pio2+0x98>
 8008884:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008888:	3601      	adds	r6, #1
 800888a:	e7c9      	b.n	8008820 <__kernel_rem_pio2+0x60>
 800888c:	9b04      	ldr	r3, [sp, #16]
 800888e:	aa0e      	add	r2, sp, #56	; 0x38
 8008890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008894:	930c      	str	r3, [sp, #48]	; 0x30
 8008896:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008898:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800889c:	9c04      	ldr	r4, [sp, #16]
 800889e:	930b      	str	r3, [sp, #44]	; 0x2c
 80088a0:	ab9a      	add	r3, sp, #616	; 0x268
 80088a2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80088a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80088b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80088b6:	ab9a      	add	r3, sp, #616	; 0x268
 80088b8:	445b      	add	r3, fp
 80088ba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80088be:	2500      	movs	r5, #0
 80088c0:	1b63      	subs	r3, r4, r5
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	dc78      	bgt.n	80089b8 <__kernel_rem_pio2+0x1f8>
 80088c6:	4650      	mov	r0, sl
 80088c8:	ec49 8b10 	vmov	d0, r8, r9
 80088cc:	f000 fc00 	bl	80090d0 <scalbn>
 80088d0:	ec57 6b10 	vmov	r6, r7, d0
 80088d4:	2200      	movs	r2, #0
 80088d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80088da:	ee10 0a10 	vmov	r0, s0
 80088de:	4639      	mov	r1, r7
 80088e0:	f7f7 feaa 	bl	8000638 <__aeabi_dmul>
 80088e4:	ec41 0b10 	vmov	d0, r0, r1
 80088e8:	f000 fb6e 	bl	8008fc8 <floor>
 80088ec:	2200      	movs	r2, #0
 80088ee:	ec51 0b10 	vmov	r0, r1, d0
 80088f2:	4b7e      	ldr	r3, [pc, #504]	; (8008aec <__kernel_rem_pio2+0x32c>)
 80088f4:	f7f7 fea0 	bl	8000638 <__aeabi_dmul>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4630      	mov	r0, r6
 80088fe:	4639      	mov	r1, r7
 8008900:	f7f7 fce2 	bl	80002c8 <__aeabi_dsub>
 8008904:	460f      	mov	r7, r1
 8008906:	4606      	mov	r6, r0
 8008908:	f7f8 f930 	bl	8000b6c <__aeabi_d2iz>
 800890c:	9006      	str	r0, [sp, #24]
 800890e:	f7f7 fe29 	bl	8000564 <__aeabi_i2d>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f7 fcd5 	bl	80002c8 <__aeabi_dsub>
 800891e:	f1ba 0f00 	cmp.w	sl, #0
 8008922:	4606      	mov	r6, r0
 8008924:	460f      	mov	r7, r1
 8008926:	dd6c      	ble.n	8008a02 <__kernel_rem_pio2+0x242>
 8008928:	1e62      	subs	r2, r4, #1
 800892a:	ab0e      	add	r3, sp, #56	; 0x38
 800892c:	f1ca 0118 	rsb	r1, sl, #24
 8008930:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008934:	9d06      	ldr	r5, [sp, #24]
 8008936:	fa40 f301 	asr.w	r3, r0, r1
 800893a:	441d      	add	r5, r3
 800893c:	408b      	lsls	r3, r1
 800893e:	1ac0      	subs	r0, r0, r3
 8008940:	ab0e      	add	r3, sp, #56	; 0x38
 8008942:	9506      	str	r5, [sp, #24]
 8008944:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008948:	f1ca 0317 	rsb	r3, sl, #23
 800894c:	fa40 f303 	asr.w	r3, r0, r3
 8008950:	9302      	str	r3, [sp, #8]
 8008952:	9b02      	ldr	r3, [sp, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	dd62      	ble.n	8008a1e <__kernel_rem_pio2+0x25e>
 8008958:	9b06      	ldr	r3, [sp, #24]
 800895a:	2200      	movs	r2, #0
 800895c:	3301      	adds	r3, #1
 800895e:	9306      	str	r3, [sp, #24]
 8008960:	4615      	mov	r5, r2
 8008962:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008966:	4294      	cmp	r4, r2
 8008968:	f300 8095 	bgt.w	8008a96 <__kernel_rem_pio2+0x2d6>
 800896c:	f1ba 0f00 	cmp.w	sl, #0
 8008970:	dd07      	ble.n	8008982 <__kernel_rem_pio2+0x1c2>
 8008972:	f1ba 0f01 	cmp.w	sl, #1
 8008976:	f000 80a2 	beq.w	8008abe <__kernel_rem_pio2+0x2fe>
 800897a:	f1ba 0f02 	cmp.w	sl, #2
 800897e:	f000 80c1 	beq.w	8008b04 <__kernel_rem_pio2+0x344>
 8008982:	9b02      	ldr	r3, [sp, #8]
 8008984:	2b02      	cmp	r3, #2
 8008986:	d14a      	bne.n	8008a1e <__kernel_rem_pio2+0x25e>
 8008988:	4632      	mov	r2, r6
 800898a:	463b      	mov	r3, r7
 800898c:	2000      	movs	r0, #0
 800898e:	4958      	ldr	r1, [pc, #352]	; (8008af0 <__kernel_rem_pio2+0x330>)
 8008990:	f7f7 fc9a 	bl	80002c8 <__aeabi_dsub>
 8008994:	4606      	mov	r6, r0
 8008996:	460f      	mov	r7, r1
 8008998:	2d00      	cmp	r5, #0
 800899a:	d040      	beq.n	8008a1e <__kernel_rem_pio2+0x25e>
 800899c:	4650      	mov	r0, sl
 800899e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008ae0 <__kernel_rem_pio2+0x320>
 80089a2:	f000 fb95 	bl	80090d0 <scalbn>
 80089a6:	4630      	mov	r0, r6
 80089a8:	4639      	mov	r1, r7
 80089aa:	ec53 2b10 	vmov	r2, r3, d0
 80089ae:	f7f7 fc8b 	bl	80002c8 <__aeabi_dsub>
 80089b2:	4606      	mov	r6, r0
 80089b4:	460f      	mov	r7, r1
 80089b6:	e032      	b.n	8008a1e <__kernel_rem_pio2+0x25e>
 80089b8:	2200      	movs	r2, #0
 80089ba:	4b4e      	ldr	r3, [pc, #312]	; (8008af4 <__kernel_rem_pio2+0x334>)
 80089bc:	4640      	mov	r0, r8
 80089be:	4649      	mov	r1, r9
 80089c0:	f7f7 fe3a 	bl	8000638 <__aeabi_dmul>
 80089c4:	f7f8 f8d2 	bl	8000b6c <__aeabi_d2iz>
 80089c8:	f7f7 fdcc 	bl	8000564 <__aeabi_i2d>
 80089cc:	2200      	movs	r2, #0
 80089ce:	4b4a      	ldr	r3, [pc, #296]	; (8008af8 <__kernel_rem_pio2+0x338>)
 80089d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089d4:	f7f7 fe30 	bl	8000638 <__aeabi_dmul>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4640      	mov	r0, r8
 80089de:	4649      	mov	r1, r9
 80089e0:	f7f7 fc72 	bl	80002c8 <__aeabi_dsub>
 80089e4:	f7f8 f8c2 	bl	8000b6c <__aeabi_d2iz>
 80089e8:	ab0e      	add	r3, sp, #56	; 0x38
 80089ea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80089ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80089f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089f6:	f7f7 fc69 	bl	80002cc <__adddf3>
 80089fa:	3501      	adds	r5, #1
 80089fc:	4680      	mov	r8, r0
 80089fe:	4689      	mov	r9, r1
 8008a00:	e75e      	b.n	80088c0 <__kernel_rem_pio2+0x100>
 8008a02:	d105      	bne.n	8008a10 <__kernel_rem_pio2+0x250>
 8008a04:	1e63      	subs	r3, r4, #1
 8008a06:	aa0e      	add	r2, sp, #56	; 0x38
 8008a08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008a0c:	15c3      	asrs	r3, r0, #23
 8008a0e:	e79f      	b.n	8008950 <__kernel_rem_pio2+0x190>
 8008a10:	2200      	movs	r2, #0
 8008a12:	4b3a      	ldr	r3, [pc, #232]	; (8008afc <__kernel_rem_pio2+0x33c>)
 8008a14:	f7f8 f896 	bl	8000b44 <__aeabi_dcmpge>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d139      	bne.n	8008a90 <__kernel_rem_pio2+0x2d0>
 8008a1c:	9002      	str	r0, [sp, #8]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2300      	movs	r3, #0
 8008a22:	4630      	mov	r0, r6
 8008a24:	4639      	mov	r1, r7
 8008a26:	f7f8 f86f 	bl	8000b08 <__aeabi_dcmpeq>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	f000 80c7 	beq.w	8008bbe <__kernel_rem_pio2+0x3fe>
 8008a30:	1e65      	subs	r5, r4, #1
 8008a32:	462b      	mov	r3, r5
 8008a34:	2200      	movs	r2, #0
 8008a36:	9904      	ldr	r1, [sp, #16]
 8008a38:	428b      	cmp	r3, r1
 8008a3a:	da6a      	bge.n	8008b12 <__kernel_rem_pio2+0x352>
 8008a3c:	2a00      	cmp	r2, #0
 8008a3e:	f000 8088 	beq.w	8008b52 <__kernel_rem_pio2+0x392>
 8008a42:	ab0e      	add	r3, sp, #56	; 0x38
 8008a44:	f1aa 0a18 	sub.w	sl, sl, #24
 8008a48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 80b4 	beq.w	8008bba <__kernel_rem_pio2+0x3fa>
 8008a52:	4650      	mov	r0, sl
 8008a54:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8008ae0 <__kernel_rem_pio2+0x320>
 8008a58:	f000 fb3a 	bl	80090d0 <scalbn>
 8008a5c:	00ec      	lsls	r4, r5, #3
 8008a5e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008a60:	191e      	adds	r6, r3, r4
 8008a62:	ec59 8b10 	vmov	r8, r9, d0
 8008a66:	f106 0a08 	add.w	sl, r6, #8
 8008a6a:	462f      	mov	r7, r5
 8008a6c:	2f00      	cmp	r7, #0
 8008a6e:	f280 80df 	bge.w	8008c30 <__kernel_rem_pio2+0x470>
 8008a72:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008ad8 <__kernel_rem_pio2+0x318>
 8008a76:	f04f 0a00 	mov.w	sl, #0
 8008a7a:	eba5 030a 	sub.w	r3, r5, sl
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f2c0 810a 	blt.w	8008c98 <__kernel_rem_pio2+0x4d8>
 8008a84:	f8df b078 	ldr.w	fp, [pc, #120]	; 8008b00 <__kernel_rem_pio2+0x340>
 8008a88:	ec59 8b18 	vmov	r8, r9, d8
 8008a8c:	2700      	movs	r7, #0
 8008a8e:	e0f5      	b.n	8008c7c <__kernel_rem_pio2+0x4bc>
 8008a90:	2302      	movs	r3, #2
 8008a92:	9302      	str	r3, [sp, #8]
 8008a94:	e760      	b.n	8008958 <__kernel_rem_pio2+0x198>
 8008a96:	ab0e      	add	r3, sp, #56	; 0x38
 8008a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9c:	b94d      	cbnz	r5, 8008ab2 <__kernel_rem_pio2+0x2f2>
 8008a9e:	b12b      	cbz	r3, 8008aac <__kernel_rem_pio2+0x2ec>
 8008aa0:	a80e      	add	r0, sp, #56	; 0x38
 8008aa2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008aa6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008aaa:	2301      	movs	r3, #1
 8008aac:	3201      	adds	r2, #1
 8008aae:	461d      	mov	r5, r3
 8008ab0:	e759      	b.n	8008966 <__kernel_rem_pio2+0x1a6>
 8008ab2:	a80e      	add	r0, sp, #56	; 0x38
 8008ab4:	1acb      	subs	r3, r1, r3
 8008ab6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008aba:	462b      	mov	r3, r5
 8008abc:	e7f6      	b.n	8008aac <__kernel_rem_pio2+0x2ec>
 8008abe:	1e62      	subs	r2, r4, #1
 8008ac0:	ab0e      	add	r3, sp, #56	; 0x38
 8008ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008aca:	a90e      	add	r1, sp, #56	; 0x38
 8008acc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008ad0:	e757      	b.n	8008982 <__kernel_rem_pio2+0x1c2>
 8008ad2:	bf00      	nop
 8008ad4:	f3af 8000 	nop.w
	...
 8008ae4:	3ff00000 	.word	0x3ff00000
 8008ae8:	08009440 	.word	0x08009440
 8008aec:	40200000 	.word	0x40200000
 8008af0:	3ff00000 	.word	0x3ff00000
 8008af4:	3e700000 	.word	0x3e700000
 8008af8:	41700000 	.word	0x41700000
 8008afc:	3fe00000 	.word	0x3fe00000
 8008b00:	08009400 	.word	0x08009400
 8008b04:	1e62      	subs	r2, r4, #1
 8008b06:	ab0e      	add	r3, sp, #56	; 0x38
 8008b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008b10:	e7db      	b.n	8008aca <__kernel_rem_pio2+0x30a>
 8008b12:	a90e      	add	r1, sp, #56	; 0x38
 8008b14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	e78b      	b.n	8008a36 <__kernel_rem_pio2+0x276>
 8008b1e:	3301      	adds	r3, #1
 8008b20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008b24:	2900      	cmp	r1, #0
 8008b26:	d0fa      	beq.n	8008b1e <__kernel_rem_pio2+0x35e>
 8008b28:	9a08      	ldr	r2, [sp, #32]
 8008b2a:	4422      	add	r2, r4
 8008b2c:	00d2      	lsls	r2, r2, #3
 8008b2e:	a922      	add	r1, sp, #136	; 0x88
 8008b30:	18e3      	adds	r3, r4, r3
 8008b32:	9206      	str	r2, [sp, #24]
 8008b34:	440a      	add	r2, r1
 8008b36:	9302      	str	r3, [sp, #8]
 8008b38:	f10b 0108 	add.w	r1, fp, #8
 8008b3c:	f102 0308 	add.w	r3, r2, #8
 8008b40:	1c66      	adds	r6, r4, #1
 8008b42:	910a      	str	r1, [sp, #40]	; 0x28
 8008b44:	2500      	movs	r5, #0
 8008b46:	930d      	str	r3, [sp, #52]	; 0x34
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	42b3      	cmp	r3, r6
 8008b4c:	da04      	bge.n	8008b58 <__kernel_rem_pio2+0x398>
 8008b4e:	461c      	mov	r4, r3
 8008b50:	e6a6      	b.n	80088a0 <__kernel_rem_pio2+0xe0>
 8008b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b54:	2301      	movs	r3, #1
 8008b56:	e7e3      	b.n	8008b20 <__kernel_rem_pio2+0x360>
 8008b58:	9b06      	ldr	r3, [sp, #24]
 8008b5a:	18ef      	adds	r7, r5, r3
 8008b5c:	ab22      	add	r3, sp, #136	; 0x88
 8008b5e:	441f      	add	r7, r3
 8008b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b66:	f7f7 fcfd 	bl	8000564 <__aeabi_i2d>
 8008b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6c:	461c      	mov	r4, r3
 8008b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b70:	e9c7 0100 	strd	r0, r1, [r7]
 8008b74:	eb03 0b05 	add.w	fp, r3, r5
 8008b78:	2700      	movs	r7, #0
 8008b7a:	f04f 0800 	mov.w	r8, #0
 8008b7e:	f04f 0900 	mov.w	r9, #0
 8008b82:	9b07      	ldr	r3, [sp, #28]
 8008b84:	429f      	cmp	r7, r3
 8008b86:	dd08      	ble.n	8008b9a <__kernel_rem_pio2+0x3da>
 8008b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b8a:	aa72      	add	r2, sp, #456	; 0x1c8
 8008b8c:	18eb      	adds	r3, r5, r3
 8008b8e:	4413      	add	r3, r2
 8008b90:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8008b94:	3601      	adds	r6, #1
 8008b96:	3508      	adds	r5, #8
 8008b98:	e7d6      	b.n	8008b48 <__kernel_rem_pio2+0x388>
 8008b9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008b9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008ba2:	f7f7 fd49 	bl	8000638 <__aeabi_dmul>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4640      	mov	r0, r8
 8008bac:	4649      	mov	r1, r9
 8008bae:	f7f7 fb8d 	bl	80002cc <__adddf3>
 8008bb2:	3701      	adds	r7, #1
 8008bb4:	4680      	mov	r8, r0
 8008bb6:	4689      	mov	r9, r1
 8008bb8:	e7e3      	b.n	8008b82 <__kernel_rem_pio2+0x3c2>
 8008bba:	3d01      	subs	r5, #1
 8008bbc:	e741      	b.n	8008a42 <__kernel_rem_pio2+0x282>
 8008bbe:	f1ca 0000 	rsb	r0, sl, #0
 8008bc2:	ec47 6b10 	vmov	d0, r6, r7
 8008bc6:	f000 fa83 	bl	80090d0 <scalbn>
 8008bca:	ec57 6b10 	vmov	r6, r7, d0
 8008bce:	2200      	movs	r2, #0
 8008bd0:	4b99      	ldr	r3, [pc, #612]	; (8008e38 <__kernel_rem_pio2+0x678>)
 8008bd2:	ee10 0a10 	vmov	r0, s0
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f7f7 ffb4 	bl	8000b44 <__aeabi_dcmpge>
 8008bdc:	b1f8      	cbz	r0, 8008c1e <__kernel_rem_pio2+0x45e>
 8008bde:	2200      	movs	r2, #0
 8008be0:	4b96      	ldr	r3, [pc, #600]	; (8008e3c <__kernel_rem_pio2+0x67c>)
 8008be2:	4630      	mov	r0, r6
 8008be4:	4639      	mov	r1, r7
 8008be6:	f7f7 fd27 	bl	8000638 <__aeabi_dmul>
 8008bea:	f7f7 ffbf 	bl	8000b6c <__aeabi_d2iz>
 8008bee:	4680      	mov	r8, r0
 8008bf0:	f7f7 fcb8 	bl	8000564 <__aeabi_i2d>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4b90      	ldr	r3, [pc, #576]	; (8008e38 <__kernel_rem_pio2+0x678>)
 8008bf8:	f7f7 fd1e 	bl	8000638 <__aeabi_dmul>
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4602      	mov	r2, r0
 8008c00:	4639      	mov	r1, r7
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7f7 fb60 	bl	80002c8 <__aeabi_dsub>
 8008c08:	f7f7 ffb0 	bl	8000b6c <__aeabi_d2iz>
 8008c0c:	1c65      	adds	r5, r4, #1
 8008c0e:	ab0e      	add	r3, sp, #56	; 0x38
 8008c10:	f10a 0a18 	add.w	sl, sl, #24
 8008c14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008c18:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008c1c:	e719      	b.n	8008a52 <__kernel_rem_pio2+0x292>
 8008c1e:	4630      	mov	r0, r6
 8008c20:	4639      	mov	r1, r7
 8008c22:	f7f7 ffa3 	bl	8000b6c <__aeabi_d2iz>
 8008c26:	ab0e      	add	r3, sp, #56	; 0x38
 8008c28:	4625      	mov	r5, r4
 8008c2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008c2e:	e710      	b.n	8008a52 <__kernel_rem_pio2+0x292>
 8008c30:	ab0e      	add	r3, sp, #56	; 0x38
 8008c32:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008c36:	f7f7 fc95 	bl	8000564 <__aeabi_i2d>
 8008c3a:	4642      	mov	r2, r8
 8008c3c:	464b      	mov	r3, r9
 8008c3e:	f7f7 fcfb 	bl	8000638 <__aeabi_dmul>
 8008c42:	2200      	movs	r2, #0
 8008c44:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008c48:	4b7c      	ldr	r3, [pc, #496]	; (8008e3c <__kernel_rem_pio2+0x67c>)
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	f7f7 fcf3 	bl	8000638 <__aeabi_dmul>
 8008c52:	3f01      	subs	r7, #1
 8008c54:	4680      	mov	r8, r0
 8008c56:	4689      	mov	r9, r1
 8008c58:	e708      	b.n	8008a6c <__kernel_rem_pio2+0x2ac>
 8008c5a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8008c66:	f7f7 fce7 	bl	8000638 <__aeabi_dmul>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4640      	mov	r0, r8
 8008c70:	4649      	mov	r1, r9
 8008c72:	f7f7 fb2b 	bl	80002cc <__adddf3>
 8008c76:	3701      	adds	r7, #1
 8008c78:	4680      	mov	r8, r0
 8008c7a:	4689      	mov	r9, r1
 8008c7c:	9b04      	ldr	r3, [sp, #16]
 8008c7e:	429f      	cmp	r7, r3
 8008c80:	dc01      	bgt.n	8008c86 <__kernel_rem_pio2+0x4c6>
 8008c82:	45ba      	cmp	sl, r7
 8008c84:	dae9      	bge.n	8008c5a <__kernel_rem_pio2+0x49a>
 8008c86:	ab4a      	add	r3, sp, #296	; 0x128
 8008c88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c8c:	e9c3 8900 	strd	r8, r9, [r3]
 8008c90:	f10a 0a01 	add.w	sl, sl, #1
 8008c94:	3e08      	subs	r6, #8
 8008c96:	e6f0      	b.n	8008a7a <__kernel_rem_pio2+0x2ba>
 8008c98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d85b      	bhi.n	8008d56 <__kernel_rem_pio2+0x596>
 8008c9e:	e8df f003 	tbb	[pc, r3]
 8008ca2:	264a      	.short	0x264a
 8008ca4:	0226      	.short	0x0226
 8008ca6:	ab9a      	add	r3, sp, #616	; 0x268
 8008ca8:	441c      	add	r4, r3
 8008caa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008cae:	46a2      	mov	sl, r4
 8008cb0:	46ab      	mov	fp, r5
 8008cb2:	f1bb 0f00 	cmp.w	fp, #0
 8008cb6:	dc6c      	bgt.n	8008d92 <__kernel_rem_pio2+0x5d2>
 8008cb8:	46a2      	mov	sl, r4
 8008cba:	46ab      	mov	fp, r5
 8008cbc:	f1bb 0f01 	cmp.w	fp, #1
 8008cc0:	f300 8086 	bgt.w	8008dd0 <__kernel_rem_pio2+0x610>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	2d01      	cmp	r5, #1
 8008cca:	f300 80a0 	bgt.w	8008e0e <__kernel_rem_pio2+0x64e>
 8008cce:	9b02      	ldr	r3, [sp, #8]
 8008cd0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008cd4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f040 809e 	bne.w	8008e1a <__kernel_rem_pio2+0x65a>
 8008cde:	9b01      	ldr	r3, [sp, #4]
 8008ce0:	e9c3 7800 	strd	r7, r8, [r3]
 8008ce4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008ce8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008cec:	e033      	b.n	8008d56 <__kernel_rem_pio2+0x596>
 8008cee:	3408      	adds	r4, #8
 8008cf0:	ab4a      	add	r3, sp, #296	; 0x128
 8008cf2:	441c      	add	r4, r3
 8008cf4:	462e      	mov	r6, r5
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	2e00      	cmp	r6, #0
 8008cfc:	da3a      	bge.n	8008d74 <__kernel_rem_pio2+0x5b4>
 8008cfe:	9b02      	ldr	r3, [sp, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d03d      	beq.n	8008d80 <__kernel_rem_pio2+0x5c0>
 8008d04:	4602      	mov	r2, r0
 8008d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d0a:	9c01      	ldr	r4, [sp, #4]
 8008d0c:	e9c4 2300 	strd	r2, r3, [r4]
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008d18:	f7f7 fad6 	bl	80002c8 <__aeabi_dsub>
 8008d1c:	ae4c      	add	r6, sp, #304	; 0x130
 8008d1e:	2401      	movs	r4, #1
 8008d20:	42a5      	cmp	r5, r4
 8008d22:	da30      	bge.n	8008d86 <__kernel_rem_pio2+0x5c6>
 8008d24:	9b02      	ldr	r3, [sp, #8]
 8008d26:	b113      	cbz	r3, 8008d2e <__kernel_rem_pio2+0x56e>
 8008d28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008d34:	e00f      	b.n	8008d56 <__kernel_rem_pio2+0x596>
 8008d36:	ab9a      	add	r3, sp, #616	; 0x268
 8008d38:	441c      	add	r4, r3
 8008d3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008d3e:	2000      	movs	r0, #0
 8008d40:	2100      	movs	r1, #0
 8008d42:	2d00      	cmp	r5, #0
 8008d44:	da10      	bge.n	8008d68 <__kernel_rem_pio2+0x5a8>
 8008d46:	9b02      	ldr	r3, [sp, #8]
 8008d48:	b113      	cbz	r3, 8008d50 <__kernel_rem_pio2+0x590>
 8008d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d4e:	4619      	mov	r1, r3
 8008d50:	9b01      	ldr	r3, [sp, #4]
 8008d52:	e9c3 0100 	strd	r0, r1, [r3]
 8008d56:	9b06      	ldr	r3, [sp, #24]
 8008d58:	f003 0007 	and.w	r0, r3, #7
 8008d5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008d60:	ecbd 8b02 	vpop	{d8}
 8008d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008d6c:	f7f7 faae 	bl	80002cc <__adddf3>
 8008d70:	3d01      	subs	r5, #1
 8008d72:	e7e6      	b.n	8008d42 <__kernel_rem_pio2+0x582>
 8008d74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008d78:	f7f7 faa8 	bl	80002cc <__adddf3>
 8008d7c:	3e01      	subs	r6, #1
 8008d7e:	e7bc      	b.n	8008cfa <__kernel_rem_pio2+0x53a>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	e7c1      	b.n	8008d0a <__kernel_rem_pio2+0x54a>
 8008d86:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008d8a:	f7f7 fa9f 	bl	80002cc <__adddf3>
 8008d8e:	3401      	adds	r4, #1
 8008d90:	e7c6      	b.n	8008d20 <__kernel_rem_pio2+0x560>
 8008d92:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8008d96:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	ec53 2b17 	vmov	r2, r3, d7
 8008da0:	4649      	mov	r1, r9
 8008da2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008da6:	f7f7 fa91 	bl	80002cc <__adddf3>
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	4606      	mov	r6, r0
 8008db0:	460f      	mov	r7, r1
 8008db2:	4640      	mov	r0, r8
 8008db4:	4649      	mov	r1, r9
 8008db6:	f7f7 fa87 	bl	80002c8 <__aeabi_dsub>
 8008dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dbe:	f7f7 fa85 	bl	80002cc <__adddf3>
 8008dc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dc6:	e9ca 0100 	strd	r0, r1, [sl]
 8008dca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8008dce:	e770      	b.n	8008cb2 <__kernel_rem_pio2+0x4f2>
 8008dd0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8008dd4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008dd8:	4630      	mov	r0, r6
 8008dda:	ec53 2b17 	vmov	r2, r3, d7
 8008dde:	4639      	mov	r1, r7
 8008de0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008de4:	f7f7 fa72 	bl	80002cc <__adddf3>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4680      	mov	r8, r0
 8008dee:	4689      	mov	r9, r1
 8008df0:	4630      	mov	r0, r6
 8008df2:	4639      	mov	r1, r7
 8008df4:	f7f7 fa68 	bl	80002c8 <__aeabi_dsub>
 8008df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dfc:	f7f7 fa66 	bl	80002cc <__adddf3>
 8008e00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e04:	e9ca 0100 	strd	r0, r1, [sl]
 8008e08:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8008e0c:	e756      	b.n	8008cbc <__kernel_rem_pio2+0x4fc>
 8008e0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008e12:	f7f7 fa5b 	bl	80002cc <__adddf3>
 8008e16:	3d01      	subs	r5, #1
 8008e18:	e756      	b.n	8008cc8 <__kernel_rem_pio2+0x508>
 8008e1a:	9b01      	ldr	r3, [sp, #4]
 8008e1c:	9a01      	ldr	r2, [sp, #4]
 8008e1e:	601f      	str	r7, [r3, #0]
 8008e20:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008e24:	605c      	str	r4, [r3, #4]
 8008e26:	609d      	str	r5, [r3, #8]
 8008e28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008e2c:	60d3      	str	r3, [r2, #12]
 8008e2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e32:	6110      	str	r0, [r2, #16]
 8008e34:	6153      	str	r3, [r2, #20]
 8008e36:	e78e      	b.n	8008d56 <__kernel_rem_pio2+0x596>
 8008e38:	41700000 	.word	0x41700000
 8008e3c:	3e700000 	.word	0x3e700000

08008e40 <__kernel_sin>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	ec55 4b10 	vmov	r4, r5, d0
 8008e48:	b085      	sub	sp, #20
 8008e4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008e4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008e52:	ed8d 1b00 	vstr	d1, [sp]
 8008e56:	9002      	str	r0, [sp, #8]
 8008e58:	da06      	bge.n	8008e68 <__kernel_sin+0x28>
 8008e5a:	ee10 0a10 	vmov	r0, s0
 8008e5e:	4629      	mov	r1, r5
 8008e60:	f7f7 fe84 	bl	8000b6c <__aeabi_d2iz>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d051      	beq.n	8008f0c <__kernel_sin+0xcc>
 8008e68:	4622      	mov	r2, r4
 8008e6a:	462b      	mov	r3, r5
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	4629      	mov	r1, r5
 8008e70:	f7f7 fbe2 	bl	8000638 <__aeabi_dmul>
 8008e74:	4682      	mov	sl, r0
 8008e76:	468b      	mov	fp, r1
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	4629      	mov	r1, r5
 8008e80:	f7f7 fbda 	bl	8000638 <__aeabi_dmul>
 8008e84:	a341      	add	r3, pc, #260	; (adr r3, 8008f8c <__kernel_sin+0x14c>)
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	4689      	mov	r9, r1
 8008e8e:	4650      	mov	r0, sl
 8008e90:	4659      	mov	r1, fp
 8008e92:	f7f7 fbd1 	bl	8000638 <__aeabi_dmul>
 8008e96:	a33f      	add	r3, pc, #252	; (adr r3, 8008f94 <__kernel_sin+0x154>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f7f7 fa14 	bl	80002c8 <__aeabi_dsub>
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	465b      	mov	r3, fp
 8008ea4:	f7f7 fbc8 	bl	8000638 <__aeabi_dmul>
 8008ea8:	a33c      	add	r3, pc, #240	; (adr r3, 8008f9c <__kernel_sin+0x15c>)
 8008eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eae:	f7f7 fa0d 	bl	80002cc <__adddf3>
 8008eb2:	4652      	mov	r2, sl
 8008eb4:	465b      	mov	r3, fp
 8008eb6:	f7f7 fbbf 	bl	8000638 <__aeabi_dmul>
 8008eba:	a33a      	add	r3, pc, #232	; (adr r3, 8008fa4 <__kernel_sin+0x164>)
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f7f7 fa02 	bl	80002c8 <__aeabi_dsub>
 8008ec4:	4652      	mov	r2, sl
 8008ec6:	465b      	mov	r3, fp
 8008ec8:	f7f7 fbb6 	bl	8000638 <__aeabi_dmul>
 8008ecc:	a337      	add	r3, pc, #220	; (adr r3, 8008fac <__kernel_sin+0x16c>)
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	f7f7 f9fb 	bl	80002cc <__adddf3>
 8008ed6:	9b02      	ldr	r3, [sp, #8]
 8008ed8:	4606      	mov	r6, r0
 8008eda:	460f      	mov	r7, r1
 8008edc:	b9db      	cbnz	r3, 8008f16 <__kernel_sin+0xd6>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4650      	mov	r0, sl
 8008ee4:	4659      	mov	r1, fp
 8008ee6:	f7f7 fba7 	bl	8000638 <__aeabi_dmul>
 8008eea:	a325      	add	r3, pc, #148	; (adr r3, 8008f80 <__kernel_sin+0x140>)
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f7f7 f9ea 	bl	80002c8 <__aeabi_dsub>
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	f7f7 fb9e 	bl	8000638 <__aeabi_dmul>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	4620      	mov	r0, r4
 8008f02:	4629      	mov	r1, r5
 8008f04:	f7f7 f9e2 	bl	80002cc <__adddf3>
 8008f08:	4604      	mov	r4, r0
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	ec45 4b10 	vmov	d0, r4, r5
 8008f10:	b005      	add	sp, #20
 8008f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f16:	2200      	movs	r2, #0
 8008f18:	4b1b      	ldr	r3, [pc, #108]	; (8008f88 <__kernel_sin+0x148>)
 8008f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f1e:	f7f7 fb8b 	bl	8000638 <__aeabi_dmul>
 8008f22:	4632      	mov	r2, r6
 8008f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f28:	463b      	mov	r3, r7
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	f7f7 fb83 	bl	8000638 <__aeabi_dmul>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f3a:	f7f7 f9c5 	bl	80002c8 <__aeabi_dsub>
 8008f3e:	4652      	mov	r2, sl
 8008f40:	465b      	mov	r3, fp
 8008f42:	f7f7 fb79 	bl	8000638 <__aeabi_dmul>
 8008f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f4a:	f7f7 f9bd 	bl	80002c8 <__aeabi_dsub>
 8008f4e:	a30c      	add	r3, pc, #48	; (adr r3, 8008f80 <__kernel_sin+0x140>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	4606      	mov	r6, r0
 8008f56:	460f      	mov	r7, r1
 8008f58:	4640      	mov	r0, r8
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	f7f7 fb6c 	bl	8000638 <__aeabi_dmul>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4630      	mov	r0, r6
 8008f66:	4639      	mov	r1, r7
 8008f68:	f7f7 f9b0 	bl	80002cc <__adddf3>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4620      	mov	r0, r4
 8008f72:	4629      	mov	r1, r5
 8008f74:	f7f7 f9a8 	bl	80002c8 <__aeabi_dsub>
 8008f78:	e7c6      	b.n	8008f08 <__kernel_sin+0xc8>
 8008f7a:	bf00      	nop
 8008f7c:	f3af 8000 	nop.w
 8008f80:	55555549 	.word	0x55555549
 8008f84:	3fc55555 	.word	0x3fc55555
 8008f88:	3fe00000 	.word	0x3fe00000
 8008f8c:	5acfd57c 	.word	0x5acfd57c
 8008f90:	3de5d93a 	.word	0x3de5d93a
 8008f94:	8a2b9ceb 	.word	0x8a2b9ceb
 8008f98:	3e5ae5e6 	.word	0x3e5ae5e6
 8008f9c:	57b1fe7d 	.word	0x57b1fe7d
 8008fa0:	3ec71de3 	.word	0x3ec71de3
 8008fa4:	19c161d5 	.word	0x19c161d5
 8008fa8:	3f2a01a0 	.word	0x3f2a01a0
 8008fac:	1110f8a6 	.word	0x1110f8a6
 8008fb0:	3f811111 	.word	0x3f811111

08008fb4 <fabs>:
 8008fb4:	ec51 0b10 	vmov	r0, r1, d0
 8008fb8:	ee10 2a10 	vmov	r2, s0
 8008fbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008fc0:	ec43 2b10 	vmov	d0, r2, r3
 8008fc4:	4770      	bx	lr
	...

08008fc8 <floor>:
 8008fc8:	ec51 0b10 	vmov	r0, r1, d0
 8008fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008fd4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008fd8:	2e13      	cmp	r6, #19
 8008fda:	460c      	mov	r4, r1
 8008fdc:	ee10 5a10 	vmov	r5, s0
 8008fe0:	4680      	mov	r8, r0
 8008fe2:	dc34      	bgt.n	800904e <floor+0x86>
 8008fe4:	2e00      	cmp	r6, #0
 8008fe6:	da16      	bge.n	8009016 <floor+0x4e>
 8008fe8:	a335      	add	r3, pc, #212	; (adr r3, 80090c0 <floor+0xf8>)
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f7f7 f96d 	bl	80002cc <__adddf3>
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f7f7 fdaf 	bl	8000b58 <__aeabi_dcmpgt>
 8008ffa:	b148      	cbz	r0, 8009010 <floor+0x48>
 8008ffc:	2c00      	cmp	r4, #0
 8008ffe:	da59      	bge.n	80090b4 <floor+0xec>
 8009000:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009004:	4a30      	ldr	r2, [pc, #192]	; (80090c8 <floor+0x100>)
 8009006:	432b      	orrs	r3, r5
 8009008:	2500      	movs	r5, #0
 800900a:	42ab      	cmp	r3, r5
 800900c:	bf18      	it	ne
 800900e:	4614      	movne	r4, r2
 8009010:	4621      	mov	r1, r4
 8009012:	4628      	mov	r0, r5
 8009014:	e025      	b.n	8009062 <floor+0x9a>
 8009016:	4f2d      	ldr	r7, [pc, #180]	; (80090cc <floor+0x104>)
 8009018:	4137      	asrs	r7, r6
 800901a:	ea01 0307 	and.w	r3, r1, r7
 800901e:	4303      	orrs	r3, r0
 8009020:	d01f      	beq.n	8009062 <floor+0x9a>
 8009022:	a327      	add	r3, pc, #156	; (adr r3, 80090c0 <floor+0xf8>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f7f7 f950 	bl	80002cc <__adddf3>
 800902c:	2200      	movs	r2, #0
 800902e:	2300      	movs	r3, #0
 8009030:	f7f7 fd92 	bl	8000b58 <__aeabi_dcmpgt>
 8009034:	2800      	cmp	r0, #0
 8009036:	d0eb      	beq.n	8009010 <floor+0x48>
 8009038:	2c00      	cmp	r4, #0
 800903a:	bfbe      	ittt	lt
 800903c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009040:	fa43 f606 	asrlt.w	r6, r3, r6
 8009044:	19a4      	addlt	r4, r4, r6
 8009046:	ea24 0407 	bic.w	r4, r4, r7
 800904a:	2500      	movs	r5, #0
 800904c:	e7e0      	b.n	8009010 <floor+0x48>
 800904e:	2e33      	cmp	r6, #51	; 0x33
 8009050:	dd0b      	ble.n	800906a <floor+0xa2>
 8009052:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009056:	d104      	bne.n	8009062 <floor+0x9a>
 8009058:	ee10 2a10 	vmov	r2, s0
 800905c:	460b      	mov	r3, r1
 800905e:	f7f7 f935 	bl	80002cc <__adddf3>
 8009062:	ec41 0b10 	vmov	d0, r0, r1
 8009066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800906a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800906e:	f04f 33ff 	mov.w	r3, #4294967295
 8009072:	fa23 f707 	lsr.w	r7, r3, r7
 8009076:	4207      	tst	r7, r0
 8009078:	d0f3      	beq.n	8009062 <floor+0x9a>
 800907a:	a311      	add	r3, pc, #68	; (adr r3, 80090c0 <floor+0xf8>)
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	f7f7 f924 	bl	80002cc <__adddf3>
 8009084:	2200      	movs	r2, #0
 8009086:	2300      	movs	r3, #0
 8009088:	f7f7 fd66 	bl	8000b58 <__aeabi_dcmpgt>
 800908c:	2800      	cmp	r0, #0
 800908e:	d0bf      	beq.n	8009010 <floor+0x48>
 8009090:	2c00      	cmp	r4, #0
 8009092:	da02      	bge.n	800909a <floor+0xd2>
 8009094:	2e14      	cmp	r6, #20
 8009096:	d103      	bne.n	80090a0 <floor+0xd8>
 8009098:	3401      	adds	r4, #1
 800909a:	ea25 0507 	bic.w	r5, r5, r7
 800909e:	e7b7      	b.n	8009010 <floor+0x48>
 80090a0:	2301      	movs	r3, #1
 80090a2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80090a6:	fa03 f606 	lsl.w	r6, r3, r6
 80090aa:	4435      	add	r5, r6
 80090ac:	4545      	cmp	r5, r8
 80090ae:	bf38      	it	cc
 80090b0:	18e4      	addcc	r4, r4, r3
 80090b2:	e7f2      	b.n	800909a <floor+0xd2>
 80090b4:	2500      	movs	r5, #0
 80090b6:	462c      	mov	r4, r5
 80090b8:	e7aa      	b.n	8009010 <floor+0x48>
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w
 80090c0:	8800759c 	.word	0x8800759c
 80090c4:	7e37e43c 	.word	0x7e37e43c
 80090c8:	bff00000 	.word	0xbff00000
 80090cc:	000fffff 	.word	0x000fffff

080090d0 <scalbn>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	ec55 4b10 	vmov	r4, r5, d0
 80090d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80090da:	4606      	mov	r6, r0
 80090dc:	462b      	mov	r3, r5
 80090de:	b9aa      	cbnz	r2, 800910c <scalbn+0x3c>
 80090e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80090e4:	4323      	orrs	r3, r4
 80090e6:	d03b      	beq.n	8009160 <scalbn+0x90>
 80090e8:	4b31      	ldr	r3, [pc, #196]	; (80091b0 <scalbn+0xe0>)
 80090ea:	4629      	mov	r1, r5
 80090ec:	2200      	movs	r2, #0
 80090ee:	ee10 0a10 	vmov	r0, s0
 80090f2:	f7f7 faa1 	bl	8000638 <__aeabi_dmul>
 80090f6:	4b2f      	ldr	r3, [pc, #188]	; (80091b4 <scalbn+0xe4>)
 80090f8:	429e      	cmp	r6, r3
 80090fa:	4604      	mov	r4, r0
 80090fc:	460d      	mov	r5, r1
 80090fe:	da12      	bge.n	8009126 <scalbn+0x56>
 8009100:	a327      	add	r3, pc, #156	; (adr r3, 80091a0 <scalbn+0xd0>)
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	f7f7 fa97 	bl	8000638 <__aeabi_dmul>
 800910a:	e009      	b.n	8009120 <scalbn+0x50>
 800910c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009110:	428a      	cmp	r2, r1
 8009112:	d10c      	bne.n	800912e <scalbn+0x5e>
 8009114:	ee10 2a10 	vmov	r2, s0
 8009118:	4620      	mov	r0, r4
 800911a:	4629      	mov	r1, r5
 800911c:	f7f7 f8d6 	bl	80002cc <__adddf3>
 8009120:	4604      	mov	r4, r0
 8009122:	460d      	mov	r5, r1
 8009124:	e01c      	b.n	8009160 <scalbn+0x90>
 8009126:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800912a:	460b      	mov	r3, r1
 800912c:	3a36      	subs	r2, #54	; 0x36
 800912e:	4432      	add	r2, r6
 8009130:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009134:	428a      	cmp	r2, r1
 8009136:	dd0b      	ble.n	8009150 <scalbn+0x80>
 8009138:	ec45 4b11 	vmov	d1, r4, r5
 800913c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80091a8 <scalbn+0xd8>
 8009140:	f000 f83c 	bl	80091bc <copysign>
 8009144:	a318      	add	r3, pc, #96	; (adr r3, 80091a8 <scalbn+0xd8>)
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	ec51 0b10 	vmov	r0, r1, d0
 800914e:	e7da      	b.n	8009106 <scalbn+0x36>
 8009150:	2a00      	cmp	r2, #0
 8009152:	dd08      	ble.n	8009166 <scalbn+0x96>
 8009154:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009158:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800915c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009160:	ec45 4b10 	vmov	d0, r4, r5
 8009164:	bd70      	pop	{r4, r5, r6, pc}
 8009166:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800916a:	da0d      	bge.n	8009188 <scalbn+0xb8>
 800916c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009170:	429e      	cmp	r6, r3
 8009172:	ec45 4b11 	vmov	d1, r4, r5
 8009176:	dce1      	bgt.n	800913c <scalbn+0x6c>
 8009178:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80091a0 <scalbn+0xd0>
 800917c:	f000 f81e 	bl	80091bc <copysign>
 8009180:	a307      	add	r3, pc, #28	; (adr r3, 80091a0 <scalbn+0xd0>)
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	e7e0      	b.n	800914a <scalbn+0x7a>
 8009188:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800918c:	3236      	adds	r2, #54	; 0x36
 800918e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009192:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009196:	4620      	mov	r0, r4
 8009198:	4629      	mov	r1, r5
 800919a:	2200      	movs	r2, #0
 800919c:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <scalbn+0xe8>)
 800919e:	e7b2      	b.n	8009106 <scalbn+0x36>
 80091a0:	c2f8f359 	.word	0xc2f8f359
 80091a4:	01a56e1f 	.word	0x01a56e1f
 80091a8:	8800759c 	.word	0x8800759c
 80091ac:	7e37e43c 	.word	0x7e37e43c
 80091b0:	43500000 	.word	0x43500000
 80091b4:	ffff3cb0 	.word	0xffff3cb0
 80091b8:	3c900000 	.word	0x3c900000

080091bc <copysign>:
 80091bc:	ec51 0b10 	vmov	r0, r1, d0
 80091c0:	ee11 0a90 	vmov	r0, s3
 80091c4:	ee10 2a10 	vmov	r2, s0
 80091c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80091cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80091d0:	ea41 0300 	orr.w	r3, r1, r0
 80091d4:	ec43 2b10 	vmov	d0, r2, r3
 80091d8:	4770      	bx	lr
	...

080091dc <_init>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	bf00      	nop
 80091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e2:	bc08      	pop	{r3}
 80091e4:	469e      	mov	lr, r3
 80091e6:	4770      	bx	lr

080091e8 <_fini>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	bf00      	nop
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr
