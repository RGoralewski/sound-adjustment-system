
Projekt_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800744c  0800744c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800744c  0800744c  0001744c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007454  08007454  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007454  08007454  00017454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007458  08007458  00017458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800745c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  20000088  080074e4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  080074e4  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018497  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035ba  00000000  00000000  0003854f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b8  00000000  00000000  0003bb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e0  00000000  00000000  0003cec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028eaf  00000000  00000000  0003e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012d03  00000000  00000000  00066f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fba48  00000000  00000000  00079c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001756a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005424  00000000  00000000  00175720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080073b4 	.word	0x080073b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080073b4 	.word	0x080073b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80005d2:	4b28      	ldr	r3, [pc, #160]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_ADC1_Init+0xb8>)
 80005d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000600:	4a1e      	ldr	r2, [pc, #120]	; (800067c <MX_ADC1_Init+0xbc>)
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC1_Init+0xb4>)
 800060c:	2202      	movs	r2, #2
 800060e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000612:	2201      	movs	r2, #1
 8000614:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_ADC1_Init+0xb4>)
 800061a:	2201      	movs	r2, #1
 800061c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061e:	4815      	ldr	r0, [pc, #84]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000620:	f001 fad0 	bl	8001bc4 <HAL_ADC_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 fd3b 	bl	80010a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800062e:	2303      	movs	r3, #3
 8000630:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000632:	2301      	movs	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000636:	2307      	movs	r3, #7
 8000638:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000640:	f001 fc10 	bl	8001e64 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800064a:	f000 fd2b 	bl	80010a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800064e:	2304      	movs	r3, #4
 8000650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000652:	2302      	movs	r3, #2
 8000654:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_ADC1_Init+0xb4>)
 800065c:	f001 fc02 	bl	8001e64 <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000666:	f000 fd1d 	bl	80010a4 <Error_Handler>
  }

}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200000bc 	.word	0x200000bc
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2d      	ldr	r2, [pc, #180]	; (8000754 <HAL_ADC_MspInit+0xd4>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d153      	bne.n	800074a <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <HAL_ADC_MspInit+0xd8>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	4a2c      	ldr	r2, [pc, #176]	; (8000758 <HAL_ADC_MspInit+0xd8>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ac:	6453      	str	r3, [r2, #68]	; 0x44
 80006ae:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <HAL_ADC_MspInit+0xd8>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b27      	ldr	r3, [pc, #156]	; (8000758 <HAL_ADC_MspInit+0xd8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a26      	ldr	r2, [pc, #152]	; (8000758 <HAL_ADC_MspInit+0xd8>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b24      	ldr	r3, [pc, #144]	; (8000758 <HAL_ADC_MspInit+0xd8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80006d2:	2318      	movs	r3, #24
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481d      	ldr	r0, [pc, #116]	; (800075c <HAL_ADC_MspInit+0xdc>)
 80006e6:	f002 ff61 	bl	80035ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ec:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <HAL_ADC_MspInit+0xe4>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 8000704:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 800070c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 8000714:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 800071c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000720:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072e:	480c      	ldr	r0, [pc, #48]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 8000730:	f001 ff5a 	bl	80025e8 <HAL_DMA_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800073a:	f000 fcb3 	bl	80010a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 8000742:	639a      	str	r2, [r3, #56]	; 0x38
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <HAL_ADC_MspInit+0xe0>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800074a:	bf00      	nop
 800074c:	3728      	adds	r7, #40	; 0x28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40012000 	.word	0x40012000
 8000758:	40023800 	.word	0x40023800
 800075c:	40020000 	.word	0x40020000
 8000760:	20000104 	.word	0x20000104
 8000764:	40026410 	.word	0x40026410

08000768 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_DMA_Init+0x38>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <MX_DMA_Init+0x38>)
 8000774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_DMA_Init+0x38>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2038      	movs	r0, #56	; 0x38
 800078c:	f001 fef5 	bl	800257a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000790:	2038      	movs	r0, #56	; 0x38
 8000792:	f001 ff0e 	bl	80025b2 <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_ETH_Init+0x78>)
 80007aa:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <MX_ETH_Init+0x7c>)
 80007ac:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_ETH_Init+0x78>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_ETH_Init+0x78>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_ETH_Init+0x78>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_ETH_Init+0x78>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	3301      	adds	r3, #1
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_ETH_Init+0x78>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	3302      	adds	r3, #2
 80007d2:	22e1      	movs	r2, #225	; 0xe1
 80007d4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_ETH_Init+0x78>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	3303      	adds	r3, #3
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_ETH_Init+0x78>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	3304      	adds	r3, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_ETH_Init+0x78>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	3305      	adds	r3, #5
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_ETH_Init+0x78>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_ETH_Init+0x78>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_ETH_Init+0x78>)
 8000802:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000806:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_ETH_Init+0x78>)
 800080a:	f002 fa63 	bl	8002cd4 <HAL_ETH_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000814:	f000 fc46 	bl	80010a4 <Error_Handler>
  }

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000164 	.word	0x20000164
 8000820:	40028000 	.word	0x40028000

08000824 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a4e      	ldr	r2, [pc, #312]	; (800097c <HAL_ETH_MspInit+0x158>)
 8000842:	4293      	cmp	r3, r2
 8000844:	f040 8096 	bne.w	8000974 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000848:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084c:	4a4c      	ldr	r2, [pc, #304]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800084e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000852:	6313      	str	r3, [r2, #48]	; 0x30
 8000854:	4b4a      	ldr	r3, [pc, #296]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800085c:	623b      	str	r3, [r7, #32]
 800085e:	6a3b      	ldr	r3, [r7, #32]
 8000860:	4b47      	ldr	r3, [pc, #284]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a46      	ldr	r2, [pc, #280]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000866:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b44      	ldr	r3, [pc, #272]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000874:	61fb      	str	r3, [r7, #28]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	4b41      	ldr	r3, [pc, #260]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4a40      	ldr	r2, [pc, #256]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800087e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
 8000884:	4b3e      	ldr	r3, [pc, #248]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000890:	4b3b      	ldr	r3, [pc, #236]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	4a3a      	ldr	r2, [pc, #232]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	6313      	str	r3, [r2, #48]	; 0x30
 800089c:	4b38      	ldr	r3, [pc, #224]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b35      	ldr	r3, [pc, #212]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	4a34      	ldr	r2, [pc, #208]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6313      	str	r3, [r2, #48]	; 0x30
 80008b4:	4b32      	ldr	r3, [pc, #200]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	4a2e      	ldr	r2, [pc, #184]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008c6:	f043 0302 	orr.w	r3, r3, #2
 80008ca:	6313      	str	r3, [r2, #48]	; 0x30
 80008cc:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	4a28      	ldr	r2, [pc, #160]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e2:	6313      	str	r3, [r2, #48]	; 0x30
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008f0:	2332      	movs	r3, #50	; 0x32
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000900:	230b      	movs	r3, #11
 8000902:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000908:	4619      	mov	r1, r3
 800090a:	481e      	ldr	r0, [pc, #120]	; (8000984 <HAL_ETH_MspInit+0x160>)
 800090c:	f002 fe4e 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000910:	2386      	movs	r3, #134	; 0x86
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000920:	230b      	movs	r3, #11
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000928:	4619      	mov	r1, r3
 800092a:	4817      	ldr	r0, [pc, #92]	; (8000988 <HAL_ETH_MspInit+0x164>)
 800092c:	f002 fe3e 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000942:	230b      	movs	r3, #11
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	4619      	mov	r1, r3
 800094c:	480f      	ldr	r0, [pc, #60]	; (800098c <HAL_ETH_MspInit+0x168>)
 800094e:	f002 fe2d 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000952:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000964:	230b      	movs	r3, #11
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4808      	ldr	r0, [pc, #32]	; (8000990 <HAL_ETH_MspInit+0x16c>)
 8000970:	f002 fe1c 	bl	80035ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000974:	bf00      	nop
 8000976:	3738      	adds	r7, #56	; 0x38
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40028000 	.word	0x40028000
 8000980:	40023800 	.word	0x40023800
 8000984:	40020800 	.word	0x40020800
 8000988:	40020000 	.word	0x40020000
 800098c:	40020400 	.word	0x40020400
 8000990:	40021800 	.word	0x40021800

08000994 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	; 0x30
 8000998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009aa:	4b5f      	ldr	r3, [pc, #380]	; (8000b28 <MX_GPIO_Init+0x194>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a5e      	ldr	r2, [pc, #376]	; (8000b28 <MX_GPIO_Init+0x194>)
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b5c      	ldr	r3, [pc, #368]	; (8000b28 <MX_GPIO_Init+0x194>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b59      	ldr	r3, [pc, #356]	; (8000b28 <MX_GPIO_Init+0x194>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a58      	ldr	r2, [pc, #352]	; (8000b28 <MX_GPIO_Init+0x194>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b56      	ldr	r3, [pc, #344]	; (8000b28 <MX_GPIO_Init+0x194>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	4b53      	ldr	r3, [pc, #332]	; (8000b28 <MX_GPIO_Init+0x194>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a52      	ldr	r2, [pc, #328]	; (8000b28 <MX_GPIO_Init+0x194>)
 80009e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b50      	ldr	r3, [pc, #320]	; (8000b28 <MX_GPIO_Init+0x194>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b4d      	ldr	r3, [pc, #308]	; (8000b28 <MX_GPIO_Init+0x194>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a4c      	ldr	r2, [pc, #304]	; (8000b28 <MX_GPIO_Init+0x194>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <MX_GPIO_Init+0x194>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b47      	ldr	r3, [pc, #284]	; (8000b28 <MX_GPIO_Init+0x194>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a46      	ldr	r2, [pc, #280]	; (8000b28 <MX_GPIO_Init+0x194>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <MX_GPIO_Init+0x194>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <MX_GPIO_Init+0x194>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a40      	ldr	r2, [pc, #256]	; (8000b28 <MX_GPIO_Init+0x194>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <MX_GPIO_Init+0x194>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <MX_GPIO_Init+0x194>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a3a      	ldr	r2, [pc, #232]	; (8000b28 <MX_GPIO_Init+0x194>)
 8000a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <MX_GPIO_Init+0x194>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_Pin|Enable_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2114      	movs	r1, #20
 8000a56:	4835      	ldr	r0, [pc, #212]	; (8000b2c <MX_GPIO_Init+0x198>)
 8000a58:	f002 ff52 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a62:	4833      	ldr	r0, [pc, #204]	; (8000b30 <MX_GPIO_Init+0x19c>)
 8000a64:	f002 ff4c 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2140      	movs	r1, #64	; 0x40
 8000a6c:	4831      	ldr	r0, [pc, #196]	; (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a6e:	f002 ff47 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D7_Pin|D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	21f0      	movs	r1, #240	; 0xf0
 8000a76:	4830      	ldr	r0, [pc, #192]	; (8000b38 <MX_GPIO_Init+0x1a4>)
 8000a78:	f002 ff42 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = RS_Pin|Enable_Pin;
 8000a7c:	2314      	movs	r3, #20
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4826      	ldr	r0, [pc, #152]	; (8000b2c <MX_GPIO_Init+0x198>)
 8000a94:	f002 fd8a 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <MX_GPIO_Init+0x1a8>)
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4824      	ldr	r0, [pc, #144]	; (8000b40 <MX_GPIO_Init+0x1ac>)
 8000aae:	f002 fd7d 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ab2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4819      	ldr	r0, [pc, #100]	; (8000b30 <MX_GPIO_Init+0x19c>)
 8000acc:	f002 fd6e 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_GPIO_Init+0x1a0>)
 8000ae8:	f002 fd60 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_GPIO_Init+0x1a0>)
 8000b00:	f002 fd54 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin;
 8000b04:	23f0      	movs	r3, #240	; 0xf0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MX_GPIO_Init+0x1a4>)
 8000b1c:	f002 fd46 	bl	80035ac <HAL_GPIO_Init>

}
 8000b20:	bf00      	nop
 8000b22:	3730      	adds	r7, #48	; 0x30
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40021800 	.word	0x40021800
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	10110000 	.word	0x10110000
 8000b40:	40020800 	.word	0x40020800

08000b44 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000b52:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000b56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000b5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b5e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b62:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000b64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b66:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f80e 	bl	8000b9a <Lcd_init>

	return lcd;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	461d      	mov	r5, r3
 8000b82:	f107 0410 	add.w	r4, r7, #16
 8000b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b8e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bdb0      	pop	{r4, r5, r7, pc}

08000b9a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7d9b      	ldrb	r3, [r3, #22]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10c      	bne.n	8000bc4 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000baa:	2133      	movs	r1, #51	; 0x33
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 f86d 	bl	8000c8c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000bb2:	2132      	movs	r1, #50	; 0x32
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 f869 	bl	8000c8c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000bba:	2128      	movs	r1, #40	; 0x28
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f000 f865 	bl	8000c8c <lcd_write_command>
 8000bc2:	e003      	b.n	8000bcc <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000bc4:	2138      	movs	r1, #56	; 0x38
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f860 	bl	8000c8c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000bcc:	2101      	movs	r1, #1
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f85c 	bl	8000c8c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000bd4:	210c      	movs	r1, #12
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f858 	bl	8000c8c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000bdc:	2106      	movs	r1, #6
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 f854 	bl	8000c8c <lcd_write_command>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	4906      	ldr	r1, [pc, #24]	; (8000c18 <Lcd_int+0x2c>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f005 ffd2 	bl	8006ba8 <siprintf>

	Lcd_string(lcd, buffer);
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	4619      	mov	r1, r3
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 f806 	bl	8000c1c <Lcd_string>
}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	080073cc 	.word	0x080073cc

08000c1c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e00a      	b.n	8000c42 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	4413      	add	r3, r2
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f856 	bl	8000ce8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	7bfc      	ldrb	r4, [r7, #15]
 8000c44:	6838      	ldr	r0, [r7, #0]
 8000c46:	f7ff fae3 	bl	8000210 <strlen>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	429c      	cmp	r4, r3
 8000c4e:	d3ed      	bcc.n	8000c2c <Lcd_string+0x10>
	}
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd90      	pop	{r4, r7, pc}

08000c58 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	70fb      	strb	r3, [r7, #3]
 8000c64:	4613      	mov	r3, r2
 8000c66:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <Lcd_cursor+0x30>)
 8000c6c:	5cd2      	ldrb	r2, [r2, r3]
 8000c6e:	78bb      	ldrb	r3, [r7, #2]
 8000c70:	4413      	add	r3, r2
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	3b80      	subs	r3, #128	; 0x80
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	4619      	mov	r1, r3
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 f806 	bl	8000c8c <lcd_write_command>
	#endif
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	080073f4 	.word	0x080073f4

08000c8c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6898      	ldr	r0, [r3, #8]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	899b      	ldrh	r3, [r3, #12]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f002 fe2c 	bl	8003900 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7d9b      	ldrb	r3, [r3, #22]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d111      	bne.n	8000cd4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	091b      	lsrs	r3, r3, #4
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f000 f842 	bl	8000d44 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2204      	movs	r2, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f839 	bl	8000d44 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000cd2:	e005      	b.n	8000ce0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	4619      	mov	r1, r3
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f832 	bl	8000d44 <lcd_write>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6898      	ldr	r0, [r3, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	899b      	ldrh	r3, [r3, #12]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f002 fdfe 	bl	8003900 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7d9b      	ldrb	r3, [r3, #22]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d111      	bne.n	8000d30 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	091b      	lsrs	r3, r3, #4
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2204      	movs	r2, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f814 	bl	8000d44 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2204      	movs	r2, #4
 8000d26:	4619      	mov	r1, r3
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f80b 	bl	8000d44 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000d2e:	e005      	b.n	8000d3c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	2208      	movs	r2, #8
 8000d34:	4619      	mov	r1, r3
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f000 f804 	bl	8000d44 <lcd_write>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
 8000d50:	4613      	mov	r3, r2
 8000d52:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e019      	b.n	8000d8e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	6818      	ldr	r0, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	8819      	ldrh	r1, [r3, #0]
 8000d72:	78fa      	ldrb	r2, [r7, #3]
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	fa42 f303 	asr.w	r3, r2, r3
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	461a      	mov	r2, r3
 8000d84:	f002 fdbc 	bl	8003900 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	7bfa      	ldrb	r2, [r7, #15]
 8000d90:	78bb      	ldrb	r3, [r7, #2]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d3e1      	bcc.n	8000d5a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6918      	ldr	r0, [r3, #16]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	8a9b      	ldrh	r3, [r3, #20]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4619      	mov	r1, r3
 8000da2:	f002 fdad 	bl	8003900 <HAL_GPIO_WritePin>
	DELAY(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f000 feea 	bl	8001b80 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6918      	ldr	r0, [r3, #16]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	8a9b      	ldrh	r3, [r3, #20]
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	f002 fda2 	bl	8003900 <HAL_GPIO_WritePin>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_TIM_PeriodElapsedCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) { //If interrupt comes from timer 3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d102      	bne.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x18>
		ifServo=1;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]

	}
	if(htim->Instance == TIM2) { //If interrupt comes from timer 2
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de4:	d102      	bne.n	8000dec <HAL_TIM_PeriodElapsedCallback+0x28>
		ifDisplay = 1;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
	}
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40000400 	.word	0x40000400
 8000dfc:	200000a8 	.word	0x200000a8
 8000e00:	200000a4 	.word	0x200000a4

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b5b0      	push	{r4, r5, r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0a:	f000 fe5c 	bl	8001ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0e:	f000 f8b9 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e12:	f7ff fdbf 	bl	8000994 <MX_GPIO_Init>
  MX_ETH_Init();
 8000e16:	f7ff fcc5 	bl	80007a4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000e1a:	f000 fd2d 	bl	8001878 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e1e:	f000 fd9f 	bl	8001960 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8000e22:	f7ff fca1 	bl	8000768 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e26:	f7ff fbcb 	bl	80005c0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e2a:	f000 fa9b 	bl	8001364 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e2e:	f000 fb45 	bl	80014bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e32:	f000 fb91 	bl	8001558 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e36:	f000 fbdf 	bl	80015f8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //Start PWM signal for buzzer
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	483f      	ldr	r0, [pc, #252]	; (8000f3c <main+0x138>)
 8000e3e:	f003 ffa3 	bl	8004d88 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 63);
 8000e42:	4b3e      	ldr	r3, [pc, #248]	; (8000f3c <main+0x138>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	223f      	movs	r2, #63	; 0x3f
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34

  //Start ADC conversion from the potentiometer and sensor
  HAL_ADC_Start_DMA(&hadc1, adc_values, 2);
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	493c      	ldr	r1, [pc, #240]	; (8000f40 <main+0x13c>)
 8000e4e:	483d      	ldr	r0, [pc, #244]	; (8000f44 <main+0x140>)
 8000e50:	f000 fefc 	bl	8001c4c <HAL_ADC_Start_DMA>

  //Start tim2 to write data from joystick to the lcd display
  HAL_TIM_Base_Start_IT(&htim2);
 8000e54:	483c      	ldr	r0, [pc, #240]	; (8000f48 <main+0x144>)
 8000e56:	f003 ff37 	bl	8004cc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000e5a:	483c      	ldr	r0, [pc, #240]	; (8000f4c <main+0x148>)
 8000e5c:	f003 ff34 	bl	8004cc8 <HAL_TIM_Base_Start_IT>

  //Create lcd
  my_lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, Enable_GPIO_Port, Enable_Pin, LCD_4_BIT_MODE);
 8000e60:	4c3b      	ldr	r4, [pc, #236]	; (8000f50 <main+0x14c>)
 8000e62:	4638      	mov	r0, r7
 8000e64:	2300      	movs	r3, #0
 8000e66:	9303      	str	r3, [sp, #12]
 8000e68:	2310      	movs	r3, #16
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <main+0x150>)
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	2304      	movs	r3, #4
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <main+0x150>)
 8000e76:	4a38      	ldr	r2, [pc, #224]	; (8000f58 <main+0x154>)
 8000e78:	4938      	ldr	r1, [pc, #224]	; (8000f5c <main+0x158>)
 8000e7a:	f7ff fe63 	bl	8000b44 <Lcd_create>
 8000e7e:	4625      	mov	r5, r4
 8000e80:	463c      	mov	r4, r7
 8000e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e8a:	e885 0003 	stmia.w	r5, {r0, r1}

  //Initialize micro servo sg90
  Servo_Init(&servo1, &htim1, TIM_CHANNEL_4);
 8000e8e:	220c      	movs	r2, #12
 8000e90:	4933      	ldr	r1, [pc, #204]	; (8000f60 <main+0x15c>)
 8000e92:	4834      	ldr	r0, [pc, #208]	; (8000f64 <main+0x160>)
 8000e94:	f000 f90d 	bl	80010b2 <Servo_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ifDisplay == 1) {
 8000e98:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <main+0x164>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d132      	bne.n	8000f06 <main+0x102>
		  Lcd_cursor(&my_lcd, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	482a      	ldr	r0, [pc, #168]	; (8000f50 <main+0x14c>)
 8000ea6:	f7ff fed7 	bl	8000c58 <Lcd_cursor>
		  Lcd_string(&my_lcd, "                ");
 8000eaa:	4930      	ldr	r1, [pc, #192]	; (8000f6c <main+0x168>)
 8000eac:	4828      	ldr	r0, [pc, #160]	; (8000f50 <main+0x14c>)
 8000eae:	f7ff feb5 	bl	8000c1c <Lcd_string>
		  Lcd_cursor(&my_lcd, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4826      	ldr	r0, [pc, #152]	; (8000f50 <main+0x14c>)
 8000eb8:	f7ff fece 	bl	8000c58 <Lcd_cursor>
		  Lcd_string(&my_lcd, "Sens: ");
 8000ebc:	492c      	ldr	r1, [pc, #176]	; (8000f70 <main+0x16c>)
 8000ebe:	4824      	ldr	r0, [pc, #144]	; (8000f50 <main+0x14c>)
 8000ec0:	f7ff feac 	bl	8000c1c <Lcd_string>
		  Lcd_int(&my_lcd, adc_values[1]);
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <main+0x13c>)
 8000ec6:	885b      	ldrh	r3, [r3, #2]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4821      	ldr	r0, [pc, #132]	; (8000f50 <main+0x14c>)
 8000ecc:	f7ff fe8e 	bl	8000bec <Lcd_int>
		  Lcd_cursor(&my_lcd, 1, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	481e      	ldr	r0, [pc, #120]	; (8000f50 <main+0x14c>)
 8000ed6:	f7ff febf 	bl	8000c58 <Lcd_cursor>
		  Lcd_string(&my_lcd, "                ");
 8000eda:	4924      	ldr	r1, [pc, #144]	; (8000f6c <main+0x168>)
 8000edc:	481c      	ldr	r0, [pc, #112]	; (8000f50 <main+0x14c>)
 8000ede:	f7ff fe9d 	bl	8000c1c <Lcd_string>
		  Lcd_cursor(&my_lcd, 1, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	481a      	ldr	r0, [pc, #104]	; (8000f50 <main+0x14c>)
 8000ee8:	f7ff feb6 	bl	8000c58 <Lcd_cursor>
		  Lcd_string(&my_lcd, "Pot: ");
 8000eec:	4921      	ldr	r1, [pc, #132]	; (8000f74 <main+0x170>)
 8000eee:	4818      	ldr	r0, [pc, #96]	; (8000f50 <main+0x14c>)
 8000ef0:	f7ff fe94 	bl	8000c1c <Lcd_string>
		  Lcd_int(&my_lcd, adc_values[0]);
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <main+0x13c>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4815      	ldr	r0, [pc, #84]	; (8000f50 <main+0x14c>)
 8000efc:	f7ff fe76 	bl	8000bec <Lcd_int>
		  ifDisplay = 0;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <main+0x164>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
	  }
	  if(ifServo)
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <main+0x174>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0c4      	beq.n	8000e98 <main+0x94>
	  {
		  angle = adc_values[0]*180/4095;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <main+0x13c>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	23b4      	movs	r3, #180	; 0xb4
 8000f16:	fb03 f302 	mul.w	r3, r3, r2
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <main+0x178>)
 8000f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f20:	441a      	add	r2, r3
 8000f22:	12d2      	asrs	r2, r2, #11
 8000f24:	17db      	asrs	r3, r3, #31
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <main+0x17c>)
 8000f2a:	6013      	str	r3, [r2, #0]
		  Servo_SetAngle(&servo1, angle);
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <main+0x17c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	4619      	mov	r1, r3
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <main+0x160>)
 8000f36:	f000 f8f0 	bl	800111a <Servo_SetAngle>
	  if(ifDisplay == 1) {
 8000f3a:	e7ad      	b.n	8000e98 <main+0x94>
 8000f3c:	200001d0 	.word	0x200001d0
 8000f40:	200001cc 	.word	0x200001cc
 8000f44:	200000bc 	.word	0x200000bc
 8000f48:	20000290 	.word	0x20000290
 8000f4c:	20000210 	.word	0x20000210
 8000f50:	200001b4 	.word	0x200001b4
 8000f54:	40021000 	.word	0x40021000
 8000f58:	20000010 	.word	0x20000010
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000250 	.word	0x20000250
 8000f64:	200001ac 	.word	0x200001ac
 8000f68:	200000a4 	.word	0x200000a4
 8000f6c:	080073d0 	.word	0x080073d0
 8000f70:	080073e4 	.word	0x080073e4
 8000f74:	080073ec 	.word	0x080073ec
 8000f78:	200000a8 	.word	0x200000a8
 8000f7c:	80080081 	.word	0x80080081
 8000f80:	200000ac 	.word	0x200000ac

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0b4      	sub	sp, #208	; 0xd0
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f8e:	2230      	movs	r2, #48	; 0x30
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f005 fe00 	bl	8006b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	2284      	movs	r2, #132	; 0x84
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f005 fdf1 	bl	8006b98 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000fb6:	f002 fdf9 	bl	8003bac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b37      	ldr	r3, [pc, #220]	; (8001098 <SystemClock_Config+0x114>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a36      	ldr	r2, [pc, #216]	; (8001098 <SystemClock_Config+0x114>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <SystemClock_Config+0x114>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fd2:	4b32      	ldr	r3, [pc, #200]	; (800109c <SystemClock_Config+0x118>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fda:	4a30      	ldr	r2, [pc, #192]	; (800109c <SystemClock_Config+0x118>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <SystemClock_Config+0x118>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ff4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001006:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800100a:	2304      	movs	r3, #4
 800100c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001010:	2348      	movs	r3, #72	; 0x48
 8001012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800101c:	2303      	movs	r3, #3
 800101e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fdd0 	bl	8003bcc <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001032:	f000 f837 	bl	80010a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001056:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800105a:	2102      	movs	r1, #2
 800105c:	4618      	mov	r0, r3
 800105e:	f003 f825 	bl	80040ac <HAL_RCC_ClockConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001068:	f000 f81c 	bl	80010a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <SystemClock_Config+0x11c>)
 800106e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001070:	2300      	movs	r3, #0
 8001072:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	4618      	mov	r0, r3
 8001080:	f003 fa08 	bl	8004494 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800108a:	f000 f80b 	bl	80010a4 <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	37d0      	adds	r7, #208	; 0xd0
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000
 80010a0:	00200100 	.word	0x00200100

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <Servo_Init>:

//
//	Servo innitialization
//
void Servo_Init(servo_t *servo, TIM_HandleTypeDef *_htim, uint32_t _channel)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
	servo->htim = _htim;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	601a      	str	r2, [r3, #0]
	servo->channel = _channel;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_Start(servo->htim, servo->channel);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f003 fe57 	bl	8004d88 <HAL_TIM_PWM_Start>
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <map>:

//
//	map help function
//
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	1a8a      	subs	r2, r1, r2
 80010fc:	fb02 f203 	mul.w	r2, r2, r3
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1acb      	subs	r3, r1, r3
 8001106:	fb92 f2f3 	sdiv	r2, r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	4413      	add	r3, r2
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <Servo_SetAngle>:

//
//	Servo set angle function
//
void Servo_SetAngle(servo_t *servo, uint16_t angle)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af02      	add	r7, sp, #8
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
	if(angle < 0) angle = 0;
	if(angle > 180) angle = 180;
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	2bb4      	cmp	r3, #180	; 0xb4
 800112a:	d901      	bls.n	8001130 <Servo_SetAngle+0x16>
 800112c:	23b4      	movs	r3, #180	; 0xb4
 800112e:	807b      	strh	r3, [r7, #2]

	  uint16_t tmp = map(angle, ANGLE_MIN, ANGLE_MAX, SERVO_MIN, SERVO_MAX);
 8001130:	8878      	ldrh	r0, [r7, #2]
 8001132:	f640 137e 	movw	r3, #2430	; 0x97e
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	f240 2326 	movw	r3, #550	; 0x226
 800113c:	22b4      	movs	r2, #180	; 0xb4
 800113e:	2100      	movs	r1, #0
 8001140:	f7ff ffcf 	bl	80010e2 <map>
 8001144:	4603      	mov	r3, r0
 8001146:	81fb      	strh	r3, [r7, #14]
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d105      	bne.n	800115c <Servo_SetAngle+0x42>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	89fa      	ldrh	r2, [r7, #14]
 8001158:	635a      	str	r2, [r3, #52]	; 0x34
}
 800115a:	e02c      	b.n	80011b6 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b04      	cmp	r3, #4
 8001162:	d105      	bne.n	8001170 <Servo_SetAngle+0x56>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	89fa      	ldrh	r2, [r7, #14]
 800116c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800116e:	e022      	b.n	80011b6 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b08      	cmp	r3, #8
 8001176:	d105      	bne.n	8001184 <Servo_SetAngle+0x6a>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	89fa      	ldrh	r2, [r7, #14]
 8001180:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001182:	e018      	b.n	80011b6 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b0c      	cmp	r3, #12
 800118a:	d105      	bne.n	8001198 <Servo_SetAngle+0x7e>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	89fa      	ldrh	r2, [r7, #14]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001196:	e00e      	b.n	80011b6 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b10      	cmp	r3, #16
 800119e:	d105      	bne.n	80011ac <Servo_SetAngle+0x92>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	89fa      	ldrh	r2, [r7, #14]
 80011a8:	659a      	str	r2, [r3, #88]	; 0x58
}
 80011aa:	e004      	b.n	80011b6 <Servo_SetAngle+0x9c>
	  __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, tmp);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	89fa      	ldrh	r2, [r7, #14]
 80011b4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_MspInit+0x44>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_MspInit+0x44>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_MspInit+0x44>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_MspInit+0x44>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_MspInit+0x44>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_MspInit+0x44>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 fc70 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <TIM2_IRQHandler+0x10>)
 800126a:	f003 fdd1 	bl	8004e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000290 	.word	0x20000290

08001278 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <TIM3_IRQHandler+0x10>)
 800127e:	f003 fdc7 	bl	8004e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000210 	.word	0x20000210

0800128c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <DMA2_Stream0_IRQHandler+0x10>)
 8001292:	f001 fab7 	bl	8002804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000104 	.word	0x20000104

080012a0 <_sbrk>:
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <_sbrk+0x50>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x16>
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <_sbrk+0x50>)
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <_sbrk+0x54>)
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <_sbrk+0x50>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <_sbrk+0x50>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	466a      	mov	r2, sp
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d907      	bls.n	80012da <_sbrk+0x3a>
 80012ca:	f005 fc3b 	bl	8006b44 <__errno>
 80012ce:	4602      	mov	r2, r0
 80012d0:	230c      	movs	r3, #12
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	e006      	b.n	80012e8 <_sbrk+0x48>
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <_sbrk+0x50>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <_sbrk+0x50>)
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200000b0 	.word	0x200000b0
 80012f4:	20000760 	.word	0x20000760

080012f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <SystemInit+0x5c>)
 80012fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <SystemInit+0x5c>)
 8001304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <SystemInit+0x60>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a11      	ldr	r2, [pc, #68]	; (8001358 <SystemInit+0x60>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <SystemInit+0x60>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <SystemInit+0x60>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	490d      	ldr	r1, [pc, #52]	; (8001358 <SystemInit+0x60>)
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <SystemInit+0x64>)
 8001326:	4013      	ands	r3, r2
 8001328:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <SystemInit+0x60>)
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <SystemInit+0x68>)
 800132e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <SystemInit+0x60>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a08      	ldr	r2, [pc, #32]	; (8001358 <SystemInit+0x60>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SystemInit+0x60>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SystemInit+0x5c>)
 8001344:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001348:	609a      	str	r2, [r3, #8]
#endif
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	40023800 	.word	0x40023800
 800135c:	fef6ffff 	.word	0xfef6ffff
 8001360:	24003010 	.word	0x24003010

08001364 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b09a      	sub	sp, #104	; 0x68
 8001368:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001384:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	615a      	str	r2, [r3, #20]
 8001396:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	222c      	movs	r2, #44	; 0x2c
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f005 fbfa 	bl	8006b98 <memset>

  htim1.Instance = TIM1;
 80013a4:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <MX_TIM1_Init+0x150>)
 80013a6:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <MX_TIM1_Init+0x154>)
 80013a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80013aa:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <MX_TIM1_Init+0x150>)
 80013ac:	2247      	movs	r2, #71	; 0x47
 80013ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <MX_TIM1_Init+0x150>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80013b6:	4b3f      	ldr	r3, [pc, #252]	; (80014b4 <MX_TIM1_Init+0x150>)
 80013b8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <MX_TIM1_Init+0x150>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c4:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <MX_TIM1_Init+0x150>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <MX_TIM1_Init+0x150>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d0:	4838      	ldr	r0, [pc, #224]	; (80014b4 <MX_TIM1_Init+0x150>)
 80013d2:	f003 fc4d 	bl	8004c70 <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013dc:	f7ff fe62 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013ea:	4619      	mov	r1, r3
 80013ec:	4831      	ldr	r0, [pc, #196]	; (80014b4 <MX_TIM1_Init+0x150>)
 80013ee:	f003 ff47 	bl	8005280 <HAL_TIM_ConfigClockSource>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013f8:	f7ff fe54 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013fc:	482d      	ldr	r0, [pc, #180]	; (80014b4 <MX_TIM1_Init+0x150>)
 80013fe:	f003 fc8d 	bl	8004d1c <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001408:	f7ff fe4c 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001418:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800141c:	4619      	mov	r1, r3
 800141e:	4825      	ldr	r0, [pc, #148]	; (80014b4 <MX_TIM1_Init+0x150>)
 8001420:	f004 fbce 	bl	8005bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800142a:	f7ff fe3b 	bl	80010a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142e:	2360      	movs	r3, #96	; 0x60
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001438:	2300      	movs	r3, #0
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001448:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800144c:	220c      	movs	r2, #12
 800144e:	4619      	mov	r1, r3
 8001450:	4818      	ldr	r0, [pc, #96]	; (80014b4 <MX_TIM1_Init+0x150>)
 8001452:	f003 fdfd 	bl	8005050 <HAL_TIM_PWM_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800145c:	f7ff fe22 	bl	80010a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001478:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <MX_TIM1_Init+0x150>)
 8001496:	f004 fbef 	bl	8005c78 <HAL_TIMEx_ConfigBreakDeadTime>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80014a0:	f7ff fe00 	bl	80010a4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <MX_TIM1_Init+0x150>)
 80014a6:	f000 f987 	bl	80017b8 <HAL_TIM_MspPostInit>

}
 80014aa:	bf00      	nop
 80014ac:	3768      	adds	r7, #104	; 0x68
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000250 	.word	0x20000250
 80014b8:	40010000 	.word	0x40010000

080014bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <MX_TIM2_Init+0x98>)
 80014dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <MX_TIM2_Init+0x98>)
 80014e4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <MX_TIM2_Init+0x98>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <MX_TIM2_Init+0x98>)
 80014f2:	f241 3287 	movw	r2, #4999	; 0x1387
 80014f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MX_TIM2_Init+0x98>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <MX_TIM2_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001504:	4813      	ldr	r0, [pc, #76]	; (8001554 <MX_TIM2_Init+0x98>)
 8001506:	f003 fbb3 	bl	8004c70 <HAL_TIM_Base_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001510:	f7ff fdc8 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001518:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <MX_TIM2_Init+0x98>)
 8001522:	f003 fead 	bl	8005280 <HAL_TIM_ConfigClockSource>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800152c:	f7ff fdba 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_TIM2_Init+0x98>)
 800153e:	f004 fb3f 	bl	8005bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001548:	f7ff fdac 	bl	80010a4 <Error_Handler>
  }

}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000290 	.word	0x20000290

08001558 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	f107 0310 	add.w	r3, r7, #16
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8001576:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_TIM3_Init+0x98>)
 8001578:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <MX_TIM3_Init+0x9c>)
 800157a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_TIM3_Init+0x98>)
 800157e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001582:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_TIM3_Init+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_TIM3_Init+0x98>)
 800158c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001590:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_TIM3_Init+0x98>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_TIM3_Init+0x98>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800159e:	4814      	ldr	r0, [pc, #80]	; (80015f0 <MX_TIM3_Init+0x98>)
 80015a0:	f003 fb66 	bl	8004c70 <HAL_TIM_Base_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80015aa:	f7ff fd7b 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <MX_TIM3_Init+0x98>)
 80015bc:	f003 fe60 	bl	8005280 <HAL_TIM_ConfigClockSource>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80015c6:	f7ff fd6d 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <MX_TIM3_Init+0x98>)
 80015d8:	f004 faf2 	bl	8005bc0 <HAL_TIMEx_MasterConfigSynchronization>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80015e2:	f7ff fd5f 	bl	80010a4 <Error_Handler>
  }

}
 80015e6:	bf00      	nop
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000210 	.word	0x20000210
 80015f4:	40000400 	.word	0x40000400

080015f8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <MX_TIM4_Init+0xe8>)
 800162c:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <MX_TIM4_Init+0xec>)
 800162e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <MX_TIM4_Init+0xe8>)
 8001632:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001636:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b29      	ldr	r3, [pc, #164]	; (80016e0 <MX_TIM4_Init+0xe8>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 799;
 800163e:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MX_TIM4_Init+0xe8>)
 8001640:	f240 321f 	movw	r2, #799	; 0x31f
 8001644:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <MX_TIM4_Init+0xe8>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <MX_TIM4_Init+0xe8>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001652:	4823      	ldr	r0, [pc, #140]	; (80016e0 <MX_TIM4_Init+0xe8>)
 8001654:	f003 fb0c 	bl	8004c70 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800165e:	f7ff fd21 	bl	80010a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166c:	4619      	mov	r1, r3
 800166e:	481c      	ldr	r0, [pc, #112]	; (80016e0 <MX_TIM4_Init+0xe8>)
 8001670:	f003 fe06 	bl	8005280 <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800167a:	f7ff fd13 	bl	80010a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800167e:	4818      	ldr	r0, [pc, #96]	; (80016e0 <MX_TIM4_Init+0xe8>)
 8001680:	f003 fb4c 	bl	8004d1c <HAL_TIM_PWM_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800168a:	f7ff fd0b 	bl	80010a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4810      	ldr	r0, [pc, #64]	; (80016e0 <MX_TIM4_Init+0xe8>)
 800169e:	f004 fa8f 	bl	8005bc0 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80016a8:	f7ff fcfc 	bl	80010a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ac:	2360      	movs	r3, #96	; 0x60
 80016ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 63;
 80016b0:	233f      	movs	r3, #63	; 0x3f
 80016b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4807      	ldr	r0, [pc, #28]	; (80016e0 <MX_TIM4_Init+0xe8>)
 80016c4:	f003 fcc4 	bl	8005050 <HAL_TIM_PWM_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80016ce:	f7ff fce9 	bl	80010a4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80016d2:	4803      	ldr	r0, [pc, #12]	; (80016e0 <MX_TIM4_Init+0xe8>)
 80016d4:	f000 f870 	bl	80017b8 <HAL_TIM_MspPostInit>

}
 80016d8:	bf00      	nop
 80016da:	3738      	adds	r7, #56	; 0x38
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200001d0 	.word	0x200001d0
 80016e4:	40000800 	.word	0x40000800

080016e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <HAL_TIM_Base_MspInit+0xc0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d10c      	bne.n	8001714 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016fa:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a2b      	ldr	r2, [pc, #172]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001712:	e044      	b.n	800179e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d114      	bne.n	8001748 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a22      	ldr	r2, [pc, #136]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	201c      	movs	r0, #28
 800173c:	f000 ff1d 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001740:	201c      	movs	r0, #28
 8001742:	f000 ff36 	bl	80025b2 <HAL_NVIC_EnableIRQ>
}
 8001746:	e02a      	b.n	800179e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <HAL_TIM_Base_MspInit+0xc8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d114      	bne.n	800177c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	201d      	movs	r0, #29
 8001770:	f000 ff03 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001774:	201d      	movs	r0, #29
 8001776:	f000 ff1c 	bl	80025b2 <HAL_NVIC_EnableIRQ>
}
 800177a:	e010      	b.n	800179e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0c      	ldr	r2, [pc, #48]	; (80017b4 <HAL_TIM_Base_MspInit+0xcc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10b      	bne.n	800179e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_TIM_Base_MspInit+0xc4>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40000400 	.word	0x40000400
 80017b4:	40000800 	.word	0x40000800

080017b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a23      	ldr	r2, [pc, #140]	; (8001864 <HAL_TIM_MspPostInit+0xac>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d11d      	bne.n	8001816 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017da:	4b23      	ldr	r3, [pc, #140]	; (8001868 <HAL_TIM_MspPostInit+0xb0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a22      	ldr	r2, [pc, #136]	; (8001868 <HAL_TIM_MspPostInit+0xb0>)
 80017e0:	f043 0310 	orr.w	r3, r3, #16
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_TIM_MspPostInit+0xb0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001804:	2301      	movs	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4817      	ldr	r0, [pc, #92]	; (800186c <HAL_TIM_MspPostInit+0xb4>)
 8001810:	f001 fecc 	bl	80035ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001814:	e021      	b.n	800185a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <HAL_TIM_MspPostInit+0xb8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d11c      	bne.n	800185a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_TIM_MspPostInit+0xb0>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	4a10      	ldr	r2, [pc, #64]	; (8001868 <HAL_TIM_MspPostInit+0xb0>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6313      	str	r3, [r2, #48]	; 0x30
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_TIM_MspPostInit+0xb0>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800184a:	2302      	movs	r3, #2
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4807      	ldr	r0, [pc, #28]	; (8001874 <HAL_TIM_MspPostInit+0xbc>)
 8001856:	f001 fea9 	bl	80035ac <HAL_GPIO_Init>
}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	; 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40010000 	.word	0x40010000
 8001868:	40023800 	.word	0x40023800
 800186c:	40021000 	.word	0x40021000
 8001870:	40000800 	.word	0x40000800
 8001874:	40020c00 	.word	0x40020c00

08001878 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <MX_USART3_UART_Init+0x5c>)
 8001880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 8001884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_USART3_UART_Init+0x58>)
 80018bc:	f004 fa78 	bl	8005db0 <HAL_UART_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018c6:	f7ff fbed 	bl	80010a4 <Error_Handler>
  }

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200002d0 	.word	0x200002d0
 80018d4:	40004800 	.word	0x40004800

080018d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_UART_MspInit+0x7c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d128      	bne.n	800194c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_UART_MspInit+0x80>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <HAL_UART_MspInit+0x80>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_UART_MspInit+0x80>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_UART_MspInit+0x80>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a10      	ldr	r2, [pc, #64]	; (8001958 <HAL_UART_MspInit+0x80>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_UART_MspInit+0x80>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800192a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800192e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800193c:	2307      	movs	r3, #7
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <HAL_UART_MspInit+0x84>)
 8001948:	f001 fe30 	bl	80035ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800194c:	bf00      	nop
 800194e:	3728      	adds	r7, #40	; 0x28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40004800 	.word	0x40004800
 8001958:	40023800 	.word	0x40023800
 800195c:	40020c00 	.word	0x40020c00

08001960 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001966:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800196a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800196e:	2206      	movs	r2, #6
 8001970:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001974:	2202      	movs	r2, #2
 8001976:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001980:	2202      	movs	r2, #2
 8001982:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001986:	2201      	movs	r2, #1
 8001988:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001998:	2201      	movs	r2, #1
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a4:	f001 ffc5 	bl	8003932 <HAL_PCD_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019ae:	f7ff fb79 	bl	80010a4 <Error_Handler>
  }

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000350 	.word	0x20000350

080019bc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019dc:	d141      	bne.n	8001a62 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_PCD_MspInit+0xb0>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <HAL_PCD_MspInit+0xb0>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_PCD_MspInit+0xb0>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019f6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a08:	230a      	movs	r3, #10
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	4817      	ldr	r0, [pc, #92]	; (8001a70 <HAL_PCD_MspInit+0xb4>)
 8001a14:	f001 fdca 	bl	80035ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4810      	ldr	r0, [pc, #64]	; (8001a70 <HAL_PCD_MspInit+0xb4>)
 8001a2e:	f001 fdbd 	bl	80035ac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_PCD_MspInit+0xb0>)
 8001a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a36:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <HAL_PCD_MspInit+0xb0>)
 8001a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a3c:	6353      	str	r3, [r2, #52]	; 0x34
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_PCD_MspInit+0xb0>)
 8001a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_PCD_MspInit+0xb0>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_PCD_MspInit+0xb0>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_PCD_MspInit+0xb0>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000

08001a74 <Reset_Handler>:
 8001a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aac <LoopFillZerobss+0x14>
 8001a78:	2100      	movs	r1, #0
 8001a7a:	e003      	b.n	8001a84 <LoopCopyDataInit>

08001a7c <CopyDataInit>:
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <LoopFillZerobss+0x18>)
 8001a7e:	585b      	ldr	r3, [r3, r1]
 8001a80:	5043      	str	r3, [r0, r1]
 8001a82:	3104      	adds	r1, #4

08001a84 <LoopCopyDataInit>:
 8001a84:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x1c>)
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <LoopFillZerobss+0x20>)
 8001a88:	1842      	adds	r2, r0, r1
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3f6      	bcc.n	8001a7c <CopyDataInit>
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <LoopFillZerobss+0x24>)
 8001a90:	e002      	b.n	8001a98 <LoopFillZerobss>

08001a92 <FillZerobss>:
 8001a92:	2300      	movs	r3, #0
 8001a94:	f842 3b04 	str.w	r3, [r2], #4

08001a98 <LoopFillZerobss>:
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <LoopFillZerobss+0x28>)
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3f9      	bcc.n	8001a92 <FillZerobss>
 8001a9e:	f7ff fc2b 	bl	80012f8 <SystemInit>
 8001aa2:	f005 f855 	bl	8006b50 <__libc_init_array>
 8001aa6:	f7ff f9ad 	bl	8000e04 <main>
 8001aaa:	4770      	bx	lr
 8001aac:	20050000 	.word	0x20050000
 8001ab0:	0800745c 	.word	0x0800745c
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000088 	.word	0x20000088
 8001abc:	20000088 	.word	0x20000088
 8001ac0:	2000075c 	.word	0x2000075c

08001ac4 <ADC_IRQHandler>:
 8001ac4:	e7fe      	b.n	8001ac4 <ADC_IRQHandler>

08001ac6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aca:	2003      	movs	r0, #3
 8001acc:	f000 fd4a 	bl	8002564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f000 f805 	bl	8001ae0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001ad6:	f7ff fb73 	bl	80011c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_InitTick+0x54>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x58>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fd65 	bl	80025ce <HAL_SYSTICK_Config>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00e      	b.n	8001b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b0f      	cmp	r3, #15
 8001b12:	d80a      	bhi.n	8001b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b14:	2200      	movs	r2, #0
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f000 fd2d 	bl	800257a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b20:	4a06      	ldr	r2, [pc, #24]	; (8001b3c <HAL_InitTick+0x5c>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000018 	.word	0x20000018
 8001b38:	20000020 	.word	0x20000020
 8001b3c:	2000001c 	.word	0x2000001c

08001b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x20>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x24>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <HAL_IncTick+0x24>)
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000020 	.word	0x20000020
 8001b64:	20000754 	.word	0x20000754

08001b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_GetTick+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000754 	.word	0x20000754

08001b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff ffee 	bl	8001b68 <HAL_GetTick>
 8001b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d005      	beq.n	8001ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_Delay+0x40>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba6:	bf00      	nop
 8001ba8:	f7ff ffde 	bl	8001b68 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d8f7      	bhi.n	8001ba8 <HAL_Delay+0x28>
  {
  }
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000020 	.word	0x20000020

08001bc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e031      	b.n	8001c3e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fd4c 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d116      	bne.n	8001c30 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_ADC_Init+0x84>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	f043 0202 	orr.w	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fa5a 	bl	80020cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f023 0303 	bic.w	r3, r3, #3
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c2e:	e001      	b.n	8001c34 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	ffffeefd 	.word	0xffffeefd

08001c4c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Start_DMA+0x1e>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e0c7      	b.n	8001dfa <HAL_ADC_Start_DMA+0x1ae>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d018      	beq.n	8001cb2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001c90:	4b5c      	ldr	r3, [pc, #368]	; (8001e04 <HAL_ADC_Start_DMA+0x1b8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a5c      	ldr	r2, [pc, #368]	; (8001e08 <HAL_ADC_Start_DMA+0x1bc>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	0c9a      	lsrs	r2, r3, #18
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001ca4:	e002      	b.n	8001cac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f9      	bne.n	8001ca6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	f040 809b 	bne.w	8001df8 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc6:	4b51      	ldr	r3, [pc, #324]	; (8001e0c <HAL_ADC_Start_DMA+0x1c0>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ce8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cfc:	d106      	bne.n	8001d0c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f023 0206 	bic.w	r2, r3, #6
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
 8001d0a:	e002      	b.n	8001d12 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1e:	4a3c      	ldr	r2, [pc, #240]	; (8001e10 <HAL_ADC_Start_DMA+0x1c4>)
 8001d20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d26:	4a3b      	ldr	r2, [pc, #236]	; (8001e14 <HAL_ADC_Start_DMA+0x1c8>)
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	4a3a      	ldr	r2, [pc, #232]	; (8001e18 <HAL_ADC_Start_DMA+0x1cc>)
 8001d30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	334c      	adds	r3, #76	; 0x4c
 8001d66:	4619      	mov	r1, r3
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f000 fcea 	bl	8002744 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_ADC_Start_DMA+0x1d0>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10f      	bne.n	8001d9c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d136      	bne.n	8001df8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	e02d      	b.n	8001df8 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <HAL_ADC_Start_DMA+0x1d4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10e      	bne.n	8001dc4 <HAL_ADC_Start_DMA+0x178>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d107      	bne.n	8001dc4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001dc2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_ADC_Start_DMA+0x1d0>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d113      	bne.n	8001df8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <HAL_ADC_Start_DMA+0x1d8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10e      	bne.n	8001df8 <HAL_ADC_Start_DMA+0x1ac>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d107      	bne.n	8001df8 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001df6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000018 	.word	0x20000018
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	fffff8fe 	.word	0xfffff8fe
 8001e10:	080022c1 	.word	0x080022c1
 8001e14:	0800237b 	.word	0x0800237b
 8001e18:	08002397 	.word	0x08002397
 8001e1c:	40012300 	.word	0x40012300
 8001e20:	40012000 	.word	0x40012000
 8001e24:	40012200 	.word	0x40012200

08001e28 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1c>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e115      	b.n	80020ac <HAL_ADC_ConfigChannel+0x248>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b09      	cmp	r3, #9
 8001e8e:	d935      	bls.n	8001efc <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68d9      	ldr	r1, [r3, #12]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b1e      	subs	r3, #30
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43da      	mvns	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a7f      	ldr	r2, [pc, #508]	; (80020b8 <HAL_ADC_ConfigChannel+0x254>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d10a      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68d9      	ldr	r1, [r3, #12]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	061a      	lsls	r2, r3, #24
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	e035      	b.n	8001f42 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68d9      	ldr	r1, [r3, #12]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	4603      	mov	r3, r0
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4403      	add	r3, r0
 8001eee:	3b1e      	subs	r3, #30
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	e022      	b.n	8001f42 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6919      	ldr	r1, [r3, #16]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	2207      	movs	r2, #7
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6919      	ldr	r1, [r3, #16]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4403      	add	r3, r0
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d824      	bhi.n	8001f94 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b05      	subs	r3, #5
 8001f5c:	221f      	movs	r2, #31
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	400a      	ands	r2, r1
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b05      	subs	r3, #5
 8001f86:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34
 8001f92:	e04c      	b.n	800202e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d824      	bhi.n	8001fe6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	3b23      	subs	r3, #35	; 0x23
 8001fae:	221f      	movs	r2, #31
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	400a      	ands	r2, r1
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b23      	subs	r3, #35	; 0x23
 8001fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe4:	e023      	b.n	800202e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b41      	subs	r3, #65	; 0x41
 8001ff8:	221f      	movs	r2, #31
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	400a      	ands	r2, r1
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	4618      	mov	r0, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	3b41      	subs	r3, #65	; 0x41
 8002022:	fa00 f203 	lsl.w	r2, r0, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a22      	ldr	r2, [pc, #136]	; (80020bc <HAL_ADC_ConfigChannel+0x258>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d109      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1e8>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b12      	cmp	r3, #18
 800203e:	d105      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <HAL_ADC_ConfigChannel+0x25c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_ADC_ConfigChannel+0x25c>)
 8002046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800204a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_ADC_ConfigChannel+0x258>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d125      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x23e>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_ADC_ConfigChannel+0x254>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <HAL_ADC_ConfigChannel+0x204>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b11      	cmp	r3, #17
 8002066:	d11c      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_ADC_ConfigChannel+0x25c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_ADC_ConfigChannel+0x25c>)
 800206e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002072:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <HAL_ADC_ConfigChannel+0x254>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d111      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_ADC_ConfigChannel+0x260>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a11      	ldr	r2, [pc, #68]	; (80020c8 <HAL_ADC_ConfigChannel+0x264>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9a      	lsrs	r2, r3, #18
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002094:	e002      	b.n	800209c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3b01      	subs	r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f9      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	10000012 	.word	0x10000012
 80020bc:	40012000 	.word	0x40012000
 80020c0:	40012300 	.word	0x40012300
 80020c4:	20000018 	.word	0x20000018
 80020c8:	431bde83 	.word	0x431bde83

080020cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020d4:	4b78      	ldr	r3, [pc, #480]	; (80022b8 <ADC_Init+0x1ec>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a77      	ldr	r2, [pc, #476]	; (80022b8 <ADC_Init+0x1ec>)
 80020da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020de:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020e0:	4b75      	ldr	r3, [pc, #468]	; (80022b8 <ADC_Init+0x1ec>)
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4973      	ldr	r1, [pc, #460]	; (80022b8 <ADC_Init+0x1ec>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	021a      	lsls	r2, r3, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6899      	ldr	r1, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	4a58      	ldr	r2, [pc, #352]	; (80022bc <ADC_Init+0x1f0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d022      	beq.n	80021a6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800216e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6899      	ldr	r1, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6899      	ldr	r1, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	e00f      	b.n	80021c6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0202 	bic.w	r2, r2, #2
 80021d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	005a      	lsls	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01b      	beq.n	800222c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002202:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002212:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	3b01      	subs	r3, #1
 8002220:	035a      	lsls	r2, r3, #13
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	e007      	b.n	800223c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800223a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	3b01      	subs	r3, #1
 8002258:	051a      	lsls	r2, r3, #20
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002270:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6899      	ldr	r1, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800227e:	025a      	lsls	r2, r3, #9
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6899      	ldr	r1, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	029a      	lsls	r2, r3, #10
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	609a      	str	r2, [r3, #8]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	40012300 	.word	0x40012300
 80022bc:	0f000001 	.word	0x0f000001

080022c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d13c      	bne.n	8002354 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d12b      	bne.n	800234c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d127      	bne.n	800234c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002314:	2b00      	cmp	r3, #0
 8002316:	d119      	bne.n	800234c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0220 	bic.w	r2, r2, #32
 8002326:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff fd6b 	bl	8001e28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002352:	e00e      	b.n	8002372 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7ff fd75 	bl	8001e50 <HAL_ADC_ErrorCallback>
}
 8002366:	e004      	b.n	8002372 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	4798      	blx	r3
}
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7ff fd57 	bl	8001e3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f043 0204 	orr.w	r2, r3, #4
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f7ff fd4a 	bl	8001e50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <__NVIC_SetPriorityGrouping+0x40>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e0:	4013      	ands	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <__NVIC_SetPriorityGrouping+0x40>)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	60d3      	str	r3, [r2, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00
 8002408:	05fa0000 	.word	0x05fa0000

0800240c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <__NVIC_GetPriorityGrouping+0x18>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 0307 	and.w	r3, r3, #7
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	db0b      	blt.n	8002452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	4907      	ldr	r1, [pc, #28]	; (8002460 <__NVIC_EnableIRQ+0x38>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	2001      	movs	r0, #1
 800244a:	fa00 f202 	lsl.w	r2, r0, r2
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db0a      	blt.n	800248e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	490c      	ldr	r1, [pc, #48]	; (80024b0 <__NVIC_SetPriority+0x4c>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	0112      	lsls	r2, r2, #4
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	440b      	add	r3, r1
 8002488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800248c:	e00a      	b.n	80024a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4908      	ldr	r1, [pc, #32]	; (80024b4 <__NVIC_SetPriority+0x50>)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	3b04      	subs	r3, #4
 800249c:	0112      	lsls	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	440b      	add	r3, r1
 80024a2:	761a      	strb	r2, [r3, #24]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf28      	it	cs
 80024d6:	2304      	movcs	r3, #4
 80024d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3304      	adds	r3, #4
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d902      	bls.n	80024e8 <NVIC_EncodePriority+0x30>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3b03      	subs	r3, #3
 80024e6:	e000      	b.n	80024ea <NVIC_EncodePriority+0x32>
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43d9      	mvns	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	4313      	orrs	r3, r2
         );
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002530:	d301      	bcc.n	8002536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002532:	2301      	movs	r3, #1
 8002534:	e00f      	b.n	8002556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <SysTick_Config+0x40>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253e:	210f      	movs	r1, #15
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	f7ff ff8e 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <SysTick_Config+0x40>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <SysTick_Config+0x40>)
 8002550:	2207      	movs	r2, #7
 8002552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	e000e010 	.word	0xe000e010

08002564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff29 	bl	80023c4 <__NVIC_SetPriorityGrouping>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800258c:	f7ff ff3e 	bl	800240c <__NVIC_GetPriorityGrouping>
 8002590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ff8e 	bl	80024b8 <NVIC_EncodePriority>
 800259c:	4602      	mov	r2, r0
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff5d 	bl	8002464 <__NVIC_SetPriority>
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff31 	bl	8002428 <__NVIC_EnableIRQ>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffa2 	bl	8002520 <SysTick_Config>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7ff fab8 	bl	8001b68 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e099      	b.n	8002738 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002624:	e00f      	b.n	8002646 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002626:	f7ff fa9f 	bl	8001b68 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b05      	cmp	r3, #5
 8002632:	d908      	bls.n	8002646 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2203      	movs	r2, #3
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e078      	b.n	8002738 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e8      	bne.n	8002626 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_DMA_Init+0x158>)
 8002660:	4013      	ands	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002672:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	2b04      	cmp	r3, #4
 800269e:	d107      	bne.n	80026b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	4313      	orrs	r3, r2
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f023 0307 	bic.w	r3, r3, #7
 80026c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d117      	bne.n	800270a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00e      	beq.n	800270a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 fa77 	bl	8002be0 <DMA_CheckFifoParam>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2240      	movs	r2, #64	; 0x40
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002706:	2301      	movs	r3, #1
 8002708:	e016      	b.n	8002738 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa2e 	bl	8002b74 <DMA_CalcBaseAndBitshift>
 8002718:	4603      	mov	r3, r0
 800271a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	223f      	movs	r2, #63	; 0x3f
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	f010803f 	.word	0xf010803f

08002744 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_DMA_Start_IT+0x26>
 8002766:	2302      	movs	r3, #2
 8002768:	e048      	b.n	80027fc <HAL_DMA_Start_IT+0xb8>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d137      	bne.n	80027ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2202      	movs	r2, #2
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f9c0 	bl	8002b18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	223f      	movs	r2, #63	; 0x3f
 800279e:	409a      	lsls	r2, r3
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0216 	orr.w	r2, r2, #22
 80027b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0208 	orr.w	r2, r2, #8
 80027da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e005      	b.n	80027fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
 80027f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002810:	4b92      	ldr	r3, [pc, #584]	; (8002a5c <HAL_DMA_IRQHandler+0x258>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a92      	ldr	r2, [pc, #584]	; (8002a60 <HAL_DMA_IRQHandler+0x25c>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	2208      	movs	r2, #8
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01a      	beq.n	8002870 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d013      	beq.n	8002870 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0204 	bic.w	r2, r2, #4
 8002856:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	2208      	movs	r2, #8
 800285e:	409a      	lsls	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	2201      	movs	r2, #1
 8002876:	409a      	lsls	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d012      	beq.n	80028a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	2201      	movs	r2, #1
 8002894:	409a      	lsls	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	2204      	movs	r2, #4
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d012      	beq.n	80028dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	2204      	movs	r2, #4
 80028ca:	409a      	lsls	r2, r3
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0204 	orr.w	r2, r3, #4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	2210      	movs	r2, #16
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d043      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d03c      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	2210      	movs	r2, #16
 8002900:	409a      	lsls	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d018      	beq.n	8002946 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d108      	bne.n	8002934 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d024      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
 8002932:	e01f      	b.n	8002974 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01b      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
 8002944:	e016      	b.n	8002974 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0208 	bic.w	r2, r2, #8
 8002962:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	2220      	movs	r2, #32
 800297a:	409a      	lsls	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 808e 	beq.w	8002aa2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8086 	beq.w	8002aa2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	2220      	movs	r2, #32
 800299c:	409a      	lsls	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d136      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0216 	bic.w	r2, r2, #22
 80029bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <HAL_DMA_IRQHandler+0x1da>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0208 	bic.w	r2, r2, #8
 80029ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	223f      	movs	r2, #63	; 0x3f
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d07d      	beq.n	8002b0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
        }
        return;
 8002a1a:	e078      	b.n	8002b0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01c      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d108      	bne.n	8002a4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d030      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
 8002a48:	e02b      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d027      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
 8002a5a:	e022      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
 8002a5c:	20000018 	.word	0x20000018
 8002a60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10f      	bne.n	8002a92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0210 	bic.w	r2, r2, #16
 8002a80:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d032      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d022      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2205      	movs	r2, #5
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d307      	bcc.n	8002aea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f2      	bne.n	8002ace <HAL_DMA_IRQHandler+0x2ca>
 8002ae8:	e000      	b.n	8002aec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002aea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	4798      	blx	r3
 8002b0c:	e000      	b.n	8002b10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b0e:	bf00      	nop
    }
  }
}
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop

08002b18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d108      	bne.n	8002b58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b56:	e007      	b.n	8002b68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3b10      	subs	r3, #16
 8002b84:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <DMA_CalcBaseAndBitshift+0x60>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d908      	bls.n	8002bb4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <DMA_CalcBaseAndBitshift+0x68>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	1d1a      	adds	r2, r3, #4
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	659a      	str	r2, [r3, #88]	; 0x58
 8002bb2:	e006      	b.n	8002bc2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <DMA_CalcBaseAndBitshift+0x68>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	aaaaaaab 	.word	0xaaaaaaab
 8002bd8:	08007410 	.word	0x08007410
 8002bdc:	fffffc00 	.word	0xfffffc00

08002be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11f      	bne.n	8002c3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d855      	bhi.n	8002cac <DMA_CheckFifoParam+0xcc>
 8002c00:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <DMA_CheckFifoParam+0x28>)
 8002c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c06:	bf00      	nop
 8002c08:	08002c19 	.word	0x08002c19
 8002c0c:	08002c2b 	.word	0x08002c2b
 8002c10:	08002c19 	.word	0x08002c19
 8002c14:	08002cad 	.word	0x08002cad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d045      	beq.n	8002cb0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e042      	b.n	8002cb0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c32:	d13f      	bne.n	8002cb4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c38:	e03c      	b.n	8002cb4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c42:	d121      	bne.n	8002c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d836      	bhi.n	8002cb8 <DMA_CheckFifoParam+0xd8>
 8002c4a:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <DMA_CheckFifoParam+0x70>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c61 	.word	0x08002c61
 8002c54:	08002c67 	.word	0x08002c67
 8002c58:	08002c61 	.word	0x08002c61
 8002c5c:	08002c79 	.word	0x08002c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      break;
 8002c64:	e02f      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d024      	beq.n	8002cbc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c76:	e021      	b.n	8002cbc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c80:	d11e      	bne.n	8002cc0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c86:	e01b      	b.n	8002cc0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d902      	bls.n	8002c94 <DMA_CheckFifoParam+0xb4>
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d003      	beq.n	8002c9a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c92:	e018      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      break;
 8002c98:	e015      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00e      	beq.n	8002cc4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8002caa:	e00b      	b.n	8002cc4 <DMA_CheckFifoParam+0xe4>
      break;
 8002cac:	bf00      	nop
 8002cae:	e00a      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cb0:	bf00      	nop
 8002cb2:	e008      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cb4:	bf00      	nop
 8002cb6:	e006      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cb8:	bf00      	nop
 8002cba:	e004      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cbc:	bf00      	nop
 8002cbe:	e002      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cc4:	bf00      	nop
    }
  } 
  
  return status; 
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002ce4:	4ba9      	ldr	r3, [pc, #676]	; (8002f8c <HAL_ETH_Init+0x2b8>)
 8002ce6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e183      	b.n	8003002 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fd fd88 	bl	8000824 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d14:	4b9e      	ldr	r3, [pc, #632]	; (8002f90 <HAL_ETH_Init+0x2bc>)
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	4a9d      	ldr	r2, [pc, #628]	; (8002f90 <HAL_ETH_Init+0x2bc>)
 8002d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d20:	4b9b      	ldr	r3, [pc, #620]	; (8002f90 <HAL_ETH_Init+0x2bc>)
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d2c:	4b99      	ldr	r3, [pc, #612]	; (8002f94 <HAL_ETH_Init+0x2c0>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a98      	ldr	r2, [pc, #608]	; (8002f94 <HAL_ETH_Init+0x2c0>)
 8002d32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d36:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d38:	4b96      	ldr	r3, [pc, #600]	; (8002f94 <HAL_ETH_Init+0x2c0>)
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4994      	ldr	r1, [pc, #592]	; (8002f94 <HAL_ETH_Init+0x2c0>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d5c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d5e:	f7fe ff03 	bl	8001b68 <HAL_GetTick>
 8002d62:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002d64:	e011      	b.n	8002d8a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002d66:	f7fe feff 	bl	8001b68 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d74:	d909      	bls.n	8002d8a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e13b      	b.n	8003002 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e4      	bne.n	8002d66 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f023 031c 	bic.w	r3, r3, #28
 8002daa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002dac:	f001 fb3e 	bl	800442c <HAL_RCC_GetHCLKFreq>
 8002db0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4a78      	ldr	r2, [pc, #480]	; (8002f98 <HAL_ETH_Init+0x2c4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d908      	bls.n	8002dcc <HAL_ETH_Init+0xf8>
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4a77      	ldr	r2, [pc, #476]	; (8002f9c <HAL_ETH_Init+0x2c8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d804      	bhi.n	8002dcc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f043 0308 	orr.w	r3, r3, #8
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	e027      	b.n	8002e1c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	4a73      	ldr	r2, [pc, #460]	; (8002f9c <HAL_ETH_Init+0x2c8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d908      	bls.n	8002de6 <HAL_ETH_Init+0x112>
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	4a72      	ldr	r2, [pc, #456]	; (8002fa0 <HAL_ETH_Init+0x2cc>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d804      	bhi.n	8002de6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f043 030c 	orr.w	r3, r3, #12
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	e01a      	b.n	8002e1c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4a6d      	ldr	r2, [pc, #436]	; (8002fa0 <HAL_ETH_Init+0x2cc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d903      	bls.n	8002df6 <HAL_ETH_Init+0x122>
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4a6c      	ldr	r2, [pc, #432]	; (8002fa4 <HAL_ETH_Init+0x2d0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d911      	bls.n	8002e1a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	4a6a      	ldr	r2, [pc, #424]	; (8002fa4 <HAL_ETH_Init+0x2d0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d908      	bls.n	8002e10 <HAL_ETH_Init+0x13c>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	4a69      	ldr	r2, [pc, #420]	; (8002fa8 <HAL_ETH_Init+0x2d4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d804      	bhi.n	8002e10 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e005      	b.n	8002e1c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f043 0310 	orr.w	r3, r3, #16
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	e000      	b.n	8002e1c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002e1a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002e24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e28:	2100      	movs	r1, #0
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f956 	bl	80030dc <HAL_ETH_WritePHYRegister>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002e3a:	6939      	ldr	r1, [r7, #16]
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f9b3 	bl	80031a8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0d9      	b.n	8003002 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002e4e:	20ff      	movs	r0, #255	; 0xff
 8002e50:	f7fe fe96 	bl	8001b80 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80a7 	beq.w	8002fac <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e5e:	f7fe fe83 	bl	8001b68 <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002e64:	f107 030c 	add.w	r3, r7, #12
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f8cd 	bl	800300c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002e72:	f7fe fe79 	bl	8001b68 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d90f      	bls.n	8002ea4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002e88:	6939      	ldr	r1, [r7, #16]
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f98c 	bl	80031a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e0ae      	b.n	8003002 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0da      	beq.n	8002e64 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f911 	bl	80030dc <HAL_ETH_WritePHYRegister>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002ec4:	6939      	ldr	r1, [r7, #16]
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f96e 	bl	80031a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e094      	b.n	8003002 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7fe fe46 	bl	8001b68 <HAL_GetTick>
 8002edc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002ede:	f107 030c 	add.w	r3, r7, #12
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f890 	bl	800300c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002eec:	f7fe fe3c 	bl	8001b68 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d90f      	bls.n	8002f1e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002f02:	6939      	ldr	r1, [r7, #16]
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f94f 	bl	80031a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e071      	b.n	8003002 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0da      	beq.n	8002ede <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002f28:	f107 030c 	add.w	r3, r7, #12
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	211f      	movs	r1, #31
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f86b 	bl	800300c <HAL_ETH_ReadPHYRegister>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002f40:	6939      	ldr	r1, [r7, #16]
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f930 	bl	80031a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002f50:	2301      	movs	r3, #1
 8002f52:	e056      	b.n	8003002 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	e002      	b.n	8002f6e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	e037      	b.n	8002ff0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e032      	b.n	8002ff0 <HAL_ETH_Init+0x31c>
 8002f8a:	bf00      	nop
 8002f8c:	03938700 	.word	0x03938700
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40013800 	.word	0x40013800
 8002f98:	01312cff 	.word	0x01312cff
 8002f9c:	02160ebf 	.word	0x02160ebf
 8002fa0:	039386ff 	.word	0x039386ff
 8002fa4:	05f5e0ff 	.word	0x05f5e0ff
 8002fa8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	08db      	lsrs	r3, r3, #3
 8002fb2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f889 	bl	80030dc <HAL_ETH_WritePHYRegister>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002fd4:	6939      	ldr	r1, [r7, #16]
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8e6 	bl	80031a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e00c      	b.n	8003002 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002fe8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002fec:	f7fe fdc8 	bl	8001b80 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002ff0:	6939      	ldr	r1, [r7, #16]
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f8d8 	bl	80031a8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop

0800300c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	460b      	mov	r3, r1
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b82      	cmp	r3, #130	; 0x82
 800302c:	d101      	bne.n	8003032 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	e050      	b.n	80030d4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2282      	movs	r2, #130	; 0x82
 8003036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 031c 	and.w	r3, r3, #28
 8003048:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8a1b      	ldrh	r3, [r3, #16]
 800304e:	02db      	lsls	r3, r3, #11
 8003050:	b29b      	uxth	r3, r3
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003058:	897b      	ldrh	r3, [r7, #10]
 800305a:	019b      	lsls	r3, r3, #6
 800305c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f023 0302 	bic.w	r3, r3, #2
 800306c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800307e:	f7fe fd73 	bl	8001b68 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003084:	e015      	b.n	80030b2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003086:	f7fe fd6f 	bl	8001b68 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003094:	d309      	bcc.n	80030aa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e014      	b.n	80030d4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e4      	bne.n	8003086 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	460b      	mov	r3, r1
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b42      	cmp	r3, #66	; 0x42
 80030fc:	d101      	bne.n	8003102 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
 8003100:	e04e      	b.n	80031a0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2242      	movs	r2, #66	; 0x42
 8003106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 031c 	and.w	r3, r3, #28
 8003118:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8a1b      	ldrh	r3, [r3, #16]
 800311e:	02db      	lsls	r3, r3, #11
 8003120:	b29b      	uxth	r3, r3
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003128:	897b      	ldrh	r3, [r7, #10]
 800312a:	019b      	lsls	r3, r3, #6
 800312c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003158:	f7fe fd06 	bl	8001b68 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800315e:	e015      	b.n	800318c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003160:	f7fe fd02 	bl	8001b68 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d309      	bcc.n	8003184 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e00d      	b.n	80031a0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e4      	bne.n	8003160 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b0b0      	sub	sp, #192	; 0xc0
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031c4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80031d6:	2300      	movs	r3, #0
 80031d8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80031da:	2300      	movs	r3, #0
 80031dc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80031de:	2300      	movs	r3, #0
 80031e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80031ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f2:	663b      	str	r3, [r7, #96]	; 0x60
 80031f4:	e001      	b.n	80031fa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80031fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031fe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003200:	2300      	movs	r3, #0
 8003202:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003204:	2300      	movs	r3, #0
 8003206:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003208:	2300      	movs	r3, #0
 800320a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800320c:	2300      	movs	r3, #0
 800320e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003214:	2340      	movs	r3, #64	; 0x40
 8003216:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800321e:	2300      	movs	r3, #0
 8003220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800322a:	2300      	movs	r3, #0
 800322c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003236:	2300      	movs	r3, #0
 8003238:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800323c:	2300      	movs	r3, #0
 800323e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003242:	2300      	movs	r3, #0
 8003244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800324e:	2300      	movs	r3, #0
 8003250:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003254:	2300      	movs	r3, #0
 8003256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800325a:	2300      	movs	r3, #0
 800325c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003260:	2300      	movs	r3, #0
 8003262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800326c:	2300      	movs	r3, #0
 800326e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800327c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003280:	4bab      	ldr	r3, [pc, #684]	; (8003530 <ETH_MACDMAConfig+0x388>)
 8003282:	4013      	ands	r3, r2
 8003284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003288:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800328a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800328c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800328e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003290:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003294:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800329a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800329c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800329e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80032a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80032a2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80032a8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80032aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80032ac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80032ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80032b0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80032b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80032b4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80032b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80032b8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80032ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80032bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80032be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032dc:	2001      	movs	r0, #1
 80032de:	f7fe fc4f 	bl	8001b80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032ea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80032ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80032f0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80032f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80032f4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80032f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80032fa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80032fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003300:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003302:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003306:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800330c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003310:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003318:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800331a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003326:	2001      	movs	r0, #1
 8003328:	f7fe fc2a 	bl	8001b80 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003334:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800333e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003348:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003354:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003358:	f64f 7341 	movw	r3, #65345	; 0xff41
 800335c:	4013      	ands	r3, r2
 800335e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003366:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800336c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800336e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003372:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003378:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800337a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800337e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003380:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003384:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003386:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003398:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80033a4:	2001      	movs	r0, #1
 80033a6:	f7fe fbeb 	bl	8001b80 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033b2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80033b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80033b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033ce:	2001      	movs	r0, #1
 80033d0:	f7fe fbd6 	bl	8001b80 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033dc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80033e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80033ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033f0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003402:	2304      	movs	r3, #4
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800340c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003410:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800341c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003422:	2300      	movs	r3, #0
 8003424:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003426:	2300      	movs	r3, #0
 8003428:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	f241 0318 	movw	r3, #4120	; 0x1018
 8003432:	4413      	add	r3, r2
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800343a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <ETH_MACDMAConfig+0x38c>)
 8003440:	4013      	ands	r3, r2
 8003442:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003446:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003448:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800344a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800344c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800344e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003450:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003452:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003454:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003456:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003458:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800345a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800345c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800345e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003462:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003466:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003468:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	f241 0318 	movw	r3, #4120	; 0x1018
 800347a:	4413      	add	r3, r2
 800347c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003480:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	f241 0318 	movw	r3, #4120	; 0x1018
 800348a:	4413      	add	r3, r2
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003492:	2001      	movs	r0, #1
 8003494:	f7fe fb74 	bl	8001b80 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	f241 0318 	movw	r3, #4120	; 0x1018
 80034a0:	4413      	add	r3, r2
 80034a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034a6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034ac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80034ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80034b0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80034b4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80034b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80034b8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80034ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034bc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80034be:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80034c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80034c2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80034e0:	2001      	movs	r0, #1
 80034e2:	f7fe fb4d 	bl	8001b80 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034f2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10d      	bne.n	8003518 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	f241 031c 	movw	r3, #4124	; 0x101c
 8003504:	4413      	add	r3, r2
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6811      	ldr	r1, [r2, #0]
 800350c:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <ETH_MACDMAConfig+0x390>)
 800350e:	431a      	orrs	r2, r3
 8003510:	f241 031c 	movw	r3, #4124	; 0x101c
 8003514:	440b      	add	r3, r1
 8003516:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	461a      	mov	r2, r3
 800351e:	2100      	movs	r1, #0
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f80b 	bl	800353c <ETH_MACAddressConfig>
}
 8003526:	bf00      	nop
 8003528:	37c0      	adds	r7, #192	; 0xc0
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	ff20810f 	.word	0xff20810f
 8003534:	f8de3f23 	.word	0xf8de3f23
 8003538:	00010040 	.word	0x00010040

0800353c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3305      	adds	r3, #5
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	3204      	adds	r2, #4
 8003554:	7812      	ldrb	r2, [r2, #0]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <ETH_MACAddressConfig+0x68>)
 800355e:	4413      	add	r3, r2
 8003560:	461a      	mov	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3303      	adds	r3, #3
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	061a      	lsls	r2, r3, #24
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3302      	adds	r3, #2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3301      	adds	r3, #1
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	4313      	orrs	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <ETH_MACAddressConfig+0x6c>)
 800358e:	4413      	add	r3, r2
 8003590:	461a      	mov	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	6013      	str	r3, [r2, #0]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40028040 	.word	0x40028040
 80035a8:	40028044 	.word	0x40028044

080035ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e175      	b.n	80038b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f040 8164 	bne.w	80038b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x4e>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b12      	cmp	r3, #18
 80035f8:	d123      	bne.n	8003642 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	08da      	lsrs	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3208      	adds	r2, #8
 8003602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	220f      	movs	r2, #15
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	08da      	lsrs	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3208      	adds	r2, #8
 800363c:	69b9      	ldr	r1, [r7, #24]
 800363e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2203      	movs	r2, #3
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0203 	and.w	r2, r3, #3
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d00b      	beq.n	8003696 <HAL_GPIO_Init+0xea>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d007      	beq.n	8003696 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800368a:	2b11      	cmp	r3, #17
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b12      	cmp	r3, #18
 8003694:	d130      	bne.n	80036f8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 0201 	and.w	r2, r3, #1
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80be 	beq.w	80038b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	4b65      	ldr	r3, [pc, #404]	; (80038cc <HAL_GPIO_Init+0x320>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a64      	ldr	r2, [pc, #400]	; (80038cc <HAL_GPIO_Init+0x320>)
 800373c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
 8003742:	4b62      	ldr	r3, [pc, #392]	; (80038cc <HAL_GPIO_Init+0x320>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800374e:	4a60      	ldr	r2, [pc, #384]	; (80038d0 <HAL_GPIO_Init+0x324>)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	3302      	adds	r3, #2
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	220f      	movs	r2, #15
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a57      	ldr	r2, [pc, #348]	; (80038d4 <HAL_GPIO_Init+0x328>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d037      	beq.n	80037ea <HAL_GPIO_Init+0x23e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a56      	ldr	r2, [pc, #344]	; (80038d8 <HAL_GPIO_Init+0x32c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d031      	beq.n	80037e6 <HAL_GPIO_Init+0x23a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a55      	ldr	r2, [pc, #340]	; (80038dc <HAL_GPIO_Init+0x330>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02b      	beq.n	80037e2 <HAL_GPIO_Init+0x236>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a54      	ldr	r2, [pc, #336]	; (80038e0 <HAL_GPIO_Init+0x334>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d025      	beq.n	80037de <HAL_GPIO_Init+0x232>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a53      	ldr	r2, [pc, #332]	; (80038e4 <HAL_GPIO_Init+0x338>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01f      	beq.n	80037da <HAL_GPIO_Init+0x22e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a52      	ldr	r2, [pc, #328]	; (80038e8 <HAL_GPIO_Init+0x33c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d019      	beq.n	80037d6 <HAL_GPIO_Init+0x22a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a51      	ldr	r2, [pc, #324]	; (80038ec <HAL_GPIO_Init+0x340>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_GPIO_Init+0x226>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a50      	ldr	r2, [pc, #320]	; (80038f0 <HAL_GPIO_Init+0x344>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00d      	beq.n	80037ce <HAL_GPIO_Init+0x222>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a4f      	ldr	r2, [pc, #316]	; (80038f4 <HAL_GPIO_Init+0x348>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <HAL_GPIO_Init+0x21e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a4e      	ldr	r2, [pc, #312]	; (80038f8 <HAL_GPIO_Init+0x34c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_GPIO_Init+0x21a>
 80037c2:	2309      	movs	r3, #9
 80037c4:	e012      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037c6:	230a      	movs	r3, #10
 80037c8:	e010      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ca:	2308      	movs	r3, #8
 80037cc:	e00e      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ce:	2307      	movs	r3, #7
 80037d0:	e00c      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037d2:	2306      	movs	r3, #6
 80037d4:	e00a      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037d6:	2305      	movs	r3, #5
 80037d8:	e008      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037da:	2304      	movs	r3, #4
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037de:	2303      	movs	r3, #3
 80037e0:	e004      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_GPIO_Init+0x240>
 80037ea:	2300      	movs	r3, #0
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f002 0203 	and.w	r2, r2, #3
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	4093      	lsls	r3, r2
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037fc:	4934      	ldr	r1, [pc, #208]	; (80038d0 <HAL_GPIO_Init+0x324>)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800380a:	4b3c      	ldr	r3, [pc, #240]	; (80038fc <HAL_GPIO_Init+0x350>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800382e:	4a33      	ldr	r2, [pc, #204]	; (80038fc <HAL_GPIO_Init+0x350>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_GPIO_Init+0x350>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003858:	4a28      	ldr	r2, [pc, #160]	; (80038fc <HAL_GPIO_Init+0x350>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800385e:	4b27      	ldr	r3, [pc, #156]	; (80038fc <HAL_GPIO_Init+0x350>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003882:	4a1e      	ldr	r2, [pc, #120]	; (80038fc <HAL_GPIO_Init+0x350>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003888:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <HAL_GPIO_Init+0x350>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038ac:	4a13      	ldr	r2, [pc, #76]	; (80038fc <HAL_GPIO_Init+0x350>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	f67f ae86 	bls.w	80035cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	3724      	adds	r7, #36	; 0x24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40013800 	.word	0x40013800
 80038d4:	40020000 	.word	0x40020000
 80038d8:	40020400 	.word	0x40020400
 80038dc:	40020800 	.word	0x40020800
 80038e0:	40020c00 	.word	0x40020c00
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40021400 	.word	0x40021400
 80038ec:	40021800 	.word	0x40021800
 80038f0:	40021c00 	.word	0x40021c00
 80038f4:	40022000 	.word	0x40022000
 80038f8:	40022400 	.word	0x40022400
 80038fc:	40013c00 	.word	0x40013c00

08003900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	807b      	strh	r3, [r7, #2]
 800390c:	4613      	mov	r3, r2
 800390e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003910:	787b      	ldrb	r3, [r7, #1]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003916:	887a      	ldrh	r2, [r7, #2]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800391c:	e003      	b.n	8003926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800391e:	887b      	ldrh	r3, [r7, #2]
 8003920:	041a      	lsls	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	619a      	str	r2, [r3, #24]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003934:	b08f      	sub	sp, #60	; 0x3c
 8003936:	af0a      	add	r7, sp, #40	; 0x28
 8003938:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e10a      	b.n	8003b5a <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7fe f82f 	bl	80019bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2203      	movs	r2, #3
 8003962:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f002 fe84 	bl	8006678 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	687e      	ldr	r6, [r7, #4]
 8003978:	466d      	mov	r5, sp
 800397a:	f106 0410 	add.w	r4, r6, #16
 800397e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003986:	e894 0003 	ldmia.w	r4, {r0, r1}
 800398a:	e885 0003 	stmia.w	r5, {r0, r1}
 800398e:	1d33      	adds	r3, r6, #4
 8003990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003992:	6838      	ldr	r0, [r7, #0]
 8003994:	f002 fe18 	bl	80065c8 <USB_CoreInit>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2202      	movs	r2, #2
 80039a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0d7      	b.n	8003b5a <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f002 fe72 	bl	800669a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
 80039ba:	e04a      	b.n	8003a52 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	333d      	adds	r3, #61	; 0x3d
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	333c      	adds	r3, #60	; 0x3c
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	b298      	uxth	r0, r3
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	3342      	adds	r3, #66	; 0x42
 80039f8:	4602      	mov	r2, r0
 80039fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039fc:	7bfa      	ldrb	r2, [r7, #15]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	333f      	adds	r3, #63	; 0x3f
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3344      	adds	r3, #68	; 0x44
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3348      	adds	r3, #72	; 0x48
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	3350      	adds	r3, #80	; 0x50
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d3af      	bcc.n	80039bc <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e044      	b.n	8003aec <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d3b5      	bcc.n	8003a62 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	687e      	ldr	r6, [r7, #4]
 8003afe:	466d      	mov	r5, sp
 8003b00:	f106 0410 	add.w	r4, r6, #16
 8003b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b10:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b14:	1d33      	adds	r3, r6, #4
 8003b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b18:	6838      	ldr	r0, [r7, #0]
 8003b1a:	f002 fde9 	bl	80066f0 <USB_DevInit>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e014      	b.n	8003b5a <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d102      	bne.n	8003b4e <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f80b 	bl	8003b64 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f002 ffa9 	bl	8006aaa <USB_DevDisconnect>

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	10000003 	.word	0x10000003

08003bac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bba:	6013      	str	r3, [r2, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40007000 	.word	0x40007000

08003bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e25c      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8087 	beq.w	8003cfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bf0:	4b96      	ldr	r3, [pc, #600]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d00c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfc:	4b93      	ldr	r3, [pc, #588]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d112      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
 8003c08:	4b90      	ldr	r3, [pc, #576]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c14:	d10b      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c16:	4b8d      	ldr	r3, [pc, #564]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d06c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x130>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d168      	bne.n	8003cfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e236      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x7a>
 8003c38:	4b84      	ldr	r3, [pc, #528]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a83      	ldr	r2, [pc, #524]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e02e      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x9c>
 8003c4e:	4b7f      	ldr	r3, [pc, #508]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7e      	ldr	r2, [pc, #504]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b7c      	ldr	r3, [pc, #496]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7b      	ldr	r2, [pc, #492]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0xc0>
 8003c72:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a75      	ldr	r2, [pc, #468]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b73      	ldr	r3, [pc, #460]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a72      	ldr	r2, [pc, #456]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6e      	ldr	r2, [pc, #440]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b6c      	ldr	r3, [pc, #432]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6b      	ldr	r2, [pc, #428]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fd ff5c 	bl	8001b68 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fd ff58 	bl	8001b68 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e1ea      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe8>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd ff48 	bl	8001b68 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fd ff44 	bl	8001b68 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1d6      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b57      	ldr	r3, [pc, #348]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x110>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d069      	beq.n	8003dde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d0a:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b4d      	ldr	r3, [pc, #308]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
 8003d22:	4b4a      	ldr	r3, [pc, #296]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1aa      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	493d      	ldr	r1, [pc, #244]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e040      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d023      	beq.n	8003dac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a38      	ldr	r2, [pc, #224]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fefa 	bl	8001b68 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fd fef6 	bl	8001b68 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e188      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4929      	ldr	r1, [pc, #164]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
 8003daa:	e018      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dac:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fd fed6 	bl	8001b68 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fd fed2 	bl	8001b68 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e164      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d038      	beq.n	8003e5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d019      	beq.n	8003e26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fd feb3 	bl	8001b68 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fd feaf 	bl	8001b68 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e141      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x23a>
 8003e24:	e01a      	b.n	8003e5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fd fe99 	bl	8001b68 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e3a:	f7fd fe95 	bl	8001b68 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d903      	bls.n	8003e50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e127      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
 8003e4c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e50:	4b94      	ldr	r3, [pc, #592]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80a4 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6a:	4b8e      	ldr	r3, [pc, #568]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	4b8b      	ldr	r3, [pc, #556]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a8a      	ldr	r2, [pc, #552]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b88      	ldr	r3, [pc, #544]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e92:	4b85      	ldr	r3, [pc, #532]	; (80040a8 <HAL_RCC_OscConfig+0x4dc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d118      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e9e:	4b82      	ldr	r3, [pc, #520]	; (80040a8 <HAL_RCC_OscConfig+0x4dc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a81      	ldr	r2, [pc, #516]	; (80040a8 <HAL_RCC_OscConfig+0x4dc>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eaa:	f7fd fe5d 	bl	8001b68 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eb2:	f7fd fe59 	bl	8001b68 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b64      	cmp	r3, #100	; 0x64
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0eb      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec4:	4b78      	ldr	r3, [pc, #480]	; (80040a8 <HAL_RCC_OscConfig+0x4dc>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x31a>
 8003ed8:	4b72      	ldr	r3, [pc, #456]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a71      	ldr	r2, [pc, #452]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee4:	e02d      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x33c>
 8003eee:	4b6d      	ldr	r3, [pc, #436]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a6c      	ldr	r2, [pc, #432]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8003efa:	4b6a      	ldr	r3, [pc, #424]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a69      	ldr	r2, [pc, #420]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
 8003f06:	e01c      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCC_OscConfig+0x35e>
 8003f10:	4b64      	ldr	r3, [pc, #400]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a63      	ldr	r2, [pc, #396]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1c:	4b61      	ldr	r3, [pc, #388]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a60      	ldr	r2, [pc, #384]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	e00b      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f2a:	4b5e      	ldr	r3, [pc, #376]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a5d      	ldr	r2, [pc, #372]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	4b5b      	ldr	r3, [pc, #364]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a5a      	ldr	r2, [pc, #360]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f3c:	f023 0304 	bic.w	r3, r3, #4
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d015      	beq.n	8003f76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fd fe0d 	bl	8001b68 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fd fe09 	bl	8001b68 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e099      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	4b4e      	ldr	r3, [pc, #312]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ee      	beq.n	8003f52 <HAL_RCC_OscConfig+0x386>
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fd fdf7 	bl	8001b68 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fd fdf3 	bl	8001b68 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e083      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f94:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ee      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa6:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a3e      	ldr	r2, [pc, #248]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d06f      	beq.n	800409a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fba:	4b3a      	ldr	r3, [pc, #232]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d067      	beq.n	8004096 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d149      	bne.n	8004062 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fce:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a34      	ldr	r2, [pc, #208]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003fd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fda:	f7fd fdc5 	bl	8001b68 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe2:	f7fd fdc1 	bl	8001b68 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e053      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff4:	4b2b      	ldr	r3, [pc, #172]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f0      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	019b      	lsls	r3, r3, #6
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	3b01      	subs	r3, #1
 800401a:	041b      	lsls	r3, r3, #16
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	4313      	orrs	r3, r2
 8004026:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8004028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800402c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402e:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1c      	ldr	r2, [pc, #112]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8004034:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403a:	f7fd fd95 	bl	8001b68 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004042:	f7fd fd91 	bl	8001b68 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e023      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x476>
 8004060:	e01b      	b.n	800409a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 8004068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fd fd7b 	bl	8001b68 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004076:	f7fd fd77 	bl	8001b68 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e009      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x4d8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <HAL_RCC_OscConfig+0x4aa>
 8004094:	e001      	b.n	800409a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40007000 	.word	0x40007000

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0ce      	b.n	8004262 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	4b69      	ldr	r3, [pc, #420]	; (800426c <HAL_RCC_ClockConfig+0x1c0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d910      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b66      	ldr	r3, [pc, #408]	; (800426c <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 020f 	bic.w	r2, r3, #15
 80040da:	4964      	ldr	r1, [pc, #400]	; (800426c <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b62      	ldr	r3, [pc, #392]	; (800426c <HAL_RCC_ClockConfig+0x1c0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0b6      	b.n	8004262 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d020      	beq.n	8004142 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800410c:	4b58      	ldr	r3, [pc, #352]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a57      	ldr	r2, [pc, #348]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004124:	4b52      	ldr	r3, [pc, #328]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a51      	ldr	r2, [pc, #324]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800412a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800412e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004130:	4b4f      	ldr	r3, [pc, #316]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	494c      	ldr	r1, [pc, #304]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d040      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b46      	ldr	r3, [pc, #280]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d115      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e07d      	b.n	8004262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	4b40      	ldr	r3, [pc, #256]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e071      	b.n	8004262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417e:	4b3c      	ldr	r3, [pc, #240]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e069      	b.n	8004262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418e:	4b38      	ldr	r3, [pc, #224]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 0203 	bic.w	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4935      	ldr	r1, [pc, #212]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a0:	f7fd fce2 	bl	8001b68 <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	e00a      	b.n	80041be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a8:	f7fd fcde 	bl	8001b68 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e051      	b.n	8004262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	4b2c      	ldr	r3, [pc, #176]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 020c 	and.w	r2, r3, #12
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d1eb      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d0:	4b26      	ldr	r3, [pc, #152]	; (800426c <HAL_RCC_ClockConfig+0x1c0>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d210      	bcs.n	8004200 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b23      	ldr	r3, [pc, #140]	; (800426c <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 020f 	bic.w	r2, r3, #15
 80041e6:	4921      	ldr	r1, [pc, #132]	; (800426c <HAL_RCC_ClockConfig+0x1c0>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b1f      	ldr	r3, [pc, #124]	; (800426c <HAL_RCC_ClockConfig+0x1c0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e030      	b.n	8004262 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420c:	4b18      	ldr	r3, [pc, #96]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4915      	ldr	r1, [pc, #84]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	490d      	ldr	r1, [pc, #52]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800423e:	f000 f81d 	bl	800427c <HAL_RCC_GetSysClockFreq>
 8004242:	4601      	mov	r1, r0
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	4a09      	ldr	r2, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	5cd3      	ldrb	r3, [r2, r3]
 8004252:	fa21 f303 	lsr.w	r3, r1, r3
 8004256:	4a08      	ldr	r2, [pc, #32]	; (8004278 <HAL_RCC_ClockConfig+0x1cc>)
 8004258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800425a:	2000      	movs	r0, #0
 800425c:	f7fd fc40 	bl	8001ae0 <HAL_InitTick>

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023c00 	.word	0x40023c00
 8004270:	40023800 	.word	0x40023800
 8004274:	080073f8 	.word	0x080073f8
 8004278:	20000018 	.word	0x20000018

0800427c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	2300      	movs	r3, #0
 800428c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004292:	4b63      	ldr	r3, [pc, #396]	; (8004420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b04      	cmp	r3, #4
 800429c:	d007      	beq.n	80042ae <HAL_RCC_GetSysClockFreq+0x32>
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d008      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x38>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f040 80b4 	bne.w	8004410 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b5e      	ldr	r3, [pc, #376]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042aa:	60bb      	str	r3, [r7, #8]
       break;
 80042ac:	e0b3      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ae:	4b5e      	ldr	r3, [pc, #376]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042b0:	60bb      	str	r3, [r7, #8]
      break;
 80042b2:	e0b0      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b4:	4b5a      	ldr	r3, [pc, #360]	; (8004420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042be:	4b58      	ldr	r3, [pc, #352]	; (8004420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d04a      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ca:	4b55      	ldr	r3, [pc, #340]	; (8004420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	f04f 0400 	mov.w	r4, #0
 80042d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	ea03 0501 	and.w	r5, r3, r1
 80042e0:	ea04 0602 	and.w	r6, r4, r2
 80042e4:	4629      	mov	r1, r5
 80042e6:	4632      	mov	r2, r6
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	f04f 0400 	mov.w	r4, #0
 80042f0:	0154      	lsls	r4, r2, #5
 80042f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042f6:	014b      	lsls	r3, r1, #5
 80042f8:	4619      	mov	r1, r3
 80042fa:	4622      	mov	r2, r4
 80042fc:	1b49      	subs	r1, r1, r5
 80042fe:	eb62 0206 	sbc.w	r2, r2, r6
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	f04f 0400 	mov.w	r4, #0
 800430a:	0194      	lsls	r4, r2, #6
 800430c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004310:	018b      	lsls	r3, r1, #6
 8004312:	1a5b      	subs	r3, r3, r1
 8004314:	eb64 0402 	sbc.w	r4, r4, r2
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	00e2      	lsls	r2, r4, #3
 8004322:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004326:	00d9      	lsls	r1, r3, #3
 8004328:	460b      	mov	r3, r1
 800432a:	4614      	mov	r4, r2
 800432c:	195b      	adds	r3, r3, r5
 800432e:	eb44 0406 	adc.w	r4, r4, r6
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	0262      	lsls	r2, r4, #9
 800433c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004340:	0259      	lsls	r1, r3, #9
 8004342:	460b      	mov	r3, r1
 8004344:	4614      	mov	r4, r2
 8004346:	4618      	mov	r0, r3
 8004348:	4621      	mov	r1, r4
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f04f 0400 	mov.w	r4, #0
 8004350:	461a      	mov	r2, r3
 8004352:	4623      	mov	r3, r4
 8004354:	f7fb ffb4 	bl	80002c0 <__aeabi_uldivmod>
 8004358:	4603      	mov	r3, r0
 800435a:	460c      	mov	r4, r1
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	e049      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004360:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	f04f 0400 	mov.w	r4, #0
 800436a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	ea03 0501 	and.w	r5, r3, r1
 8004376:	ea04 0602 	and.w	r6, r4, r2
 800437a:	4629      	mov	r1, r5
 800437c:	4632      	mov	r2, r6
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	f04f 0400 	mov.w	r4, #0
 8004386:	0154      	lsls	r4, r2, #5
 8004388:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800438c:	014b      	lsls	r3, r1, #5
 800438e:	4619      	mov	r1, r3
 8004390:	4622      	mov	r2, r4
 8004392:	1b49      	subs	r1, r1, r5
 8004394:	eb62 0206 	sbc.w	r2, r2, r6
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	f04f 0400 	mov.w	r4, #0
 80043a0:	0194      	lsls	r4, r2, #6
 80043a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043a6:	018b      	lsls	r3, r1, #6
 80043a8:	1a5b      	subs	r3, r3, r1
 80043aa:	eb64 0402 	sbc.w	r4, r4, r2
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	00e2      	lsls	r2, r4, #3
 80043b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043bc:	00d9      	lsls	r1, r3, #3
 80043be:	460b      	mov	r3, r1
 80043c0:	4614      	mov	r4, r2
 80043c2:	195b      	adds	r3, r3, r5
 80043c4:	eb44 0406 	adc.w	r4, r4, r6
 80043c8:	f04f 0100 	mov.w	r1, #0
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	02a2      	lsls	r2, r4, #10
 80043d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043d6:	0299      	lsls	r1, r3, #10
 80043d8:	460b      	mov	r3, r1
 80043da:	4614      	mov	r4, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	4621      	mov	r1, r4
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f04f 0400 	mov.w	r4, #0
 80043e6:	461a      	mov	r2, r3
 80043e8:	4623      	mov	r3, r4
 80043ea:	f7fb ff69 	bl	80002c0 <__aeabi_uldivmod>
 80043ee:	4603      	mov	r3, r0
 80043f0:	460c      	mov	r4, r1
 80043f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	3301      	adds	r3, #1
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	60bb      	str	r3, [r7, #8]
      break;
 800440e:	e002      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004412:	60bb      	str	r3, [r7, #8]
      break;
 8004414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004416:	68bb      	ldr	r3, [r7, #8]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004420:	40023800 	.word	0x40023800
 8004424:	00f42400 	.word	0x00f42400
 8004428:	007a1200 	.word	0x007a1200

0800442c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <HAL_RCC_GetHCLKFreq+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000018 	.word	0x20000018

08004444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004448:	f7ff fff0 	bl	800442c <HAL_RCC_GetHCLKFreq>
 800444c:	4601      	mov	r1, r0
 800444e:	4b05      	ldr	r3, [pc, #20]	; (8004464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0a9b      	lsrs	r3, r3, #10
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4a03      	ldr	r2, [pc, #12]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004460:	4618      	mov	r0, r3
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40023800 	.word	0x40023800
 8004468:	08007408 	.word	0x08007408

0800446c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004470:	f7ff ffdc 	bl	800442c <HAL_RCC_GetHCLKFreq>
 8004474:	4601      	mov	r1, r0
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	0b5b      	lsrs	r3, r3, #13
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	4a03      	ldr	r2, [pc, #12]	; (8004490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004482:	5cd3      	ldrb	r3, [r2, r3]
 8004484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004488:	4618      	mov	r0, r3
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40023800 	.word	0x40023800
 8004490:	08007408 	.word	0x08007408

08004494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d012      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044bc:	4b69      	ldr	r3, [pc, #420]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	4a68      	ldr	r2, [pc, #416]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044c6:	6093      	str	r3, [r2, #8]
 80044c8:	4b66      	ldr	r3, [pc, #408]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d0:	4964      	ldr	r1, [pc, #400]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044de:	2301      	movs	r3, #1
 80044e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d017      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044ee:	4b5d      	ldr	r3, [pc, #372]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	4959      	ldr	r1, [pc, #356]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800450c:	d101      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800450e:	2301      	movs	r3, #1
 8004510:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800451a:	2301      	movs	r3, #1
 800451c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d017      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800452a:	4b4e      	ldr	r3, [pc, #312]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004530:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	494a      	ldr	r1, [pc, #296]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004548:	d101      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800454a:	2301      	movs	r3, #1
 800454c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004556:	2301      	movs	r3, #1
 8004558:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004566:	2301      	movs	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 808b 	beq.w	800468e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004578:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	4a39      	ldr	r2, [pc, #228]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004582:	6413      	str	r3, [r2, #64]	; 0x40
 8004584:	4b37      	ldr	r3, [pc, #220]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004590:	4b35      	ldr	r3, [pc, #212]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a34      	ldr	r2, [pc, #208]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459c:	f7fd fae4 	bl	8001b68 <HAL_GetTick>
 80045a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a4:	f7fd fae0 	bl	8001b68 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e355      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045b6:	4b2c      	ldr	r3, [pc, #176]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045c2:	4b28      	ldr	r3, [pc, #160]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d035      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d02e      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e0:	4b20      	ldr	r3, [pc, #128]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ea:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a1a      	ldr	r2, [pc, #104]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004600:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004602:	4a18      	ldr	r2, [pc, #96]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004608:	4b16      	ldr	r3, [pc, #88]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d114      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd faa8 	bl	8001b68 <HAL_GetTick>
 8004618:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461a:	e00a      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fd faa4 	bl	8001b68 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e317      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004632:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0ee      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800464a:	d111      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004658:	4b04      	ldr	r3, [pc, #16]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800465a:	400b      	ands	r3, r1
 800465c:	4901      	ldr	r1, [pc, #4]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
 8004662:	e00b      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004664:	40023800 	.word	0x40023800
 8004668:	40007000 	.word	0x40007000
 800466c:	0ffffcff 	.word	0x0ffffcff
 8004670:	4bb0      	ldr	r3, [pc, #704]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4aaf      	ldr	r2, [pc, #700]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004676:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800467a:	6093      	str	r3, [r2, #8]
 800467c:	4bad      	ldr	r3, [pc, #692]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800467e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004688:	49aa      	ldr	r1, [pc, #680]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800468a:	4313      	orrs	r3, r2
 800468c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b00      	cmp	r3, #0
 8004698:	d010      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800469a:	4ba6      	ldr	r3, [pc, #664]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800469c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a0:	4aa4      	ldr	r2, [pc, #656]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046aa:	4ba2      	ldr	r3, [pc, #648]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	499f      	ldr	r1, [pc, #636]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c8:	4b9a      	ldr	r3, [pc, #616]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d6:	4997      	ldr	r1, [pc, #604]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046ea:	4b92      	ldr	r3, [pc, #584]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f8:	498e      	ldr	r1, [pc, #568]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800470c:	4b89      	ldr	r3, [pc, #548]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471a:	4986      	ldr	r1, [pc, #536]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800472e:	4b81      	ldr	r3, [pc, #516]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	497d      	ldr	r1, [pc, #500]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004750:	4b78      	ldr	r3, [pc, #480]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f023 0203 	bic.w	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	4975      	ldr	r1, [pc, #468]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004772:	4b70      	ldr	r3, [pc, #448]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	f023 020c 	bic.w	r2, r3, #12
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004780:	496c      	ldr	r1, [pc, #432]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004794:	4b67      	ldr	r3, [pc, #412]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	4964      	ldr	r1, [pc, #400]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047b6:	4b5f      	ldr	r3, [pc, #380]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c4:	495b      	ldr	r1, [pc, #364]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047d8:	4b56      	ldr	r3, [pc, #344]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e6:	4953      	ldr	r1, [pc, #332]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047fa:	4b4e      	ldr	r3, [pc, #312]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004808:	494a      	ldr	r1, [pc, #296]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800481c:	4b45      	ldr	r3, [pc, #276]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482a:	4942      	ldr	r1, [pc, #264]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800483e:	4b3d      	ldr	r3, [pc, #244]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484c:	4939      	ldr	r1, [pc, #228]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004860:	4b34      	ldr	r3, [pc, #208]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486e:	4931      	ldr	r1, [pc, #196]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d011      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004882:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004890:	4928      	ldr	r1, [pc, #160]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800489c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a0:	d101      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048a2:	2301      	movs	r3, #1
 80048a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048b2:	2301      	movs	r3, #1
 80048b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048c2:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d0:	4918      	ldr	r1, [pc, #96]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048e4:	4b13      	ldr	r3, [pc, #76]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048f4:	490f      	ldr	r1, [pc, #60]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d005      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800490a:	f040 80d8 	bne.w	8004abe <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a08      	ldr	r2, [pc, #32]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004914:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491a:	f7fd f925 	bl	8001b68 <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004920:	e00a      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004922:	f7fd f921 	bl	8001b68 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b64      	cmp	r3, #100	; 0x64
 800492e:	d903      	bls.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e196      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004934:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004938:	4b6c      	ldr	r3, [pc, #432]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1ee      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d021      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	2b00      	cmp	r3, #0
 8004956:	d11d      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004958:	4b64      	ldr	r3, [pc, #400]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800495a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004966:	4b61      	ldr	r3, [pc, #388]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496c:	0e1b      	lsrs	r3, r3, #24
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	019a      	lsls	r2, r3, #6
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	431a      	orrs	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	061b      	lsls	r3, r3, #24
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	071b      	lsls	r3, r3, #28
 800498c:	4957      	ldr	r1, [pc, #348]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x516>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d02e      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049be:	d129      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049c0:	4b4a      	ldr	r3, [pc, #296]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c6:	0c1b      	lsrs	r3, r3, #16
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049ce:	4b47      	ldr	r3, [pc, #284]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d4:	0f1b      	lsrs	r3, r3, #28
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	019a      	lsls	r2, r3, #6
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	431a      	orrs	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	071b      	lsls	r3, r3, #28
 80049f4:	493d      	ldr	r1, [pc, #244]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049fc:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a02:	f023 021f 	bic.w	r2, r3, #31
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	4937      	ldr	r1, [pc, #220]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01d      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a20:	4b32      	ldr	r3, [pc, #200]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a26:	0e1b      	lsrs	r3, r3, #24
 8004a28:	f003 030f 	and.w	r3, r3, #15
 8004a2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a2e:	4b2f      	ldr	r3, [pc, #188]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a34:	0f1b      	lsrs	r3, r3, #28
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	019a      	lsls	r2, r3, #6
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	041b      	lsls	r3, r3, #16
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	071b      	lsls	r3, r3, #28
 8004a54:	4925      	ldr	r1, [pc, #148]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d011      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	019a      	lsls	r2, r3, #6
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	041b      	lsls	r3, r3, #16
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	061b      	lsls	r3, r3, #24
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	071b      	lsls	r3, r3, #28
 8004a84:	4919      	ldr	r1, [pc, #100]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a8c:	4b17      	ldr	r3, [pc, #92]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a16      	ldr	r2, [pc, #88]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a98:	f7fd f866 	bl	8001b68 <HAL_GetTick>
 8004a9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aa0:	f7fd f862 	bl	8001b68 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	; 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e0d7      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	f040 80cd 	bne.w	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ac6:	4b09      	ldr	r3, [pc, #36]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a08      	ldr	r2, [pc, #32]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad2:	f7fd f849 	bl	8001b68 <HAL_GetTick>
 8004ad6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ada:	f7fd f845 	bl	8001b68 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b64      	cmp	r3, #100	; 0x64
 8004ae6:	d903      	bls.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0ba      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004aec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004af0:	4b5e      	ldr	r3, [pc, #376]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004afc:	d0ed      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d02e      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d12a      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b26:	4b51      	ldr	r3, [pc, #324]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	0c1b      	lsrs	r3, r3, #16
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b34:	4b4d      	ldr	r3, [pc, #308]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	0f1b      	lsrs	r3, r3, #28
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	019a      	lsls	r2, r3, #6
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	041b      	lsls	r3, r3, #16
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	061b      	lsls	r3, r3, #24
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	071b      	lsls	r3, r3, #28
 8004b5a:	4944      	ldr	r1, [pc, #272]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b62:	4b42      	ldr	r3, [pc, #264]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	3b01      	subs	r3, #1
 8004b72:	021b      	lsls	r3, r3, #8
 8004b74:	493d      	ldr	r1, [pc, #244]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d022      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b90:	d11d      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b92:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	0e1b      	lsrs	r3, r3, #24
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ba0:	4b32      	ldr	r3, [pc, #200]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	0f1b      	lsrs	r3, r3, #28
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	019a      	lsls	r2, r3, #6
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	041b      	lsls	r3, r3, #16
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	061b      	lsls	r3, r3, #24
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	071b      	lsls	r3, r3, #28
 8004bc6:	4929      	ldr	r1, [pc, #164]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d028      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bda:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	0e1b      	lsrs	r3, r3, #24
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004be8:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	0c1b      	lsrs	r3, r3, #16
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	019a      	lsls	r2, r3, #6
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	431a      	orrs	r2, r3
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	061b      	lsls	r3, r3, #24
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	071b      	lsls	r3, r3, #28
 8004c0e:	4917      	ldr	r1, [pc, #92]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c16:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	4911      	ldr	r1, [pc, #68]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a0e      	ldr	r2, [pc, #56]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c38:	f7fc ff96 	bl	8001b68 <HAL_GetTick>
 8004c3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c40:	f7fc ff92 	bl	8001b68 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	; 0x64
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e007      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c5e:	d1ef      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3720      	adds	r7, #32
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800

08004c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e01d      	b.n	8004cbe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fd26 	bl	80016e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f000 fbc8 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <HAL_TIM_Base_Start_IT+0x50>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b06      	cmp	r3, #6
 8004cf0:	d00b      	beq.n	8004d0a <HAL_TIM_Base_Start_IT+0x42>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf8:	d007      	beq.n	8004d0a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	00010007 	.word	0x00010007

08004d1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e01d      	b.n	8004d6a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f815 	bl	8004d72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f000 fb72 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2201      	movs	r2, #1
 8004d98:	6839      	ldr	r1, [r7, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 feea 	bl	8005b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <HAL_TIM_PWM_Start+0x7c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_TIM_PWM_Start+0x2c>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <HAL_TIM_PWM_Start+0x80>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d101      	bne.n	8004db8 <HAL_TIM_PWM_Start+0x30>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_TIM_PWM_Start+0x32>
 8004db8:	2300      	movs	r3, #0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <HAL_TIM_PWM_Start+0x84>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b06      	cmp	r3, #6
 8004dde:	d00b      	beq.n	8004df8 <HAL_TIM_PWM_Start+0x70>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de6:	d007      	beq.n	8004df8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40010400 	.word	0x40010400
 8004e0c:	00010007 	.word	0x00010007

08004e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d122      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d11b      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0202 	mvn.w	r2, #2
 8004e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fad8 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 8004e58:	e005      	b.n	8004e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 faca 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fadb 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d122      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d11b      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0204 	mvn.w	r2, #4
 8004e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2202      	movs	r2, #2
 8004e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 faae 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 faa0 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fab1 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d122      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d11b      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0208 	mvn.w	r2, #8
 8004ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa84 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa76 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fa87 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d122      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d11b      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0210 	mvn.w	r2, #16
 8004f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fa5a 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 8004f54:	e005      	b.n	8004f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa4c 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fa5d 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d10e      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d107      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0201 	mvn.w	r2, #1
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fb ff18 	bl	8000dc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	2b80      	cmp	r3, #128	; 0x80
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fac:	2b80      	cmp	r3, #128	; 0x80
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fee4 	bl	8005d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fce:	d10e      	bne.n	8004fee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fda:	2b80      	cmp	r3, #128	; 0x80
 8004fdc:	d107      	bne.n	8004fee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fed7 	bl	8005d9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d10e      	bne.n	800501a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d107      	bne.n	800501a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fa0b 	bl	8005430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b20      	cmp	r3, #32
 8005026:	d10e      	bne.n	8005046 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b20      	cmp	r3, #32
 8005034:	d107      	bne.n	8005046 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f06f 0220 	mvn.w	r2, #32
 800503e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fe97 	bl	8005d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005066:	2302      	movs	r3, #2
 8005068:	e105      	b.n	8005276 <HAL_TIM_PWM_ConfigChannel+0x226>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b14      	cmp	r3, #20
 800507e:	f200 80f0 	bhi.w	8005262 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005082:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050dd 	.word	0x080050dd
 800508c:	08005263 	.word	0x08005263
 8005090:	08005263 	.word	0x08005263
 8005094:	08005263 	.word	0x08005263
 8005098:	0800511d 	.word	0x0800511d
 800509c:	08005263 	.word	0x08005263
 80050a0:	08005263 	.word	0x08005263
 80050a4:	08005263 	.word	0x08005263
 80050a8:	0800515f 	.word	0x0800515f
 80050ac:	08005263 	.word	0x08005263
 80050b0:	08005263 	.word	0x08005263
 80050b4:	08005263 	.word	0x08005263
 80050b8:	0800519f 	.word	0x0800519f
 80050bc:	08005263 	.word	0x08005263
 80050c0:	08005263 	.word	0x08005263
 80050c4:	08005263 	.word	0x08005263
 80050c8:	080051e1 	.word	0x080051e1
 80050cc:	08005263 	.word	0x08005263
 80050d0:	08005263 	.word	0x08005263
 80050d4:	08005263 	.word	0x08005263
 80050d8:	08005221 	.word	0x08005221
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fa4e 	bl	8005584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0208 	orr.w	r2, r2, #8
 80050f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0204 	bic.w	r2, r2, #4
 8005106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6999      	ldr	r1, [r3, #24]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	619a      	str	r2, [r3, #24]
      break;
 800511a:	e0a3      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 faa0 	bl	8005668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6999      	ldr	r1, [r3, #24]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	021a      	lsls	r2, r3, #8
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	619a      	str	r2, [r3, #24]
      break;
 800515c:	e082      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 faf7 	bl	8005758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0208 	orr.w	r2, r2, #8
 8005178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0204 	bic.w	r2, r2, #4
 8005188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69d9      	ldr	r1, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	61da      	str	r2, [r3, #28]
      break;
 800519c:	e062      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fb4d 	bl	8005844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69d9      	ldr	r1, [r3, #28]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	021a      	lsls	r2, r3, #8
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	61da      	str	r2, [r3, #28]
      break;
 80051de:	e041      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fb84 	bl	80058f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0208 	orr.w	r2, r2, #8
 80051fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0204 	bic.w	r2, r2, #4
 800520a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800521e:	e021      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fbb6 	bl	8005998 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	021a      	lsls	r2, r3, #8
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005260:	e000      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005262:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop

08005280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_TIM_ConfigClockSource+0x18>
 8005294:	2302      	movs	r3, #2
 8005296:	e0a6      	b.n	80053e6 <HAL_TIM_ConfigClockSource+0x166>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4b4f      	ldr	r3, [pc, #316]	; (80053f0 <HAL_TIM_ConfigClockSource+0x170>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d067      	beq.n	80053a0 <HAL_TIM_ConfigClockSource+0x120>
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d80b      	bhi.n	80052ec <HAL_TIM_ConfigClockSource+0x6c>
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d073      	beq.n	80053c0 <HAL_TIM_ConfigClockSource+0x140>
 80052d8:	2b10      	cmp	r3, #16
 80052da:	d802      	bhi.n	80052e2 <HAL_TIM_ConfigClockSource+0x62>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d06f      	beq.n	80053c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80052e0:	e078      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d06c      	beq.n	80053c0 <HAL_TIM_ConfigClockSource+0x140>
 80052e6:	2b30      	cmp	r3, #48	; 0x30
 80052e8:	d06a      	beq.n	80053c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80052ea:	e073      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052ec:	2b70      	cmp	r3, #112	; 0x70
 80052ee:	d00d      	beq.n	800530c <HAL_TIM_ConfigClockSource+0x8c>
 80052f0:	2b70      	cmp	r3, #112	; 0x70
 80052f2:	d804      	bhi.n	80052fe <HAL_TIM_ConfigClockSource+0x7e>
 80052f4:	2b50      	cmp	r3, #80	; 0x50
 80052f6:	d033      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0xe0>
 80052f8:	2b60      	cmp	r3, #96	; 0x60
 80052fa:	d041      	beq.n	8005380 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80052fc:	e06a      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005302:	d066      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0x152>
 8005304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005308:	d017      	beq.n	800533a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800530a:	e063      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	6899      	ldr	r1, [r3, #8]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f000 fc0a 	bl	8005b34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800532e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	609a      	str	r2, [r3, #8]
      break;
 8005338:	e04c      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6899      	ldr	r1, [r3, #8]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f000 fbf3 	bl	8005b34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800535c:	609a      	str	r2, [r3, #8]
      break;
 800535e:	e039      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	6859      	ldr	r1, [r3, #4]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	461a      	mov	r2, r3
 800536e:	f000 fb67 	bl	8005a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2150      	movs	r1, #80	; 0x50
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fbc0 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 800537e:	e029      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	6859      	ldr	r1, [r3, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	461a      	mov	r2, r3
 800538e:	f000 fb86 	bl	8005a9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2160      	movs	r1, #96	; 0x60
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fbb0 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 800539e:	e019      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	6859      	ldr	r1, [r3, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	461a      	mov	r2, r3
 80053ae:	f000 fb47 	bl	8005a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2140      	movs	r1, #64	; 0x40
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fba0 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 80053be:	e009      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4619      	mov	r1, r3
 80053ca:	4610      	mov	r0, r2
 80053cc:	f000 fb97 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 80053d0:	e000      	b.n	80053d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80053d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	fffeff88 	.word	0xfffeff88

080053f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a40      	ldr	r2, [pc, #256]	; (8005558 <TIM_Base_SetConfig+0x114>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d00f      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a3d      	ldr	r2, [pc, #244]	; (800555c <TIM_Base_SetConfig+0x118>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a3c      	ldr	r2, [pc, #240]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3b      	ldr	r2, [pc, #236]	; (8005564 <TIM_Base_SetConfig+0x120>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3a      	ldr	r2, [pc, #232]	; (8005568 <TIM_Base_SetConfig+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d108      	bne.n	8005496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2f      	ldr	r2, [pc, #188]	; (8005558 <TIM_Base_SetConfig+0x114>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d02b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d027      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2c      	ldr	r2, [pc, #176]	; (800555c <TIM_Base_SetConfig+0x118>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d023      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2b      	ldr	r2, [pc, #172]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01f      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <TIM_Base_SetConfig+0x120>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a29      	ldr	r2, [pc, #164]	; (8005568 <TIM_Base_SetConfig+0x124>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d017      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a28      	ldr	r2, [pc, #160]	; (800556c <TIM_Base_SetConfig+0x128>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a27      	ldr	r2, [pc, #156]	; (8005570 <TIM_Base_SetConfig+0x12c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00f      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <TIM_Base_SetConfig+0x130>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <TIM_Base_SetConfig+0x134>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a24      	ldr	r2, [pc, #144]	; (800557c <TIM_Base_SetConfig+0x138>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a23      	ldr	r2, [pc, #140]	; (8005580 <TIM_Base_SetConfig+0x13c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d108      	bne.n	8005508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <TIM_Base_SetConfig+0x114>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d003      	beq.n	800553c <TIM_Base_SetConfig+0xf8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a0c      	ldr	r2, [pc, #48]	; (8005568 <TIM_Base_SetConfig+0x124>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d103      	bne.n	8005544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	615a      	str	r2, [r3, #20]
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40010400 	.word	0x40010400
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800
 8005578:	40001800 	.word	0x40001800
 800557c:	40001c00 	.word	0x40001c00
 8005580:	40002000 	.word	0x40002000

08005584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f023 0201 	bic.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4b2b      	ldr	r3, [pc, #172]	; (800565c <TIM_OC1_SetConfig+0xd8>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f023 0302 	bic.w	r3, r3, #2
 80055cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a21      	ldr	r2, [pc, #132]	; (8005660 <TIM_OC1_SetConfig+0xdc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_OC1_SetConfig+0x64>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a20      	ldr	r2, [pc, #128]	; (8005664 <TIM_OC1_SetConfig+0xe0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d10c      	bne.n	8005602 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 0308 	bic.w	r3, r3, #8
 80055ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 0304 	bic.w	r3, r3, #4
 8005600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a16      	ldr	r2, [pc, #88]	; (8005660 <TIM_OC1_SetConfig+0xdc>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d003      	beq.n	8005612 <TIM_OC1_SetConfig+0x8e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a15      	ldr	r2, [pc, #84]	; (8005664 <TIM_OC1_SetConfig+0xe0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d111      	bne.n	8005636 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	fffeff8f 	.word	0xfffeff8f
 8005660:	40010000 	.word	0x40010000
 8005664:	40010400 	.word	0x40010400

08005668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f023 0210 	bic.w	r2, r3, #16
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4b2e      	ldr	r3, [pc, #184]	; (800574c <TIM_OC2_SetConfig+0xe4>)
 8005694:	4013      	ands	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f023 0320 	bic.w	r3, r3, #32
 80056b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a23      	ldr	r2, [pc, #140]	; (8005750 <TIM_OC2_SetConfig+0xe8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_OC2_SetConfig+0x68>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a22      	ldr	r2, [pc, #136]	; (8005754 <TIM_OC2_SetConfig+0xec>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10d      	bne.n	80056ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a18      	ldr	r2, [pc, #96]	; (8005750 <TIM_OC2_SetConfig+0xe8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d003      	beq.n	80056fc <TIM_OC2_SetConfig+0x94>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a17      	ldr	r2, [pc, #92]	; (8005754 <TIM_OC2_SetConfig+0xec>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d113      	bne.n	8005724 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800570a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	feff8fff 	.word	0xfeff8fff
 8005750:	40010000 	.word	0x40010000
 8005754:	40010400 	.word	0x40010400

08005758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <TIM_OC3_SetConfig+0xe0>)
 8005784:	4013      	ands	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a22      	ldr	r2, [pc, #136]	; (800583c <TIM_OC3_SetConfig+0xe4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_OC3_SetConfig+0x66>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a21      	ldr	r2, [pc, #132]	; (8005840 <TIM_OC3_SetConfig+0xe8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d10d      	bne.n	80057da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a17      	ldr	r2, [pc, #92]	; (800583c <TIM_OC3_SetConfig+0xe4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <TIM_OC3_SetConfig+0x92>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a16      	ldr	r2, [pc, #88]	; (8005840 <TIM_OC3_SetConfig+0xe8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d113      	bne.n	8005812 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	fffeff8f 	.word	0xfffeff8f
 800583c:	40010000 	.word	0x40010000
 8005840:	40010400 	.word	0x40010400

08005844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4b1e      	ldr	r3, [pc, #120]	; (80058e8 <TIM_OC4_SetConfig+0xa4>)
 8005870:	4013      	ands	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800588e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	031b      	lsls	r3, r3, #12
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a13      	ldr	r2, [pc, #76]	; (80058ec <TIM_OC4_SetConfig+0xa8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <TIM_OC4_SetConfig+0x68>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a12      	ldr	r2, [pc, #72]	; (80058f0 <TIM_OC4_SetConfig+0xac>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d109      	bne.n	80058c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	019b      	lsls	r3, r3, #6
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	feff8fff 	.word	0xfeff8fff
 80058ec:	40010000 	.word	0x40010000
 80058f0:	40010400 	.word	0x40010400

080058f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4b1b      	ldr	r3, [pc, #108]	; (800598c <TIM_OC5_SetConfig+0x98>)
 8005920:	4013      	ands	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005934:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a12      	ldr	r2, [pc, #72]	; (8005990 <TIM_OC5_SetConfig+0x9c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_OC5_SetConfig+0x5e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a11      	ldr	r2, [pc, #68]	; (8005994 <TIM_OC5_SetConfig+0xa0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d109      	bne.n	8005966 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005958:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	621a      	str	r2, [r3, #32]
}
 8005980:	bf00      	nop
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	fffeff8f 	.word	0xfffeff8f
 8005990:	40010000 	.word	0x40010000
 8005994:	40010400 	.word	0x40010400

08005998 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <TIM_OC6_SetConfig+0x9c>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	051b      	lsls	r3, r3, #20
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <TIM_OC6_SetConfig+0xa0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d003      	beq.n	80059f8 <TIM_OC6_SetConfig+0x60>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a12      	ldr	r2, [pc, #72]	; (8005a3c <TIM_OC6_SetConfig+0xa4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d109      	bne.n	8005a0c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	029b      	lsls	r3, r3, #10
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	feff8fff 	.word	0xfeff8fff
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f023 0201 	bic.w	r2, r3, #1
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f023 030a 	bic.w	r3, r3, #10
 8005a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b087      	sub	sp, #28
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0210 	bic.w	r2, r3, #16
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	031b      	lsls	r3, r3, #12
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f043 0307 	orr.w	r3, r3, #7
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	609a      	str	r2, [r3, #8]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	021a      	lsls	r2, r3, #8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	609a      	str	r2, [r3, #8]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	2201      	movs	r2, #1
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1a      	ldr	r2, [r3, #32]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	401a      	ands	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	431a      	orrs	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e045      	b.n	8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1b      	ldr	r2, [pc, #108]	; (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d108      	bne.n	8005c1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c36:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40010400 	.word	0x40010400

08005c78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e065      	b.n	8005d60 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	041b      	lsls	r3, r3, #16
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a16      	ldr	r2, [pc, #88]	; (8005d6c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a14      	ldr	r2, [pc, #80]	; (8005d70 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d115      	bne.n	8005d4e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	051b      	lsls	r3, r3, #20
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	40010000 	.word	0x40010000
 8005d70:	40010400 	.word	0x40010400

08005d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e040      	b.n	8005e44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fb fd80 	bl	80018d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2224      	movs	r2, #36	; 0x24
 8005ddc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0201 	bic.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f82c 	bl	8005e4c <UART_SetConfig>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e022      	b.n	8005e44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fac4 	bl	8006394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e2a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fb4b 	bl	80064d8 <UART_CheckIdleState>
 8005e42:	4603      	mov	r3, r0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4bb1      	ldr	r3, [pc, #708]	; (8006140 <UART_SetConfig+0x2f4>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6812      	ldr	r2, [r2, #0]
 8005e82:	6939      	ldr	r1, [r7, #16]
 8005e84:	430b      	orrs	r3, r1
 8005e86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a9f      	ldr	r2, [pc, #636]	; (8006144 <UART_SetConfig+0x2f8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d121      	bne.n	8005f10 <UART_SetConfig+0xc4>
 8005ecc:	4b9e      	ldr	r3, [pc, #632]	; (8006148 <UART_SetConfig+0x2fc>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d816      	bhi.n	8005f08 <UART_SetConfig+0xbc>
 8005eda:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <UART_SetConfig+0x94>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005ef1 	.word	0x08005ef1
 8005ee4:	08005efd 	.word	0x08005efd
 8005ee8:	08005ef7 	.word	0x08005ef7
 8005eec:	08005f03 	.word	0x08005f03
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	77fb      	strb	r3, [r7, #31]
 8005ef4:	e151      	b.n	800619a <UART_SetConfig+0x34e>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	77fb      	strb	r3, [r7, #31]
 8005efa:	e14e      	b.n	800619a <UART_SetConfig+0x34e>
 8005efc:	2304      	movs	r3, #4
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e14b      	b.n	800619a <UART_SetConfig+0x34e>
 8005f02:	2308      	movs	r3, #8
 8005f04:	77fb      	strb	r3, [r7, #31]
 8005f06:	e148      	b.n	800619a <UART_SetConfig+0x34e>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	bf00      	nop
 8005f0e:	e144      	b.n	800619a <UART_SetConfig+0x34e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a8d      	ldr	r2, [pc, #564]	; (800614c <UART_SetConfig+0x300>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d134      	bne.n	8005f84 <UART_SetConfig+0x138>
 8005f1a:	4b8b      	ldr	r3, [pc, #556]	; (8006148 <UART_SetConfig+0x2fc>)
 8005f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b0c      	cmp	r3, #12
 8005f26:	d829      	bhi.n	8005f7c <UART_SetConfig+0x130>
 8005f28:	a201      	add	r2, pc, #4	; (adr r2, 8005f30 <UART_SetConfig+0xe4>)
 8005f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2e:	bf00      	nop
 8005f30:	08005f65 	.word	0x08005f65
 8005f34:	08005f7d 	.word	0x08005f7d
 8005f38:	08005f7d 	.word	0x08005f7d
 8005f3c:	08005f7d 	.word	0x08005f7d
 8005f40:	08005f71 	.word	0x08005f71
 8005f44:	08005f7d 	.word	0x08005f7d
 8005f48:	08005f7d 	.word	0x08005f7d
 8005f4c:	08005f7d 	.word	0x08005f7d
 8005f50:	08005f6b 	.word	0x08005f6b
 8005f54:	08005f7d 	.word	0x08005f7d
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f7d 	.word	0x08005f7d
 8005f60:	08005f77 	.word	0x08005f77
 8005f64:	2300      	movs	r3, #0
 8005f66:	77fb      	strb	r3, [r7, #31]
 8005f68:	e117      	b.n	800619a <UART_SetConfig+0x34e>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	77fb      	strb	r3, [r7, #31]
 8005f6e:	e114      	b.n	800619a <UART_SetConfig+0x34e>
 8005f70:	2304      	movs	r3, #4
 8005f72:	77fb      	strb	r3, [r7, #31]
 8005f74:	e111      	b.n	800619a <UART_SetConfig+0x34e>
 8005f76:	2308      	movs	r3, #8
 8005f78:	77fb      	strb	r3, [r7, #31]
 8005f7a:	e10e      	b.n	800619a <UART_SetConfig+0x34e>
 8005f7c:	2310      	movs	r3, #16
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	bf00      	nop
 8005f82:	e10a      	b.n	800619a <UART_SetConfig+0x34e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a71      	ldr	r2, [pc, #452]	; (8006150 <UART_SetConfig+0x304>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d120      	bne.n	8005fd0 <UART_SetConfig+0x184>
 8005f8e:	4b6e      	ldr	r3, [pc, #440]	; (8006148 <UART_SetConfig+0x2fc>)
 8005f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f98:	2b10      	cmp	r3, #16
 8005f9a:	d00f      	beq.n	8005fbc <UART_SetConfig+0x170>
 8005f9c:	2b10      	cmp	r3, #16
 8005f9e:	d802      	bhi.n	8005fa6 <UART_SetConfig+0x15a>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <UART_SetConfig+0x164>
 8005fa4:	e010      	b.n	8005fc8 <UART_SetConfig+0x17c>
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d005      	beq.n	8005fb6 <UART_SetConfig+0x16a>
 8005faa:	2b30      	cmp	r3, #48	; 0x30
 8005fac:	d009      	beq.n	8005fc2 <UART_SetConfig+0x176>
 8005fae:	e00b      	b.n	8005fc8 <UART_SetConfig+0x17c>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e0f1      	b.n	800619a <UART_SetConfig+0x34e>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	77fb      	strb	r3, [r7, #31]
 8005fba:	e0ee      	b.n	800619a <UART_SetConfig+0x34e>
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	77fb      	strb	r3, [r7, #31]
 8005fc0:	e0eb      	b.n	800619a <UART_SetConfig+0x34e>
 8005fc2:	2308      	movs	r3, #8
 8005fc4:	77fb      	strb	r3, [r7, #31]
 8005fc6:	e0e8      	b.n	800619a <UART_SetConfig+0x34e>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	77fb      	strb	r3, [r7, #31]
 8005fcc:	bf00      	nop
 8005fce:	e0e4      	b.n	800619a <UART_SetConfig+0x34e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a5f      	ldr	r2, [pc, #380]	; (8006154 <UART_SetConfig+0x308>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d120      	bne.n	800601c <UART_SetConfig+0x1d0>
 8005fda:	4b5b      	ldr	r3, [pc, #364]	; (8006148 <UART_SetConfig+0x2fc>)
 8005fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d00f      	beq.n	8006008 <UART_SetConfig+0x1bc>
 8005fe8:	2b40      	cmp	r3, #64	; 0x40
 8005fea:	d802      	bhi.n	8005ff2 <UART_SetConfig+0x1a6>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <UART_SetConfig+0x1b0>
 8005ff0:	e010      	b.n	8006014 <UART_SetConfig+0x1c8>
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d005      	beq.n	8006002 <UART_SetConfig+0x1b6>
 8005ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ff8:	d009      	beq.n	800600e <UART_SetConfig+0x1c2>
 8005ffa:	e00b      	b.n	8006014 <UART_SetConfig+0x1c8>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e0cb      	b.n	800619a <UART_SetConfig+0x34e>
 8006002:	2302      	movs	r3, #2
 8006004:	77fb      	strb	r3, [r7, #31]
 8006006:	e0c8      	b.n	800619a <UART_SetConfig+0x34e>
 8006008:	2304      	movs	r3, #4
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e0c5      	b.n	800619a <UART_SetConfig+0x34e>
 800600e:	2308      	movs	r3, #8
 8006010:	77fb      	strb	r3, [r7, #31]
 8006012:	e0c2      	b.n	800619a <UART_SetConfig+0x34e>
 8006014:	2310      	movs	r3, #16
 8006016:	77fb      	strb	r3, [r7, #31]
 8006018:	bf00      	nop
 800601a:	e0be      	b.n	800619a <UART_SetConfig+0x34e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a4d      	ldr	r2, [pc, #308]	; (8006158 <UART_SetConfig+0x30c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d124      	bne.n	8006070 <UART_SetConfig+0x224>
 8006026:	4b48      	ldr	r3, [pc, #288]	; (8006148 <UART_SetConfig+0x2fc>)
 8006028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006034:	d012      	beq.n	800605c <UART_SetConfig+0x210>
 8006036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800603a:	d802      	bhi.n	8006042 <UART_SetConfig+0x1f6>
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <UART_SetConfig+0x204>
 8006040:	e012      	b.n	8006068 <UART_SetConfig+0x21c>
 8006042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006046:	d006      	beq.n	8006056 <UART_SetConfig+0x20a>
 8006048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800604c:	d009      	beq.n	8006062 <UART_SetConfig+0x216>
 800604e:	e00b      	b.n	8006068 <UART_SetConfig+0x21c>
 8006050:	2300      	movs	r3, #0
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e0a1      	b.n	800619a <UART_SetConfig+0x34e>
 8006056:	2302      	movs	r3, #2
 8006058:	77fb      	strb	r3, [r7, #31]
 800605a:	e09e      	b.n	800619a <UART_SetConfig+0x34e>
 800605c:	2304      	movs	r3, #4
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e09b      	b.n	800619a <UART_SetConfig+0x34e>
 8006062:	2308      	movs	r3, #8
 8006064:	77fb      	strb	r3, [r7, #31]
 8006066:	e098      	b.n	800619a <UART_SetConfig+0x34e>
 8006068:	2310      	movs	r3, #16
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	bf00      	nop
 800606e:	e094      	b.n	800619a <UART_SetConfig+0x34e>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a39      	ldr	r2, [pc, #228]	; (800615c <UART_SetConfig+0x310>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d124      	bne.n	80060c4 <UART_SetConfig+0x278>
 800607a:	4b33      	ldr	r3, [pc, #204]	; (8006148 <UART_SetConfig+0x2fc>)
 800607c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006080:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006088:	d012      	beq.n	80060b0 <UART_SetConfig+0x264>
 800608a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608e:	d802      	bhi.n	8006096 <UART_SetConfig+0x24a>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <UART_SetConfig+0x258>
 8006094:	e012      	b.n	80060bc <UART_SetConfig+0x270>
 8006096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609a:	d006      	beq.n	80060aa <UART_SetConfig+0x25e>
 800609c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060a0:	d009      	beq.n	80060b6 <UART_SetConfig+0x26a>
 80060a2:	e00b      	b.n	80060bc <UART_SetConfig+0x270>
 80060a4:	2301      	movs	r3, #1
 80060a6:	77fb      	strb	r3, [r7, #31]
 80060a8:	e077      	b.n	800619a <UART_SetConfig+0x34e>
 80060aa:	2302      	movs	r3, #2
 80060ac:	77fb      	strb	r3, [r7, #31]
 80060ae:	e074      	b.n	800619a <UART_SetConfig+0x34e>
 80060b0:	2304      	movs	r3, #4
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e071      	b.n	800619a <UART_SetConfig+0x34e>
 80060b6:	2308      	movs	r3, #8
 80060b8:	77fb      	strb	r3, [r7, #31]
 80060ba:	e06e      	b.n	800619a <UART_SetConfig+0x34e>
 80060bc:	2310      	movs	r3, #16
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	bf00      	nop
 80060c2:	e06a      	b.n	800619a <UART_SetConfig+0x34e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a25      	ldr	r2, [pc, #148]	; (8006160 <UART_SetConfig+0x314>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d124      	bne.n	8006118 <UART_SetConfig+0x2cc>
 80060ce:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <UART_SetConfig+0x2fc>)
 80060d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80060d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060dc:	d012      	beq.n	8006104 <UART_SetConfig+0x2b8>
 80060de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e2:	d802      	bhi.n	80060ea <UART_SetConfig+0x29e>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <UART_SetConfig+0x2ac>
 80060e8:	e012      	b.n	8006110 <UART_SetConfig+0x2c4>
 80060ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ee:	d006      	beq.n	80060fe <UART_SetConfig+0x2b2>
 80060f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060f4:	d009      	beq.n	800610a <UART_SetConfig+0x2be>
 80060f6:	e00b      	b.n	8006110 <UART_SetConfig+0x2c4>
 80060f8:	2300      	movs	r3, #0
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e04d      	b.n	800619a <UART_SetConfig+0x34e>
 80060fe:	2302      	movs	r3, #2
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e04a      	b.n	800619a <UART_SetConfig+0x34e>
 8006104:	2304      	movs	r3, #4
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e047      	b.n	800619a <UART_SetConfig+0x34e>
 800610a:	2308      	movs	r3, #8
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e044      	b.n	800619a <UART_SetConfig+0x34e>
 8006110:	2310      	movs	r3, #16
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	bf00      	nop
 8006116:	e040      	b.n	800619a <UART_SetConfig+0x34e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a11      	ldr	r2, [pc, #68]	; (8006164 <UART_SetConfig+0x318>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d139      	bne.n	8006196 <UART_SetConfig+0x34a>
 8006122:	4b09      	ldr	r3, [pc, #36]	; (8006148 <UART_SetConfig+0x2fc>)
 8006124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800612c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006130:	d027      	beq.n	8006182 <UART_SetConfig+0x336>
 8006132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006136:	d817      	bhi.n	8006168 <UART_SetConfig+0x31c>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01c      	beq.n	8006176 <UART_SetConfig+0x32a>
 800613c:	e027      	b.n	800618e <UART_SetConfig+0x342>
 800613e:	bf00      	nop
 8006140:	efff69f3 	.word	0xefff69f3
 8006144:	40011000 	.word	0x40011000
 8006148:	40023800 	.word	0x40023800
 800614c:	40004400 	.word	0x40004400
 8006150:	40004800 	.word	0x40004800
 8006154:	40004c00 	.word	0x40004c00
 8006158:	40005000 	.word	0x40005000
 800615c:	40011400 	.word	0x40011400
 8006160:	40007800 	.word	0x40007800
 8006164:	40007c00 	.word	0x40007c00
 8006168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800616c:	d006      	beq.n	800617c <UART_SetConfig+0x330>
 800616e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006172:	d009      	beq.n	8006188 <UART_SetConfig+0x33c>
 8006174:	e00b      	b.n	800618e <UART_SetConfig+0x342>
 8006176:	2300      	movs	r3, #0
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e00e      	b.n	800619a <UART_SetConfig+0x34e>
 800617c:	2302      	movs	r3, #2
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e00b      	b.n	800619a <UART_SetConfig+0x34e>
 8006182:	2304      	movs	r3, #4
 8006184:	77fb      	strb	r3, [r7, #31]
 8006186:	e008      	b.n	800619a <UART_SetConfig+0x34e>
 8006188:	2308      	movs	r3, #8
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	e005      	b.n	800619a <UART_SetConfig+0x34e>
 800618e:	2310      	movs	r3, #16
 8006190:	77fb      	strb	r3, [r7, #31]
 8006192:	bf00      	nop
 8006194:	e001      	b.n	800619a <UART_SetConfig+0x34e>
 8006196:	2310      	movs	r3, #16
 8006198:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a2:	d17c      	bne.n	800629e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80061a4:	7ffb      	ldrb	r3, [r7, #31]
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d859      	bhi.n	800625e <UART_SetConfig+0x412>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <UART_SetConfig+0x364>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061d5 	.word	0x080061d5
 80061b4:	080061f3 	.word	0x080061f3
 80061b8:	08006211 	.word	0x08006211
 80061bc:	0800625f 	.word	0x0800625f
 80061c0:	08006229 	.word	0x08006229
 80061c4:	0800625f 	.word	0x0800625f
 80061c8:	0800625f 	.word	0x0800625f
 80061cc:	0800625f 	.word	0x0800625f
 80061d0:	08006247 	.word	0x08006247
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80061d4:	f7fe f936 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 80061d8:	4603      	mov	r3, r0
 80061da:	005a      	lsls	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	085b      	lsrs	r3, r3, #1
 80061e2:	441a      	add	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	61bb      	str	r3, [r7, #24]
        break;
 80061f0:	e038      	b.n	8006264 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80061f2:	f7fe f93b 	bl	800446c <HAL_RCC_GetPCLK2Freq>
 80061f6:	4603      	mov	r3, r0
 80061f8:	005a      	lsls	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	441a      	add	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	b29b      	uxth	r3, r3
 800620c:	61bb      	str	r3, [r7, #24]
        break;
 800620e:	e029      	b.n	8006264 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	085a      	lsrs	r2, r3, #1
 8006216:	4b5d      	ldr	r3, [pc, #372]	; (800638c <UART_SetConfig+0x540>)
 8006218:	4413      	add	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6852      	ldr	r2, [r2, #4]
 800621e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006222:	b29b      	uxth	r3, r3
 8006224:	61bb      	str	r3, [r7, #24]
        break;
 8006226:	e01d      	b.n	8006264 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006228:	f7fe f828 	bl	800427c <HAL_RCC_GetSysClockFreq>
 800622c:	4603      	mov	r3, r0
 800622e:	005a      	lsls	r2, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	085b      	lsrs	r3, r3, #1
 8006236:	441a      	add	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	b29b      	uxth	r3, r3
 8006242:	61bb      	str	r3, [r7, #24]
        break;
 8006244:	e00e      	b.n	8006264 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	fbb2 f3f3 	udiv	r3, r2, r3
 8006258:	b29b      	uxth	r3, r3
 800625a:	61bb      	str	r3, [r7, #24]
        break;
 800625c:	e002      	b.n	8006264 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
        break;
 8006262:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b0f      	cmp	r3, #15
 8006268:	d916      	bls.n	8006298 <UART_SetConfig+0x44c>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006270:	d212      	bcs.n	8006298 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	b29b      	uxth	r3, r3
 8006276:	f023 030f 	bic.w	r3, r3, #15
 800627a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	b29b      	uxth	r3, r3
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	b29a      	uxth	r2, r3
 8006288:	89fb      	ldrh	r3, [r7, #14]
 800628a:	4313      	orrs	r3, r2
 800628c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	89fa      	ldrh	r2, [r7, #14]
 8006294:	60da      	str	r2, [r3, #12]
 8006296:	e06e      	b.n	8006376 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	75fb      	strb	r3, [r7, #23]
 800629c:	e06b      	b.n	8006376 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800629e:	7ffb      	ldrb	r3, [r7, #31]
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d857      	bhi.n	8006354 <UART_SetConfig+0x508>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <UART_SetConfig+0x460>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062d1 	.word	0x080062d1
 80062b0:	080062ed 	.word	0x080062ed
 80062b4:	08006309 	.word	0x08006309
 80062b8:	08006355 	.word	0x08006355
 80062bc:	08006321 	.word	0x08006321
 80062c0:	08006355 	.word	0x08006355
 80062c4:	08006355 	.word	0x08006355
 80062c8:	08006355 	.word	0x08006355
 80062cc:	0800633d 	.word	0x0800633d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80062d0:	f7fe f8b8 	bl	8004444 <HAL_RCC_GetPCLK1Freq>
 80062d4:	4602      	mov	r2, r0
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	441a      	add	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	61bb      	str	r3, [r7, #24]
        break;
 80062ea:	e036      	b.n	800635a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80062ec:	f7fe f8be 	bl	800446c <HAL_RCC_GetPCLK2Freq>
 80062f0:	4602      	mov	r2, r0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	085b      	lsrs	r3, r3, #1
 80062f8:	441a      	add	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	b29b      	uxth	r3, r3
 8006304:	61bb      	str	r3, [r7, #24]
        break;
 8006306:	e028      	b.n	800635a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	085a      	lsrs	r2, r3, #1
 800630e:	4b20      	ldr	r3, [pc, #128]	; (8006390 <UART_SetConfig+0x544>)
 8006310:	4413      	add	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6852      	ldr	r2, [r2, #4]
 8006316:	fbb3 f3f2 	udiv	r3, r3, r2
 800631a:	b29b      	uxth	r3, r3
 800631c:	61bb      	str	r3, [r7, #24]
        break;
 800631e:	e01c      	b.n	800635a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006320:	f7fd ffac 	bl	800427c <HAL_RCC_GetSysClockFreq>
 8006324:	4602      	mov	r2, r0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	441a      	add	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	fbb2 f3f3 	udiv	r3, r2, r3
 8006336:	b29b      	uxth	r3, r3
 8006338:	61bb      	str	r3, [r7, #24]
        break;
 800633a:	e00e      	b.n	800635a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	085b      	lsrs	r3, r3, #1
 8006342:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	fbb2 f3f3 	udiv	r3, r2, r3
 800634e:	b29b      	uxth	r3, r3
 8006350:	61bb      	str	r3, [r7, #24]
        break;
 8006352:	e002      	b.n	800635a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	75fb      	strb	r3, [r7, #23]
        break;
 8006358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b0f      	cmp	r3, #15
 800635e:	d908      	bls.n	8006372 <UART_SetConfig+0x526>
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006366:	d204      	bcs.n	8006372 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	60da      	str	r2, [r3, #12]
 8006370:	e001      	b.n	8006376 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006382:	7dfb      	ldrb	r3, [r7, #23]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	01e84800 	.word	0x01e84800
 8006390:	00f42400 	.word	0x00f42400

08006394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01a      	beq.n	80064aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006492:	d10a      	bne.n	80064aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	605a      	str	r2, [r3, #4]
  }
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af02      	add	r7, sp, #8
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80064e6:	f7fb fb3f 	bl	8001b68 <HAL_GetTick>
 80064ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d10e      	bne.n	8006518 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f814 	bl	8006536 <UART_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e00a      	b.n	800652e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	4613      	mov	r3, r2
 8006544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006546:	e02a      	b.n	800659e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d026      	beq.n	800659e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006550:	f7fb fb0a 	bl	8001b68 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	429a      	cmp	r2, r3
 800655e:	d302      	bcc.n	8006566 <UART_WaitOnFlagUntilTimeout+0x30>
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d11b      	bne.n	800659e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006574:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0201 	bic.w	r2, r2, #1
 8006584:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e00f      	b.n	80065be <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4013      	ands	r3, r2
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	bf0c      	ite	eq
 80065ae:	2301      	moveq	r3, #1
 80065b0:	2300      	movne	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d0c5      	beq.n	8006548 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065c8:	b084      	sub	sp, #16
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	f107 001c 	add.w	r0, r7, #28
 80065d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d120      	bne.n	8006622 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	4b20      	ldr	r3, [pc, #128]	; (8006674 <USB_CoreInit+0xac>)
 80065f2:	4013      	ands	r3, r2
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d105      	bne.n	8006616 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa60 	bl	8006adc <USB_CoreReset>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
 8006620:	e010      	b.n	8006644 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fa54 	bl	8006adc <USB_CoreReset>
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	2b01      	cmp	r3, #1
 8006648:	d10b      	bne.n	8006662 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f043 0206 	orr.w	r2, r3, #6
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f043 0220 	orr.w	r2, r3, #32
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006662:	7bfb      	ldrb	r3, [r7, #15]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800666e:	b004      	add	sp, #16
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	ffbdffbf 	.word	0xffbdffbf

08006678 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f023 0201 	bic.w	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066b2:	78fb      	ldrb	r3, [r7, #3]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d106      	bne.n	80066c6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60da      	str	r2, [r3, #12]
 80066c4:	e00b      	b.n	80066de <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]
 80066d8:	e001      	b.n	80066de <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e003      	b.n	80066e6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80066de:	2032      	movs	r0, #50	; 0x32
 80066e0:	f7fb fa4e 	bl	8001b80 <HAL_Delay>

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066f0:	b084      	sub	sp, #16
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b086      	sub	sp, #24
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	e009      	b.n	8006724 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	3340      	adds	r3, #64	; 0x40
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	2200      	movs	r2, #0
 800671c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	3301      	adds	r3, #1
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	2b0e      	cmp	r3, #14
 8006728:	d9f2      	bls.n	8006710 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800672a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d112      	bne.n	8006756 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e005      	b.n	8006762 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006768:	461a      	mov	r2, r3
 800676a:	2300      	movs	r3, #0
 800676c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006774:	4619      	mov	r1, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800677c:	461a      	mov	r2, r3
 800677e:	680b      	ldr	r3, [r1, #0]
 8006780:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	2b01      	cmp	r3, #1
 8006786:	d10c      	bne.n	80067a2 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	2b00      	cmp	r3, #0
 800678c:	d104      	bne.n	8006798 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800678e:	2100      	movs	r1, #0
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f971 	bl	8006a78 <USB_SetDevSpeed>
 8006796:	e018      	b.n	80067ca <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006798:	2101      	movs	r1, #1
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f96c 	bl	8006a78 <USB_SetDevSpeed>
 80067a0:	e013      	b.n	80067ca <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80067a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d10c      	bne.n	80067c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d104      	bne.n	80067b8 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067ae:	2100      	movs	r1, #0
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f961 	bl	8006a78 <USB_SetDevSpeed>
 80067b6:	e008      	b.n	80067ca <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067b8:	2101      	movs	r1, #1
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f95c 	bl	8006a78 <USB_SetDevSpeed>
 80067c0:	e003      	b.n	80067ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067c2:	2103      	movs	r1, #3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f957 	bl	8006a78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067ca:	2110      	movs	r1, #16
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f90b 	bl	80069e8 <USB_FlushTxFifo>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f929 	bl	8006a34 <USB_FlushRxFifo>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	461a      	mov	r2, r3
 80067f4:	2300      	movs	r3, #0
 80067f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fe:	461a      	mov	r2, r3
 8006800:	2300      	movs	r3, #0
 8006802:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680a:	461a      	mov	r2, r3
 800680c:	2300      	movs	r3, #0
 800680e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006810:	2300      	movs	r3, #0
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	e043      	b.n	800689e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800682c:	d118      	bne.n	8006860 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006840:	461a      	mov	r2, r3
 8006842:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	e013      	b.n	8006872 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006856:	461a      	mov	r2, r3
 8006858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e008      	b.n	8006872 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686c:	461a      	mov	r2, r3
 800686e:	2300      	movs	r3, #0
 8006870:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687e:	461a      	mov	r2, r3
 8006880:	2300      	movs	r3, #0
 8006882:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	461a      	mov	r2, r3
 8006892:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006896:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3301      	adds	r3, #1
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d3b7      	bcc.n	8006816 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068a6:	2300      	movs	r3, #0
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	e043      	b.n	8006934 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068c2:	d118      	bne.n	80068f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10a      	bne.n	80068e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d6:	461a      	mov	r2, r3
 80068d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e013      	b.n	8006908 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ec:	461a      	mov	r2, r3
 80068ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	e008      	b.n	8006908 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006902:	461a      	mov	r2, r3
 8006904:	2300      	movs	r3, #0
 8006906:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006914:	461a      	mov	r2, r3
 8006916:	2300      	movs	r3, #0
 8006918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	461a      	mov	r2, r3
 8006928:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800692c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	3301      	adds	r3, #1
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	429a      	cmp	r2, r3
 800693a:	d3b7      	bcc.n	80068ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800694a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800694e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	2b01      	cmp	r3, #1
 8006954:	d110      	bne.n	8006978 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695c:	461a      	mov	r2, r3
 800695e:	4b1e      	ldr	r3, [pc, #120]	; (80069d8 <USB_DevInit+0x2e8>)
 8006960:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006970:	4619      	mov	r1, r3
 8006972:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <USB_DevInit+0x2ec>)
 8006974:	4313      	orrs	r3, r2
 8006976:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006984:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	2b00      	cmp	r3, #0
 800698a:	d105      	bne.n	8006998 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f043 0210 	orr.w	r2, r3, #16
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <USB_DevInit+0x2f0>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d005      	beq.n	80069b6 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f043 0208 	orr.w	r2, r3, #8
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d105      	bne.n	80069c8 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699a      	ldr	r2, [r3, #24]
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <USB_DevInit+0x2f4>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069d4:	b004      	add	sp, #16
 80069d6:	4770      	bx	lr
 80069d8:	00800100 	.word	0x00800100
 80069dc:	00010003 	.word	0x00010003
 80069e0:	803c3800 	.word	0x803c3800
 80069e4:	40000004 	.word	0x40000004

080069e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	019b      	lsls	r3, r3, #6
 80069fa:	f043 0220 	orr.w	r2, r3, #32
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3301      	adds	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <USB_FlushTxFifo+0x48>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d901      	bls.n	8006a14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e006      	b.n	8006a22 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f003 0320 	and.w	r3, r3, #32
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d0f0      	beq.n	8006a02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	00030d40 	.word	0x00030d40

08006a34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2210      	movs	r2, #16
 8006a44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4a09      	ldr	r2, [pc, #36]	; (8006a74 <USB_FlushRxFifo+0x40>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d901      	bls.n	8006a58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e006      	b.n	8006a66 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d0f0      	beq.n	8006a46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	00030d40 	.word	0x00030d40

08006a78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ac4:	f043 0302 	orr.w	r3, r3, #2
 8006ac8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006aca:	2003      	movs	r0, #3
 8006acc:	f7fb f858 	bl	8001b80 <HAL_Delay>

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <USB_CoreReset+0x64>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d901      	bls.n	8006afa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e01b      	b.n	8006b32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	daf2      	bge.n	8006ae8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f043 0201 	orr.w	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3301      	adds	r3, #1
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <USB_CoreReset+0x64>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d901      	bls.n	8006b24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e006      	b.n	8006b32 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d0f0      	beq.n	8006b12 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	00030d40 	.word	0x00030d40

08006b44 <__errno>:
 8006b44:	4b01      	ldr	r3, [pc, #4]	; (8006b4c <__errno+0x8>)
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20000024 	.word	0x20000024

08006b50 <__libc_init_array>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	4e0d      	ldr	r6, [pc, #52]	; (8006b88 <__libc_init_array+0x38>)
 8006b54:	4c0d      	ldr	r4, [pc, #52]	; (8006b8c <__libc_init_array+0x3c>)
 8006b56:	1ba4      	subs	r4, r4, r6
 8006b58:	10a4      	asrs	r4, r4, #2
 8006b5a:	2500      	movs	r5, #0
 8006b5c:	42a5      	cmp	r5, r4
 8006b5e:	d109      	bne.n	8006b74 <__libc_init_array+0x24>
 8006b60:	4e0b      	ldr	r6, [pc, #44]	; (8006b90 <__libc_init_array+0x40>)
 8006b62:	4c0c      	ldr	r4, [pc, #48]	; (8006b94 <__libc_init_array+0x44>)
 8006b64:	f000 fc26 	bl	80073b4 <_init>
 8006b68:	1ba4      	subs	r4, r4, r6
 8006b6a:	10a4      	asrs	r4, r4, #2
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	42a5      	cmp	r5, r4
 8006b70:	d105      	bne.n	8006b7e <__libc_init_array+0x2e>
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b78:	4798      	blx	r3
 8006b7a:	3501      	adds	r5, #1
 8006b7c:	e7ee      	b.n	8006b5c <__libc_init_array+0xc>
 8006b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b82:	4798      	blx	r3
 8006b84:	3501      	adds	r5, #1
 8006b86:	e7f2      	b.n	8006b6e <__libc_init_array+0x1e>
 8006b88:	08007454 	.word	0x08007454
 8006b8c:	08007454 	.word	0x08007454
 8006b90:	08007454 	.word	0x08007454
 8006b94:	08007458 	.word	0x08007458

08006b98 <memset>:
 8006b98:	4402      	add	r2, r0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d100      	bne.n	8006ba2 <memset+0xa>
 8006ba0:	4770      	bx	lr
 8006ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ba6:	e7f9      	b.n	8006b9c <memset+0x4>

08006ba8 <siprintf>:
 8006ba8:	b40e      	push	{r1, r2, r3}
 8006baa:	b500      	push	{lr}
 8006bac:	b09c      	sub	sp, #112	; 0x70
 8006bae:	ab1d      	add	r3, sp, #116	; 0x74
 8006bb0:	9002      	str	r0, [sp, #8]
 8006bb2:	9006      	str	r0, [sp, #24]
 8006bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bb8:	4809      	ldr	r0, [pc, #36]	; (8006be0 <siprintf+0x38>)
 8006bba:	9107      	str	r1, [sp, #28]
 8006bbc:	9104      	str	r1, [sp, #16]
 8006bbe:	4909      	ldr	r1, [pc, #36]	; (8006be4 <siprintf+0x3c>)
 8006bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc4:	9105      	str	r1, [sp, #20]
 8006bc6:	6800      	ldr	r0, [r0, #0]
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	a902      	add	r1, sp, #8
 8006bcc:	f000 f866 	bl	8006c9c <_svfiprintf_r>
 8006bd0:	9b02      	ldr	r3, [sp, #8]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	b01c      	add	sp, #112	; 0x70
 8006bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bdc:	b003      	add	sp, #12
 8006bde:	4770      	bx	lr
 8006be0:	20000024 	.word	0x20000024
 8006be4:	ffff0208 	.word	0xffff0208

08006be8 <__ssputs_r>:
 8006be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	688e      	ldr	r6, [r1, #8]
 8006bee:	429e      	cmp	r6, r3
 8006bf0:	4682      	mov	sl, r0
 8006bf2:	460c      	mov	r4, r1
 8006bf4:	4690      	mov	r8, r2
 8006bf6:	4699      	mov	r9, r3
 8006bf8:	d837      	bhi.n	8006c6a <__ssputs_r+0x82>
 8006bfa:	898a      	ldrh	r2, [r1, #12]
 8006bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c00:	d031      	beq.n	8006c66 <__ssputs_r+0x7e>
 8006c02:	6825      	ldr	r5, [r4, #0]
 8006c04:	6909      	ldr	r1, [r1, #16]
 8006c06:	1a6f      	subs	r7, r5, r1
 8006c08:	6965      	ldr	r5, [r4, #20]
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c10:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c14:	f109 0301 	add.w	r3, r9, #1
 8006c18:	443b      	add	r3, r7
 8006c1a:	429d      	cmp	r5, r3
 8006c1c:	bf38      	it	cc
 8006c1e:	461d      	movcc	r5, r3
 8006c20:	0553      	lsls	r3, r2, #21
 8006c22:	d530      	bpl.n	8006c86 <__ssputs_r+0x9e>
 8006c24:	4629      	mov	r1, r5
 8006c26:	f000 fb2b 	bl	8007280 <_malloc_r>
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	b950      	cbnz	r0, 8006c44 <__ssputs_r+0x5c>
 8006c2e:	230c      	movs	r3, #12
 8006c30:	f8ca 3000 	str.w	r3, [sl]
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c44:	463a      	mov	r2, r7
 8006c46:	6921      	ldr	r1, [r4, #16]
 8006c48:	f000 faa8 	bl	800719c <memcpy>
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c56:	81a3      	strh	r3, [r4, #12]
 8006c58:	6126      	str	r6, [r4, #16]
 8006c5a:	6165      	str	r5, [r4, #20]
 8006c5c:	443e      	add	r6, r7
 8006c5e:	1bed      	subs	r5, r5, r7
 8006c60:	6026      	str	r6, [r4, #0]
 8006c62:	60a5      	str	r5, [r4, #8]
 8006c64:	464e      	mov	r6, r9
 8006c66:	454e      	cmp	r6, r9
 8006c68:	d900      	bls.n	8006c6c <__ssputs_r+0x84>
 8006c6a:	464e      	mov	r6, r9
 8006c6c:	4632      	mov	r2, r6
 8006c6e:	4641      	mov	r1, r8
 8006c70:	6820      	ldr	r0, [r4, #0]
 8006c72:	f000 fa9e 	bl	80071b2 <memmove>
 8006c76:	68a3      	ldr	r3, [r4, #8]
 8006c78:	1b9b      	subs	r3, r3, r6
 8006c7a:	60a3      	str	r3, [r4, #8]
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	441e      	add	r6, r3
 8006c80:	6026      	str	r6, [r4, #0]
 8006c82:	2000      	movs	r0, #0
 8006c84:	e7dc      	b.n	8006c40 <__ssputs_r+0x58>
 8006c86:	462a      	mov	r2, r5
 8006c88:	f000 fb54 	bl	8007334 <_realloc_r>
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d1e2      	bne.n	8006c58 <__ssputs_r+0x70>
 8006c92:	6921      	ldr	r1, [r4, #16]
 8006c94:	4650      	mov	r0, sl
 8006c96:	f000 faa5 	bl	80071e4 <_free_r>
 8006c9a:	e7c8      	b.n	8006c2e <__ssputs_r+0x46>

08006c9c <_svfiprintf_r>:
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	461d      	mov	r5, r3
 8006ca2:	898b      	ldrh	r3, [r1, #12]
 8006ca4:	061f      	lsls	r7, r3, #24
 8006ca6:	b09d      	sub	sp, #116	; 0x74
 8006ca8:	4680      	mov	r8, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	4616      	mov	r6, r2
 8006cae:	d50f      	bpl.n	8006cd0 <_svfiprintf_r+0x34>
 8006cb0:	690b      	ldr	r3, [r1, #16]
 8006cb2:	b96b      	cbnz	r3, 8006cd0 <_svfiprintf_r+0x34>
 8006cb4:	2140      	movs	r1, #64	; 0x40
 8006cb6:	f000 fae3 	bl	8007280 <_malloc_r>
 8006cba:	6020      	str	r0, [r4, #0]
 8006cbc:	6120      	str	r0, [r4, #16]
 8006cbe:	b928      	cbnz	r0, 8006ccc <_svfiprintf_r+0x30>
 8006cc0:	230c      	movs	r3, #12
 8006cc2:	f8c8 3000 	str.w	r3, [r8]
 8006cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cca:	e0c8      	b.n	8006e5e <_svfiprintf_r+0x1c2>
 8006ccc:	2340      	movs	r3, #64	; 0x40
 8006cce:	6163      	str	r3, [r4, #20]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd4:	2320      	movs	r3, #32
 8006cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cda:	2330      	movs	r3, #48	; 0x30
 8006cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ce0:	9503      	str	r5, [sp, #12]
 8006ce2:	f04f 0b01 	mov.w	fp, #1
 8006ce6:	4637      	mov	r7, r6
 8006ce8:	463d      	mov	r5, r7
 8006cea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cee:	b10b      	cbz	r3, 8006cf4 <_svfiprintf_r+0x58>
 8006cf0:	2b25      	cmp	r3, #37	; 0x25
 8006cf2:	d13e      	bne.n	8006d72 <_svfiprintf_r+0xd6>
 8006cf4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006cf8:	d00b      	beq.n	8006d12 <_svfiprintf_r+0x76>
 8006cfa:	4653      	mov	r3, sl
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4640      	mov	r0, r8
 8006d02:	f7ff ff71 	bl	8006be8 <__ssputs_r>
 8006d06:	3001      	adds	r0, #1
 8006d08:	f000 80a4 	beq.w	8006e54 <_svfiprintf_r+0x1b8>
 8006d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0e:	4453      	add	r3, sl
 8006d10:	9309      	str	r3, [sp, #36]	; 0x24
 8006d12:	783b      	ldrb	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 809d 	beq.w	8006e54 <_svfiprintf_r+0x1b8>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d24:	9304      	str	r3, [sp, #16]
 8006d26:	9307      	str	r3, [sp, #28]
 8006d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d2e:	462f      	mov	r7, r5
 8006d30:	2205      	movs	r2, #5
 8006d32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006d36:	4850      	ldr	r0, [pc, #320]	; (8006e78 <_svfiprintf_r+0x1dc>)
 8006d38:	f7f9 fa72 	bl	8000220 <memchr>
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	b9d0      	cbnz	r0, 8006d76 <_svfiprintf_r+0xda>
 8006d40:	06d9      	lsls	r1, r3, #27
 8006d42:	bf44      	itt	mi
 8006d44:	2220      	movmi	r2, #32
 8006d46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d4a:	071a      	lsls	r2, r3, #28
 8006d4c:	bf44      	itt	mi
 8006d4e:	222b      	movmi	r2, #43	; 0x2b
 8006d50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d54:	782a      	ldrb	r2, [r5, #0]
 8006d56:	2a2a      	cmp	r2, #42	; 0x2a
 8006d58:	d015      	beq.n	8006d86 <_svfiprintf_r+0xea>
 8006d5a:	9a07      	ldr	r2, [sp, #28]
 8006d5c:	462f      	mov	r7, r5
 8006d5e:	2000      	movs	r0, #0
 8006d60:	250a      	movs	r5, #10
 8006d62:	4639      	mov	r1, r7
 8006d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d68:	3b30      	subs	r3, #48	; 0x30
 8006d6a:	2b09      	cmp	r3, #9
 8006d6c:	d94d      	bls.n	8006e0a <_svfiprintf_r+0x16e>
 8006d6e:	b1b8      	cbz	r0, 8006da0 <_svfiprintf_r+0x104>
 8006d70:	e00f      	b.n	8006d92 <_svfiprintf_r+0xf6>
 8006d72:	462f      	mov	r7, r5
 8006d74:	e7b8      	b.n	8006ce8 <_svfiprintf_r+0x4c>
 8006d76:	4a40      	ldr	r2, [pc, #256]	; (8006e78 <_svfiprintf_r+0x1dc>)
 8006d78:	1a80      	subs	r0, r0, r2
 8006d7a:	fa0b f000 	lsl.w	r0, fp, r0
 8006d7e:	4318      	orrs	r0, r3
 8006d80:	9004      	str	r0, [sp, #16]
 8006d82:	463d      	mov	r5, r7
 8006d84:	e7d3      	b.n	8006d2e <_svfiprintf_r+0x92>
 8006d86:	9a03      	ldr	r2, [sp, #12]
 8006d88:	1d11      	adds	r1, r2, #4
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	9103      	str	r1, [sp, #12]
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	db01      	blt.n	8006d96 <_svfiprintf_r+0xfa>
 8006d92:	9207      	str	r2, [sp, #28]
 8006d94:	e004      	b.n	8006da0 <_svfiprintf_r+0x104>
 8006d96:	4252      	negs	r2, r2
 8006d98:	f043 0302 	orr.w	r3, r3, #2
 8006d9c:	9207      	str	r2, [sp, #28]
 8006d9e:	9304      	str	r3, [sp, #16]
 8006da0:	783b      	ldrb	r3, [r7, #0]
 8006da2:	2b2e      	cmp	r3, #46	; 0x2e
 8006da4:	d10c      	bne.n	8006dc0 <_svfiprintf_r+0x124>
 8006da6:	787b      	ldrb	r3, [r7, #1]
 8006da8:	2b2a      	cmp	r3, #42	; 0x2a
 8006daa:	d133      	bne.n	8006e14 <_svfiprintf_r+0x178>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	1d1a      	adds	r2, r3, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	9203      	str	r2, [sp, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bfb8      	it	lt
 8006db8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dbc:	3702      	adds	r7, #2
 8006dbe:	9305      	str	r3, [sp, #20]
 8006dc0:	4d2e      	ldr	r5, [pc, #184]	; (8006e7c <_svfiprintf_r+0x1e0>)
 8006dc2:	7839      	ldrb	r1, [r7, #0]
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f7f9 fa2a 	bl	8000220 <memchr>
 8006dcc:	b138      	cbz	r0, 8006dde <_svfiprintf_r+0x142>
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	1b40      	subs	r0, r0, r5
 8006dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8006dd6:	9b04      	ldr	r3, [sp, #16]
 8006dd8:	4303      	orrs	r3, r0
 8006dda:	3701      	adds	r7, #1
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	7839      	ldrb	r1, [r7, #0]
 8006de0:	4827      	ldr	r0, [pc, #156]	; (8006e80 <_svfiprintf_r+0x1e4>)
 8006de2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006de6:	2206      	movs	r2, #6
 8006de8:	1c7e      	adds	r6, r7, #1
 8006dea:	f7f9 fa19 	bl	8000220 <memchr>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d038      	beq.n	8006e64 <_svfiprintf_r+0x1c8>
 8006df2:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <_svfiprintf_r+0x1e8>)
 8006df4:	bb13      	cbnz	r3, 8006e3c <_svfiprintf_r+0x1a0>
 8006df6:	9b03      	ldr	r3, [sp, #12]
 8006df8:	3307      	adds	r3, #7
 8006dfa:	f023 0307 	bic.w	r3, r3, #7
 8006dfe:	3308      	adds	r3, #8
 8006e00:	9303      	str	r3, [sp, #12]
 8006e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e04:	444b      	add	r3, r9
 8006e06:	9309      	str	r3, [sp, #36]	; 0x24
 8006e08:	e76d      	b.n	8006ce6 <_svfiprintf_r+0x4a>
 8006e0a:	fb05 3202 	mla	r2, r5, r2, r3
 8006e0e:	2001      	movs	r0, #1
 8006e10:	460f      	mov	r7, r1
 8006e12:	e7a6      	b.n	8006d62 <_svfiprintf_r+0xc6>
 8006e14:	2300      	movs	r3, #0
 8006e16:	3701      	adds	r7, #1
 8006e18:	9305      	str	r3, [sp, #20]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	250a      	movs	r5, #10
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e24:	3a30      	subs	r2, #48	; 0x30
 8006e26:	2a09      	cmp	r2, #9
 8006e28:	d903      	bls.n	8006e32 <_svfiprintf_r+0x196>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d0c8      	beq.n	8006dc0 <_svfiprintf_r+0x124>
 8006e2e:	9105      	str	r1, [sp, #20]
 8006e30:	e7c6      	b.n	8006dc0 <_svfiprintf_r+0x124>
 8006e32:	fb05 2101 	mla	r1, r5, r1, r2
 8006e36:	2301      	movs	r3, #1
 8006e38:	4607      	mov	r7, r0
 8006e3a:	e7f0      	b.n	8006e1e <_svfiprintf_r+0x182>
 8006e3c:	ab03      	add	r3, sp, #12
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	4622      	mov	r2, r4
 8006e42:	4b11      	ldr	r3, [pc, #68]	; (8006e88 <_svfiprintf_r+0x1ec>)
 8006e44:	a904      	add	r1, sp, #16
 8006e46:	4640      	mov	r0, r8
 8006e48:	f3af 8000 	nop.w
 8006e4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e50:	4681      	mov	r9, r0
 8006e52:	d1d6      	bne.n	8006e02 <_svfiprintf_r+0x166>
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	065b      	lsls	r3, r3, #25
 8006e58:	f53f af35 	bmi.w	8006cc6 <_svfiprintf_r+0x2a>
 8006e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e5e:	b01d      	add	sp, #116	; 0x74
 8006e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e64:	ab03      	add	r3, sp, #12
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	4622      	mov	r2, r4
 8006e6a:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <_svfiprintf_r+0x1ec>)
 8006e6c:	a904      	add	r1, sp, #16
 8006e6e:	4640      	mov	r0, r8
 8006e70:	f000 f882 	bl	8006f78 <_printf_i>
 8006e74:	e7ea      	b.n	8006e4c <_svfiprintf_r+0x1b0>
 8006e76:	bf00      	nop
 8006e78:	08007418 	.word	0x08007418
 8006e7c:	0800741e 	.word	0x0800741e
 8006e80:	08007422 	.word	0x08007422
 8006e84:	00000000 	.word	0x00000000
 8006e88:	08006be9 	.word	0x08006be9

08006e8c <_printf_common>:
 8006e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e90:	4691      	mov	r9, r2
 8006e92:	461f      	mov	r7, r3
 8006e94:	688a      	ldr	r2, [r1, #8]
 8006e96:	690b      	ldr	r3, [r1, #16]
 8006e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	bfb8      	it	lt
 8006ea0:	4613      	movlt	r3, r2
 8006ea2:	f8c9 3000 	str.w	r3, [r9]
 8006ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006eaa:	4606      	mov	r6, r0
 8006eac:	460c      	mov	r4, r1
 8006eae:	b112      	cbz	r2, 8006eb6 <_printf_common+0x2a>
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	f8c9 3000 	str.w	r3, [r9]
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	0699      	lsls	r1, r3, #26
 8006eba:	bf42      	ittt	mi
 8006ebc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ec0:	3302      	addmi	r3, #2
 8006ec2:	f8c9 3000 	strmi.w	r3, [r9]
 8006ec6:	6825      	ldr	r5, [r4, #0]
 8006ec8:	f015 0506 	ands.w	r5, r5, #6
 8006ecc:	d107      	bne.n	8006ede <_printf_common+0x52>
 8006ece:	f104 0a19 	add.w	sl, r4, #25
 8006ed2:	68e3      	ldr	r3, [r4, #12]
 8006ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	42ab      	cmp	r3, r5
 8006edc:	dc28      	bgt.n	8006f30 <_printf_common+0xa4>
 8006ede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	3300      	adds	r3, #0
 8006ee6:	bf18      	it	ne
 8006ee8:	2301      	movne	r3, #1
 8006eea:	0692      	lsls	r2, r2, #26
 8006eec:	d42d      	bmi.n	8006f4a <_printf_common+0xbe>
 8006eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	47c0      	blx	r8
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d020      	beq.n	8006f3e <_printf_common+0xb2>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	68e5      	ldr	r5, [r4, #12]
 8006f00:	f8d9 2000 	ldr.w	r2, [r9]
 8006f04:	f003 0306 	and.w	r3, r3, #6
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	bf08      	it	eq
 8006f0c:	1aad      	subeq	r5, r5, r2
 8006f0e:	68a3      	ldr	r3, [r4, #8]
 8006f10:	6922      	ldr	r2, [r4, #16]
 8006f12:	bf0c      	ite	eq
 8006f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f18:	2500      	movne	r5, #0
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	bfc4      	itt	gt
 8006f1e:	1a9b      	subgt	r3, r3, r2
 8006f20:	18ed      	addgt	r5, r5, r3
 8006f22:	f04f 0900 	mov.w	r9, #0
 8006f26:	341a      	adds	r4, #26
 8006f28:	454d      	cmp	r5, r9
 8006f2a:	d11a      	bne.n	8006f62 <_printf_common+0xd6>
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e008      	b.n	8006f42 <_printf_common+0xb6>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4652      	mov	r2, sl
 8006f34:	4639      	mov	r1, r7
 8006f36:	4630      	mov	r0, r6
 8006f38:	47c0      	blx	r8
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d103      	bne.n	8006f46 <_printf_common+0xba>
 8006f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f46:	3501      	adds	r5, #1
 8006f48:	e7c3      	b.n	8006ed2 <_printf_common+0x46>
 8006f4a:	18e1      	adds	r1, r4, r3
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	2030      	movs	r0, #48	; 0x30
 8006f50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f54:	4422      	add	r2, r4
 8006f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f5e:	3302      	adds	r3, #2
 8006f60:	e7c5      	b.n	8006eee <_printf_common+0x62>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4622      	mov	r2, r4
 8006f66:	4639      	mov	r1, r7
 8006f68:	4630      	mov	r0, r6
 8006f6a:	47c0      	blx	r8
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d0e6      	beq.n	8006f3e <_printf_common+0xb2>
 8006f70:	f109 0901 	add.w	r9, r9, #1
 8006f74:	e7d8      	b.n	8006f28 <_printf_common+0x9c>
	...

08006f78 <_printf_i>:
 8006f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f80:	460c      	mov	r4, r1
 8006f82:	7e09      	ldrb	r1, [r1, #24]
 8006f84:	b085      	sub	sp, #20
 8006f86:	296e      	cmp	r1, #110	; 0x6e
 8006f88:	4617      	mov	r7, r2
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	4698      	mov	r8, r3
 8006f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f90:	f000 80b3 	beq.w	80070fa <_printf_i+0x182>
 8006f94:	d822      	bhi.n	8006fdc <_printf_i+0x64>
 8006f96:	2963      	cmp	r1, #99	; 0x63
 8006f98:	d036      	beq.n	8007008 <_printf_i+0x90>
 8006f9a:	d80a      	bhi.n	8006fb2 <_printf_i+0x3a>
 8006f9c:	2900      	cmp	r1, #0
 8006f9e:	f000 80b9 	beq.w	8007114 <_printf_i+0x19c>
 8006fa2:	2958      	cmp	r1, #88	; 0x58
 8006fa4:	f000 8083 	beq.w	80070ae <_printf_i+0x136>
 8006fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006fb0:	e032      	b.n	8007018 <_printf_i+0xa0>
 8006fb2:	2964      	cmp	r1, #100	; 0x64
 8006fb4:	d001      	beq.n	8006fba <_printf_i+0x42>
 8006fb6:	2969      	cmp	r1, #105	; 0x69
 8006fb8:	d1f6      	bne.n	8006fa8 <_printf_i+0x30>
 8006fba:	6820      	ldr	r0, [r4, #0]
 8006fbc:	6813      	ldr	r3, [r2, #0]
 8006fbe:	0605      	lsls	r5, r0, #24
 8006fc0:	f103 0104 	add.w	r1, r3, #4
 8006fc4:	d52a      	bpl.n	800701c <_printf_i+0xa4>
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6011      	str	r1, [r2, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	da03      	bge.n	8006fd6 <_printf_i+0x5e>
 8006fce:	222d      	movs	r2, #45	; 0x2d
 8006fd0:	425b      	negs	r3, r3
 8006fd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006fd6:	486f      	ldr	r0, [pc, #444]	; (8007194 <_printf_i+0x21c>)
 8006fd8:	220a      	movs	r2, #10
 8006fda:	e039      	b.n	8007050 <_printf_i+0xd8>
 8006fdc:	2973      	cmp	r1, #115	; 0x73
 8006fde:	f000 809d 	beq.w	800711c <_printf_i+0x1a4>
 8006fe2:	d808      	bhi.n	8006ff6 <_printf_i+0x7e>
 8006fe4:	296f      	cmp	r1, #111	; 0x6f
 8006fe6:	d020      	beq.n	800702a <_printf_i+0xb2>
 8006fe8:	2970      	cmp	r1, #112	; 0x70
 8006fea:	d1dd      	bne.n	8006fa8 <_printf_i+0x30>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	f043 0320 	orr.w	r3, r3, #32
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	e003      	b.n	8006ffe <_printf_i+0x86>
 8006ff6:	2975      	cmp	r1, #117	; 0x75
 8006ff8:	d017      	beq.n	800702a <_printf_i+0xb2>
 8006ffa:	2978      	cmp	r1, #120	; 0x78
 8006ffc:	d1d4      	bne.n	8006fa8 <_printf_i+0x30>
 8006ffe:	2378      	movs	r3, #120	; 0x78
 8007000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007004:	4864      	ldr	r0, [pc, #400]	; (8007198 <_printf_i+0x220>)
 8007006:	e055      	b.n	80070b4 <_printf_i+0x13c>
 8007008:	6813      	ldr	r3, [r2, #0]
 800700a:	1d19      	adds	r1, r3, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6011      	str	r1, [r2, #0]
 8007010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007018:	2301      	movs	r3, #1
 800701a:	e08c      	b.n	8007136 <_printf_i+0x1be>
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6011      	str	r1, [r2, #0]
 8007020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007024:	bf18      	it	ne
 8007026:	b21b      	sxthne	r3, r3
 8007028:	e7cf      	b.n	8006fca <_printf_i+0x52>
 800702a:	6813      	ldr	r3, [r2, #0]
 800702c:	6825      	ldr	r5, [r4, #0]
 800702e:	1d18      	adds	r0, r3, #4
 8007030:	6010      	str	r0, [r2, #0]
 8007032:	0628      	lsls	r0, r5, #24
 8007034:	d501      	bpl.n	800703a <_printf_i+0xc2>
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	e002      	b.n	8007040 <_printf_i+0xc8>
 800703a:	0668      	lsls	r0, r5, #25
 800703c:	d5fb      	bpl.n	8007036 <_printf_i+0xbe>
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	4854      	ldr	r0, [pc, #336]	; (8007194 <_printf_i+0x21c>)
 8007042:	296f      	cmp	r1, #111	; 0x6f
 8007044:	bf14      	ite	ne
 8007046:	220a      	movne	r2, #10
 8007048:	2208      	moveq	r2, #8
 800704a:	2100      	movs	r1, #0
 800704c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007050:	6865      	ldr	r5, [r4, #4]
 8007052:	60a5      	str	r5, [r4, #8]
 8007054:	2d00      	cmp	r5, #0
 8007056:	f2c0 8095 	blt.w	8007184 <_printf_i+0x20c>
 800705a:	6821      	ldr	r1, [r4, #0]
 800705c:	f021 0104 	bic.w	r1, r1, #4
 8007060:	6021      	str	r1, [r4, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d13d      	bne.n	80070e2 <_printf_i+0x16a>
 8007066:	2d00      	cmp	r5, #0
 8007068:	f040 808e 	bne.w	8007188 <_printf_i+0x210>
 800706c:	4665      	mov	r5, ip
 800706e:	2a08      	cmp	r2, #8
 8007070:	d10b      	bne.n	800708a <_printf_i+0x112>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	07db      	lsls	r3, r3, #31
 8007076:	d508      	bpl.n	800708a <_printf_i+0x112>
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	6862      	ldr	r2, [r4, #4]
 800707c:	429a      	cmp	r2, r3
 800707e:	bfde      	ittt	le
 8007080:	2330      	movle	r3, #48	; 0x30
 8007082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007086:	f105 35ff 	addle.w	r5, r5, #4294967295
 800708a:	ebac 0305 	sub.w	r3, ip, r5
 800708e:	6123      	str	r3, [r4, #16]
 8007090:	f8cd 8000 	str.w	r8, [sp]
 8007094:	463b      	mov	r3, r7
 8007096:	aa03      	add	r2, sp, #12
 8007098:	4621      	mov	r1, r4
 800709a:	4630      	mov	r0, r6
 800709c:	f7ff fef6 	bl	8006e8c <_printf_common>
 80070a0:	3001      	adds	r0, #1
 80070a2:	d14d      	bne.n	8007140 <_printf_i+0x1c8>
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	b005      	add	sp, #20
 80070aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070ae:	4839      	ldr	r0, [pc, #228]	; (8007194 <_printf_i+0x21c>)
 80070b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80070b4:	6813      	ldr	r3, [r2, #0]
 80070b6:	6821      	ldr	r1, [r4, #0]
 80070b8:	1d1d      	adds	r5, r3, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6015      	str	r5, [r2, #0]
 80070be:	060a      	lsls	r2, r1, #24
 80070c0:	d50b      	bpl.n	80070da <_printf_i+0x162>
 80070c2:	07ca      	lsls	r2, r1, #31
 80070c4:	bf44      	itt	mi
 80070c6:	f041 0120 	orrmi.w	r1, r1, #32
 80070ca:	6021      	strmi	r1, [r4, #0]
 80070cc:	b91b      	cbnz	r3, 80070d6 <_printf_i+0x15e>
 80070ce:	6822      	ldr	r2, [r4, #0]
 80070d0:	f022 0220 	bic.w	r2, r2, #32
 80070d4:	6022      	str	r2, [r4, #0]
 80070d6:	2210      	movs	r2, #16
 80070d8:	e7b7      	b.n	800704a <_printf_i+0xd2>
 80070da:	064d      	lsls	r5, r1, #25
 80070dc:	bf48      	it	mi
 80070de:	b29b      	uxthmi	r3, r3
 80070e0:	e7ef      	b.n	80070c2 <_printf_i+0x14a>
 80070e2:	4665      	mov	r5, ip
 80070e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80070e8:	fb02 3311 	mls	r3, r2, r1, r3
 80070ec:	5cc3      	ldrb	r3, [r0, r3]
 80070ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80070f2:	460b      	mov	r3, r1
 80070f4:	2900      	cmp	r1, #0
 80070f6:	d1f5      	bne.n	80070e4 <_printf_i+0x16c>
 80070f8:	e7b9      	b.n	800706e <_printf_i+0xf6>
 80070fa:	6813      	ldr	r3, [r2, #0]
 80070fc:	6825      	ldr	r5, [r4, #0]
 80070fe:	6961      	ldr	r1, [r4, #20]
 8007100:	1d18      	adds	r0, r3, #4
 8007102:	6010      	str	r0, [r2, #0]
 8007104:	0628      	lsls	r0, r5, #24
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	d501      	bpl.n	800710e <_printf_i+0x196>
 800710a:	6019      	str	r1, [r3, #0]
 800710c:	e002      	b.n	8007114 <_printf_i+0x19c>
 800710e:	066a      	lsls	r2, r5, #25
 8007110:	d5fb      	bpl.n	800710a <_printf_i+0x192>
 8007112:	8019      	strh	r1, [r3, #0]
 8007114:	2300      	movs	r3, #0
 8007116:	6123      	str	r3, [r4, #16]
 8007118:	4665      	mov	r5, ip
 800711a:	e7b9      	b.n	8007090 <_printf_i+0x118>
 800711c:	6813      	ldr	r3, [r2, #0]
 800711e:	1d19      	adds	r1, r3, #4
 8007120:	6011      	str	r1, [r2, #0]
 8007122:	681d      	ldr	r5, [r3, #0]
 8007124:	6862      	ldr	r2, [r4, #4]
 8007126:	2100      	movs	r1, #0
 8007128:	4628      	mov	r0, r5
 800712a:	f7f9 f879 	bl	8000220 <memchr>
 800712e:	b108      	cbz	r0, 8007134 <_printf_i+0x1bc>
 8007130:	1b40      	subs	r0, r0, r5
 8007132:	6060      	str	r0, [r4, #4]
 8007134:	6863      	ldr	r3, [r4, #4]
 8007136:	6123      	str	r3, [r4, #16]
 8007138:	2300      	movs	r3, #0
 800713a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800713e:	e7a7      	b.n	8007090 <_printf_i+0x118>
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	462a      	mov	r2, r5
 8007144:	4639      	mov	r1, r7
 8007146:	4630      	mov	r0, r6
 8007148:	47c0      	blx	r8
 800714a:	3001      	adds	r0, #1
 800714c:	d0aa      	beq.n	80070a4 <_printf_i+0x12c>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	079b      	lsls	r3, r3, #30
 8007152:	d413      	bmi.n	800717c <_printf_i+0x204>
 8007154:	68e0      	ldr	r0, [r4, #12]
 8007156:	9b03      	ldr	r3, [sp, #12]
 8007158:	4298      	cmp	r0, r3
 800715a:	bfb8      	it	lt
 800715c:	4618      	movlt	r0, r3
 800715e:	e7a3      	b.n	80070a8 <_printf_i+0x130>
 8007160:	2301      	movs	r3, #1
 8007162:	464a      	mov	r2, r9
 8007164:	4639      	mov	r1, r7
 8007166:	4630      	mov	r0, r6
 8007168:	47c0      	blx	r8
 800716a:	3001      	adds	r0, #1
 800716c:	d09a      	beq.n	80070a4 <_printf_i+0x12c>
 800716e:	3501      	adds	r5, #1
 8007170:	68e3      	ldr	r3, [r4, #12]
 8007172:	9a03      	ldr	r2, [sp, #12]
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	42ab      	cmp	r3, r5
 8007178:	dcf2      	bgt.n	8007160 <_printf_i+0x1e8>
 800717a:	e7eb      	b.n	8007154 <_printf_i+0x1dc>
 800717c:	2500      	movs	r5, #0
 800717e:	f104 0919 	add.w	r9, r4, #25
 8007182:	e7f5      	b.n	8007170 <_printf_i+0x1f8>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1ac      	bne.n	80070e2 <_printf_i+0x16a>
 8007188:	7803      	ldrb	r3, [r0, #0]
 800718a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800718e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007192:	e76c      	b.n	800706e <_printf_i+0xf6>
 8007194:	08007429 	.word	0x08007429
 8007198:	0800743a 	.word	0x0800743a

0800719c <memcpy>:
 800719c:	b510      	push	{r4, lr}
 800719e:	1e43      	subs	r3, r0, #1
 80071a0:	440a      	add	r2, r1
 80071a2:	4291      	cmp	r1, r2
 80071a4:	d100      	bne.n	80071a8 <memcpy+0xc>
 80071a6:	bd10      	pop	{r4, pc}
 80071a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071b0:	e7f7      	b.n	80071a2 <memcpy+0x6>

080071b2 <memmove>:
 80071b2:	4288      	cmp	r0, r1
 80071b4:	b510      	push	{r4, lr}
 80071b6:	eb01 0302 	add.w	r3, r1, r2
 80071ba:	d807      	bhi.n	80071cc <memmove+0x1a>
 80071bc:	1e42      	subs	r2, r0, #1
 80071be:	4299      	cmp	r1, r3
 80071c0:	d00a      	beq.n	80071d8 <memmove+0x26>
 80071c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80071ca:	e7f8      	b.n	80071be <memmove+0xc>
 80071cc:	4283      	cmp	r3, r0
 80071ce:	d9f5      	bls.n	80071bc <memmove+0xa>
 80071d0:	1881      	adds	r1, r0, r2
 80071d2:	1ad2      	subs	r2, r2, r3
 80071d4:	42d3      	cmn	r3, r2
 80071d6:	d100      	bne.n	80071da <memmove+0x28>
 80071d8:	bd10      	pop	{r4, pc}
 80071da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80071e2:	e7f7      	b.n	80071d4 <memmove+0x22>

080071e4 <_free_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4605      	mov	r5, r0
 80071e8:	2900      	cmp	r1, #0
 80071ea:	d045      	beq.n	8007278 <_free_r+0x94>
 80071ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f0:	1f0c      	subs	r4, r1, #4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	bfb8      	it	lt
 80071f6:	18e4      	addlt	r4, r4, r3
 80071f8:	f000 f8d2 	bl	80073a0 <__malloc_lock>
 80071fc:	4a1f      	ldr	r2, [pc, #124]	; (800727c <_free_r+0x98>)
 80071fe:	6813      	ldr	r3, [r2, #0]
 8007200:	4610      	mov	r0, r2
 8007202:	b933      	cbnz	r3, 8007212 <_free_r+0x2e>
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	6014      	str	r4, [r2, #0]
 8007208:	4628      	mov	r0, r5
 800720a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800720e:	f000 b8c8 	b.w	80073a2 <__malloc_unlock>
 8007212:	42a3      	cmp	r3, r4
 8007214:	d90c      	bls.n	8007230 <_free_r+0x4c>
 8007216:	6821      	ldr	r1, [r4, #0]
 8007218:	1862      	adds	r2, r4, r1
 800721a:	4293      	cmp	r3, r2
 800721c:	bf04      	itt	eq
 800721e:	681a      	ldreq	r2, [r3, #0]
 8007220:	685b      	ldreq	r3, [r3, #4]
 8007222:	6063      	str	r3, [r4, #4]
 8007224:	bf04      	itt	eq
 8007226:	1852      	addeq	r2, r2, r1
 8007228:	6022      	streq	r2, [r4, #0]
 800722a:	6004      	str	r4, [r0, #0]
 800722c:	e7ec      	b.n	8007208 <_free_r+0x24>
 800722e:	4613      	mov	r3, r2
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	b10a      	cbz	r2, 8007238 <_free_r+0x54>
 8007234:	42a2      	cmp	r2, r4
 8007236:	d9fa      	bls.n	800722e <_free_r+0x4a>
 8007238:	6819      	ldr	r1, [r3, #0]
 800723a:	1858      	adds	r0, r3, r1
 800723c:	42a0      	cmp	r0, r4
 800723e:	d10b      	bne.n	8007258 <_free_r+0x74>
 8007240:	6820      	ldr	r0, [r4, #0]
 8007242:	4401      	add	r1, r0
 8007244:	1858      	adds	r0, r3, r1
 8007246:	4282      	cmp	r2, r0
 8007248:	6019      	str	r1, [r3, #0]
 800724a:	d1dd      	bne.n	8007208 <_free_r+0x24>
 800724c:	6810      	ldr	r0, [r2, #0]
 800724e:	6852      	ldr	r2, [r2, #4]
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	4401      	add	r1, r0
 8007254:	6019      	str	r1, [r3, #0]
 8007256:	e7d7      	b.n	8007208 <_free_r+0x24>
 8007258:	d902      	bls.n	8007260 <_free_r+0x7c>
 800725a:	230c      	movs	r3, #12
 800725c:	602b      	str	r3, [r5, #0]
 800725e:	e7d3      	b.n	8007208 <_free_r+0x24>
 8007260:	6820      	ldr	r0, [r4, #0]
 8007262:	1821      	adds	r1, r4, r0
 8007264:	428a      	cmp	r2, r1
 8007266:	bf04      	itt	eq
 8007268:	6811      	ldreq	r1, [r2, #0]
 800726a:	6852      	ldreq	r2, [r2, #4]
 800726c:	6062      	str	r2, [r4, #4]
 800726e:	bf04      	itt	eq
 8007270:	1809      	addeq	r1, r1, r0
 8007272:	6021      	streq	r1, [r4, #0]
 8007274:	605c      	str	r4, [r3, #4]
 8007276:	e7c7      	b.n	8007208 <_free_r+0x24>
 8007278:	bd38      	pop	{r3, r4, r5, pc}
 800727a:	bf00      	nop
 800727c:	200000b4 	.word	0x200000b4

08007280 <_malloc_r>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	1ccd      	adds	r5, r1, #3
 8007284:	f025 0503 	bic.w	r5, r5, #3
 8007288:	3508      	adds	r5, #8
 800728a:	2d0c      	cmp	r5, #12
 800728c:	bf38      	it	cc
 800728e:	250c      	movcc	r5, #12
 8007290:	2d00      	cmp	r5, #0
 8007292:	4606      	mov	r6, r0
 8007294:	db01      	blt.n	800729a <_malloc_r+0x1a>
 8007296:	42a9      	cmp	r1, r5
 8007298:	d903      	bls.n	80072a2 <_malloc_r+0x22>
 800729a:	230c      	movs	r3, #12
 800729c:	6033      	str	r3, [r6, #0]
 800729e:	2000      	movs	r0, #0
 80072a0:	bd70      	pop	{r4, r5, r6, pc}
 80072a2:	f000 f87d 	bl	80073a0 <__malloc_lock>
 80072a6:	4a21      	ldr	r2, [pc, #132]	; (800732c <_malloc_r+0xac>)
 80072a8:	6814      	ldr	r4, [r2, #0]
 80072aa:	4621      	mov	r1, r4
 80072ac:	b991      	cbnz	r1, 80072d4 <_malloc_r+0x54>
 80072ae:	4c20      	ldr	r4, [pc, #128]	; (8007330 <_malloc_r+0xb0>)
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	b91b      	cbnz	r3, 80072bc <_malloc_r+0x3c>
 80072b4:	4630      	mov	r0, r6
 80072b6:	f000 f863 	bl	8007380 <_sbrk_r>
 80072ba:	6020      	str	r0, [r4, #0]
 80072bc:	4629      	mov	r1, r5
 80072be:	4630      	mov	r0, r6
 80072c0:	f000 f85e 	bl	8007380 <_sbrk_r>
 80072c4:	1c43      	adds	r3, r0, #1
 80072c6:	d124      	bne.n	8007312 <_malloc_r+0x92>
 80072c8:	230c      	movs	r3, #12
 80072ca:	6033      	str	r3, [r6, #0]
 80072cc:	4630      	mov	r0, r6
 80072ce:	f000 f868 	bl	80073a2 <__malloc_unlock>
 80072d2:	e7e4      	b.n	800729e <_malloc_r+0x1e>
 80072d4:	680b      	ldr	r3, [r1, #0]
 80072d6:	1b5b      	subs	r3, r3, r5
 80072d8:	d418      	bmi.n	800730c <_malloc_r+0x8c>
 80072da:	2b0b      	cmp	r3, #11
 80072dc:	d90f      	bls.n	80072fe <_malloc_r+0x7e>
 80072de:	600b      	str	r3, [r1, #0]
 80072e0:	50cd      	str	r5, [r1, r3]
 80072e2:	18cc      	adds	r4, r1, r3
 80072e4:	4630      	mov	r0, r6
 80072e6:	f000 f85c 	bl	80073a2 <__malloc_unlock>
 80072ea:	f104 000b 	add.w	r0, r4, #11
 80072ee:	1d23      	adds	r3, r4, #4
 80072f0:	f020 0007 	bic.w	r0, r0, #7
 80072f4:	1ac3      	subs	r3, r0, r3
 80072f6:	d0d3      	beq.n	80072a0 <_malloc_r+0x20>
 80072f8:	425a      	negs	r2, r3
 80072fa:	50e2      	str	r2, [r4, r3]
 80072fc:	e7d0      	b.n	80072a0 <_malloc_r+0x20>
 80072fe:	428c      	cmp	r4, r1
 8007300:	684b      	ldr	r3, [r1, #4]
 8007302:	bf16      	itet	ne
 8007304:	6063      	strne	r3, [r4, #4]
 8007306:	6013      	streq	r3, [r2, #0]
 8007308:	460c      	movne	r4, r1
 800730a:	e7eb      	b.n	80072e4 <_malloc_r+0x64>
 800730c:	460c      	mov	r4, r1
 800730e:	6849      	ldr	r1, [r1, #4]
 8007310:	e7cc      	b.n	80072ac <_malloc_r+0x2c>
 8007312:	1cc4      	adds	r4, r0, #3
 8007314:	f024 0403 	bic.w	r4, r4, #3
 8007318:	42a0      	cmp	r0, r4
 800731a:	d005      	beq.n	8007328 <_malloc_r+0xa8>
 800731c:	1a21      	subs	r1, r4, r0
 800731e:	4630      	mov	r0, r6
 8007320:	f000 f82e 	bl	8007380 <_sbrk_r>
 8007324:	3001      	adds	r0, #1
 8007326:	d0cf      	beq.n	80072c8 <_malloc_r+0x48>
 8007328:	6025      	str	r5, [r4, #0]
 800732a:	e7db      	b.n	80072e4 <_malloc_r+0x64>
 800732c:	200000b4 	.word	0x200000b4
 8007330:	200000b8 	.word	0x200000b8

08007334 <_realloc_r>:
 8007334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007336:	4607      	mov	r7, r0
 8007338:	4614      	mov	r4, r2
 800733a:	460e      	mov	r6, r1
 800733c:	b921      	cbnz	r1, 8007348 <_realloc_r+0x14>
 800733e:	4611      	mov	r1, r2
 8007340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007344:	f7ff bf9c 	b.w	8007280 <_malloc_r>
 8007348:	b922      	cbnz	r2, 8007354 <_realloc_r+0x20>
 800734a:	f7ff ff4b 	bl	80071e4 <_free_r>
 800734e:	4625      	mov	r5, r4
 8007350:	4628      	mov	r0, r5
 8007352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007354:	f000 f826 	bl	80073a4 <_malloc_usable_size_r>
 8007358:	42a0      	cmp	r0, r4
 800735a:	d20f      	bcs.n	800737c <_realloc_r+0x48>
 800735c:	4621      	mov	r1, r4
 800735e:	4638      	mov	r0, r7
 8007360:	f7ff ff8e 	bl	8007280 <_malloc_r>
 8007364:	4605      	mov	r5, r0
 8007366:	2800      	cmp	r0, #0
 8007368:	d0f2      	beq.n	8007350 <_realloc_r+0x1c>
 800736a:	4631      	mov	r1, r6
 800736c:	4622      	mov	r2, r4
 800736e:	f7ff ff15 	bl	800719c <memcpy>
 8007372:	4631      	mov	r1, r6
 8007374:	4638      	mov	r0, r7
 8007376:	f7ff ff35 	bl	80071e4 <_free_r>
 800737a:	e7e9      	b.n	8007350 <_realloc_r+0x1c>
 800737c:	4635      	mov	r5, r6
 800737e:	e7e7      	b.n	8007350 <_realloc_r+0x1c>

08007380 <_sbrk_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4c06      	ldr	r4, [pc, #24]	; (800739c <_sbrk_r+0x1c>)
 8007384:	2300      	movs	r3, #0
 8007386:	4605      	mov	r5, r0
 8007388:	4608      	mov	r0, r1
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	f7f9 ff88 	bl	80012a0 <_sbrk>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_sbrk_r+0x1a>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	b103      	cbz	r3, 800739a <_sbrk_r+0x1a>
 8007398:	602b      	str	r3, [r5, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	20000758 	.word	0x20000758

080073a0 <__malloc_lock>:
 80073a0:	4770      	bx	lr

080073a2 <__malloc_unlock>:
 80073a2:	4770      	bx	lr

080073a4 <_malloc_usable_size_r>:
 80073a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073a8:	1f18      	subs	r0, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bfbc      	itt	lt
 80073ae:	580b      	ldrlt	r3, [r1, r0]
 80073b0:	18c0      	addlt	r0, r0, r3
 80073b2:	4770      	bx	lr

080073b4 <_init>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr

080073c0 <_fini>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	bf00      	nop
 80073c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c6:	bc08      	pop	{r3}
 80073c8:	469e      	mov	lr, r3
 80073ca:	4770      	bx	lr
